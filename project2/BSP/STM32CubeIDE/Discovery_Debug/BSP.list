
BSP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b4c0  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00006424  0800b670  0800b670  0000c670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011a94  08011a94  0001322c  2**0
                  CONTENTS
  4 .ARM          00000008  08011a94  08011a94  00012a94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011a9c  08011a9c  0001322c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011a9c  08011a9c  00012a9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011aa0  08011aa0  00012aa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000022c  20000000  08011aa4  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001322c  2**0
                  CONTENTS
 10 .bss          000040e4  2000022c  2000022c  0001322c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004310  20004310  0001322c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001322c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014b23  00000000  00000000  0001325c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003f0a  00000000  00000000  00027d7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001628  00000000  00000000  0002bc90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010e4  00000000  00000000  0002d2b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002809a  00000000  00000000  0002e39c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001cecd  00000000  00000000  00056436  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e21b6  00000000  00000000  00073303  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001554b9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006318  00000000  00000000  001554fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000080  00000000  00000000  0015b814  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000022c 	.word	0x2000022c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800b658 	.word	0x0800b658

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000230 	.word	0x20000230
 80001ec:	0800b658 	.word	0x0800b658

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8000584:	f001 f934 	bl	80017f0 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8000588:	20ca      	movs	r0, #202	@ 0xca
 800058a:	f000 f95d 	bl	8000848 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 800058e:	20c3      	movs	r0, #195	@ 0xc3
 8000590:	f000 f967 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8000594:	2008      	movs	r0, #8
 8000596:	f000 f964 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 800059a:	2050      	movs	r0, #80	@ 0x50
 800059c:	f000 f961 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 80005a0:	20cf      	movs	r0, #207	@ 0xcf
 80005a2:	f000 f951 	bl	8000848 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80005a6:	2000      	movs	r0, #0
 80005a8:	f000 f95b 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 80005ac:	20c1      	movs	r0, #193	@ 0xc1
 80005ae:	f000 f958 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 80005b2:	2030      	movs	r0, #48	@ 0x30
 80005b4:	f000 f955 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 80005b8:	20ed      	movs	r0, #237	@ 0xed
 80005ba:	f000 f945 	bl	8000848 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 80005be:	2064      	movs	r0, #100	@ 0x64
 80005c0:	f000 f94f 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 80005c4:	2003      	movs	r0, #3
 80005c6:	f000 f94c 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 80005ca:	2012      	movs	r0, #18
 80005cc:	f000 f949 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 80005d0:	2081      	movs	r0, #129	@ 0x81
 80005d2:	f000 f946 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 80005d6:	20e8      	movs	r0, #232	@ 0xe8
 80005d8:	f000 f936 	bl	8000848 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 80005dc:	2085      	movs	r0, #133	@ 0x85
 80005de:	f000 f940 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80005e2:	2000      	movs	r0, #0
 80005e4:	f000 f93d 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80005e8:	2078      	movs	r0, #120	@ 0x78
 80005ea:	f000 f93a 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 80005ee:	20cb      	movs	r0, #203	@ 0xcb
 80005f0:	f000 f92a 	bl	8000848 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 80005f4:	2039      	movs	r0, #57	@ 0x39
 80005f6:	f000 f934 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 80005fa:	202c      	movs	r0, #44	@ 0x2c
 80005fc:	f000 f931 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000600:	2000      	movs	r0, #0
 8000602:	f000 f92e 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8000606:	2034      	movs	r0, #52	@ 0x34
 8000608:	f000 f92b 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 800060c:	2002      	movs	r0, #2
 800060e:	f000 f928 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8000612:	20f7      	movs	r0, #247	@ 0xf7
 8000614:	f000 f918 	bl	8000848 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8000618:	2020      	movs	r0, #32
 800061a:	f000 f922 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 800061e:	20ea      	movs	r0, #234	@ 0xea
 8000620:	f000 f912 	bl	8000848 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000624:	2000      	movs	r0, #0
 8000626:	f000 f91c 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800062a:	2000      	movs	r0, #0
 800062c:	f000 f919 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8000630:	20b1      	movs	r0, #177	@ 0xb1
 8000632:	f000 f909 	bl	8000848 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000636:	2000      	movs	r0, #0
 8000638:	f000 f913 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 800063c:	201b      	movs	r0, #27
 800063e:	f000 f910 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8000642:	20b6      	movs	r0, #182	@ 0xb6
 8000644:	f000 f900 	bl	8000848 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8000648:	200a      	movs	r0, #10
 800064a:	f000 f90a 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 800064e:	20a2      	movs	r0, #162	@ 0xa2
 8000650:	f000 f907 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8000654:	20c0      	movs	r0, #192	@ 0xc0
 8000656:	f000 f8f7 	bl	8000848 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 800065a:	2010      	movs	r0, #16
 800065c:	f000 f901 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8000660:	20c1      	movs	r0, #193	@ 0xc1
 8000662:	f000 f8f1 	bl	8000848 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8000666:	2010      	movs	r0, #16
 8000668:	f000 f8fb 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 800066c:	20c5      	movs	r0, #197	@ 0xc5
 800066e:	f000 f8eb 	bl	8000848 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8000672:	2045      	movs	r0, #69	@ 0x45
 8000674:	f000 f8f5 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8000678:	2015      	movs	r0, #21
 800067a:	f000 f8f2 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 800067e:	20c7      	movs	r0, #199	@ 0xc7
 8000680:	f000 f8e2 	bl	8000848 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8000684:	2090      	movs	r0, #144	@ 0x90
 8000686:	f000 f8ec 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 800068a:	2036      	movs	r0, #54	@ 0x36
 800068c:	f000 f8dc 	bl	8000848 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8000690:	20c8      	movs	r0, #200	@ 0xc8
 8000692:	f000 f8e6 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8000696:	20f2      	movs	r0, #242	@ 0xf2
 8000698:	f000 f8d6 	bl	8000848 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800069c:	2000      	movs	r0, #0
 800069e:	f000 f8e0 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 80006a2:	20b0      	movs	r0, #176	@ 0xb0
 80006a4:	f000 f8d0 	bl	8000848 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 80006a8:	20c2      	movs	r0, #194	@ 0xc2
 80006aa:	f000 f8da 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80006ae:	20b6      	movs	r0, #182	@ 0xb6
 80006b0:	f000 f8ca 	bl	8000848 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80006b4:	200a      	movs	r0, #10
 80006b6:	f000 f8d4 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 80006ba:	20a7      	movs	r0, #167	@ 0xa7
 80006bc:	f000 f8d1 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 80006c0:	2027      	movs	r0, #39	@ 0x27
 80006c2:	f000 f8ce 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80006c6:	2004      	movs	r0, #4
 80006c8:	f000 f8cb 	bl	8000862 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 80006cc:	202a      	movs	r0, #42	@ 0x2a
 80006ce:	f000 f8bb 	bl	8000848 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80006d2:	2000      	movs	r0, #0
 80006d4:	f000 f8c5 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80006d8:	2000      	movs	r0, #0
 80006da:	f000 f8c2 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80006de:	2000      	movs	r0, #0
 80006e0:	f000 f8bf 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 80006e4:	20ef      	movs	r0, #239	@ 0xef
 80006e6:	f000 f8bc 	bl	8000862 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 80006ea:	202b      	movs	r0, #43	@ 0x2b
 80006ec:	f000 f8ac 	bl	8000848 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80006f0:	2000      	movs	r0, #0
 80006f2:	f000 f8b6 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80006f6:	2000      	movs	r0, #0
 80006f8:	f000 f8b3 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 80006fc:	2001      	movs	r0, #1
 80006fe:	f000 f8b0 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8000702:	203f      	movs	r0, #63	@ 0x3f
 8000704:	f000 f8ad 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8000708:	20f6      	movs	r0, #246	@ 0xf6
 800070a:	f000 f89d 	bl	8000848 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 800070e:	2001      	movs	r0, #1
 8000710:	f000 f8a7 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000714:	2000      	movs	r0, #0
 8000716:	f000 f8a4 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 800071a:	2006      	movs	r0, #6
 800071c:	f000 f8a1 	bl	8000862 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8000720:	202c      	movs	r0, #44	@ 0x2c
 8000722:	f000 f891 	bl	8000848 <ili9341_WriteReg>
  LCD_Delay(200);
 8000726:	20c8      	movs	r0, #200	@ 0xc8
 8000728:	f001 f950 	bl	80019cc <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 800072c:	2026      	movs	r0, #38	@ 0x26
 800072e:	f000 f88b 	bl	8000848 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8000732:	2001      	movs	r0, #1
 8000734:	f000 f895 	bl	8000862 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8000738:	20e0      	movs	r0, #224	@ 0xe0
 800073a:	f000 f885 	bl	8000848 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 800073e:	200f      	movs	r0, #15
 8000740:	f000 f88f 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8000744:	2029      	movs	r0, #41	@ 0x29
 8000746:	f000 f88c 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 800074a:	2024      	movs	r0, #36	@ 0x24
 800074c:	f000 f889 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8000750:	200c      	movs	r0, #12
 8000752:	f000 f886 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8000756:	200e      	movs	r0, #14
 8000758:	f000 f883 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 800075c:	2009      	movs	r0, #9
 800075e:	f000 f880 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8000762:	204e      	movs	r0, #78	@ 0x4e
 8000764:	f000 f87d 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8000768:	2078      	movs	r0, #120	@ 0x78
 800076a:	f000 f87a 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 800076e:	203c      	movs	r0, #60	@ 0x3c
 8000770:	f000 f877 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8000774:	2009      	movs	r0, #9
 8000776:	f000 f874 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 800077a:	2013      	movs	r0, #19
 800077c:	f000 f871 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8000780:	2005      	movs	r0, #5
 8000782:	f000 f86e 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8000786:	2017      	movs	r0, #23
 8000788:	f000 f86b 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 800078c:	2011      	movs	r0, #17
 800078e:	f000 f868 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000792:	2000      	movs	r0, #0
 8000794:	f000 f865 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8000798:	20e1      	movs	r0, #225	@ 0xe1
 800079a:	f000 f855 	bl	8000848 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800079e:	2000      	movs	r0, #0
 80007a0:	f000 f85f 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 80007a4:	2016      	movs	r0, #22
 80007a6:	f000 f85c 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80007aa:	201b      	movs	r0, #27
 80007ac:	f000 f859 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80007b0:	2004      	movs	r0, #4
 80007b2:	f000 f856 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80007b6:	2011      	movs	r0, #17
 80007b8:	f000 f853 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 80007bc:	2007      	movs	r0, #7
 80007be:	f000 f850 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 80007c2:	2031      	movs	r0, #49	@ 0x31
 80007c4:	f000 f84d 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 80007c8:	2033      	movs	r0, #51	@ 0x33
 80007ca:	f000 f84a 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 80007ce:	2042      	movs	r0, #66	@ 0x42
 80007d0:	f000 f847 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80007d4:	2005      	movs	r0, #5
 80007d6:	f000 f844 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 80007da:	200c      	movs	r0, #12
 80007dc:	f000 f841 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 80007e0:	200a      	movs	r0, #10
 80007e2:	f000 f83e 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 80007e6:	2028      	movs	r0, #40	@ 0x28
 80007e8:	f000 f83b 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 80007ec:	202f      	movs	r0, #47	@ 0x2f
 80007ee:	f000 f838 	bl	8000862 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 80007f2:	200f      	movs	r0, #15
 80007f4:	f000 f835 	bl	8000862 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 80007f8:	2011      	movs	r0, #17
 80007fa:	f000 f825 	bl	8000848 <ili9341_WriteReg>
  LCD_Delay(200);
 80007fe:	20c8      	movs	r0, #200	@ 0xc8
 8000800:	f001 f8e4 	bl	80019cc <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8000804:	2029      	movs	r0, #41	@ 0x29
 8000806:	f000 f81f 	bl	8000848 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 800080a:	202c      	movs	r0, #44	@ 0x2c
 800080c:	f000 f81c 	bl	8000848 <ili9341_WriteReg>
}
 8000810:	bf00      	nop
 8000812:	bd80      	pop	{r7, pc}

08000814 <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8000818:	f000 ffea 	bl	80017f0 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 800081c:	2103      	movs	r1, #3
 800081e:	20d3      	movs	r0, #211	@ 0xd3
 8000820:	f000 f82c 	bl	800087c <ili9341_ReadData>
 8000824:	4603      	mov	r3, r0
 8000826:	b29b      	uxth	r3, r3
}
 8000828:	4618      	mov	r0, r3
 800082a:	bd80      	pop	{r7, pc}

0800082c <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8000830:	2029      	movs	r0, #41	@ 0x29
 8000832:	f000 f809 	bl	8000848 <ili9341_WriteReg>
}
 8000836:	bf00      	nop
 8000838:	bd80      	pop	{r7, pc}

0800083a <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 800083a:	b580      	push	{r7, lr}
 800083c:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 800083e:	2028      	movs	r0, #40	@ 0x28
 8000840:	f000 f802 	bl	8000848 <ili9341_WriteReg>
}
 8000844:	bf00      	nop
 8000846:	bd80      	pop	{r7, pc}

08000848 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	4603      	mov	r3, r0
 8000850:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8000852:	79fb      	ldrb	r3, [r7, #7]
 8000854:	4618      	mov	r0, r3
 8000856:	f001 f865 	bl	8001924 <LCD_IO_WriteReg>
}
 800085a:	bf00      	nop
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}

08000862 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8000862:	b580      	push	{r7, lr}
 8000864:	b082      	sub	sp, #8
 8000866:	af00      	add	r7, sp, #0
 8000868:	4603      	mov	r3, r0
 800086a:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 800086c:	88fb      	ldrh	r3, [r7, #6]
 800086e:	4618      	mov	r0, r3
 8000870:	f001 f836 	bl	80018e0 <LCD_IO_WriteData>
}
 8000874:	bf00      	nop
 8000876:	3708      	adds	r7, #8
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}

0800087c <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	4603      	mov	r3, r0
 8000884:	460a      	mov	r2, r1
 8000886:	80fb      	strh	r3, [r7, #6]
 8000888:	4613      	mov	r3, r2
 800088a:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 800088c:	797a      	ldrb	r2, [r7, #5]
 800088e:	88fb      	ldrh	r3, [r7, #6]
 8000890:	4611      	mov	r1, r2
 8000892:	4618      	mov	r0, r3
 8000894:	f001 f868 	bl	8001968 <LCD_IO_ReadData>
 8000898:	4603      	mov	r3, r0
}
 800089a:	4618      	mov	r0, r3
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}

080008a2 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 80008a2:	b480      	push	{r7}
 80008a4:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 80008a6:	23f0      	movs	r3, #240	@ 0xf0
}
 80008a8:	4618      	mov	r0, r3
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr

080008b2 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 80008b2:	b480      	push	{r7}
 80008b4:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 80008b6:	f44f 73a0 	mov.w	r3, #320	@ 0x140
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr

080008c4 <L3GD20_Init>:
  * @param  L3GD20_InitStruct: pointer to a L3GD20_InitTypeDef structure 
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(uint16_t InitStruct)
{  
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b084      	sub	sp, #16
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	4603      	mov	r3, r0
 80008cc:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80008ce:	2300      	movs	r3, #0
 80008d0:	73fb      	strb	r3, [r7, #15]
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 80008d2:	f001 f8d9 	bl	8001a88 <GYRO_IO_Init>
  
  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 80008d6:	88fb      	ldrh	r3, [r7, #6]
 80008d8:	b2db      	uxtb	r3, r3
 80008da:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 80008dc:	f107 030f 	add.w	r3, r7, #15
 80008e0:	2201      	movs	r2, #1
 80008e2:	2120      	movs	r1, #32
 80008e4:	4618      	mov	r0, r3
 80008e6:	f001 f91b 	bl	8001b20 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG4 register */  
  ctrl = (uint8_t) (InitStruct >> 8);
 80008ea:	88fb      	ldrh	r3, [r7, #6]
 80008ec:	0a1b      	lsrs	r3, r3, #8
 80008ee:	b29b      	uxth	r3, r3
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 80008f4:	f107 030f 	add.w	r3, r7, #15
 80008f8:	2201      	movs	r2, #1
 80008fa:	2123      	movs	r1, #35	@ 0x23
 80008fc:	4618      	mov	r0, r3
 80008fe:	f001 f90f 	bl	8001b20 <GYRO_IO_Write>
}
 8000902:	bf00      	nop
 8000904:	3710      	adds	r7, #16
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}

0800090a <L3GD20_DeInit>:
  * @brief L3GD20 De-initialization
  * @param  None
  * @retval None
  */
void L3GD20_DeInit(void)
{
 800090a:	b480      	push	{r7}
 800090c:	af00      	add	r7, sp, #0
}
 800090e:	bf00      	nop
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr

08000918 <L3GD20_ReadID>:
  * @brief  Read ID address of L3GD20
  * @param  None
  * @retval ID name
  */
uint8_t L3GD20_ReadID(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
  uint8_t tmp;
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 800091e:	f001 f8b3 	bl	8001a88 <GYRO_IO_Init>
  
  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, L3GD20_WHO_AM_I_ADDR, 1);
 8000922:	1dfb      	adds	r3, r7, #7
 8000924:	2201      	movs	r2, #1
 8000926:	210f      	movs	r1, #15
 8000928:	4618      	mov	r0, r3
 800092a:	f001 f92b 	bl	8001b84 <GYRO_IO_Read>
  
  /* Return the ID */
  return (uint8_t)tmp;
 800092e:	79fb      	ldrb	r3, [r7, #7]
}
 8000930:	4618      	mov	r0, r3
 8000932:	3708      	adds	r7, #8
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}

08000938 <L3GD20_RebootCmd>:
  * @brief  Reboot memory content of L3GD20
  * @param  None
  * @retval None
  */
void L3GD20_RebootCmd(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800093e:	1dfb      	adds	r3, r7, #7
 8000940:	2201      	movs	r2, #1
 8000942:	2124      	movs	r1, #36	@ 0x24
 8000944:	4618      	mov	r0, r3
 8000946:	f001 f91d 	bl	8001b84 <GYRO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 800094a:	79fb      	ldrb	r3, [r7, #7]
 800094c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000950:	b2db      	uxtb	r3, r3
 8000952:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8000954:	1dfb      	adds	r3, r7, #7
 8000956:	2201      	movs	r2, #1
 8000958:	2124      	movs	r1, #36	@ 0x24
 800095a:	4618      	mov	r0, r3
 800095c:	f001 f8e0 	bl	8001b20 <GYRO_IO_Write>
}
 8000960:	bf00      	nop
 8000962:	3708      	adds	r7, #8
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}

08000968 <L3GD20_LowPower>:
  * @brief Set L3GD20 in low-power mode
  * @param 
  * @retval  None
  */
void L3GD20_LowPower(uint16_t InitStruct)
{  
 8000968:	b580      	push	{r7, lr}
 800096a:	b084      	sub	sp, #16
 800096c:	af00      	add	r7, sp, #0
 800096e:	4603      	mov	r3, r0
 8000970:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000972:	2300      	movs	r3, #0
 8000974:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8000976:	88fb      	ldrh	r3, [r7, #6]
 8000978:	b2db      	uxtb	r3, r3
 800097a:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 800097c:	f107 030f 	add.w	r3, r7, #15
 8000980:	2201      	movs	r2, #1
 8000982:	2120      	movs	r1, #32
 8000984:	4618      	mov	r0, r3
 8000986:	f001 f8cb 	bl	8001b20 <GYRO_IO_Write>
}
 800098a:	bf00      	nop
 800098c:	3710      	adds	r7, #16
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}

08000992 <L3GD20_INT1InterruptConfig>:
  * @brief  Set L3GD20 Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
 8000992:	b580      	push	{r7, lr}
 8000994:	b084      	sub	sp, #16
 8000996:	af00      	add	r7, sp, #0
 8000998:	4603      	mov	r3, r0
 800099a:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 800099c:	2300      	movs	r3, #0
 800099e:	73fb      	strb	r3, [r7, #15]
 80009a0:	2300      	movs	r3, #0
 80009a2:	73bb      	strb	r3, [r7, #14]
  
  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 80009a4:	f107 030f 	add.w	r3, r7, #15
 80009a8:	2201      	movs	r2, #1
 80009aa:	2130      	movs	r1, #48	@ 0x30
 80009ac:	4618      	mov	r0, r3
 80009ae:	f001 f8e9 	bl	8001b84 <GYRO_IO_Read>
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 80009b2:	f107 030e 	add.w	r3, r7, #14
 80009b6:	2201      	movs	r2, #1
 80009b8:	2122      	movs	r1, #34	@ 0x22
 80009ba:	4618      	mov	r0, r3
 80009bc:	f001 f8e2 	bl	8001b84 <GYRO_IO_Read>
  
  ctrl_cfr &= 0x80;
 80009c0:	7bfb      	ldrb	r3, [r7, #15]
 80009c2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80009c6:	b2db      	uxtb	r3, r3
 80009c8:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 80009ca:	88fb      	ldrh	r3, [r7, #6]
 80009cc:	b2db      	uxtb	r3, r3
 80009ce:	121b      	asrs	r3, r3, #8
 80009d0:	b25a      	sxtb	r2, r3
 80009d2:	7bfb      	ldrb	r3, [r7, #15]
 80009d4:	b25b      	sxtb	r3, r3
 80009d6:	4313      	orrs	r3, r2
 80009d8:	b25b      	sxtb	r3, r3
 80009da:	b2db      	uxtb	r3, r3
 80009dc:	73fb      	strb	r3, [r7, #15]
  
  ctrl3 &= 0xDF;
 80009de:	7bbb      	ldrb	r3, [r7, #14]
 80009e0:	f023 0320 	bic.w	r3, r3, #32
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);   
 80009e8:	88fb      	ldrh	r3, [r7, #6]
 80009ea:	b2da      	uxtb	r2, r3
 80009ec:	7bbb      	ldrb	r3, [r7, #14]
 80009ee:	4313      	orrs	r3, r2
 80009f0:	b2db      	uxtb	r3, r3
 80009f2:	73bb      	strb	r3, [r7, #14]
  
  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 80009f4:	f107 030f 	add.w	r3, r7, #15
 80009f8:	2201      	movs	r2, #1
 80009fa:	2130      	movs	r1, #48	@ 0x30
 80009fc:	4618      	mov	r0, r3
 80009fe:	f001 f88f 	bl	8001b20 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8000a02:	f107 030e 	add.w	r3, r7, #14
 8000a06:	2201      	movs	r2, #1
 8000a08:	2122      	movs	r1, #34	@ 0x22
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f001 f888 	bl	8001b20 <GYRO_IO_Write>
}
 8000a10:	bf00      	nop
 8000a12:	3710      	adds	r7, #16
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}

08000a18 <L3GD20_EnableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_EnableIT(uint8_t IntSel)
{  
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	4603      	mov	r3, r0
 8000a20:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8000a22:	f107 030f 	add.w	r3, r7, #15
 8000a26:	2201      	movs	r2, #1
 8000a28:	2122      	movs	r1, #34	@ 0x22
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f001 f8aa 	bl	8001b84 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8000a30:	79fb      	ldrb	r3, [r7, #7]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d10a      	bne.n	8000a4c <L3GD20_EnableIT+0x34>
  {
    tmpreg &= 0x7F;	
 8000a36:	7bfb      	ldrb	r3, [r7, #15]
 8000a38:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000a3c:	b2db      	uxtb	r3, r3
 8000a3e:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_ENABLE;
 8000a40:	7bfb      	ldrb	r3, [r7, #15]
 8000a42:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000a46:	b2db      	uxtb	r3, r3
 8000a48:	73fb      	strb	r3, [r7, #15]
 8000a4a:	e00c      	b.n	8000a66 <L3GD20_EnableIT+0x4e>
  }
  else if(IntSel == L3GD20_INT2)
 8000a4c:	79fb      	ldrb	r3, [r7, #7]
 8000a4e:	2b01      	cmp	r3, #1
 8000a50:	d109      	bne.n	8000a66 <L3GD20_EnableIT+0x4e>
  {
    tmpreg &= 0xF7;
 8000a52:	7bfb      	ldrb	r3, [r7, #15]
 8000a54:	f023 0308 	bic.w	r3, r3, #8
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_ENABLE;
 8000a5c:	7bfb      	ldrb	r3, [r7, #15]
 8000a5e:	f043 0308 	orr.w	r3, r3, #8
 8000a62:	b2db      	uxtb	r3, r3
 8000a64:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8000a66:	f107 030f 	add.w	r3, r7, #15
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	2122      	movs	r1, #34	@ 0x22
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f001 f856 	bl	8001b20 <GYRO_IO_Write>
}
 8000a74:	bf00      	nop
 8000a76:	3710      	adds	r7, #16
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}

08000a7c <L3GD20_DisableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_DisableIT(uint8_t IntSel)
{  
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b084      	sub	sp, #16
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	4603      	mov	r3, r0
 8000a84:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8000a86:	f107 030f 	add.w	r3, r7, #15
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	2122      	movs	r1, #34	@ 0x22
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f001 f878 	bl	8001b84 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8000a94:	79fb      	ldrb	r3, [r7, #7]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d107      	bne.n	8000aaa <L3GD20_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;	
 8000a9a:	7bfb      	ldrb	r3, [r7, #15]
 8000a9c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000aa0:	b2db      	uxtb	r3, r3
 8000aa2:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_DISABLE;
 8000aa4:	7bfb      	ldrb	r3, [r7, #15]
 8000aa6:	73fb      	strb	r3, [r7, #15]
 8000aa8:	e009      	b.n	8000abe <L3GD20_DisableIT+0x42>
  }
  else if(IntSel == L3GD20_INT2)
 8000aaa:	79fb      	ldrb	r3, [r7, #7]
 8000aac:	2b01      	cmp	r3, #1
 8000aae:	d106      	bne.n	8000abe <L3GD20_DisableIT+0x42>
  {
    tmpreg &= 0xF7;
 8000ab0:	7bfb      	ldrb	r3, [r7, #15]
 8000ab2:	f023 0308 	bic.w	r3, r3, #8
 8000ab6:	b2db      	uxtb	r3, r3
 8000ab8:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_DISABLE;
 8000aba:	7bfb      	ldrb	r3, [r7, #15]
 8000abc:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8000abe:	f107 030f 	add.w	r3, r7, #15
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	2122      	movs	r1, #34	@ 0x22
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f001 f82a 	bl	8001b20 <GYRO_IO_Write>
}
 8000acc:	bf00      	nop
 8000ace:	3710      	adds	r7, #16
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}

08000ad4 <L3GD20_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(uint8_t FilterStruct) 
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b084      	sub	sp, #16
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	4603      	mov	r3, r0
 8000adc:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8000ade:	f107 030f 	add.w	r3, r7, #15
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	2121      	movs	r1, #33	@ 0x21
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f001 f84c 	bl	8001b84 <GYRO_IO_Read>
  
  tmpreg &= 0xC0;
 8000aec:	7bfb      	ldrb	r3, [r7, #15]
 8000aee:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000af2:	b2db      	uxtb	r3, r3
 8000af4:	73fb      	strb	r3, [r7, #15]
  
  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 8000af6:	7bfa      	ldrb	r2, [r7, #15]
 8000af8:	79fb      	ldrb	r3, [r7, #7]
 8000afa:	4313      	orrs	r3, r2
 8000afc:	b2db      	uxtb	r3, r3
 8000afe:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8000b00:	f107 030f 	add.w	r3, r7, #15
 8000b04:	2201      	movs	r2, #1
 8000b06:	2121      	movs	r1, #33	@ 0x21
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f001 f809 	bl	8001b20 <GYRO_IO_Write>
}
 8000b0e:	bf00      	nop
 8000b10:	3710      	adds	r7, #16
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}

08000b16 <L3GD20_FilterCmd>:
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
{
 8000b16:	b580      	push	{r7, lr}
 8000b18:	b084      	sub	sp, #16
 8000b1a:	af00      	add	r7, sp, #0
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8000b20:	f107 030f 	add.w	r3, r7, #15
 8000b24:	2201      	movs	r2, #1
 8000b26:	2124      	movs	r1, #36	@ 0x24
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f001 f82b 	bl	8001b84 <GYRO_IO_Read>
  
  tmpreg &= 0xEF;
 8000b2e:	7bfb      	ldrb	r3, [r7, #15]
 8000b30:	f023 0310 	bic.w	r3, r3, #16
 8000b34:	b2db      	uxtb	r3, r3
 8000b36:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 8000b38:	7bfa      	ldrb	r2, [r7, #15]
 8000b3a:	79fb      	ldrb	r3, [r7, #7]
 8000b3c:	4313      	orrs	r3, r2
 8000b3e:	b2db      	uxtb	r3, r3
 8000b40:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8000b42:	f107 030f 	add.w	r3, r7, #15
 8000b46:	2201      	movs	r2, #1
 8000b48:	2124      	movs	r1, #36	@ 0x24
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f000 ffe8 	bl	8001b20 <GYRO_IO_Write>
}
 8000b50:	bf00      	nop
 8000b52:	3710      	adds	r7, #16
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}

08000b58 <L3GD20_ReadXYZAngRate>:
* @brief  Calculate the L3GD20 angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float *pfData)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b08a      	sub	sp, #40	@ 0x28
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] ={0};
 8000b60:	2300      	movs	r3, #0
 8000b62:	61bb      	str	r3, [r7, #24]
 8000b64:	2300      	movs	r3, #0
 8000b66:	83bb      	strh	r3, [r7, #28]
  int16_t RawData[3] = {0};
 8000b68:	f107 0310 	add.w	r3, r7, #16
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 8000b72:	2300      	movs	r3, #0
 8000b74:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 8000b76:	f04f 0300 	mov.w	r3, #0
 8000b7a:	627b      	str	r3, [r7, #36]	@ 0x24
  int i =0;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	623b      	str	r3, [r7, #32]
  
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 8000b80:	f107 030f 	add.w	r3, r7, #15
 8000b84:	2201      	movs	r2, #1
 8000b86:	2123      	movs	r1, #35	@ 0x23
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f000 fffb 	bl	8001b84 <GYRO_IO_Read>
  
  GYRO_IO_Read(tmpbuffer,L3GD20_OUT_X_L_ADDR,6);
 8000b8e:	f107 0318 	add.w	r3, r7, #24
 8000b92:	2206      	movs	r2, #6
 8000b94:	2128      	movs	r1, #40	@ 0x28
 8000b96:	4618      	mov	r0, r3
 8000b98:	f000 fff4 	bl	8001b84 <GYRO_IO_Read>
  
  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & L3GD20_BLE_MSB))
 8000b9c:	7bfb      	ldrb	r3, [r7, #15]
 8000b9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d121      	bne.n	8000bea <L3GD20_ReadXYZAngRate+0x92>
  {
    for(i=0; i<3; i++)
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	623b      	str	r3, [r7, #32]
 8000baa:	e01a      	b.n	8000be2 <L3GD20_ReadXYZAngRate+0x8a>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 8000bac:	6a3b      	ldr	r3, [r7, #32]
 8000bae:	005b      	lsls	r3, r3, #1
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	3328      	adds	r3, #40	@ 0x28
 8000bb4:	443b      	add	r3, r7
 8000bb6:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000bba:	021b      	lsls	r3, r3, #8
 8000bbc:	b29b      	uxth	r3, r3
 8000bbe:	6a3a      	ldr	r2, [r7, #32]
 8000bc0:	0052      	lsls	r2, r2, #1
 8000bc2:	3228      	adds	r2, #40	@ 0x28
 8000bc4:	443a      	add	r2, r7
 8000bc6:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8000bca:	4413      	add	r3, r2
 8000bcc:	b29b      	uxth	r3, r3
 8000bce:	b21a      	sxth	r2, r3
 8000bd0:	6a3b      	ldr	r3, [r7, #32]
 8000bd2:	005b      	lsls	r3, r3, #1
 8000bd4:	3328      	adds	r3, #40	@ 0x28
 8000bd6:	443b      	add	r3, r7
 8000bd8:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 8000bdc:	6a3b      	ldr	r3, [r7, #32]
 8000bde:	3301      	adds	r3, #1
 8000be0:	623b      	str	r3, [r7, #32]
 8000be2:	6a3b      	ldr	r3, [r7, #32]
 8000be4:	2b02      	cmp	r3, #2
 8000be6:	dde1      	ble.n	8000bac <L3GD20_ReadXYZAngRate+0x54>
 8000be8:	e020      	b.n	8000c2c <L3GD20_ReadXYZAngRate+0xd4>
    }
  }
  else
  {
    for(i=0; i<3; i++)
 8000bea:	2300      	movs	r3, #0
 8000bec:	623b      	str	r3, [r7, #32]
 8000bee:	e01a      	b.n	8000c26 <L3GD20_ReadXYZAngRate+0xce>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
 8000bf0:	6a3b      	ldr	r3, [r7, #32]
 8000bf2:	005b      	lsls	r3, r3, #1
 8000bf4:	3328      	adds	r3, #40	@ 0x28
 8000bf6:	443b      	add	r3, r7
 8000bf8:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000bfc:	021b      	lsls	r3, r3, #8
 8000bfe:	b29b      	uxth	r3, r3
 8000c00:	6a3a      	ldr	r2, [r7, #32]
 8000c02:	0052      	lsls	r2, r2, #1
 8000c04:	3201      	adds	r2, #1
 8000c06:	3228      	adds	r2, #40	@ 0x28
 8000c08:	443a      	add	r2, r7
 8000c0a:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8000c0e:	4413      	add	r3, r2
 8000c10:	b29b      	uxth	r3, r3
 8000c12:	b21a      	sxth	r2, r3
 8000c14:	6a3b      	ldr	r3, [r7, #32]
 8000c16:	005b      	lsls	r3, r3, #1
 8000c18:	3328      	adds	r3, #40	@ 0x28
 8000c1a:	443b      	add	r3, r7
 8000c1c:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 8000c20:	6a3b      	ldr	r3, [r7, #32]
 8000c22:	3301      	adds	r3, #1
 8000c24:	623b      	str	r3, [r7, #32]
 8000c26:	6a3b      	ldr	r3, [r7, #32]
 8000c28:	2b02      	cmp	r3, #2
 8000c2a:	dde1      	ble.n	8000bf0 <L3GD20_ReadXYZAngRate+0x98>
    }
  }
  
  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 8000c2c:	7bfb      	ldrb	r3, [r7, #15]
 8000c2e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8000c32:	2b20      	cmp	r3, #32
 8000c34:	d00c      	beq.n	8000c50 <L3GD20_ReadXYZAngRate+0xf8>
 8000c36:	2b20      	cmp	r3, #32
 8000c38:	dc0d      	bgt.n	8000c56 <L3GD20_ReadXYZAngRate+0xfe>
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d002      	beq.n	8000c44 <L3GD20_ReadXYZAngRate+0xec>
 8000c3e:	2b10      	cmp	r3, #16
 8000c40:	d003      	beq.n	8000c4a <L3GD20_ReadXYZAngRate+0xf2>
 8000c42:	e008      	b.n	8000c56 <L3GD20_ReadXYZAngRate+0xfe>
  {
  case L3GD20_FULLSCALE_250:
    sensitivity=L3GD20_SENSITIVITY_250DPS;
 8000c44:	4b15      	ldr	r3, [pc, #84]	@ (8000c9c <L3GD20_ReadXYZAngRate+0x144>)
 8000c46:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
 8000c48:	e005      	b.n	8000c56 <L3GD20_ReadXYZAngRate+0xfe>
    
  case L3GD20_FULLSCALE_500:
    sensitivity=L3GD20_SENSITIVITY_500DPS;
 8000c4a:	4b15      	ldr	r3, [pc, #84]	@ (8000ca0 <L3GD20_ReadXYZAngRate+0x148>)
 8000c4c:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
 8000c4e:	e002      	b.n	8000c56 <L3GD20_ReadXYZAngRate+0xfe>
    
  case L3GD20_FULLSCALE_2000:
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
 8000c50:	4b14      	ldr	r3, [pc, #80]	@ (8000ca4 <L3GD20_ReadXYZAngRate+0x14c>)
 8000c52:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
 8000c54:	bf00      	nop
  }
  /* Divide by sensitivity */
  for(i=0; i<3; i++)
 8000c56:	2300      	movs	r3, #0
 8000c58:	623b      	str	r3, [r7, #32]
 8000c5a:	e016      	b.n	8000c8a <L3GD20_ReadXYZAngRate+0x132>
  {
    pfData[i]=(float)(RawData[i] * sensitivity);
 8000c5c:	6a3b      	ldr	r3, [r7, #32]
 8000c5e:	005b      	lsls	r3, r3, #1
 8000c60:	3328      	adds	r3, #40	@ 0x28
 8000c62:	443b      	add	r3, r7
 8000c64:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 8000c68:	ee07 3a90 	vmov	s15, r3
 8000c6c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c70:	6a3b      	ldr	r3, [r7, #32]
 8000c72:	009b      	lsls	r3, r3, #2
 8000c74:	687a      	ldr	r2, [r7, #4]
 8000c76:	4413      	add	r3, r2
 8000c78:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000c7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c80:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 8000c84:	6a3b      	ldr	r3, [r7, #32]
 8000c86:	3301      	adds	r3, #1
 8000c88:	623b      	str	r3, [r7, #32]
 8000c8a:	6a3b      	ldr	r3, [r7, #32]
 8000c8c:	2b02      	cmp	r3, #2
 8000c8e:	dde5      	ble.n	8000c5c <L3GD20_ReadXYZAngRate+0x104>
  }
}
 8000c90:	bf00      	nop
 8000c92:	bf00      	nop
 8000c94:	3728      	adds	r7, #40	@ 0x28
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	410c0000 	.word	0x410c0000
 8000ca0:	418c0000 	.word	0x418c0000
 8000ca4:	428c0000 	.word	0x428c0000

08000ca8 <stmpe811_Init>:
  * @brief  Initialize the stmpe811 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void stmpe811_Init(uint16_t DeviceAddr)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	4603      	mov	r3, r0
 8000cb0:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = stmpe811_GetInstance(DeviceAddr);
 8000cb2:	88fb      	ldrh	r3, [r7, #6]
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f000 fa59 	bl	800116c <stmpe811_GetInstance>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 8000cbe:	7bfb      	ldrb	r3, [r7, #15]
 8000cc0:	2bff      	cmp	r3, #255	@ 0xff
 8000cc2:	d112      	bne.n	8000cea <stmpe811_Init+0x42>
  {
    /* Look for empty instance */
    empty = stmpe811_GetInstance(0);
 8000cc4:	2000      	movs	r0, #0
 8000cc6:	f000 fa51 	bl	800116c <stmpe811_GetInstance>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	73bb      	strb	r3, [r7, #14]
    
    if(empty < STMPE811_MAX_INSTANCE)
 8000cce:	7bbb      	ldrb	r3, [r7, #14]
 8000cd0:	2b01      	cmp	r3, #1
 8000cd2:	d80a      	bhi.n	8000cea <stmpe811_Init+0x42>
    {
      /* Register the current device instance */
      stmpe811[empty] = DeviceAddr;
 8000cd4:	7bbb      	ldrb	r3, [r7, #14]
 8000cd6:	88fa      	ldrh	r2, [r7, #6]
 8000cd8:	b2d1      	uxtb	r1, r2
 8000cda:	4a06      	ldr	r2, [pc, #24]	@ (8000cf4 <stmpe811_Init+0x4c>)
 8000cdc:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      IOE_Init(); 
 8000cde:	f000 fe80 	bl	80019e2 <IOE_Init>
      
      /* Generate stmpe811 Software reset */
      stmpe811_Reset(DeviceAddr);
 8000ce2:	88fb      	ldrh	r3, [r7, #6]
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f000 f807 	bl	8000cf8 <stmpe811_Reset>
    }
  }
}
 8000cea:	bf00      	nop
 8000cec:	3710      	adds	r7, #16
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	20000248 	.word	0x20000248

08000cf8 <stmpe811_Reset>:
  * @brief  Reset the stmpe811 by Software.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_Reset(uint16_t DeviceAddr)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	4603      	mov	r3, r0
 8000d00:	80fb      	strh	r3, [r7, #6]
  /* Power Down the stmpe811 */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 8000d02:	88fb      	ldrh	r3, [r7, #6]
 8000d04:	b2db      	uxtb	r3, r3
 8000d06:	2202      	movs	r2, #2
 8000d08:	2103      	movs	r1, #3
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f000 fe75 	bl	80019fa <IOE_Write>

  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(10); 
 8000d10:	200a      	movs	r0, #10
 8000d12:	f000 feae 	bl	8001a72 <IOE_Delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized */
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 8000d16:	88fb      	ldrh	r3, [r7, #6]
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2103      	movs	r1, #3
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f000 fe6b 	bl	80019fa <IOE_Write>
  
  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(2); 
 8000d24:	2002      	movs	r0, #2
 8000d26:	f000 fea4 	bl	8001a72 <IOE_Delay>
}
 8000d2a:	bf00      	nop
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}

08000d32 <stmpe811_ReadID>:
  * @brief  Read the stmpe811 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval The Device ID (two bytes).
  */
uint16_t stmpe811_ReadID(uint16_t DeviceAddr)
{
 8000d32:	b590      	push	{r4, r7, lr}
 8000d34:	b083      	sub	sp, #12
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	4603      	mov	r3, r0
 8000d3a:	80fb      	strh	r3, [r7, #6]
  /* Initialize IO BUS layer */
  IOE_Init(); 
 8000d3c:	f000 fe51 	bl	80019e2 <IOE_Init>
  
  /* Return the device ID value */
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8000d40:	88fb      	ldrh	r3, [r7, #6]
 8000d42:	b2db      	uxtb	r3, r3
 8000d44:	2100      	movs	r1, #0
 8000d46:	4618      	mov	r0, r3
 8000d48:	f000 fe6a 	bl	8001a20 <IOE_Read>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	021b      	lsls	r3, r3, #8
 8000d50:	b21c      	sxth	r4, r3
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 8000d52:	88fb      	ldrh	r3, [r7, #6]
 8000d54:	b2db      	uxtb	r3, r3
 8000d56:	2101      	movs	r1, #1
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f000 fe61 	bl	8001a20 <IOE_Read>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	b21b      	sxth	r3, r3
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8000d62:	4323      	orrs	r3, r4
 8000d64:	b21b      	sxth	r3, r3
 8000d66:	b29b      	uxth	r3, r3
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	370c      	adds	r7, #12
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd90      	pop	{r4, r7, pc}

08000d70 <stmpe811_EnableGlobalIT>:
  * @brief  Enable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.       
  * @retval None
  */
void stmpe811_EnableGlobalIT(uint16_t DeviceAddr)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8000d7e:	88fb      	ldrh	r3, [r7, #6]
 8000d80:	b2db      	uxtb	r3, r3
 8000d82:	2109      	movs	r1, #9
 8000d84:	4618      	mov	r0, r3
 8000d86:	f000 fe4b 	bl	8001a20 <IOE_Read>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	73fb      	strb	r3, [r7, #15]
  
  /* Set the global interrupts to be Enabled */    
  tmp |= (uint8_t)STMPE811_GIT_EN;
 8000d8e:	7bfb      	ldrb	r3, [r7, #15]
 8000d90:	f043 0301 	orr.w	r3, r3, #1
 8000d94:	73fb      	strb	r3, [r7, #15]
  
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 8000d96:	88fb      	ldrh	r3, [r7, #6]
 8000d98:	b2db      	uxtb	r3, r3
 8000d9a:	7bfa      	ldrb	r2, [r7, #15]
 8000d9c:	2109      	movs	r1, #9
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f000 fe2b 	bl	80019fa <IOE_Write>
}
 8000da4:	bf00      	nop
 8000da6:	3710      	adds	r7, #16
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}

08000dac <stmpe811_DisableGlobalIT>:
  * @brief  Disable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.      
  * @retval None
  */
void stmpe811_DisableGlobalIT(uint16_t DeviceAddr)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8000db6:	2300      	movs	r3, #0
 8000db8:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8000dba:	88fb      	ldrh	r3, [r7, #6]
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	2109      	movs	r1, #9
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f000 fe2d 	bl	8001a20 <IOE_Read>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	73fb      	strb	r3, [r7, #15]

  /* Set the global interrupts to be Disabled */    
  tmp &= ~(uint8_t)STMPE811_GIT_EN;
 8000dca:	7bfb      	ldrb	r3, [r7, #15]
 8000dcc:	f023 0301 	bic.w	r3, r3, #1
 8000dd0:	73fb      	strb	r3, [r7, #15]
 
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 8000dd2:	88fb      	ldrh	r3, [r7, #6]
 8000dd4:	b2db      	uxtb	r3, r3
 8000dd6:	7bfa      	ldrb	r2, [r7, #15]
 8000dd8:	2109      	movs	r1, #9
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f000 fe0d 	bl	80019fa <IOE_Write>
    
}
 8000de0:	bf00      	nop
 8000de2:	3710      	adds	r7, #16
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <stmpe811_EnableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	4603      	mov	r3, r0
 8000df0:	460a      	mov	r2, r1
 8000df2:	80fb      	strh	r3, [r7, #6]
 8000df4:	4613      	mov	r3, r2
 8000df6:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8000dfc:	88fb      	ldrh	r3, [r7, #6]
 8000dfe:	b2db      	uxtb	r3, r3
 8000e00:	210a      	movs	r1, #10
 8000e02:	4618      	mov	r0, r3
 8000e04:	f000 fe0c 	bl	8001a20 <IOE_Read>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp |= Source; 
 8000e0c:	7bfa      	ldrb	r2, [r7, #15]
 8000e0e:	797b      	ldrb	r3, [r7, #5]
 8000e10:	4313      	orrs	r3, r2
 8000e12:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8000e14:	88fb      	ldrh	r3, [r7, #6]
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	7bfa      	ldrb	r2, [r7, #15]
 8000e1a:	210a      	movs	r1, #10
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f000 fdec 	bl	80019fa <IOE_Write>
}
 8000e22:	bf00      	nop
 8000e24:	3710      	adds	r7, #16
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}

08000e2a <stmpe811_DisableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	b084      	sub	sp, #16
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	4603      	mov	r3, r0
 8000e32:	460a      	mov	r2, r1
 8000e34:	80fb      	strh	r3, [r7, #6]
 8000e36:	4613      	mov	r3, r2
 8000e38:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8000e3e:	88fb      	ldrh	r3, [r7, #6]
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	210a      	movs	r1, #10
 8000e44:	4618      	mov	r0, r3
 8000e46:	f000 fdeb 	bl	8001a20 <IOE_Read>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp &= ~Source; 
 8000e4e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000e52:	43db      	mvns	r3, r3
 8000e54:	b25a      	sxtb	r2, r3
 8000e56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	b25b      	sxtb	r3, r3
 8000e5e:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8000e60:	88fb      	ldrh	r3, [r7, #6]
 8000e62:	b2db      	uxtb	r3, r3
 8000e64:	7bfa      	ldrb	r2, [r7, #15]
 8000e66:	210a      	movs	r1, #10
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f000 fdc6 	bl	80019fa <IOE_Write>
}
 8000e6e:	bf00      	nop
 8000e70:	3710      	adds	r7, #16
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <stmpe811_ReadGITStatus>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt      
  * @retval The checked Global interrupt source status.
  */
uint8_t stmpe811_ReadGITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b082      	sub	sp, #8
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	460a      	mov	r2, r1
 8000e80:	80fb      	strh	r3, [r7, #6]
 8000e82:	4613      	mov	r3, r2
 8000e84:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status */
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 8000e86:	88fb      	ldrh	r3, [r7, #6]
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	210b      	movs	r1, #11
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f000 fdc7 	bl	8001a20 <IOE_Read>
 8000e92:	4603      	mov	r3, r0
 8000e94:	461a      	mov	r2, r3
 8000e96:	797b      	ldrb	r3, [r7, #5]
 8000e98:	4013      	ands	r3, r2
 8000e9a:	b2db      	uxtb	r3, r3
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3708      	adds	r7, #8
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}

08000ea4 <stmpe811_ClearGlobalIT>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt 
  * @retval None
  */
void stmpe811_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	460a      	mov	r2, r1
 8000eae:	80fb      	strh	r3, [r7, #6]
 8000eb0:	4613      	mov	r3, r2
 8000eb2:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 8000eb4:	88fb      	ldrh	r3, [r7, #6]
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	797a      	ldrb	r2, [r7, #5]
 8000eba:	210b      	movs	r1, #11
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f000 fd9c 	bl	80019fa <IOE_Write>
}
 8000ec2:	bf00      	nop
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <stmpe811_IO_EnableAF>:
  *         combination of the following values:
  *   @arg  STMPE811_PIN_x: Where x can be from 0 to 7.       
  * @retval None
  */
void stmpe811_IO_EnableAF(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	b084      	sub	sp, #16
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	6039      	str	r1, [r7, #0]
 8000ed4:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current register value */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 8000eda:	88fb      	ldrh	r3, [r7, #6]
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	2117      	movs	r1, #23
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f000 fd9d 	bl	8001a20 <IOE_Read>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	73fb      	strb	r3, [r7, #15]

  /* Enable the selected pins alternate function */   
  tmp &= ~(uint8_t)IO_Pin;   
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	b25b      	sxtb	r3, r3
 8000eee:	43db      	mvns	r3, r3
 8000ef0:	b25a      	sxtb	r2, r3
 8000ef2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	b25b      	sxtb	r3, r3
 8000efa:	73fb      	strb	r3, [r7, #15]
  
  /* Write back the new register value */
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 8000efc:	88fb      	ldrh	r3, [r7, #6]
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	7bfa      	ldrb	r2, [r7, #15]
 8000f02:	2117      	movs	r1, #23
 8000f04:	4618      	mov	r0, r3
 8000f06:	f000 fd78 	bl	80019fa <IOE_Write>
}
 8000f0a:	bf00      	nop
 8000f0c:	3710      	adds	r7, #16
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <stmpe811_TS_Start>:
  * @brief  Configures the touch Screen Controller (Single point detection)
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void stmpe811_TS_Start(uint16_t DeviceAddr)
{
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b084      	sub	sp, #16
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	4603      	mov	r3, r0
 8000f1a:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;
  
  /* Get the current register value */
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8000f1c:	88fb      	ldrh	r3, [r7, #6]
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	2104      	movs	r1, #4
 8000f22:	4618      	mov	r0, r3
 8000f24:	f000 fd7c 	bl	8001a20 <IOE_Read>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	73fb      	strb	r3, [r7, #15]
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_IO_FCT);  
 8000f2c:	7bfb      	ldrb	r3, [r7, #15]
 8000f2e:	f023 0304 	bic.w	r3, r3, #4
 8000f32:	73fb      	strb	r3, [r7, #15]
  
  /* Write the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8000f34:	88fb      	ldrh	r3, [r7, #6]
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	7bfa      	ldrb	r2, [r7, #15]
 8000f3a:	2104      	movs	r1, #4
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f000 fd5c 	bl	80019fa <IOE_Write>

  /* Select TSC pins in TSC alternate mode */  
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 8000f42:	88fb      	ldrh	r3, [r7, #6]
 8000f44:	21f0      	movs	r1, #240	@ 0xf0
 8000f46:	4618      	mov	r0, r3
 8000f48:	f7ff ffbf 	bl	8000eca <stmpe811_IO_EnableAF>
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_TS_FCT | STMPE811_ADC_FCT);  
 8000f4c:	7bfb      	ldrb	r3, [r7, #15]
 8000f4e:	f023 0303 	bic.w	r3, r3, #3
 8000f52:	73fb      	strb	r3, [r7, #15]
  
  /* Set the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8000f54:	88fb      	ldrh	r3, [r7, #6]
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	7bfa      	ldrb	r2, [r7, #15]
 8000f5a:	2104      	movs	r1, #4
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f000 fd4c 	bl	80019fa <IOE_Write>
  
  /* Select Sample Time, bit number and ADC Reference */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 8000f62:	88fb      	ldrh	r3, [r7, #6]
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	2249      	movs	r2, #73	@ 0x49
 8000f68:	2120      	movs	r1, #32
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f000 fd45 	bl	80019fa <IOE_Write>
  
  /* Wait for 2 ms */
  IOE_Delay(2); 
 8000f70:	2002      	movs	r0, #2
 8000f72:	f000 fd7e 	bl	8001a72 <IOE_Delay>
  
  /* Select the ADC clock speed: 3.25 MHz */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 8000f76:	88fb      	ldrh	r3, [r7, #6]
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	2121      	movs	r1, #33	@ 0x21
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f000 fd3b 	bl	80019fa <IOE_Write>
  /* Configuration: 
     - Touch average control    : 4 samples
     - Touch delay time         : 500 uS
     - Panel driver setting time: 500 uS 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 8000f84:	88fb      	ldrh	r3, [r7, #6]
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	229a      	movs	r2, #154	@ 0x9a
 8000f8a:	2141      	movs	r1, #65	@ 0x41
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f000 fd34 	bl	80019fa <IOE_Write>
  
  /* Configure the Touch FIFO threshold: single point reading */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 8000f92:	88fb      	ldrh	r3, [r7, #6]
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	2201      	movs	r2, #1
 8000f98:	214a      	movs	r1, #74	@ 0x4a
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f000 fd2d 	bl	80019fa <IOE_Write>
  
  /* Clear the FIFO memory content. */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8000fa0:	88fb      	ldrh	r3, [r7, #6]
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	214b      	movs	r1, #75	@ 0x4b
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f000 fd26 	bl	80019fa <IOE_Write>
  
  /* Put the FIFO back into operation mode  */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8000fae:	88fb      	ldrh	r3, [r7, #6]
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	214b      	movs	r1, #75	@ 0x4b
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f000 fd1f 	bl	80019fa <IOE_Write>
  
  /* Set the range and accuracy pf the pressure measurement (Z) : 
     - Fractional part :7 
     - Whole part      :1 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 8000fbc:	88fb      	ldrh	r3, [r7, #6]
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	2156      	movs	r1, #86	@ 0x56
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f000 fd18 	bl	80019fa <IOE_Write>
  
  /* Set the driving capability (limit) of the device for TSC pins: 50mA */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 8000fca:	88fb      	ldrh	r3, [r7, #6]
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	2201      	movs	r2, #1
 8000fd0:	2158      	movs	r1, #88	@ 0x58
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f000 fd11 	bl	80019fa <IOE_Write>
  
  /* Touch screen control configuration (enable TSC):
     - No window tracking index
     - XYZ acquisition mode
   */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 8000fd8:	88fb      	ldrh	r3, [r7, #6]
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	2201      	movs	r2, #1
 8000fde:	2140      	movs	r1, #64	@ 0x40
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f000 fd0a 	bl	80019fa <IOE_Write>
  
  /*  Clear all the status pending bits if any */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 8000fe6:	88fb      	ldrh	r3, [r7, #6]
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	22ff      	movs	r2, #255	@ 0xff
 8000fec:	210b      	movs	r1, #11
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f000 fd03 	bl	80019fa <IOE_Write>

  /* Wait for 2 ms delay */
  IOE_Delay(2); 
 8000ff4:	2002      	movs	r0, #2
 8000ff6:	f000 fd3c 	bl	8001a72 <IOE_Delay>
}
 8000ffa:	bf00      	nop
 8000ffc:	3710      	adds	r7, #16
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}

08001002 <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 8001002:	b580      	push	{r7, lr}
 8001004:	b084      	sub	sp, #16
 8001006:	af00      	add	r7, sp, #0
 8001008:	4603      	mov	r3, r0
 800100a:	80fb      	strh	r3, [r7, #6]
  uint8_t state;
  uint8_t ret = 0;
 800100c:	2300      	movs	r3, #0
 800100e:	73fb      	strb	r3, [r7, #15]
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)STMPE811_TS_CTRL_STATUS);
 8001010:	88fb      	ldrh	r3, [r7, #6]
 8001012:	b2db      	uxtb	r3, r3
 8001014:	2140      	movs	r1, #64	@ 0x40
 8001016:	4618      	mov	r0, r3
 8001018:	f000 fd02 	bl	8001a20 <IOE_Read>
 800101c:	4603      	mov	r3, r0
 800101e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001022:	2b80      	cmp	r3, #128	@ 0x80
 8001024:	bf0c      	ite	eq
 8001026:	2301      	moveq	r3, #1
 8001028:	2300      	movne	r3, #0
 800102a:	b2db      	uxtb	r3, r3
 800102c:	73bb      	strb	r3, [r7, #14]
  
  if(state > 0)
 800102e:	7bbb      	ldrb	r3, [r7, #14]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d00b      	beq.n	800104c <stmpe811_TS_DetectTouch+0x4a>
  {
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 8001034:	88fb      	ldrh	r3, [r7, #6]
 8001036:	b2db      	uxtb	r3, r3
 8001038:	214c      	movs	r1, #76	@ 0x4c
 800103a:	4618      	mov	r0, r3
 800103c:	f000 fcf0 	bl	8001a20 <IOE_Read>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d010      	beq.n	8001068 <stmpe811_TS_DetectTouch+0x66>
    {
      ret = 1;
 8001046:	2301      	movs	r3, #1
 8001048:	73fb      	strb	r3, [r7, #15]
 800104a:	e00d      	b.n	8001068 <stmpe811_TS_DetectTouch+0x66>
    }
  }
  else
  {
    /* Reset FIFO */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 800104c:	88fb      	ldrh	r3, [r7, #6]
 800104e:	b2db      	uxtb	r3, r3
 8001050:	2201      	movs	r2, #1
 8001052:	214b      	movs	r1, #75	@ 0x4b
 8001054:	4618      	mov	r0, r3
 8001056:	f000 fcd0 	bl	80019fa <IOE_Write>
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 800105a:	88fb      	ldrh	r3, [r7, #6]
 800105c:	b2db      	uxtb	r3, r3
 800105e:	2200      	movs	r2, #0
 8001060:	214b      	movs	r1, #75	@ 0x4b
 8001062:	4618      	mov	r0, r3
 8001064:	f000 fcc9 	bl	80019fa <IOE_Write>
  }
  
  return ret;
 8001068:	7bfb      	ldrb	r3, [r7, #15]
}
 800106a:	4618      	mov	r0, r3
 800106c:	3710      	adds	r7, #16
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <stmpe811_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8001072:	b580      	push	{r7, lr}
 8001074:	b086      	sub	sp, #24
 8001076:	af00      	add	r7, sp, #0
 8001078:	4603      	mov	r3, r0
 800107a:	60b9      	str	r1, [r7, #8]
 800107c:	607a      	str	r2, [r7, #4]
 800107e:	81fb      	strh	r3, [r7, #14]
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 8001080:	89fb      	ldrh	r3, [r7, #14]
 8001082:	b2d8      	uxtb	r0, r3
 8001084:	f107 0210 	add.w	r2, r7, #16
 8001088:	2304      	movs	r3, #4
 800108a:	21d7      	movs	r1, #215	@ 0xd7
 800108c:	f000 fcdb 	bl	8001a46 <IOE_ReadMultiple>
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
 8001090:	7c3b      	ldrb	r3, [r7, #16]
 8001092:	061a      	lsls	r2, r3, #24
 8001094:	7c7b      	ldrb	r3, [r7, #17]
 8001096:	041b      	lsls	r3, r3, #16
 8001098:	431a      	orrs	r2, r3
 800109a:	7cbb      	ldrb	r3, [r7, #18]
 800109c:	021b      	lsls	r3, r3, #8
 800109e:	4313      	orrs	r3, r2
 80010a0:	7cfa      	ldrb	r2, [r7, #19]
 80010a2:	4313      	orrs	r3, r2
 80010a4:	617b      	str	r3, [r7, #20]
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	0d1b      	lsrs	r3, r3, #20
 80010aa:	b29a      	uxth	r2, r3
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	801a      	strh	r2, [r3, #0]
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	0a1b      	lsrs	r3, r3, #8
 80010b4:	b29b      	uxth	r3, r3
 80010b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010ba:	b29a      	uxth	r2, r3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	801a      	strh	r2, [r3, #0]
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 80010c0:	89fb      	ldrh	r3, [r7, #14]
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	2201      	movs	r2, #1
 80010c6:	214b      	movs	r1, #75	@ 0x4b
 80010c8:	4618      	mov	r0, r3
 80010ca:	f000 fc96 	bl	80019fa <IOE_Write>
  /* Enable the FIFO again */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 80010ce:	89fb      	ldrh	r3, [r7, #14]
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	2200      	movs	r2, #0
 80010d4:	214b      	movs	r1, #75	@ 0x4b
 80010d6:	4618      	mov	r0, r3
 80010d8:	f000 fc8f 	bl	80019fa <IOE_Write>
}
 80010dc:	bf00      	nop
 80010de:	3718      	adds	r7, #24
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <stmpe811_TS_EnableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_EnableIT(uint16_t DeviceAddr)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	4603      	mov	r3, r0
 80010ec:	80fb      	strh	r3, [r7, #6]
  IOE_ITConfig();
 80010ee:	f000 fc7e 	bl	80019ee <IOE_ITConfig>
  
  /* Enable global TS IT source */
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 80010f2:	88fb      	ldrh	r3, [r7, #6]
 80010f4:	211f      	movs	r1, #31
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff fe76 	bl	8000de8 <stmpe811_EnableITSource>
  
  /* Enable global interrupt */
  stmpe811_EnableGlobalIT(DeviceAddr);
 80010fc:	88fb      	ldrh	r3, [r7, #6]
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff fe36 	bl	8000d70 <stmpe811_EnableGlobalIT>
}
 8001104:	bf00      	nop
 8001106:	3708      	adds	r7, #8
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}

0800110c <stmpe811_TS_DisableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval None
  */
void stmpe811_TS_DisableIT(uint16_t DeviceAddr)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	4603      	mov	r3, r0
 8001114:	80fb      	strh	r3, [r7, #6]
  /* Disable global interrupt */
  stmpe811_DisableGlobalIT(DeviceAddr);
 8001116:	88fb      	ldrh	r3, [r7, #6]
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff fe47 	bl	8000dac <stmpe811_DisableGlobalIT>
  
  /* Disable global TS IT source */
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 800111e:	88fb      	ldrh	r3, [r7, #6]
 8001120:	211f      	movs	r1, #31
 8001122:	4618      	mov	r0, r3
 8001124:	f7ff fe81 	bl	8000e2a <stmpe811_DisableITSource>
}
 8001128:	bf00      	nop
 800112a:	3708      	adds	r7, #8
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}

08001130 <stmpe811_TS_ITStatus>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval TS interrupts status
  */
uint8_t stmpe811_TS_ITStatus(uint16_t DeviceAddr)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	80fb      	strh	r3, [r7, #6]
  /* Return TS interrupts status */
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 800113a:	88fb      	ldrh	r3, [r7, #6]
 800113c:	211f      	movs	r1, #31
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff fe99 	bl	8000e76 <stmpe811_ReadGITStatus>
 8001144:	4603      	mov	r3, r0
}
 8001146:	4618      	mov	r0, r3
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}

0800114e <stmpe811_TS_ClearIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_ClearIT(uint16_t DeviceAddr)
{
 800114e:	b580      	push	{r7, lr}
 8001150:	b082      	sub	sp, #8
 8001152:	af00      	add	r7, sp, #0
 8001154:	4603      	mov	r3, r0
 8001156:	80fb      	strh	r3, [r7, #6]
  /* Clear the global TS IT source */
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 8001158:	88fb      	ldrh	r3, [r7, #6]
 800115a:	211f      	movs	r1, #31
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff fea1 	bl	8000ea4 <stmpe811_ClearGlobalIT>
}
 8001162:	bf00      	nop
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
	...

0800116c <stmpe811_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t stmpe811_GetInstance(uint16_t DeviceAddr)
{
 800116c:	b480      	push	{r7}
 800116e:	b085      	sub	sp, #20
 8001170:	af00      	add	r7, sp, #0
 8001172:	4603      	mov	r3, r0
 8001174:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 8001176:	2300      	movs	r3, #0
 8001178:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 800117a:	2300      	movs	r3, #0
 800117c:	73fb      	strb	r3, [r7, #15]
 800117e:	e00b      	b.n	8001198 <stmpe811_GetInstance+0x2c>
  {
    if(stmpe811[idx] == DeviceAddr)
 8001180:	7bfb      	ldrb	r3, [r7, #15]
 8001182:	4a0a      	ldr	r2, [pc, #40]	@ (80011ac <stmpe811_GetInstance+0x40>)
 8001184:	5cd3      	ldrb	r3, [r2, r3]
 8001186:	461a      	mov	r2, r3
 8001188:	88fb      	ldrh	r3, [r7, #6]
 800118a:	4293      	cmp	r3, r2
 800118c:	d101      	bne.n	8001192 <stmpe811_GetInstance+0x26>
    {
      return idx; 
 800118e:	7bfb      	ldrb	r3, [r7, #15]
 8001190:	e006      	b.n	80011a0 <stmpe811_GetInstance+0x34>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 8001192:	7bfb      	ldrb	r3, [r7, #15]
 8001194:	3301      	adds	r3, #1
 8001196:	73fb      	strb	r3, [r7, #15]
 8001198:	7bfb      	ldrb	r3, [r7, #15]
 800119a:	2b01      	cmp	r3, #1
 800119c:	d9f0      	bls.n	8001180 <stmpe811_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 800119e:	23ff      	movs	r3, #255	@ 0xff
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	3714      	adds	r7, #20
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	20000248 	.word	0x20000248

080011b0 <BSP_LED_Init>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b08a      	sub	sp, #40	@ 0x28
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d10e      	bne.n	80011de <BSP_LED_Init+0x2e>
 80011c0:	2300      	movs	r3, #0
 80011c2:	613b      	str	r3, [r7, #16]
 80011c4:	4b21      	ldr	r3, [pc, #132]	@ (800124c <BSP_LED_Init+0x9c>)
 80011c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c8:	4a20      	ldr	r2, [pc, #128]	@ (800124c <BSP_LED_Init+0x9c>)
 80011ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80011ce:	6313      	str	r3, [r2, #48]	@ 0x30
 80011d0:	4b1e      	ldr	r3, [pc, #120]	@ (800124c <BSP_LED_Init+0x9c>)
 80011d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80011d8:	613b      	str	r3, [r7, #16]
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	e010      	b.n	8001200 <BSP_LED_Init+0x50>
 80011de:	79fb      	ldrb	r3, [r7, #7]
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d10d      	bne.n	8001200 <BSP_LED_Init+0x50>
 80011e4:	2300      	movs	r3, #0
 80011e6:	60fb      	str	r3, [r7, #12]
 80011e8:	4b18      	ldr	r3, [pc, #96]	@ (800124c <BSP_LED_Init+0x9c>)
 80011ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ec:	4a17      	ldr	r2, [pc, #92]	@ (800124c <BSP_LED_Init+0x9c>)
 80011ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80011f2:	6313      	str	r3, [r2, #48]	@ 0x30
 80011f4:	4b15      	ldr	r3, [pc, #84]	@ (800124c <BSP_LED_Init+0x9c>)
 80011f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80011fc:	60fb      	str	r3, [r7, #12]
 80011fe:	68fb      	ldr	r3, [r7, #12]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8001200:	79fb      	ldrb	r3, [r7, #7]
 8001202:	4a13      	ldr	r2, [pc, #76]	@ (8001250 <BSP_LED_Init+0xa0>)
 8001204:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001208:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800120a:	2301      	movs	r3, #1
 800120c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800120e:	2301      	movs	r3, #1
 8001210:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8001212:	2302      	movs	r3, #2
 8001214:	623b      	str	r3, [r7, #32]

  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8001216:	79fb      	ldrb	r3, [r7, #7]
 8001218:	4a0e      	ldr	r2, [pc, #56]	@ (8001254 <BSP_LED_Init+0xa4>)
 800121a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800121e:	f107 0214 	add.w	r2, r7, #20
 8001222:	4611      	mov	r1, r2
 8001224:	4618      	mov	r0, r3
 8001226:	f003 fb3f 	bl	80048a8 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 800122a:	79fb      	ldrb	r3, [r7, #7]
 800122c:	4a09      	ldr	r2, [pc, #36]	@ (8001254 <BSP_LED_Init+0xa4>)
 800122e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001232:	79fb      	ldrb	r3, [r7, #7]
 8001234:	4a06      	ldr	r2, [pc, #24]	@ (8001250 <BSP_LED_Init+0xa0>)
 8001236:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800123a:	2200      	movs	r2, #0
 800123c:	4619      	mov	r1, r3
 800123e:	f003 fcf7 	bl	8004c30 <HAL_GPIO_WritePin>
}
 8001242:	bf00      	nop
 8001244:	3728      	adds	r7, #40	@ 0x28
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40023800 	.word	0x40023800
 8001250:	0800b988 	.word	0x0800b988
 8001254:	20000094 	.word	0x20000094

08001258 <BSP_LED_Toggle>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8001262:	79fb      	ldrb	r3, [r7, #7]
 8001264:	4a07      	ldr	r2, [pc, #28]	@ (8001284 <BSP_LED_Toggle+0x2c>)
 8001266:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800126a:	79fb      	ldrb	r3, [r7, #7]
 800126c:	4906      	ldr	r1, [pc, #24]	@ (8001288 <BSP_LED_Toggle+0x30>)
 800126e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001272:	4619      	mov	r1, r3
 8001274:	4610      	mov	r0, r2
 8001276:	f003 fcf4 	bl	8004c62 <HAL_GPIO_TogglePin>
}
 800127a:	bf00      	nop
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	20000094 	.word	0x20000094
 8001288:	0800b988 	.word	0x0800b988

0800128c <BSP_PB_Init>:
  *     @arg BUTTON_MODE_GPIO: Button will be used as simple IO
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b088      	sub	sp, #32
 8001290:	af00      	add	r7, sp, #0
 8001292:	4603      	mov	r3, r0
 8001294:	460a      	mov	r2, r1
 8001296:	71fb      	strb	r3, [r7, #7]
 8001298:	4613      	mov	r3, r2
 800129a:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 800129c:	79fb      	ldrb	r3, [r7, #7]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d10d      	bne.n	80012be <BSP_PB_Init+0x32>
 80012a2:	2300      	movs	r3, #0
 80012a4:	60bb      	str	r3, [r7, #8]
 80012a6:	4b22      	ldr	r3, [pc, #136]	@ (8001330 <BSP_PB_Init+0xa4>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012aa:	4a21      	ldr	r2, [pc, #132]	@ (8001330 <BSP_PB_Init+0xa4>)
 80012ac:	f043 0301 	orr.w	r3, r3, #1
 80012b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012b2:	4b1f      	ldr	r3, [pc, #124]	@ (8001330 <BSP_PB_Init+0xa4>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b6:	f003 0301 	and.w	r3, r3, #1
 80012ba:	60bb      	str	r3, [r7, #8]
 80012bc:	68bb      	ldr	r3, [r7, #8]

  if (ButtonMode == BUTTON_MODE_GPIO)
 80012be:	79bb      	ldrb	r3, [r7, #6]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d111      	bne.n	80012e8 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 80012c4:	2301      	movs	r3, #1
 80012c6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012c8:	2300      	movs	r3, #0
 80012ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80012cc:	2302      	movs	r3, #2
 80012ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80012d0:	2302      	movs	r3, #2
 80012d2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 80012d4:	79fb      	ldrb	r3, [r7, #7]
 80012d6:	4a17      	ldr	r2, [pc, #92]	@ (8001334 <BSP_PB_Init+0xa8>)
 80012d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012dc:	f107 020c 	add.w	r2, r7, #12
 80012e0:	4611      	mov	r1, r2
 80012e2:	4618      	mov	r0, r3
 80012e4:	f003 fae0 	bl	80048a8 <HAL_GPIO_Init>
  }

  if (ButtonMode == BUTTON_MODE_EXTI)
 80012e8:	79bb      	ldrb	r3, [r7, #6]
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d11c      	bne.n	8001328 <BSP_PB_Init+0x9c>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 80012ee:	2301      	movs	r3, #1
 80012f0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f2:	2300      	movs	r3, #0
 80012f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012f6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80012fa:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 80012fc:	79fb      	ldrb	r3, [r7, #7]
 80012fe:	4a0d      	ldr	r2, [pc, #52]	@ (8001334 <BSP_PB_Init+0xa8>)
 8001300:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001304:	f107 020c 	add.w	r2, r7, #12
 8001308:	4611      	mov	r1, r2
 800130a:	4618      	mov	r0, r3
 800130c:	f003 facc 	bl	80048a8 <HAL_GPIO_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8001310:	2306      	movs	r3, #6
 8001312:	b25b      	sxtb	r3, r3
 8001314:	2200      	movs	r2, #0
 8001316:	210f      	movs	r1, #15
 8001318:	4618      	mov	r0, r3
 800131a:	f002 fe3a 	bl	8003f92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 800131e:	2306      	movs	r3, #6
 8001320:	b25b      	sxtb	r3, r3
 8001322:	4618      	mov	r0, r3
 8001324:	f002 fe51 	bl	8003fca <HAL_NVIC_EnableIRQ>
  }
}
 8001328:	bf00      	nop
 800132a:	3720      	adds	r7, #32
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	40023800 	.word	0x40023800
 8001334:	2000009c 	.word	0x2000009c

08001338 <BSP_PB_GetState>:
  * @param  Button: Specifies the Button to be checked.
  *   This parameter should be: BUTTON_KEY
  * @retval The Button GPIO pin value.
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8001342:	79fb      	ldrb	r3, [r7, #7]
 8001344:	4a06      	ldr	r2, [pc, #24]	@ (8001360 <BSP_PB_GetState+0x28>)
 8001346:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800134a:	2201      	movs	r2, #1
 800134c:	4611      	mov	r1, r2
 800134e:	4618      	mov	r0, r3
 8001350:	f003 fc56 	bl	8004c00 <HAL_GPIO_ReadPin>
 8001354:	4603      	mov	r3, r0
}
 8001356:	4618      	mov	r0, r3
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	2000009c 	.word	0x2000009c

08001364 <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Initialization
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b08a      	sub	sp, #40	@ 0x28
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]

  I2C_HandleTypeDef *pI2cHandle;
  pI2cHandle = &I2cHandle;
#endif /* EE_M24LR64 */

  if (hi2c->Instance == DISCOVERY_I2Cx)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a33      	ldr	r2, [pc, #204]	@ (8001440 <I2Cx_MspInit+0xdc>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d15f      	bne.n	8001436 <I2Cx_MspInit+0xd2>
  {
    /* Configure the GPIOs ---------------------------------------------------*/
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 8001376:	2300      	movs	r3, #0
 8001378:	613b      	str	r3, [r7, #16]
 800137a:	4b32      	ldr	r3, [pc, #200]	@ (8001444 <I2Cx_MspInit+0xe0>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137e:	4a31      	ldr	r2, [pc, #196]	@ (8001444 <I2Cx_MspInit+0xe0>)
 8001380:	f043 0304 	orr.w	r3, r3, #4
 8001384:	6313      	str	r3, [r2, #48]	@ 0x30
 8001386:	4b2f      	ldr	r3, [pc, #188]	@ (8001444 <I2Cx_MspInit+0xe0>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800138a:	f003 0304 	and.w	r3, r3, #4
 800138e:	613b      	str	r3, [r7, #16]
 8001390:	693b      	ldr	r3, [r7, #16]
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	60fb      	str	r3, [r7, #12]
 8001396:	4b2b      	ldr	r3, [pc, #172]	@ (8001444 <I2Cx_MspInit+0xe0>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800139a:	4a2a      	ldr	r2, [pc, #168]	@ (8001444 <I2Cx_MspInit+0xe0>)
 800139c:	f043 0301 	orr.w	r3, r3, #1
 80013a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013a2:	4b28      	ldr	r3, [pc, #160]	@ (8001444 <I2Cx_MspInit+0xe0>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a6:	f003 0301 	and.w	r3, r3, #1
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	68fb      	ldr	r3, [r7, #12]

    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
 80013ae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80013b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 80013b4:	2312      	movs	r3, #18
 80013b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 80013b8:	2300      	movs	r3, #0
 80013ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 80013bc:	2302      	movs	r3, #2
 80013be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 80013c0:	2304      	movs	r3, #4
 80013c2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 80013c4:	f107 0314 	add.w	r3, r7, #20
 80013c8:	4619      	mov	r1, r3
 80013ca:	481f      	ldr	r0, [pc, #124]	@ (8001448 <I2Cx_MspInit+0xe4>)
 80013cc:	f003 fa6c 	bl	80048a8 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function  */
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
 80013d0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80013d4:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 80013d6:	f107 0314 	add.w	r3, r7, #20
 80013da:	4619      	mov	r1, r3
 80013dc:	481b      	ldr	r0, [pc, #108]	@ (800144c <I2Cx_MspInit+0xe8>)
 80013de:	f003 fa63 	bl	80048a8 <HAL_GPIO_Init>


    /* Configure the Discovery I2Cx peripheral -------------------------------*/
    /* Enable I2C3 clock */
    DISCOVERY_I2Cx_CLOCK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	60bb      	str	r3, [r7, #8]
 80013e6:	4b17      	ldr	r3, [pc, #92]	@ (8001444 <I2Cx_MspInit+0xe0>)
 80013e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ea:	4a16      	ldr	r2, [pc, #88]	@ (8001444 <I2Cx_MspInit+0xe0>)
 80013ec:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80013f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80013f2:	4b14      	ldr	r3, [pc, #80]	@ (8001444 <I2Cx_MspInit+0xe0>)
 80013f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80013fa:	60bb      	str	r3, [r7, #8]
 80013fc:	68bb      	ldr	r3, [r7, #8]

    /* Force the I2C Peripheral Clock Reset */
    DISCOVERY_I2Cx_FORCE_RESET();
 80013fe:	4b11      	ldr	r3, [pc, #68]	@ (8001444 <I2Cx_MspInit+0xe0>)
 8001400:	6a1b      	ldr	r3, [r3, #32]
 8001402:	4a10      	ldr	r2, [pc, #64]	@ (8001444 <I2Cx_MspInit+0xe0>)
 8001404:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001408:	6213      	str	r3, [r2, #32]

    /* Release the I2C Peripheral Clock Reset */
    DISCOVERY_I2Cx_RELEASE_RESET();
 800140a:	4b0e      	ldr	r3, [pc, #56]	@ (8001444 <I2Cx_MspInit+0xe0>)
 800140c:	6a1b      	ldr	r3, [r3, #32]
 800140e:	4a0d      	ldr	r2, [pc, #52]	@ (8001444 <I2Cx_MspInit+0xe0>)
 8001410:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001414:	6213      	str	r3, [r2, #32]

    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8001416:	2200      	movs	r2, #0
 8001418:	210f      	movs	r1, #15
 800141a:	2048      	movs	r0, #72	@ 0x48
 800141c:	f002 fdb9 	bl	8003f92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8001420:	2048      	movs	r0, #72	@ 0x48
 8001422:	f002 fdd2 	bl	8003fca <HAL_NVIC_EnableIRQ>

    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8001426:	2200      	movs	r2, #0
 8001428:	210f      	movs	r1, #15
 800142a:	2049      	movs	r0, #73	@ 0x49
 800142c:	f002 fdb1 	bl	8003f92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8001430:	2049      	movs	r0, #73	@ 0x49
 8001432:	f002 fdca 	bl	8003fca <HAL_NVIC_EnableIRQ>
    /* Configure and enable I2C DMA RX Channel interrupt */
    HAL_NVIC_SetPriority((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn), EEPROM_I2C_DMA_PREPRIO, 0);
    HAL_NVIC_EnableIRQ((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn));
#endif /* EE_M24LR64 */
  }
}
 8001436:	bf00      	nop
 8001438:	3728      	adds	r7, #40	@ 0x28
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	40005c00 	.word	0x40005c00
 8001444:	40023800 	.word	0x40023800
 8001448:	40020000 	.word	0x40020000
 800144c:	40020800 	.word	0x40020800

08001450 <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  if (HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8001454:	4814      	ldr	r0, [pc, #80]	@ (80014a8 <I2Cx_Init+0x58>)
 8001456:	f004 f8eb 	bl	8005630 <HAL_I2C_GetState>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d121      	bne.n	80014a4 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
 8001460:	4b11      	ldr	r3, [pc, #68]	@ (80014a8 <I2Cx_Init+0x58>)
 8001462:	4a12      	ldr	r2, [pc, #72]	@ (80014ac <I2Cx_Init+0x5c>)
 8001464:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
 8001466:	4b10      	ldr	r3, [pc, #64]	@ (80014a8 <I2Cx_Init+0x58>)
 8001468:	4a11      	ldr	r2, [pc, #68]	@ (80014b0 <I2Cx_Init+0x60>)
 800146a:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
 800146c:	4b0e      	ldr	r3, [pc, #56]	@ (80014a8 <I2Cx_Init+0x58>)
 800146e:	2200      	movs	r2, #0
 8001470:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.OwnAddress1      = 0;
 8001472:	4b0d      	ldr	r3, [pc, #52]	@ (80014a8 <I2Cx_Init+0x58>)
 8001474:	2200      	movs	r2, #0
 8001476:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001478:	4b0b      	ldr	r3, [pc, #44]	@ (80014a8 <I2Cx_Init+0x58>)
 800147a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800147e:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLED;
 8001480:	4b09      	ldr	r3, [pc, #36]	@ (80014a8 <I2Cx_Init+0x58>)
 8001482:	2200      	movs	r2, #0
 8001484:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2      = 0;
 8001486:	4b08      	ldr	r3, [pc, #32]	@ (80014a8 <I2Cx_Init+0x58>)
 8001488:	2200      	movs	r2, #0
 800148a:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLED;
 800148c:	4b06      	ldr	r3, [pc, #24]	@ (80014a8 <I2Cx_Init+0x58>)
 800148e:	2200      	movs	r2, #0
 8001490:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLED;
 8001492:	4b05      	ldr	r3, [pc, #20]	@ (80014a8 <I2Cx_Init+0x58>)
 8001494:	2200      	movs	r2, #0
 8001496:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 8001498:	4803      	ldr	r0, [pc, #12]	@ (80014a8 <I2Cx_Init+0x58>)
 800149a:	f7ff ff63 	bl	8001364 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 800149e:	4802      	ldr	r0, [pc, #8]	@ (80014a8 <I2Cx_Init+0x58>)
 80014a0:	f003 fc12 	bl	8004cc8 <HAL_I2C_Init>
  }
}
 80014a4:	bf00      	nop
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	2000024c 	.word	0x2000024c
 80014ac:	40005c00 	.word	0x40005c00
 80014b0:	000186a0 	.word	0x000186a0

080014b4 <I2Cx_ITConfig>:

/**
  * @brief  Configures Interruption pin for I2C communication.
  */
static void I2Cx_ITConfig(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b086      	sub	sp, #24
 80014b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO EXTI Clock */
  STMPE811_INT_CLK_ENABLE();
 80014ba:	2300      	movs	r3, #0
 80014bc:	603b      	str	r3, [r7, #0]
 80014be:	4b13      	ldr	r3, [pc, #76]	@ (800150c <I2Cx_ITConfig+0x58>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c2:	4a12      	ldr	r2, [pc, #72]	@ (800150c <I2Cx_ITConfig+0x58>)
 80014c4:	f043 0301 	orr.w	r3, r3, #1
 80014c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ca:	4b10      	ldr	r3, [pc, #64]	@ (800150c <I2Cx_ITConfig+0x58>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ce:	f003 0301 	and.w	r3, r3, #1
 80014d2:	603b      	str	r3, [r7, #0]
 80014d4:	683b      	ldr	r3, [r7, #0]

  GPIO_InitStruct.Pin   = STMPE811_INT_PIN;
 80014d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80014da:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 80014dc:	2301      	movs	r3, #1
 80014de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 80014e0:	2300      	movs	r3, #0
 80014e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_FALLING;
 80014e4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80014e8:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(STMPE811_INT_GPIO_PORT, &GPIO_InitStruct);
 80014ea:	1d3b      	adds	r3, r7, #4
 80014ec:	4619      	mov	r1, r3
 80014ee:	4808      	ldr	r0, [pc, #32]	@ (8001510 <I2Cx_ITConfig+0x5c>)
 80014f0:	f003 f9da 	bl	80048a8 <HAL_GPIO_Init>

  /* Enable and set GPIO EXTI Interrupt to the highest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(STMPE811_INT_EXTI), 0x0F, 0x00);
 80014f4:	2200      	movs	r2, #0
 80014f6:	210f      	movs	r1, #15
 80014f8:	2028      	movs	r0, #40	@ 0x28
 80014fa:	f002 fd4a 	bl	8003f92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(STMPE811_INT_EXTI));
 80014fe:	2028      	movs	r0, #40	@ 0x28
 8001500:	f002 fd63 	bl	8003fca <HAL_NVIC_EnableIRQ>
}
 8001504:	bf00      	nop
 8001506:	3718      	adds	r7, #24
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	40023800 	.word	0x40023800
 8001510:	40020000 	.word	0x40020000

08001514 <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written
  */
static void I2Cx_WriteData(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b088      	sub	sp, #32
 8001518:	af04      	add	r7, sp, #16
 800151a:	4603      	mov	r3, r0
 800151c:	71fb      	strb	r3, [r7, #7]
 800151e:	460b      	mov	r3, r1
 8001520:	71bb      	strb	r3, [r7, #6]
 8001522:	4613      	mov	r3, r2
 8001524:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8001526:	2300      	movs	r3, #0
 8001528:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 800152a:	79fb      	ldrb	r3, [r7, #7]
 800152c:	b299      	uxth	r1, r3
 800152e:	79bb      	ldrb	r3, [r7, #6]
 8001530:	b29a      	uxth	r2, r3
 8001532:	4b0b      	ldr	r3, [pc, #44]	@ (8001560 <I2Cx_WriteData+0x4c>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	9302      	str	r3, [sp, #8]
 8001538:	2301      	movs	r3, #1
 800153a:	9301      	str	r3, [sp, #4]
 800153c:	1d7b      	adds	r3, r7, #5
 800153e:	9300      	str	r3, [sp, #0]
 8001540:	2301      	movs	r3, #1
 8001542:	4808      	ldr	r0, [pc, #32]	@ (8001564 <I2Cx_WriteData+0x50>)
 8001544:	f003 fd48 	bl	8004fd8 <HAL_I2C_Mem_Write>
 8001548:	4603      	mov	r3, r0
 800154a:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if (status != HAL_OK)
 800154c:	7bfb      	ldrb	r3, [r7, #15]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <I2Cx_WriteData+0x42>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8001552:	f000 f863 	bl	800161c <I2Cx_Error>
  }
}
 8001556:	bf00      	nop
 8001558:	3710      	adds	r7, #16
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	200000a0 	.word	0x200000a0
 8001564:	2000024c 	.word	0x2000024c

08001568 <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint8_t Addr, uint8_t Reg)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b088      	sub	sp, #32
 800156c:	af04      	add	r7, sp, #16
 800156e:	4603      	mov	r3, r0
 8001570:	460a      	mov	r2, r1
 8001572:	71fb      	strb	r3, [r7, #7]
 8001574:	4613      	mov	r3, r2
 8001576:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001578:	2300      	movs	r3, #0
 800157a:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 800157c:	2300      	movs	r3, #0
 800157e:	73bb      	strb	r3, [r7, #14]

  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8001580:	79fb      	ldrb	r3, [r7, #7]
 8001582:	b299      	uxth	r1, r3
 8001584:	79bb      	ldrb	r3, [r7, #6]
 8001586:	b29a      	uxth	r2, r3
 8001588:	4b0b      	ldr	r3, [pc, #44]	@ (80015b8 <I2Cx_ReadData+0x50>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	9302      	str	r3, [sp, #8]
 800158e:	2301      	movs	r3, #1
 8001590:	9301      	str	r3, [sp, #4]
 8001592:	f107 030e 	add.w	r3, r7, #14
 8001596:	9300      	str	r3, [sp, #0]
 8001598:	2301      	movs	r3, #1
 800159a:	4808      	ldr	r0, [pc, #32]	@ (80015bc <I2Cx_ReadData+0x54>)
 800159c:	f003 fe16 	bl	80051cc <HAL_I2C_Mem_Read>
 80015a0:	4603      	mov	r3, r0
 80015a2:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if (status != HAL_OK)
 80015a4:	7bfb      	ldrb	r3, [r7, #15]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <I2Cx_ReadData+0x46>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 80015aa:	f000 f837 	bl	800161c <I2Cx_Error>

  }
  return value;
 80015ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3710      	adds	r7, #16
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	200000a0 	.word	0x200000a0
 80015bc:	2000024c 	.word	0x2000024c

080015c0 <I2Cx_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static uint8_t I2Cx_ReadBuffer(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b088      	sub	sp, #32
 80015c4:	af04      	add	r7, sp, #16
 80015c6:	603a      	str	r2, [r7, #0]
 80015c8:	461a      	mov	r2, r3
 80015ca:	4603      	mov	r3, r0
 80015cc:	71fb      	strb	r3, [r7, #7]
 80015ce:	460b      	mov	r3, r1
 80015d0:	71bb      	strb	r3, [r7, #6]
 80015d2:	4613      	mov	r3, r2
 80015d4:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015d6:	2300      	movs	r3, #0
 80015d8:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2cxTimeout);
 80015da:	79fb      	ldrb	r3, [r7, #7]
 80015dc:	b299      	uxth	r1, r3
 80015de:	79bb      	ldrb	r3, [r7, #6]
 80015e0:	b29a      	uxth	r2, r3
 80015e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001614 <I2Cx_ReadBuffer+0x54>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	9302      	str	r3, [sp, #8]
 80015e8:	88bb      	ldrh	r3, [r7, #4]
 80015ea:	9301      	str	r3, [sp, #4]
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	9300      	str	r3, [sp, #0]
 80015f0:	2301      	movs	r3, #1
 80015f2:	4809      	ldr	r0, [pc, #36]	@ (8001618 <I2Cx_ReadBuffer+0x58>)
 80015f4:	f003 fdea 	bl	80051cc <HAL_I2C_Mem_Read>
 80015f8:	4603      	mov	r3, r0
 80015fa:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if (status == HAL_OK)
 80015fc:	7bfb      	ldrb	r3, [r7, #15]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d101      	bne.n	8001606 <I2Cx_ReadBuffer+0x46>
  {
    return 0;
 8001602:	2300      	movs	r3, #0
 8001604:	e002      	b.n	800160c <I2Cx_ReadBuffer+0x4c>
  }
  else
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8001606:	f000 f809 	bl	800161c <I2Cx_Error>

    return 1;
 800160a:	2301      	movs	r3, #1
  }
}
 800160c:	4618      	mov	r0, r3
 800160e:	3710      	adds	r7, #16
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	200000a0 	.word	0x200000a0
 8001618:	2000024c 	.word	0x2000024c

0800161c <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function
  */
static void I2Cx_Error(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8001620:	4803      	ldr	r0, [pc, #12]	@ (8001630 <I2Cx_Error+0x14>)
 8001622:	f003 fc95 	bl	8004f50 <HAL_I2C_DeInit>

  /* Re-Initialize the SPI communication BUS */
  I2Cx_Init();
 8001626:	f7ff ff13 	bl	8001450 <I2Cx_Init>
}
 800162a:	bf00      	nop
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	2000024c 	.word	0x2000024c

08001634 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  if (HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001638:	4819      	ldr	r0, [pc, #100]	@ (80016a0 <SPIx_Init+0x6c>)
 800163a:	f006 fbce 	bl	8007dda <HAL_SPI_GetState>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d12b      	bne.n	800169c <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8001644:	4b16      	ldr	r3, [pc, #88]	@ (80016a0 <SPIx_Init+0x6c>)
 8001646:	4a17      	ldr	r2, [pc, #92]	@ (80016a4 <SPIx_Init+0x70>)
 8001648:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800164a:	4b15      	ldr	r3, [pc, #84]	@ (80016a0 <SPIx_Init+0x6c>)
 800164c:	2218      	movs	r2, #24
 800164e:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8001650:	4b13      	ldr	r3, [pc, #76]	@ (80016a0 <SPIx_Init+0x6c>)
 8001652:	2200      	movs	r2, #0
 8001654:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8001656:	4b12      	ldr	r3, [pc, #72]	@ (80016a0 <SPIx_Init+0x6c>)
 8001658:	2200      	movs	r2, #0
 800165a:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 800165c:	4b10      	ldr	r3, [pc, #64]	@ (80016a0 <SPIx_Init+0x6c>)
 800165e:	2200      	movs	r2, #0
 8001660:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8001662:	4b0f      	ldr	r3, [pc, #60]	@ (80016a0 <SPIx_Init+0x6c>)
 8001664:	2200      	movs	r2, #0
 8001666:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8001668:	4b0d      	ldr	r3, [pc, #52]	@ (80016a0 <SPIx_Init+0x6c>)
 800166a:	2207      	movs	r2, #7
 800166c:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 800166e:	4b0c      	ldr	r3, [pc, #48]	@ (80016a0 <SPIx_Init+0x6c>)
 8001670:	2200      	movs	r2, #0
 8001672:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8001674:	4b0a      	ldr	r3, [pc, #40]	@ (80016a0 <SPIx_Init+0x6c>)
 8001676:	2200      	movs	r2, #0
 8001678:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 800167a:	4b09      	ldr	r3, [pc, #36]	@ (80016a0 <SPIx_Init+0x6c>)
 800167c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001680:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8001682:	4b07      	ldr	r3, [pc, #28]	@ (80016a0 <SPIx_Init+0x6c>)
 8001684:	2200      	movs	r2, #0
 8001686:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8001688:	4b05      	ldr	r3, [pc, #20]	@ (80016a0 <SPIx_Init+0x6c>)
 800168a:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800168e:	605a      	str	r2, [r3, #4]

    SPIx_MspInit(&SpiHandle);
 8001690:	4803      	ldr	r0, [pc, #12]	@ (80016a0 <SPIx_Init+0x6c>)
 8001692:	f000 f873 	bl	800177c <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8001696:	4802      	ldr	r0, [pc, #8]	@ (80016a0 <SPIx_Init+0x6c>)
 8001698:	f005 fd95 	bl	80071c6 <HAL_SPI_Init>
  }
}
 800169c:	bf00      	nop
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	200002a0 	.word	0x200002a0
 80016a4:	40015000 	.word	0x40015000

080016a8 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	4603      	mov	r3, r0
 80016b0:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 80016b2:	2300      	movs	r3, #0
 80016b4:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;

  status = HAL_SPI_Receive(&SpiHandle, (uint8_t *) &readvalue, ReadSize, SpixTimeout);
 80016b6:	79fb      	ldrb	r3, [r7, #7]
 80016b8:	b29a      	uxth	r2, r3
 80016ba:	4b09      	ldr	r3, [pc, #36]	@ (80016e0 <SPIx_Read+0x38>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f107 0108 	add.w	r1, r7, #8
 80016c2:	4808      	ldr	r0, [pc, #32]	@ (80016e4 <SPIx_Read+0x3c>)
 80016c4:	f005 ffb1 	bl	800762a <HAL_SPI_Receive>
 80016c8:	4603      	mov	r3, r0
 80016ca:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if (status != HAL_OK)
 80016cc:	7bfb      	ldrb	r3, [r7, #15]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 80016d2:	f000 f847 	bl	8001764 <SPIx_Error>
  }

  return readvalue;
 80016d6:	68bb      	ldr	r3, [r7, #8]
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3710      	adds	r7, #16
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	200000a4 	.word	0x200000a4
 80016e4:	200002a0 	.word	0x200002a0

080016e8 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	4603      	mov	r3, r0
 80016f0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80016f2:	2300      	movs	r3, #0
 80016f4:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t *) &Value, 1, SpixTimeout);
 80016f6:	4b09      	ldr	r3, [pc, #36]	@ (800171c <SPIx_Write+0x34>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	1db9      	adds	r1, r7, #6
 80016fc:	2201      	movs	r2, #1
 80016fe:	4808      	ldr	r0, [pc, #32]	@ (8001720 <SPIx_Write+0x38>)
 8001700:	f005 fe2e 	bl	8007360 <HAL_SPI_Transmit>
 8001704:	4603      	mov	r3, r0
 8001706:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if (status != HAL_OK)
 8001708:	7bfb      	ldrb	r3, [r7, #15]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 800170e:	f000 f829 	bl	8001764 <SPIx_Error>
  }
}
 8001712:	bf00      	nop
 8001714:	3710      	adds	r7, #16
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	200000a4 	.word	0x200000a4
 8001720:	200002a0 	.word	0x200002a0

08001724 <SPIx_WriteRead>:
  *         from the SPI bus.
  * @param  Byte: Byte send.
  * @retval The received byte value
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b086      	sub	sp, #24
 8001728:	af02      	add	r7, sp, #8
 800172a:	4603      	mov	r3, r0
 800172c:	71fb      	strb	r3, [r7, #7]
  uint8_t receivedbyte = 0;
 800172e:	2300      	movs	r3, #0
 8001730:	73fb      	strb	r3, [r7, #15]

  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  if (HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t *) &Byte, (uint8_t *) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 8001732:	4b0a      	ldr	r3, [pc, #40]	@ (800175c <SPIx_WriteRead+0x38>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f107 020f 	add.w	r2, r7, #15
 800173a:	1df9      	adds	r1, r7, #7
 800173c:	9300      	str	r3, [sp, #0]
 800173e:	2301      	movs	r3, #1
 8001740:	4807      	ldr	r0, [pc, #28]	@ (8001760 <SPIx_WriteRead+0x3c>)
 8001742:	f006 f904 	bl	800794e <HAL_SPI_TransmitReceive>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <SPIx_WriteRead+0x2c>
  {
    SPIx_Error();
 800174c:	f000 f80a 	bl	8001764 <SPIx_Error>
  }

  return receivedbyte;
 8001750:	7bfb      	ldrb	r3, [r7, #15]
}
 8001752:	4618      	mov	r0, r3
 8001754:	3710      	adds	r7, #16
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	200000a4 	.word	0x200000a4
 8001760:	200002a0 	.word	0x200002a0

08001764 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8001768:	4803      	ldr	r0, [pc, #12]	@ (8001778 <SPIx_Error+0x14>)
 800176a:	f005 fdbd 	bl	80072e8 <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 800176e:	f7ff ff61 	bl	8001634 <SPIx_Init>
}
 8001772:	bf00      	nop
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	200002a0 	.word	0x200002a0

0800177c <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b08a      	sub	sp, #40	@ 0x28
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8001784:	2300      	movs	r3, #0
 8001786:	613b      	str	r3, [r7, #16]
 8001788:	4b17      	ldr	r3, [pc, #92]	@ (80017e8 <SPIx_MspInit+0x6c>)
 800178a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800178c:	4a16      	ldr	r2, [pc, #88]	@ (80017e8 <SPIx_MspInit+0x6c>)
 800178e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001792:	6453      	str	r3, [r2, #68]	@ 0x44
 8001794:	4b14      	ldr	r3, [pc, #80]	@ (80017e8 <SPIx_MspInit+0x6c>)
 8001796:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001798:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800179c:	613b      	str	r3, [r7, #16]
 800179e:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 80017a0:	2300      	movs	r3, #0
 80017a2:	60fb      	str	r3, [r7, #12]
 80017a4:	4b10      	ldr	r3, [pc, #64]	@ (80017e8 <SPIx_MspInit+0x6c>)
 80017a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a8:	4a0f      	ldr	r2, [pc, #60]	@ (80017e8 <SPIx_MspInit+0x6c>)
 80017aa:	f043 0320 	orr.w	r3, r3, #32
 80017ae:	6313      	str	r3, [r2, #48]	@ 0x30
 80017b0:	4b0d      	ldr	r3, [pc, #52]	@ (80017e8 <SPIx_MspInit+0x6c>)
 80017b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017b4:	f003 0320 	and.w	r3, r3, #32
 80017b8:	60fb      	str	r3, [r7, #12]
 80017ba:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 80017bc:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80017c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 80017c2:	2302      	movs	r3, #2
 80017c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 80017c6:	2302      	movs	r3, #2
 80017c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 80017ca:	2301      	movs	r3, #1
 80017cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 80017ce:	2305      	movs	r3, #5
 80017d0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);
 80017d2:	f107 0314 	add.w	r3, r7, #20
 80017d6:	4619      	mov	r1, r3
 80017d8:	4804      	ldr	r0, [pc, #16]	@ (80017ec <SPIx_MspInit+0x70>)
 80017da:	f003 f865 	bl	80048a8 <HAL_GPIO_Init>
}
 80017de:	bf00      	nop
 80017e0:	3728      	adds	r7, #40	@ 0x28
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	40023800 	.word	0x40023800
 80017ec:	40021400 	.word	0x40021400

080017f0 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b088      	sub	sp, #32
 80017f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if (Is_LCD_IO_Initialized == 0)
 80017f6:	4b36      	ldr	r3, [pc, #216]	@ (80018d0 <LCD_IO_Init+0xe0>)
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d164      	bne.n	80018c8 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 80017fe:	4b34      	ldr	r3, [pc, #208]	@ (80018d0 <LCD_IO_Init+0xe0>)
 8001800:	2201      	movs	r2, #1
 8001802:	701a      	strb	r2, [r3, #0]

    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8001804:	2300      	movs	r3, #0
 8001806:	60bb      	str	r3, [r7, #8]
 8001808:	4b32      	ldr	r3, [pc, #200]	@ (80018d4 <LCD_IO_Init+0xe4>)
 800180a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800180c:	4a31      	ldr	r2, [pc, #196]	@ (80018d4 <LCD_IO_Init+0xe4>)
 800180e:	f043 0308 	orr.w	r3, r3, #8
 8001812:	6313      	str	r3, [r2, #48]	@ 0x30
 8001814:	4b2f      	ldr	r3, [pc, #188]	@ (80018d4 <LCD_IO_Init+0xe4>)
 8001816:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001818:	f003 0308 	and.w	r3, r3, #8
 800181c:	60bb      	str	r3, [r7, #8]
 800181e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8001820:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001824:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001826:	2301      	movs	r3, #1
 8001828:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800182a:	2300      	movs	r3, #0
 800182c:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800182e:	2302      	movs	r3, #2
 8001830:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8001832:	f107 030c 	add.w	r3, r7, #12
 8001836:	4619      	mov	r1, r3
 8001838:	4827      	ldr	r0, [pc, #156]	@ (80018d8 <LCD_IO_Init+0xe8>)
 800183a:	f003 f835 	bl	80048a8 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 800183e:	2300      	movs	r3, #0
 8001840:	607b      	str	r3, [r7, #4]
 8001842:	4b24      	ldr	r3, [pc, #144]	@ (80018d4 <LCD_IO_Init+0xe4>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001846:	4a23      	ldr	r2, [pc, #140]	@ (80018d4 <LCD_IO_Init+0xe4>)
 8001848:	f043 0308 	orr.w	r3, r3, #8
 800184c:	6313      	str	r3, [r2, #48]	@ 0x30
 800184e:	4b21      	ldr	r3, [pc, #132]	@ (80018d4 <LCD_IO_Init+0xe4>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001852:	f003 0308 	and.w	r3, r3, #8
 8001856:	607b      	str	r3, [r7, #4]
 8001858:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 800185a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800185e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001860:	2301      	movs	r3, #1
 8001862:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001864:	2300      	movs	r3, #0
 8001866:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001868:	2302      	movs	r3, #2
 800186a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 800186c:	f107 030c 	add.w	r3, r7, #12
 8001870:	4619      	mov	r1, r3
 8001872:	4819      	ldr	r0, [pc, #100]	@ (80018d8 <LCD_IO_Init+0xe8>)
 8001874:	f003 f818 	bl	80048a8 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8001878:	2300      	movs	r3, #0
 800187a:	603b      	str	r3, [r7, #0]
 800187c:	4b15      	ldr	r3, [pc, #84]	@ (80018d4 <LCD_IO_Init+0xe4>)
 800187e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001880:	4a14      	ldr	r2, [pc, #80]	@ (80018d4 <LCD_IO_Init+0xe4>)
 8001882:	f043 0304 	orr.w	r3, r3, #4
 8001886:	6313      	str	r3, [r2, #48]	@ 0x30
 8001888:	4b12      	ldr	r3, [pc, #72]	@ (80018d4 <LCD_IO_Init+0xe4>)
 800188a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800188c:	f003 0304 	and.w	r3, r3, #4
 8001890:	603b      	str	r3, [r7, #0]
 8001892:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8001894:	2304      	movs	r3, #4
 8001896:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001898:	2301      	movs	r3, #1
 800189a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800189c:	2300      	movs	r3, #0
 800189e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80018a0:	2302      	movs	r3, #2
 80018a2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80018a4:	f107 030c 	add.w	r3, r7, #12
 80018a8:	4619      	mov	r1, r3
 80018aa:	480c      	ldr	r0, [pc, #48]	@ (80018dc <LCD_IO_Init+0xec>)
 80018ac:	f002 fffc 	bl	80048a8 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 80018b0:	2200      	movs	r2, #0
 80018b2:	2104      	movs	r1, #4
 80018b4:	4809      	ldr	r0, [pc, #36]	@ (80018dc <LCD_IO_Init+0xec>)
 80018b6:	f003 f9bb 	bl	8004c30 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 80018ba:	2201      	movs	r2, #1
 80018bc:	2104      	movs	r1, #4
 80018be:	4807      	ldr	r0, [pc, #28]	@ (80018dc <LCD_IO_Init+0xec>)
 80018c0:	f003 f9b6 	bl	8004c30 <HAL_GPIO_WritePin>

    SPIx_Init();
 80018c4:	f7ff feb6 	bl	8001634 <SPIx_Init>
  }
}
 80018c8:	bf00      	nop
 80018ca:	3720      	adds	r7, #32
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	200002f8 	.word	0x200002f8
 80018d4:	40023800 	.word	0x40023800
 80018d8:	40020c00 	.word	0x40020c00
 80018dc:	40020800 	.word	0x40020800

080018e0 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	4603      	mov	r3, r0
 80018e8:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80018ea:	2201      	movs	r2, #1
 80018ec:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80018f0:	480a      	ldr	r0, [pc, #40]	@ (800191c <LCD_IO_WriteData+0x3c>)
 80018f2:	f003 f99d 	bl	8004c30 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 80018f6:	2200      	movs	r2, #0
 80018f8:	2104      	movs	r1, #4
 80018fa:	4809      	ldr	r0, [pc, #36]	@ (8001920 <LCD_IO_WriteData+0x40>)
 80018fc:	f003 f998 	bl	8004c30 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8001900:	88fb      	ldrh	r3, [r7, #6]
 8001902:	4618      	mov	r0, r3
 8001904:	f7ff fef0 	bl	80016e8 <SPIx_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001908:	2201      	movs	r2, #1
 800190a:	2104      	movs	r1, #4
 800190c:	4804      	ldr	r0, [pc, #16]	@ (8001920 <LCD_IO_WriteData+0x40>)
 800190e:	f003 f98f 	bl	8004c30 <HAL_GPIO_WritePin>
}
 8001912:	bf00      	nop
 8001914:	3708      	adds	r7, #8
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	40020c00 	.word	0x40020c00
 8001920:	40020800 	.word	0x40020800

08001924 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	4603      	mov	r3, r0
 800192c:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800192e:	2200      	movs	r2, #0
 8001930:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001934:	480a      	ldr	r0, [pc, #40]	@ (8001960 <LCD_IO_WriteReg+0x3c>)
 8001936:	f003 f97b 	bl	8004c30 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 800193a:	2200      	movs	r2, #0
 800193c:	2104      	movs	r1, #4
 800193e:	4809      	ldr	r0, [pc, #36]	@ (8001964 <LCD_IO_WriteReg+0x40>)
 8001940:	f003 f976 	bl	8004c30 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8001944:	79fb      	ldrb	r3, [r7, #7]
 8001946:	b29b      	uxth	r3, r3
 8001948:	4618      	mov	r0, r3
 800194a:	f7ff fecd 	bl	80016e8 <SPIx_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800194e:	2201      	movs	r2, #1
 8001950:	2104      	movs	r1, #4
 8001952:	4804      	ldr	r0, [pc, #16]	@ (8001964 <LCD_IO_WriteReg+0x40>)
 8001954:	f003 f96c 	bl	8004c30 <HAL_GPIO_WritePin>
}
 8001958:	bf00      	nop
 800195a:	3708      	adds	r7, #8
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	40020c00 	.word	0x40020c00
 8001964:	40020800 	.word	0x40020800

08001968 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0
 800196e:	4603      	mov	r3, r0
 8001970:	460a      	mov	r2, r1
 8001972:	80fb      	strh	r3, [r7, #6]
 8001974:	4613      	mov	r3, r2
 8001976:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8001978:	2300      	movs	r3, #0
 800197a:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 800197c:	2200      	movs	r2, #0
 800197e:	2104      	movs	r1, #4
 8001980:	4810      	ldr	r0, [pc, #64]	@ (80019c4 <LCD_IO_ReadData+0x5c>)
 8001982:	f003 f955 	bl	8004c30 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8001986:	2200      	movs	r2, #0
 8001988:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800198c:	480e      	ldr	r0, [pc, #56]	@ (80019c8 <LCD_IO_ReadData+0x60>)
 800198e:	f003 f94f 	bl	8004c30 <HAL_GPIO_WritePin>

  SPIx_Write(RegValue);
 8001992:	88fb      	ldrh	r3, [r7, #6]
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff fea7 	bl	80016e8 <SPIx_Write>

  readvalue = SPIx_Read(ReadSize);
 800199a:	797b      	ldrb	r3, [r7, #5]
 800199c:	4618      	mov	r0, r3
 800199e:	f7ff fe83 	bl	80016a8 <SPIx_Read>
 80019a2:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80019a4:	2201      	movs	r2, #1
 80019a6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80019aa:	4807      	ldr	r0, [pc, #28]	@ (80019c8 <LCD_IO_ReadData+0x60>)
 80019ac:	f003 f940 	bl	8004c30 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80019b0:	2201      	movs	r2, #1
 80019b2:	2104      	movs	r1, #4
 80019b4:	4803      	ldr	r0, [pc, #12]	@ (80019c4 <LCD_IO_ReadData+0x5c>)
 80019b6:	f003 f93b 	bl	8004c30 <HAL_GPIO_WritePin>

  return readvalue;
 80019ba:	68fb      	ldr	r3, [r7, #12]
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3710      	adds	r7, #16
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	40020800 	.word	0x40020800
 80019c8:	40020c00 	.word	0x40020c00

080019cc <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	f002 f9dd 	bl	8003d94 <HAL_Delay>
}
 80019da:	bf00      	nop
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}

080019e2 <IOE_Init>:

/**
  * @brief  IOE Low Level Initialization.
  */
void IOE_Init(void)
{
 80019e2:	b580      	push	{r7, lr}
 80019e4:	af00      	add	r7, sp, #0
  I2Cx_Init();
 80019e6:	f7ff fd33 	bl	8001450 <I2Cx_Init>
}
 80019ea:	bf00      	nop
 80019ec:	bd80      	pop	{r7, pc}

080019ee <IOE_ITConfig>:

/**
  * @brief  IOE Low Level Interrupt configuration.
  */
void IOE_ITConfig(void)
{
 80019ee:	b580      	push	{r7, lr}
 80019f0:	af00      	add	r7, sp, #0
  I2Cx_ITConfig();
 80019f2:	f7ff fd5f 	bl	80014b4 <I2Cx_ITConfig>
}
 80019f6:	bf00      	nop
 80019f8:	bd80      	pop	{r7, pc}

080019fa <IOE_Write>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address
  * @param  Value: Data to be written
  */
void IOE_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b082      	sub	sp, #8
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	4603      	mov	r3, r0
 8001a02:	71fb      	strb	r3, [r7, #7]
 8001a04:	460b      	mov	r3, r1
 8001a06:	71bb      	strb	r3, [r7, #6]
 8001a08:	4613      	mov	r3, r2
 8001a0a:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 8001a0c:	797a      	ldrb	r2, [r7, #5]
 8001a0e:	79b9      	ldrb	r1, [r7, #6]
 8001a10:	79fb      	ldrb	r3, [r7, #7]
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7ff fd7e 	bl	8001514 <I2Cx_WriteData>
}
 8001a18:	bf00      	nop
 8001a1a:	3708      	adds	r7, #8
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}

08001a20 <IOE_Read>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address
  * @retval The read data
  */
uint8_t IOE_Read(uint8_t Addr, uint8_t Reg)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	4603      	mov	r3, r0
 8001a28:	460a      	mov	r2, r1
 8001a2a:	71fb      	strb	r3, [r7, #7]
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 8001a30:	79ba      	ldrb	r2, [r7, #6]
 8001a32:	79fb      	ldrb	r3, [r7, #7]
 8001a34:	4611      	mov	r1, r2
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7ff fd96 	bl	8001568 <I2Cx_ReadData>
 8001a3c:	4603      	mov	r3, r0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3708      	adds	r7, #8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}

08001a46 <IOE_ReadMultiple>:
  * @param  pBuffer: pointer to data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
uint16_t IOE_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8001a46:	b580      	push	{r7, lr}
 8001a48:	b082      	sub	sp, #8
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	603a      	str	r2, [r7, #0]
 8001a4e:	461a      	mov	r2, r3
 8001a50:	4603      	mov	r3, r0
 8001a52:	71fb      	strb	r3, [r7, #7]
 8001a54:	460b      	mov	r3, r1
 8001a56:	71bb      	strb	r3, [r7, #6]
 8001a58:	4613      	mov	r3, r2
 8001a5a:	80bb      	strh	r3, [r7, #4]
  return I2Cx_ReadBuffer(Addr, Reg, pBuffer, Length);
 8001a5c:	88bb      	ldrh	r3, [r7, #4]
 8001a5e:	79b9      	ldrb	r1, [r7, #6]
 8001a60:	79f8      	ldrb	r0, [r7, #7]
 8001a62:	683a      	ldr	r2, [r7, #0]
 8001a64:	f7ff fdac 	bl	80015c0 <I2Cx_ReadBuffer>
 8001a68:	4603      	mov	r3, r0
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}

08001a72 <IOE_Delay>:
/**
  * @brief  IOE Delay.
  * @param  Delay in ms
  */
void IOE_Delay(uint32_t Delay)
{
 8001a72:	b580      	push	{r7, lr}
 8001a74:	b082      	sub	sp, #8
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f002 f98a 	bl	8003d94 <HAL_Delay>
}
 8001a80:	bf00      	nop
 8001a82:	3708      	adds	r7, #8
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <GYRO_IO_Init>:

/**
  * @brief  Configures the Gyroscope SPI interface.
  */
void GYRO_IO_Init(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b088      	sub	sp, #32
 8001a8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Configure the Gyroscope Control pins ------------------------------------*/
  /* Enable CS GPIO clock and Configure GPIO PIN for Gyroscope Chip select */
  GYRO_CS_GPIO_CLK_ENABLE();
 8001a8e:	2300      	movs	r3, #0
 8001a90:	60bb      	str	r3, [r7, #8]
 8001a92:	4b20      	ldr	r3, [pc, #128]	@ (8001b14 <GYRO_IO_Init+0x8c>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a96:	4a1f      	ldr	r2, [pc, #124]	@ (8001b14 <GYRO_IO_Init+0x8c>)
 8001a98:	f043 0304 	orr.w	r3, r3, #4
 8001a9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a9e:	4b1d      	ldr	r3, [pc, #116]	@ (8001b14 <GYRO_IO_Init+0x8c>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa2:	f003 0304 	and.w	r3, r3, #4
 8001aa6:	60bb      	str	r3, [r7, #8]
 8001aa8:	68bb      	ldr	r3, [r7, #8]
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
 8001aaa:	2302      	movs	r3, #2
 8001aac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 8001aba:	f107 030c 	add.w	r3, r7, #12
 8001abe:	4619      	mov	r1, r3
 8001ac0:	4815      	ldr	r0, [pc, #84]	@ (8001b18 <GYRO_IO_Init+0x90>)
 8001ac2:	f002 fef1 	bl	80048a8 <HAL_GPIO_Init>

  /* Deselect: Chip Select high */
  GYRO_CS_HIGH();
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	2102      	movs	r1, #2
 8001aca:	4813      	ldr	r0, [pc, #76]	@ (8001b18 <GYRO_IO_Init+0x90>)
 8001acc:	f003 f8b0 	bl	8004c30 <HAL_GPIO_WritePin>

  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	607b      	str	r3, [r7, #4]
 8001ad4:	4b0f      	ldr	r3, [pc, #60]	@ (8001b14 <GYRO_IO_Init+0x8c>)
 8001ad6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ad8:	4a0e      	ldr	r2, [pc, #56]	@ (8001b14 <GYRO_IO_Init+0x8c>)
 8001ada:	f043 0301 	orr.w	r3, r3, #1
 8001ade:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ae0:	4b0c      	ldr	r3, [pc, #48]	@ (8001b14 <GYRO_IO_Init+0x8c>)
 8001ae2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ae4:	f003 0301 	and.w	r3, r3, #1
 8001ae8:	607b      	str	r3, [r7, #4]
 8001aea:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
 8001aec:	2306      	movs	r3, #6
 8001aee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8001af0:	2300      	movs	r3, #0
 8001af2:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8001af4:	2302      	movs	r3, #2
 8001af6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001af8:	2300      	movs	r3, #0
 8001afa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 8001afc:	f107 030c 	add.w	r3, r7, #12
 8001b00:	4619      	mov	r1, r3
 8001b02:	4806      	ldr	r0, [pc, #24]	@ (8001b1c <GYRO_IO_Init+0x94>)
 8001b04:	f002 fed0 	bl	80048a8 <HAL_GPIO_Init>

  SPIx_Init();
 8001b08:	f7ff fd94 	bl	8001634 <SPIx_Init>
}
 8001b0c:	bf00      	nop
 8001b0e:	3720      	adds	r7, #32
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	40023800 	.word	0x40023800
 8001b18:	40020800 	.word	0x40020800
 8001b1c:	40020000 	.word	0x40020000

08001b20 <GYRO_IO_Write>:
  * @param  pBuffer: Pointer to the buffer containing the data to be written to the Gyroscope.
  * @param  WriteAddr: Gyroscope's internal address to write to.
  * @param  NumByteToWrite: Number of bytes to write.
  */
void GYRO_IO_Write(uint8_t *pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	460b      	mov	r3, r1
 8001b2a:	70fb      	strb	r3, [r7, #3]
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	803b      	strh	r3, [r7, #0]
  /* Configure the MS bit:
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if (NumByteToWrite > 0x01)
 8001b30:	883b      	ldrh	r3, [r7, #0]
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d903      	bls.n	8001b3e <GYRO_IO_Write+0x1e>
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 8001b36:	78fb      	ldrb	r3, [r7, #3]
 8001b38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001b3c:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8001b3e:	2200      	movs	r2, #0
 8001b40:	2102      	movs	r1, #2
 8001b42:	480f      	ldr	r0, [pc, #60]	@ (8001b80 <GYRO_IO_Write+0x60>)
 8001b44:	f003 f874 	bl	8004c30 <HAL_GPIO_WritePin>

  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 8001b48:	78fb      	ldrb	r3, [r7, #3]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7ff fdea 	bl	8001724 <SPIx_WriteRead>

  /* Send the data that will be written into the device (MSB First) */
  while (NumByteToWrite >= 0x01)
 8001b50:	e00a      	b.n	8001b68 <GYRO_IO_Write+0x48>
  {
    SPIx_WriteRead(*pBuffer);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7ff fde4 	bl	8001724 <SPIx_WriteRead>
    NumByteToWrite--;
 8001b5c:	883b      	ldrh	r3, [r7, #0]
 8001b5e:	3b01      	subs	r3, #1
 8001b60:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	3301      	adds	r3, #1
 8001b66:	607b      	str	r3, [r7, #4]
  while (NumByteToWrite >= 0x01)
 8001b68:	883b      	ldrh	r3, [r7, #0]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d1f1      	bne.n	8001b52 <GYRO_IO_Write+0x32>
  }

  /* Set chip select High at the end of the transmission */
  GYRO_CS_HIGH();
 8001b6e:	2201      	movs	r2, #1
 8001b70:	2102      	movs	r1, #2
 8001b72:	4803      	ldr	r0, [pc, #12]	@ (8001b80 <GYRO_IO_Write+0x60>)
 8001b74:	f003 f85c 	bl	8004c30 <HAL_GPIO_WritePin>
}
 8001b78:	bf00      	nop
 8001b7a:	3708      	adds	r7, #8
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	40020800 	.word	0x40020800

08001b84 <GYRO_IO_Read>:
  * @param  pBuffer: Pointer to the buffer that receives the data read from the Gyroscope.
  * @param  ReadAddr: Gyroscope's internal address to read from.
  * @param  NumByteToRead: Number of bytes to read from the Gyroscope.
  */
void GYRO_IO_Read(uint8_t *pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	460b      	mov	r3, r1
 8001b8e:	70fb      	strb	r3, [r7, #3]
 8001b90:	4613      	mov	r3, r2
 8001b92:	803b      	strh	r3, [r7, #0]
  if (NumByteToRead > 0x01)
 8001b94:	883b      	ldrh	r3, [r7, #0]
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d904      	bls.n	8001ba4 <GYRO_IO_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 8001b9a:	78fb      	ldrb	r3, [r7, #3]
 8001b9c:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 8001ba0:	70fb      	strb	r3, [r7, #3]
 8001ba2:	e003      	b.n	8001bac <GYRO_IO_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 8001ba4:	78fb      	ldrb	r3, [r7, #3]
 8001ba6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001baa:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8001bac:	2200      	movs	r2, #0
 8001bae:	2102      	movs	r1, #2
 8001bb0:	4810      	ldr	r0, [pc, #64]	@ (8001bf4 <GYRO_IO_Read+0x70>)
 8001bb2:	f003 f83d 	bl	8004c30 <HAL_GPIO_WritePin>

  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 8001bb6:	78fb      	ldrb	r3, [r7, #3]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7ff fdb3 	bl	8001724 <SPIx_WriteRead>

  /* Receive the data that will be read from the device (MSB First) */
  while (NumByteToRead > 0x00)
 8001bbe:	e00c      	b.n	8001bda <GYRO_IO_Read+0x56>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to Gyroscope (Slave device) */
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 8001bc0:	2000      	movs	r0, #0
 8001bc2:	f7ff fdaf 	bl	8001724 <SPIx_WriteRead>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	461a      	mov	r2, r3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 8001bce:	883b      	ldrh	r3, [r7, #0]
 8001bd0:	3b01      	subs	r3, #1
 8001bd2:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	607b      	str	r3, [r7, #4]
  while (NumByteToRead > 0x00)
 8001bda:	883b      	ldrh	r3, [r7, #0]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d1ef      	bne.n	8001bc0 <GYRO_IO_Read+0x3c>
  }

  /* Set chip select High at the end of the transmission */
  GYRO_CS_HIGH();
 8001be0:	2201      	movs	r2, #1
 8001be2:	2102      	movs	r1, #2
 8001be4:	4803      	ldr	r0, [pc, #12]	@ (8001bf4 <GYRO_IO_Read+0x70>)
 8001be6:	f003 f823 	bl	8004c30 <HAL_GPIO_WritePin>
}
 8001bea:	bf00      	nop
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	40020800 	.word	0x40020800

08001bf8 <BSP_GYRO_Init>:
/**
  * @brief  Set gyroscope Initialization.
  * @retval GYRO_OK if no problem during initialization
  */
uint8_t BSP_GYRO_Init(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8001c02:	2300      	movs	r3, #0
 8001c04:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef         Gyro_InitStructure;
  GYRO_FilterConfigTypeDef Gyro_FilterStructure = {0, 0};
 8001c06:	2300      	movs	r3, #0
 8001c08:	703b      	strb	r3, [r7, #0]
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	707b      	strb	r3, [r7, #1]

  if ((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 8001c0e:	4b2b      	ldr	r3, [pc, #172]	@ (8001cbc <BSP_GYRO_Init+0xc4>)
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	4798      	blx	r3
 8001c14:	4603      	mov	r3, r0
 8001c16:	2bd4      	cmp	r3, #212	@ 0xd4
 8001c18:	d005      	beq.n	8001c26 <BSP_GYRO_Init+0x2e>
 8001c1a:	4b28      	ldr	r3, [pc, #160]	@ (8001cbc <BSP_GYRO_Init+0xc4>)
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	4798      	blx	r3
 8001c20:	4603      	mov	r3, r0
 8001c22:	2bd5      	cmp	r3, #213	@ 0xd5
 8001c24:	d144      	bne.n	8001cb0 <BSP_GYRO_Init+0xb8>
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &L3gd20Drv;
 8001c26:	4b26      	ldr	r3, [pc, #152]	@ (8001cc0 <BSP_GYRO_Init+0xc8>)
 8001c28:	4a24      	ldr	r2, [pc, #144]	@ (8001cbc <BSP_GYRO_Init+0xc4>)
 8001c2a:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the gyroscope structure */
    Gyro_InitStructure.Power_Mode       = L3GD20_MODE_ACTIVE;
 8001c2c:	2308      	movs	r3, #8
 8001c2e:	713b      	strb	r3, [r7, #4]
    Gyro_InitStructure.Output_DataRate  = L3GD20_OUTPUT_DATARATE_1;
 8001c30:	2300      	movs	r3, #0
 8001c32:	717b      	strb	r3, [r7, #5]
    Gyro_InitStructure.Axes_Enable      = L3GD20_AXES_ENABLE;
 8001c34:	2307      	movs	r3, #7
 8001c36:	71bb      	strb	r3, [r7, #6]
    Gyro_InitStructure.Band_Width       = L3GD20_BANDWIDTH_4;
 8001c38:	2330      	movs	r3, #48	@ 0x30
 8001c3a:	71fb      	strb	r3, [r7, #7]
    Gyro_InitStructure.BlockData_Update = L3GD20_BlockDataUpdate_Continous;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	723b      	strb	r3, [r7, #8]
    Gyro_InitStructure.Endianness       = L3GD20_BLE_LSB;
 8001c40:	2300      	movs	r3, #0
 8001c42:	727b      	strb	r3, [r7, #9]
    Gyro_InitStructure.Full_Scale       = L3GD20_FULLSCALE_500;
 8001c44:	2310      	movs	r3, #16
 8001c46:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (uint16_t)(Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8001c48:	793a      	ldrb	r2, [r7, #4]
 8001c4a:	797b      	ldrb	r3, [r7, #5]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	b2da      	uxtb	r2, r3
                      Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8001c50:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint16_t)(Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8001c52:	4313      	orrs	r3, r2
 8001c54:	b2da      	uxtb	r2, r3
                      Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8001c56:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint16_t)(Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	81bb      	strh	r3, [r7, #12]

    ctrl |= (uint16_t)((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 8001c5e:	7a3a      	ldrb	r2, [r7, #8]
 8001c60:	7a7b      	ldrb	r3, [r7, #9]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	b2da      	uxtb	r2, r3
                        Gyro_InitStructure.Full_Scale) << 8);
 8001c66:	7abb      	ldrb	r3, [r7, #10]
    ctrl |= (uint16_t)((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	021b      	lsls	r3, r3, #8
 8001c6e:	b29a      	uxth	r2, r3
 8001c70:	89bb      	ldrh	r3, [r7, #12]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	81bb      	strh	r3, [r7, #12]

    /* Initialize the gyroscope */
    GyroscopeDrv->Init(ctrl);
 8001c76:	4b12      	ldr	r3, [pc, #72]	@ (8001cc0 <BSP_GYRO_Init+0xc8>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	89ba      	ldrh	r2, [r7, #12]
 8001c7e:	4610      	mov	r0, r2
 8001c80:	4798      	blx	r3

    Gyro_FilterStructure.HighPassFilter_Mode_Selection   = L3GD20_HPM_NORMAL_MODE_RES;
 8001c82:	2300      	movs	r3, #0
 8001c84:	703b      	strb	r3, [r7, #0]
    Gyro_FilterStructure.HighPassFilter_CutOff_Frequency = L3GD20_HPFCF_0;
 8001c86:	2300      	movs	r3, #0
 8001c88:	707b      	strb	r3, [r7, #1]

    ctrl = (uint8_t)((Gyro_FilterStructure.HighPassFilter_Mode_Selection | \
 8001c8a:	783a      	ldrb	r2, [r7, #0]
                      Gyro_FilterStructure.HighPassFilter_CutOff_Frequency));
 8001c8c:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint8_t)((Gyro_FilterStructure.HighPassFilter_Mode_Selection | \
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	81bb      	strh	r3, [r7, #12]

    /* Configure the gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl) ;
 8001c94:	4b0a      	ldr	r3, [pc, #40]	@ (8001cc0 <BSP_GYRO_Init+0xc8>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c9a:	89ba      	ldrh	r2, [r7, #12]
 8001c9c:	b2d2      	uxtb	r2, r2
 8001c9e:	4610      	mov	r0, r2
 8001ca0:	4798      	blx	r3

    GyroscopeDrv->FilterCmd(L3GD20_HIGHPASSFILTER_ENABLE);
 8001ca2:	4b07      	ldr	r3, [pc, #28]	@ (8001cc0 <BSP_GYRO_Init+0xc8>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ca8:	2010      	movs	r0, #16
 8001caa:	4798      	blx	r3

    ret = GYRO_OK;
 8001cac:	2300      	movs	r3, #0
 8001cae:	73fb      	strb	r3, [r7, #15]
    GyroscopeDrv->FilterCmd(I3G4250D_HIGHPASSFILTER_ENABLE);

    ret = GYRO_OK;
  }
#endif /* USE_STM32F429I_DISCOVERY_REVD */
  return ret;
 8001cb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3710      	adds	r7, #16
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	20000038 	.word	0x20000038
 8001cc0:	200002fc 	.word	0x200002fc

08001cc4 <BSP_GYRO_Reset>:

/**
  * @brief  Reboot memory content of Gyroscope.
  */
void BSP_GYRO_Reset(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
  if (GyroscopeDrv->Reset != NULL)
 8001cc8:	4b05      	ldr	r3, [pc, #20]	@ (8001ce0 <BSP_GYRO_Reset+0x1c>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	68db      	ldr	r3, [r3, #12]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d003      	beq.n	8001cda <BSP_GYRO_Reset+0x16>
  {
    GyroscopeDrv->Reset();
 8001cd2:	4b03      	ldr	r3, [pc, #12]	@ (8001ce0 <BSP_GYRO_Reset+0x1c>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	4798      	blx	r3
  }
}
 8001cda:	bf00      	nop
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	200002fc 	.word	0x200002fc

08001ce4 <BSP_GYRO_GetXYZ>:
/**
  * @brief  Get XYZ angular acceleration.
  * @param  pfData: pointer on floating array
  */
void BSP_GYRO_GetXYZ(float *pfData)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  if (GyroscopeDrv->GetXYZ != NULL)
 8001cec:	4b06      	ldr	r3, [pc, #24]	@ (8001d08 <BSP_GYRO_GetXYZ+0x24>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d004      	beq.n	8001d00 <BSP_GYRO_GetXYZ+0x1c>
  {
    GyroscopeDrv->GetXYZ(pfData);
 8001cf6:	4b04      	ldr	r3, [pc, #16]	@ (8001d08 <BSP_GYRO_GetXYZ+0x24>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	4798      	blx	r3
  }
}
 8001d00:	bf00      	nop
 8001d02:	3708      	adds	r7, #8
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	200002fc 	.word	0x200002fc

08001d0c <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

  /* LTDC Configuration ----------------------------------------------------*/
  LtdcHandler.Instance = LTDC;
 8001d10:	4b2d      	ldr	r3, [pc, #180]	@ (8001dc8 <BSP_LCD_Init+0xbc>)
 8001d12:	4a2e      	ldr	r2, [pc, #184]	@ (8001dcc <BSP_LCD_Init+0xc0>)
 8001d14:	601a      	str	r2, [r3, #0]
        ActiveH=320 (323-2-2+1)
        VFP=4 (327-320-2-2+1)
    */

  /* Configure horizontal synchronization width */
  LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8001d16:	4b2c      	ldr	r3, [pc, #176]	@ (8001dc8 <BSP_LCD_Init+0xbc>)
 8001d18:	2209      	movs	r2, #9
 8001d1a:	615a      	str	r2, [r3, #20]
  /* Configure vertical synchronization height */
  LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8001d1c:	4b2a      	ldr	r3, [pc, #168]	@ (8001dc8 <BSP_LCD_Init+0xbc>)
 8001d1e:	2201      	movs	r2, #1
 8001d20:	619a      	str	r2, [r3, #24]
  /* Configure accumulated horizontal back porch */
  LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8001d22:	4b29      	ldr	r3, [pc, #164]	@ (8001dc8 <BSP_LCD_Init+0xbc>)
 8001d24:	221d      	movs	r2, #29
 8001d26:	61da      	str	r2, [r3, #28]
  /* Configure accumulated vertical back porch */
  LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8001d28:	4b27      	ldr	r3, [pc, #156]	@ (8001dc8 <BSP_LCD_Init+0xbc>)
 8001d2a:	2203      	movs	r2, #3
 8001d2c:	621a      	str	r2, [r3, #32]
  /* Configure accumulated active width */
  LtdcHandler.Init.AccumulatedActiveW = 269;
 8001d2e:	4b26      	ldr	r3, [pc, #152]	@ (8001dc8 <BSP_LCD_Init+0xbc>)
 8001d30:	f240 120d 	movw	r2, #269	@ 0x10d
 8001d34:	625a      	str	r2, [r3, #36]	@ 0x24
  /* Configure accumulated active height */
  LtdcHandler.Init.AccumulatedActiveH = 323;
 8001d36:	4b24      	ldr	r3, [pc, #144]	@ (8001dc8 <BSP_LCD_Init+0xbc>)
 8001d38:	f240 1243 	movw	r2, #323	@ 0x143
 8001d3c:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Configure total width */
  LtdcHandler.Init.TotalWidth = 279;
 8001d3e:	4b22      	ldr	r3, [pc, #136]	@ (8001dc8 <BSP_LCD_Init+0xbc>)
 8001d40:	f240 1217 	movw	r2, #279	@ 0x117
 8001d44:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Configure total height */
  LtdcHandler.Init.TotalHeigh = 327;
 8001d46:	4b20      	ldr	r3, [pc, #128]	@ (8001dc8 <BSP_LCD_Init+0xbc>)
 8001d48:	f240 1247 	movw	r2, #327	@ 0x147
 8001d4c:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Configure R,G,B component values for LCD background color */
  LtdcHandler.Init.Backcolor.Red = 0;
 8001d4e:	4b1e      	ldr	r3, [pc, #120]	@ (8001dc8 <BSP_LCD_Init+0xbc>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  LtdcHandler.Init.Backcolor.Blue = 0;
 8001d56:	4b1c      	ldr	r3, [pc, #112]	@ (8001dc8 <BSP_LCD_Init+0xbc>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  LtdcHandler.Init.Backcolor.Green = 0;
 8001d5e:	4b1a      	ldr	r3, [pc, #104]	@ (8001dc8 <BSP_LCD_Init+0xbc>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  /* LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001d66:	4b1a      	ldr	r3, [pc, #104]	@ (8001dd0 <BSP_LCD_Init+0xc4>)
 8001d68:	2208      	movs	r2, #8
 8001d6a:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001d6c:	4b18      	ldr	r3, [pc, #96]	@ (8001dd0 <BSP_LCD_Init+0xc4>)
 8001d6e:	22c0      	movs	r2, #192	@ 0xc0
 8001d70:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8001d72:	4b17      	ldr	r3, [pc, #92]	@ (8001dd0 <BSP_LCD_Init+0xc4>)
 8001d74:	2204      	movs	r2, #4
 8001d76:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001d78:	4b15      	ldr	r3, [pc, #84]	@ (8001dd0 <BSP_LCD_Init+0xc4>)
 8001d7a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001d7e:	625a      	str	r2, [r3, #36]	@ 0x24
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8001d80:	4813      	ldr	r0, [pc, #76]	@ (8001dd0 <BSP_LCD_Init+0xc4>)
 8001d82:	f004 ffc5 	bl	8006d10 <HAL_RCCEx_PeriphCLKConfig>

  /* Polarity */
  LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001d86:	4b10      	ldr	r3, [pc, #64]	@ (8001dc8 <BSP_LCD_Init+0xbc>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	605a      	str	r2, [r3, #4]
  LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001d8c:	4b0e      	ldr	r3, [pc, #56]	@ (8001dc8 <BSP_LCD_Init+0xbc>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	609a      	str	r2, [r3, #8]
  LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001d92:	4b0d      	ldr	r3, [pc, #52]	@ (8001dc8 <BSP_LCD_Init+0xbc>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	60da      	str	r2, [r3, #12]
  LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001d98:	4b0b      	ldr	r3, [pc, #44]	@ (8001dc8 <BSP_LCD_Init+0xbc>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	611a      	str	r2, [r3, #16]

  BSP_LCD_MspInit();
 8001d9e:	f001 fa61 	bl	8003264 <BSP_LCD_MspInit>
  HAL_LTDC_Init(&LtdcHandler);
 8001da2:	4809      	ldr	r0, [pc, #36]	@ (8001dc8 <BSP_LCD_Init+0xbc>)
 8001da4:	f004 f806 	bl	8005db4 <HAL_LTDC_Init>

  /* Select the device */
  LcdDrv = &ili9341_drv;
 8001da8:	4b0a      	ldr	r3, [pc, #40]	@ (8001dd4 <BSP_LCD_Init+0xc8>)
 8001daa:	4a0b      	ldr	r2, [pc, #44]	@ (8001dd8 <BSP_LCD_Init+0xcc>)
 8001dac:	601a      	str	r2, [r3, #0]

  /* LCD Init */
  LcdDrv->Init();
 8001dae:	4b09      	ldr	r3, [pc, #36]	@ (8001dd4 <BSP_LCD_Init+0xc8>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4798      	blx	r3

  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8001db6:	f001 fc87 	bl	80036c8 <BSP_SDRAM_Init>

  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8001dba:	4808      	ldr	r0, [pc, #32]	@ (8001ddc <BSP_LCD_Init+0xd0>)
 8001dbc:	f000 f8ce 	bl	8001f5c <BSP_LCD_SetFont>

  return LCD_OK;
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	20000300 	.word	0x20000300
 8001dcc:	40016800 	.word	0x40016800
 8001dd0:	200003e8 	.word	0x200003e8
 8001dd4:	20000434 	.word	0x20000434
 8001dd8:	20000000 	.word	0x20000000
 8001ddc:	200000a8 	.word	0x200000a8

08001de0 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8001de4:	4b03      	ldr	r3, [pc, #12]	@ (8001df4 <BSP_LCD_GetXSize+0x14>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dea:	4798      	blx	r3
 8001dec:	4603      	mov	r3, r0
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	20000434 	.word	0x20000434

08001df8 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8001dfc:	4b03      	ldr	r3, [pc, #12]	@ (8001e0c <BSP_LCD_GetYSize+0x14>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e02:	4798      	blx	r3
 8001e04:	4603      	mov	r3, r0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	20000434 	.word	0x20000434

08001e10 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background.
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b090      	sub	sp, #64	@ 0x40
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	4603      	mov	r3, r0
 8001e18:	6039      	str	r1, [r7, #0]
 8001e1a:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

  /* Layer Init */
  Layercfg.WindowX0 = 0;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8001e20:	f7ff ffde 	bl	8001de0 <BSP_LCD_GetXSize>
 8001e24:	4603      	mov	r3, r0
 8001e26:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize();
 8001e2c:	f7ff ffe4 	bl	8001df8 <BSP_LCD_GetYSize>
 8001e30:	4603      	mov	r3, r0
 8001e32:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001e34:	2300      	movs	r3, #0
 8001e36:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	633b      	str	r3, [r7, #48]	@ 0x30
  Layercfg.Alpha = 255;
 8001e3c:	23ff      	movs	r3, #255	@ 0xff
 8001e3e:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8001e40:	2300      	movs	r3, #0
 8001e42:	627b      	str	r3, [r7, #36]	@ 0x24
  Layercfg.Backcolor.Blue = 0;
 8001e44:	2300      	movs	r3, #0
 8001e46:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  Layercfg.Backcolor.Green = 0;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  Layercfg.Backcolor.Red = 0;
 8001e50:	2300      	movs	r3, #0
 8001e52:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001e56:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001e5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001e5c:	2307      	movs	r3, #7
 8001e5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8001e60:	f7ff ffbe 	bl	8001de0 <BSP_LCD_GetXSize>
 8001e64:	4603      	mov	r3, r0
 8001e66:	637b      	str	r3, [r7, #52]	@ 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8001e68:	f7ff ffc6 	bl	8001df8 <BSP_LCD_GetYSize>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	63bb      	str	r3, [r7, #56]	@ 0x38

  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex);
 8001e70:	88fa      	ldrh	r2, [r7, #6]
 8001e72:	f107 030c 	add.w	r3, r7, #12
 8001e76:	4619      	mov	r1, r3
 8001e78:	4814      	ldr	r0, [pc, #80]	@ (8001ecc <BSP_LCD_LayerDefaultInit+0xbc>)
 8001e7a:	f004 f875 	bl	8005f68 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8001e7e:	88fa      	ldrh	r2, [r7, #6]
 8001e80:	4913      	ldr	r1, [pc, #76]	@ (8001ed0 <BSP_LCD_LayerDefaultInit+0xc0>)
 8001e82:	4613      	mov	r3, r2
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	4413      	add	r3, r2
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	440b      	add	r3, r1
 8001e8c:	3304      	adds	r3, #4
 8001e8e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001e92:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8001e94:	88fa      	ldrh	r2, [r7, #6]
 8001e96:	490e      	ldr	r1, [pc, #56]	@ (8001ed0 <BSP_LCD_LayerDefaultInit+0xc0>)
 8001e98:	4613      	mov	r3, r2
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	4413      	add	r3, r2
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	440b      	add	r3, r1
 8001ea2:	3308      	adds	r3, #8
 8001ea4:	4a0b      	ldr	r2, [pc, #44]	@ (8001ed4 <BSP_LCD_LayerDefaultInit+0xc4>)
 8001ea6:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK;
 8001ea8:	88fa      	ldrh	r2, [r7, #6]
 8001eaa:	4909      	ldr	r1, [pc, #36]	@ (8001ed0 <BSP_LCD_LayerDefaultInit+0xc0>)
 8001eac:	4613      	mov	r3, r2
 8001eae:	005b      	lsls	r3, r3, #1
 8001eb0:	4413      	add	r3, r2
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	440b      	add	r3, r1
 8001eb6:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 8001eba:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8001ebc:	4803      	ldr	r0, [pc, #12]	@ (8001ecc <BSP_LCD_LayerDefaultInit+0xbc>)
 8001ebe:	f004 f891 	bl	8005fe4 <HAL_LTDC_EnableDither>
}
 8001ec2:	bf00      	nop
 8001ec4:	3740      	adds	r7, #64	@ 0x40
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	20000300 	.word	0x20000300
 8001ed0:	2000041c 	.word	0x2000041c
 8001ed4:	200000a8 	.word	0x200000a8

08001ed8 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8001ee0:	4a04      	ldr	r2, [pc, #16]	@ (8001ef4 <BSP_LCD_SelectLayer+0x1c>)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6013      	str	r3, [r2, #0]
}
 8001ee6:	bf00      	nop
 8001ee8:	370c      	adds	r7, #12
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	20000418 	.word	0x20000418

08001ef8 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8001f00:	4b07      	ldr	r3, [pc, #28]	@ (8001f20 <BSP_LCD_SetTextColor+0x28>)
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	4907      	ldr	r1, [pc, #28]	@ (8001f24 <BSP_LCD_SetTextColor+0x2c>)
 8001f06:	4613      	mov	r3, r2
 8001f08:	005b      	lsls	r3, r3, #1
 8001f0a:	4413      	add	r3, r2
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	440b      	add	r3, r1
 8001f10:	687a      	ldr	r2, [r7, #4]
 8001f12:	601a      	str	r2, [r3, #0]
}
 8001f14:	bf00      	nop
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr
 8001f20:	20000418 	.word	0x20000418
 8001f24:	2000041c 	.word	0x2000041c

08001f28 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8001f30:	4b08      	ldr	r3, [pc, #32]	@ (8001f54 <BSP_LCD_SetBackColor+0x2c>)
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	4908      	ldr	r1, [pc, #32]	@ (8001f58 <BSP_LCD_SetBackColor+0x30>)
 8001f36:	4613      	mov	r3, r2
 8001f38:	005b      	lsls	r3, r3, #1
 8001f3a:	4413      	add	r3, r2
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	440b      	add	r3, r1
 8001f40:	3304      	adds	r3, #4
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	601a      	str	r2, [r3, #0]
}
 8001f46:	bf00      	nop
 8001f48:	370c      	adds	r7, #12
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	20000418 	.word	0x20000418
 8001f58:	2000041c 	.word	0x2000041c

08001f5c <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8001f64:	4b08      	ldr	r3, [pc, #32]	@ (8001f88 <BSP_LCD_SetFont+0x2c>)
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	4908      	ldr	r1, [pc, #32]	@ (8001f8c <BSP_LCD_SetFont+0x30>)
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	005b      	lsls	r3, r3, #1
 8001f6e:	4413      	add	r3, r2
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	440b      	add	r3, r1
 8001f74:	3308      	adds	r3, #8
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	601a      	str	r2, [r3, #0]
}
 8001f7a:	bf00      	nop
 8001f7c:	370c      	adds	r7, #12
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	20000418 	.word	0x20000418
 8001f8c:	2000041c 	.word	0x2000041c

08001f90 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the Text Font.
  * @retval Layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8001f94:	4b07      	ldr	r3, [pc, #28]	@ (8001fb4 <BSP_LCD_GetFont+0x24>)
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	4907      	ldr	r1, [pc, #28]	@ (8001fb8 <BSP_LCD_GetFont+0x28>)
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	005b      	lsls	r3, r3, #1
 8001f9e:	4413      	add	r3, r2
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	440b      	add	r3, r1
 8001fa4:	3308      	adds	r3, #8
 8001fa6:	681b      	ldr	r3, [r3, #0]
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	20000418 	.word	0x20000418
 8001fb8:	2000041c 	.word	0x2000041c

08001fbc <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{
 8001fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fbe:	b085      	sub	sp, #20
 8001fc0:	af02      	add	r7, sp, #8
 8001fc2:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(),
 8001fc4:	4b0f      	ldr	r3, [pc, #60]	@ (8002004 <BSP_LCD_Clear+0x48>)
 8001fc6:	681c      	ldr	r4, [r3, #0]
 8001fc8:	4b0e      	ldr	r3, [pc, #56]	@ (8002004 <BSP_LCD_Clear+0x48>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a0e      	ldr	r2, [pc, #56]	@ (8002008 <BSP_LCD_Clear+0x4c>)
 8001fce:	2134      	movs	r1, #52	@ 0x34
 8001fd0:	fb01 f303 	mul.w	r3, r1, r3
 8001fd4:	4413      	add	r3, r2
 8001fd6:	335c      	adds	r3, #92	@ 0x5c
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	461e      	mov	r6, r3
 8001fdc:	f7ff ff00 	bl	8001de0 <BSP_LCD_GetXSize>
 8001fe0:	4605      	mov	r5, r0
 8001fe2:	f7ff ff09 	bl	8001df8 <BSP_LCD_GetYSize>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	9301      	str	r3, [sp, #4]
 8001fec:	2300      	movs	r3, #0
 8001fee:	9300      	str	r3, [sp, #0]
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	462a      	mov	r2, r5
 8001ff4:	4631      	mov	r1, r6
 8001ff6:	4620      	mov	r0, r4
 8001ff8:	f001 faea 	bl	80035d0 <FillBuffer>
             BSP_LCD_GetYSize(), 0, Color);
}
 8001ffc:	bf00      	nop
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002004:	20000418 	.word	0x20000418
 8002008:	20000300 	.word	0x20000300

0800200c <BSP_LCD_ClearStringLine>:
/**
  * @brief  Clears the selected line.
  * @param  Line: the line to be cleared
  */
void BSP_LCD_ClearStringLine(uint32_t Line)
{
 800200c:	b590      	push	{r4, r7, lr}
 800200e:	b085      	sub	sp, #20
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  uint32_t colorbackup = DrawProp[ActiveLayer].TextColor;
 8002014:	4b2d      	ldr	r3, [pc, #180]	@ (80020cc <BSP_LCD_ClearStringLine+0xc0>)
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	492d      	ldr	r1, [pc, #180]	@ (80020d0 <BSP_LCD_ClearStringLine+0xc4>)
 800201a:	4613      	mov	r3, r2
 800201c:	005b      	lsls	r3, r3, #1
 800201e:	4413      	add	r3, r2
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	440b      	add	r3, r1
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	60fb      	str	r3, [r7, #12]
  DrawProp[ActiveLayer].TextColor = DrawProp[ActiveLayer].BackColor;
 8002028:	4b28      	ldr	r3, [pc, #160]	@ (80020cc <BSP_LCD_ClearStringLine+0xc0>)
 800202a:	6819      	ldr	r1, [r3, #0]
 800202c:	4b27      	ldr	r3, [pc, #156]	@ (80020cc <BSP_LCD_ClearStringLine+0xc0>)
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	4827      	ldr	r0, [pc, #156]	@ (80020d0 <BSP_LCD_ClearStringLine+0xc4>)
 8002032:	460b      	mov	r3, r1
 8002034:	005b      	lsls	r3, r3, #1
 8002036:	440b      	add	r3, r1
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	4403      	add	r3, r0
 800203c:	3304      	adds	r3, #4
 800203e:	6819      	ldr	r1, [r3, #0]
 8002040:	4823      	ldr	r0, [pc, #140]	@ (80020d0 <BSP_LCD_ClearStringLine+0xc4>)
 8002042:	4613      	mov	r3, r2
 8002044:	005b      	lsls	r3, r3, #1
 8002046:	4413      	add	r3, r2
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	4403      	add	r3, r0
 800204c:	6019      	str	r1, [r3, #0]

  /* Draw rectangle with background color */
  BSP_LCD_FillRect(0, (Line * DrawProp[ActiveLayer].pFont->Height), BSP_LCD_GetXSize(),
 800204e:	4b1f      	ldr	r3, [pc, #124]	@ (80020cc <BSP_LCD_ClearStringLine+0xc0>)
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	491f      	ldr	r1, [pc, #124]	@ (80020d0 <BSP_LCD_ClearStringLine+0xc4>)
 8002054:	4613      	mov	r3, r2
 8002056:	005b      	lsls	r3, r3, #1
 8002058:	4413      	add	r3, r2
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	440b      	add	r3, r1
 800205e:	3308      	adds	r3, #8
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	88da      	ldrh	r2, [r3, #6]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	b29b      	uxth	r3, r3
 8002068:	fb12 f303 	smulbb	r3, r2, r3
 800206c:	b29c      	uxth	r4, r3
 800206e:	f7ff feb7 	bl	8001de0 <BSP_LCD_GetXSize>
 8002072:	4603      	mov	r3, r0
 8002074:	b299      	uxth	r1, r3
                   DrawProp[ActiveLayer].pFont->Height);
 8002076:	4b15      	ldr	r3, [pc, #84]	@ (80020cc <BSP_LCD_ClearStringLine+0xc0>)
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	4815      	ldr	r0, [pc, #84]	@ (80020d0 <BSP_LCD_ClearStringLine+0xc4>)
 800207c:	4613      	mov	r3, r2
 800207e:	005b      	lsls	r3, r3, #1
 8002080:	4413      	add	r3, r2
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	4403      	add	r3, r0
 8002086:	3308      	adds	r3, #8
 8002088:	681b      	ldr	r3, [r3, #0]
  BSP_LCD_FillRect(0, (Line * DrawProp[ActiveLayer].pFont->Height), BSP_LCD_GetXSize(),
 800208a:	88db      	ldrh	r3, [r3, #6]
 800208c:	460a      	mov	r2, r1
 800208e:	4621      	mov	r1, r4
 8002090:	2000      	movs	r0, #0
 8002092:	f000 fd93 	bl	8002bbc <BSP_LCD_FillRect>

  DrawProp[ActiveLayer].TextColor = colorbackup;
 8002096:	4b0d      	ldr	r3, [pc, #52]	@ (80020cc <BSP_LCD_ClearStringLine+0xc0>)
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	490d      	ldr	r1, [pc, #52]	@ (80020d0 <BSP_LCD_ClearStringLine+0xc4>)
 800209c:	4613      	mov	r3, r2
 800209e:	005b      	lsls	r3, r3, #1
 80020a0:	4413      	add	r3, r2
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	440b      	add	r3, r1
 80020a6:	68fa      	ldr	r2, [r7, #12]
 80020a8:	601a      	str	r2, [r3, #0]
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80020aa:	4b08      	ldr	r3, [pc, #32]	@ (80020cc <BSP_LCD_ClearStringLine+0xc0>)
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	4908      	ldr	r1, [pc, #32]	@ (80020d0 <BSP_LCD_ClearStringLine+0xc4>)
 80020b0:	4613      	mov	r3, r2
 80020b2:	005b      	lsls	r3, r3, #1
 80020b4:	4413      	add	r3, r2
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	440b      	add	r3, r1
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4618      	mov	r0, r3
 80020be:	f7ff ff1b 	bl	8001ef8 <BSP_LCD_SetTextColor>
}
 80020c2:	bf00      	nop
 80020c4:	3714      	adds	r7, #20
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd90      	pop	{r4, r7, pc}
 80020ca:	bf00      	nop
 80020cc:	20000418 	.word	0x20000418
 80020d0:	2000041c 	.word	0x2000041c

080020d4 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80020d4:	b590      	push	{r4, r7, lr}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	4603      	mov	r3, r0
 80020dc:	80fb      	strh	r3, [r7, #6]
 80020de:	460b      	mov	r3, r1
 80020e0:	80bb      	strh	r3, [r7, #4]
 80020e2:	4613      	mov	r3, r2
 80020e4:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii - ' ') *\
 80020e6:	4b1b      	ldr	r3, [pc, #108]	@ (8002154 <BSP_LCD_DisplayChar+0x80>)
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	491b      	ldr	r1, [pc, #108]	@ (8002158 <BSP_LCD_DisplayChar+0x84>)
 80020ec:	4613      	mov	r3, r2
 80020ee:	005b      	lsls	r3, r3, #1
 80020f0:	4413      	add	r3, r2
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	440b      	add	r3, r1
 80020f6:	3308      	adds	r3, #8
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	6819      	ldr	r1, [r3, #0]
 80020fc:	78fb      	ldrb	r3, [r7, #3]
 80020fe:	f1a3 0020 	sub.w	r0, r3, #32
                                                           DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002102:	4b14      	ldr	r3, [pc, #80]	@ (8002154 <BSP_LCD_DisplayChar+0x80>)
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	4c14      	ldr	r4, [pc, #80]	@ (8002158 <BSP_LCD_DisplayChar+0x84>)
 8002108:	4613      	mov	r3, r2
 800210a:	005b      	lsls	r3, r3, #1
 800210c:	4413      	add	r3, r2
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	4423      	add	r3, r4
 8002112:	3308      	adds	r3, #8
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii - ' ') *\
 8002118:	fb03 f000 	mul.w	r0, r3, r0
                                                           DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800211c:	4b0d      	ldr	r3, [pc, #52]	@ (8002154 <BSP_LCD_DisplayChar+0x80>)
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	4c0d      	ldr	r4, [pc, #52]	@ (8002158 <BSP_LCD_DisplayChar+0x84>)
 8002122:	4613      	mov	r3, r2
 8002124:	005b      	lsls	r3, r3, #1
 8002126:	4413      	add	r3, r2
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	4423      	add	r3, r4
 800212c:	3308      	adds	r3, #8
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	889b      	ldrh	r3, [r3, #4]
 8002132:	3307      	adds	r3, #7
 8002134:	2b00      	cmp	r3, #0
 8002136:	da00      	bge.n	800213a <BSP_LCD_DisplayChar+0x66>
 8002138:	3307      	adds	r3, #7
 800213a:	10db      	asrs	r3, r3, #3
 800213c:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii - ' ') *\
 8002140:	18ca      	adds	r2, r1, r3
 8002142:	88b9      	ldrh	r1, [r7, #4]
 8002144:	88fb      	ldrh	r3, [r7, #6]
 8002146:	4618      	mov	r0, r3
 8002148:	f001 f988 	bl	800345c <DrawChar>
}
 800214c:	bf00      	nop
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	bd90      	pop	{r4, r7, pc}
 8002154:	20000418 	.word	0x20000418
 8002158:	2000041c 	.word	0x2000041c

0800215c <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 800215c:	b5b0      	push	{r4, r5, r7, lr}
 800215e:	b088      	sub	sp, #32
 8002160:	af00      	add	r7, sp, #0
 8002162:	60ba      	str	r2, [r7, #8]
 8002164:	461a      	mov	r2, r3
 8002166:	4603      	mov	r3, r0
 8002168:	81fb      	strh	r3, [r7, #14]
 800216a:	460b      	mov	r3, r1
 800216c:	81bb      	strh	r3, [r7, #12]
 800216e:	4613      	mov	r3, r2
 8002170:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8002172:	2301      	movs	r3, #1
 8002174:	83fb      	strh	r3, [r7, #30]
 8002176:	2300      	movs	r3, #0
 8002178:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0;
 800217a:	2300      	movs	r3, #0
 800217c:	61bb      	str	r3, [r7, #24]
 800217e:	2300      	movs	r3, #0
 8002180:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	617b      	str	r3, [r7, #20]

  /* Get the text size */
  while (*ptr++) { size ++ ; }
 8002186:	e002      	b.n	800218e <BSP_LCD_DisplayStringAt+0x32>
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	3301      	adds	r3, #1
 800218c:	61bb      	str	r3, [r7, #24]
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	1c5a      	adds	r2, r3, #1
 8002192:	617a      	str	r2, [r7, #20]
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d1f6      	bne.n	8002188 <BSP_LCD_DisplayStringAt+0x2c>

  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize() / DrawProp[ActiveLayer].pFont->Width);
 800219a:	f7ff fe21 	bl	8001de0 <BSP_LCD_GetXSize>
 800219e:	4601      	mov	r1, r0
 80021a0:	4b4b      	ldr	r3, [pc, #300]	@ (80022d0 <BSP_LCD_DisplayStringAt+0x174>)
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	484b      	ldr	r0, [pc, #300]	@ (80022d4 <BSP_LCD_DisplayStringAt+0x178>)
 80021a6:	4613      	mov	r3, r2
 80021a8:	005b      	lsls	r3, r3, #1
 80021aa:	4413      	add	r3, r2
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	4403      	add	r3, r0
 80021b0:	3308      	adds	r3, #8
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	889b      	ldrh	r3, [r3, #4]
 80021b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80021ba:	613b      	str	r3, [r7, #16]

  switch (mode)
 80021bc:	79fb      	ldrb	r3, [r7, #7]
 80021be:	2b03      	cmp	r3, #3
 80021c0:	d01c      	beq.n	80021fc <BSP_LCD_DisplayStringAt+0xa0>
 80021c2:	2b03      	cmp	r3, #3
 80021c4:	dc33      	bgt.n	800222e <BSP_LCD_DisplayStringAt+0xd2>
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d002      	beq.n	80021d0 <BSP_LCD_DisplayStringAt+0x74>
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d019      	beq.n	8002202 <BSP_LCD_DisplayStringAt+0xa6>
 80021ce:	e02e      	b.n	800222e <BSP_LCD_DisplayStringAt+0xd2>
  {
    case CENTER_MODE:
    {
      refcolumn = X + ((xsize - size) * DrawProp[ActiveLayer].pFont->Width) / 2;
 80021d0:	693a      	ldr	r2, [r7, #16]
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	1ad1      	subs	r1, r2, r3
 80021d6:	4b3e      	ldr	r3, [pc, #248]	@ (80022d0 <BSP_LCD_DisplayStringAt+0x174>)
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	483e      	ldr	r0, [pc, #248]	@ (80022d4 <BSP_LCD_DisplayStringAt+0x178>)
 80021dc:	4613      	mov	r3, r2
 80021de:	005b      	lsls	r3, r3, #1
 80021e0:	4413      	add	r3, r2
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	4403      	add	r3, r0
 80021e6:	3308      	adds	r3, #8
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	889b      	ldrh	r3, [r3, #4]
 80021ec:	fb01 f303 	mul.w	r3, r1, r3
 80021f0:	085b      	lsrs	r3, r3, #1
 80021f2:	b29a      	uxth	r2, r3
 80021f4:	89fb      	ldrh	r3, [r7, #14]
 80021f6:	4413      	add	r3, r2
 80021f8:	83fb      	strh	r3, [r7, #30]
      break;
 80021fa:	e01b      	b.n	8002234 <BSP_LCD_DisplayStringAt+0xd8>
    }
    case LEFT_MODE:
    {
      refcolumn = X;
 80021fc:	89fb      	ldrh	r3, [r7, #14]
 80021fe:	83fb      	strh	r3, [r7, #30]
      break;
 8002200:	e018      	b.n	8002234 <BSP_LCD_DisplayStringAt+0xd8>
    }
    case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size) * DrawProp[ActiveLayer].pFont->Width);
 8002202:	693a      	ldr	r2, [r7, #16]
 8002204:	69bb      	ldr	r3, [r7, #24]
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	b299      	uxth	r1, r3
 800220a:	4b31      	ldr	r3, [pc, #196]	@ (80022d0 <BSP_LCD_DisplayStringAt+0x174>)
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	4831      	ldr	r0, [pc, #196]	@ (80022d4 <BSP_LCD_DisplayStringAt+0x178>)
 8002210:	4613      	mov	r3, r2
 8002212:	005b      	lsls	r3, r3, #1
 8002214:	4413      	add	r3, r2
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	4403      	add	r3, r0
 800221a:	3308      	adds	r3, #8
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	889b      	ldrh	r3, [r3, #4]
 8002220:	fb11 f303 	smulbb	r3, r1, r3
 8002224:	b29a      	uxth	r2, r3
 8002226:	89fb      	ldrh	r3, [r7, #14]
 8002228:	4413      	add	r3, r2
 800222a:	83fb      	strh	r3, [r7, #30]
      break;
 800222c:	e002      	b.n	8002234 <BSP_LCD_DisplayStringAt+0xd8>
    }
    default:
    {
      refcolumn = X;
 800222e:	89fb      	ldrh	r3, [r7, #14]
 8002230:	83fb      	strh	r3, [r7, #30]
      break;
 8002232:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i * DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >=
 8002234:	e01a      	b.n	800226c <BSP_LCD_DisplayStringAt+0x110>
                          DrawProp[ActiveLayer].pFont->Width))
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	781a      	ldrb	r2, [r3, #0]
 800223a:	89b9      	ldrh	r1, [r7, #12]
 800223c:	8bfb      	ldrh	r3, [r7, #30]
 800223e:	4618      	mov	r0, r3
 8002240:	f7ff ff48 	bl	80020d4 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8002244:	4b22      	ldr	r3, [pc, #136]	@ (80022d0 <BSP_LCD_DisplayStringAt+0x174>)
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	4922      	ldr	r1, [pc, #136]	@ (80022d4 <BSP_LCD_DisplayStringAt+0x178>)
 800224a:	4613      	mov	r3, r2
 800224c:	005b      	lsls	r3, r3, #1
 800224e:	4413      	add	r3, r2
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	440b      	add	r3, r1
 8002254:	3308      	adds	r3, #8
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	889a      	ldrh	r2, [r3, #4]
 800225a:	8bfb      	ldrh	r3, [r7, #30]
 800225c:	4413      	add	r3, r2
 800225e:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	3301      	adds	r3, #1
 8002264:	60bb      	str	r3, [r7, #8]
    i++;
 8002266:	8bbb      	ldrh	r3, [r7, #28]
 8002268:	3301      	adds	r3, #1
 800226a:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i * DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >=
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	2b00      	cmp	r3, #0
 8002272:	bf14      	ite	ne
 8002274:	2301      	movne	r3, #1
 8002276:	2300      	moveq	r3, #0
 8002278:	b2dc      	uxtb	r4, r3
 800227a:	f7ff fdb1 	bl	8001de0 <BSP_LCD_GetXSize>
 800227e:	8bb9      	ldrh	r1, [r7, #28]
 8002280:	4b13      	ldr	r3, [pc, #76]	@ (80022d0 <BSP_LCD_DisplayStringAt+0x174>)
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	4d13      	ldr	r5, [pc, #76]	@ (80022d4 <BSP_LCD_DisplayStringAt+0x178>)
 8002286:	4613      	mov	r3, r2
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	4413      	add	r3, r2
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	442b      	add	r3, r5
 8002290:	3308      	adds	r3, #8
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	889b      	ldrh	r3, [r3, #4]
 8002296:	fb01 f303 	mul.w	r3, r1, r3
 800229a:	1ac3      	subs	r3, r0, r3
 800229c:	b299      	uxth	r1, r3
                          DrawProp[ActiveLayer].pFont->Width))
 800229e:	4b0c      	ldr	r3, [pc, #48]	@ (80022d0 <BSP_LCD_DisplayStringAt+0x174>)
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	480c      	ldr	r0, [pc, #48]	@ (80022d4 <BSP_LCD_DisplayStringAt+0x178>)
 80022a4:	4613      	mov	r3, r2
 80022a6:	005b      	lsls	r3, r3, #1
 80022a8:	4413      	add	r3, r2
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	4403      	add	r3, r0
 80022ae:	3308      	adds	r3, #8
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	889b      	ldrh	r3, [r3, #4]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i * DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >=
 80022b4:	4299      	cmp	r1, r3
 80022b6:	bf2c      	ite	cs
 80022b8:	2301      	movcs	r3, #1
 80022ba:	2300      	movcc	r3, #0
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	4023      	ands	r3, r4
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d1b7      	bne.n	8002236 <BSP_LCD_DisplayStringAt+0xda>
  }
}
 80022c6:	bf00      	nop
 80022c8:	bf00      	nop
 80022ca:	3720      	adds	r7, #32
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bdb0      	pop	{r4, r5, r7, pc}
 80022d0:	20000418 	.word	0x20000418
 80022d4:	2000041c 	.word	0x2000041c

080022d8 <BSP_LCD_DisplayStringAtLine>:
  * @brief  Displays a maximum of 20 char on the LCD.
  * @param  Line: the Line where to display the character shape
  * @param  ptr: pointer to string to display on LCD
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	4603      	mov	r3, r0
 80022e0:	6039      	str	r1, [r7, #0]
 80022e2:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 80022e4:	f7ff fe54 	bl	8001f90 <BSP_LCD_GetFont>
 80022e8:	4603      	mov	r3, r0
 80022ea:	88db      	ldrh	r3, [r3, #6]
 80022ec:	88fa      	ldrh	r2, [r7, #6]
 80022ee:	fb12 f303 	smulbb	r3, r2, r3
 80022f2:	b299      	uxth	r1, r3
 80022f4:	2303      	movs	r3, #3
 80022f6:	683a      	ldr	r2, [r7, #0]
 80022f8:	2000      	movs	r0, #0
 80022fa:	f7ff ff2f 	bl	800215c <BSP_LCD_DisplayStringAt>
}
 80022fe:	bf00      	nop
 8002300:	3708      	adds	r7, #8
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
	...

08002308 <BSP_LCD_DrawHLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002308:	b5b0      	push	{r4, r5, r7, lr}
 800230a:	b086      	sub	sp, #24
 800230c:	af02      	add	r7, sp, #8
 800230e:	4603      	mov	r3, r0
 8002310:	80fb      	strh	r3, [r7, #6]
 8002312:	460b      	mov	r3, r1
 8002314:	80bb      	strh	r3, [r7, #4]
 8002316:	4613      	mov	r3, r2
 8002318:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 800231a:	2300      	movs	r3, #0
 800231c:	60fb      	str	r3, [r7, #12]

  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4 * (BSP_LCD_GetXSize() * Ypos + Xpos);
 800231e:	4b16      	ldr	r3, [pc, #88]	@ (8002378 <BSP_LCD_DrawHLine+0x70>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a16      	ldr	r2, [pc, #88]	@ (800237c <BSP_LCD_DrawHLine+0x74>)
 8002324:	2134      	movs	r1, #52	@ 0x34
 8002326:	fb01 f303 	mul.w	r3, r1, r3
 800232a:	4413      	add	r3, r2
 800232c:	335c      	adds	r3, #92	@ 0x5c
 800232e:	681c      	ldr	r4, [r3, #0]
 8002330:	f7ff fd56 	bl	8001de0 <BSP_LCD_GetXSize>
 8002334:	4602      	mov	r2, r0
 8002336:	88bb      	ldrh	r3, [r7, #4]
 8002338:	fb03 f202 	mul.w	r2, r3, r2
 800233c:	88fb      	ldrh	r3, [r7, #6]
 800233e:	4413      	add	r3, r2
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	4423      	add	r3, r4
 8002344:	60fb      	str	r3, [r7, #12]

  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8002346:	4b0c      	ldr	r3, [pc, #48]	@ (8002378 <BSP_LCD_DrawHLine+0x70>)
 8002348:	6818      	ldr	r0, [r3, #0]
 800234a:	68f9      	ldr	r1, [r7, #12]
 800234c:	887c      	ldrh	r4, [r7, #2]
 800234e:	4b0a      	ldr	r3, [pc, #40]	@ (8002378 <BSP_LCD_DrawHLine+0x70>)
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	4d0b      	ldr	r5, [pc, #44]	@ (8002380 <BSP_LCD_DrawHLine+0x78>)
 8002354:	4613      	mov	r3, r2
 8002356:	005b      	lsls	r3, r3, #1
 8002358:	4413      	add	r3, r2
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	442b      	add	r3, r5
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	9301      	str	r3, [sp, #4]
 8002362:	2300      	movs	r3, #0
 8002364:	9300      	str	r3, [sp, #0]
 8002366:	2301      	movs	r3, #1
 8002368:	4622      	mov	r2, r4
 800236a:	f001 f931 	bl	80035d0 <FillBuffer>
}
 800236e:	bf00      	nop
 8002370:	3710      	adds	r7, #16
 8002372:	46bd      	mov	sp, r7
 8002374:	bdb0      	pop	{r4, r5, r7, pc}
 8002376:	bf00      	nop
 8002378:	20000418 	.word	0x20000418
 800237c:	20000300 	.word	0x20000300
 8002380:	2000041c 	.word	0x2000041c

08002384 <BSP_LCD_DrawVLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002384:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002386:	b087      	sub	sp, #28
 8002388:	af02      	add	r7, sp, #8
 800238a:	4603      	mov	r3, r0
 800238c:	80fb      	strh	r3, [r7, #6]
 800238e:	460b      	mov	r3, r1
 8002390:	80bb      	strh	r3, [r7, #4]
 8002392:	4613      	mov	r3, r2
 8002394:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 8002396:	2300      	movs	r3, #0
 8002398:	60fb      	str	r3, [r7, #12]

  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4 * (BSP_LCD_GetXSize() * Ypos + Xpos);
 800239a:	4b18      	ldr	r3, [pc, #96]	@ (80023fc <BSP_LCD_DrawVLine+0x78>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a18      	ldr	r2, [pc, #96]	@ (8002400 <BSP_LCD_DrawVLine+0x7c>)
 80023a0:	2134      	movs	r1, #52	@ 0x34
 80023a2:	fb01 f303 	mul.w	r3, r1, r3
 80023a6:	4413      	add	r3, r2
 80023a8:	335c      	adds	r3, #92	@ 0x5c
 80023aa:	681c      	ldr	r4, [r3, #0]
 80023ac:	f7ff fd18 	bl	8001de0 <BSP_LCD_GetXSize>
 80023b0:	4602      	mov	r2, r0
 80023b2:	88bb      	ldrh	r3, [r7, #4]
 80023b4:	fb03 f202 	mul.w	r2, r3, r2
 80023b8:	88fb      	ldrh	r3, [r7, #6]
 80023ba:	4413      	add	r3, r2
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	4423      	add	r3, r4
 80023c0:	60fb      	str	r3, [r7, #12]

  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 80023c2:	4b0e      	ldr	r3, [pc, #56]	@ (80023fc <BSP_LCD_DrawVLine+0x78>)
 80023c4:	681c      	ldr	r4, [r3, #0]
 80023c6:	68fd      	ldr	r5, [r7, #12]
 80023c8:	887e      	ldrh	r6, [r7, #2]
 80023ca:	f7ff fd09 	bl	8001de0 <BSP_LCD_GetXSize>
 80023ce:	4603      	mov	r3, r0
 80023d0:	1e59      	subs	r1, r3, #1
 80023d2:	4b0a      	ldr	r3, [pc, #40]	@ (80023fc <BSP_LCD_DrawVLine+0x78>)
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	480b      	ldr	r0, [pc, #44]	@ (8002404 <BSP_LCD_DrawVLine+0x80>)
 80023d8:	4613      	mov	r3, r2
 80023da:	005b      	lsls	r3, r3, #1
 80023dc:	4413      	add	r3, r2
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	4403      	add	r3, r0
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	9301      	str	r3, [sp, #4]
 80023e6:	9100      	str	r1, [sp, #0]
 80023e8:	4633      	mov	r3, r6
 80023ea:	2201      	movs	r2, #1
 80023ec:	4629      	mov	r1, r5
 80023ee:	4620      	mov	r0, r4
 80023f0:	f001 f8ee 	bl	80035d0 <FillBuffer>
}
 80023f4:	bf00      	nop
 80023f6:	3714      	adds	r7, #20
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023fc:	20000418 	.word	0x20000418
 8002400:	20000300 	.word	0x20000300
 8002404:	2000041c 	.word	0x2000041c

08002408 <BSP_LCD_DrawLine>:
  * @param  Y1: the point 1 Y position
  * @param  X2: the point 2 X position
  * @param  Y2: the point 2 Y position
  */
void BSP_LCD_DrawLine(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8002408:	b590      	push	{r4, r7, lr}
 800240a:	b08b      	sub	sp, #44	@ 0x2c
 800240c:	af00      	add	r7, sp, #0
 800240e:	4604      	mov	r4, r0
 8002410:	4608      	mov	r0, r1
 8002412:	4611      	mov	r1, r2
 8002414:	461a      	mov	r2, r3
 8002416:	4623      	mov	r3, r4
 8002418:	80fb      	strh	r3, [r7, #6]
 800241a:	4603      	mov	r3, r0
 800241c:	80bb      	strh	r3, [r7, #4]
 800241e:	460b      	mov	r3, r1
 8002420:	807b      	strh	r3, [r7, #2]
 8002422:	4613      	mov	r3, r2
 8002424:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0,
 8002426:	2300      	movs	r3, #0
 8002428:	823b      	strh	r3, [r7, #16]
 800242a:	2300      	movs	r3, #0
 800242c:	81fb      	strh	r3, [r7, #14]
 800242e:	2300      	movs	r3, #0
 8002430:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8002432:	2300      	movs	r3, #0
 8002434:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8002436:	2300      	movs	r3, #0
 8002438:	847b      	strh	r3, [r7, #34]	@ 0x22
 800243a:	2300      	movs	r3, #0
 800243c:	843b      	strh	r3, [r7, #32]
          yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0,
 800243e:	2300      	movs	r3, #0
 8002440:	83fb      	strh	r3, [r7, #30]
 8002442:	2300      	movs	r3, #0
 8002444:	83bb      	strh	r3, [r7, #28]
 8002446:	2300      	movs	r3, #0
 8002448:	837b      	strh	r3, [r7, #26]
 800244a:	2300      	movs	r3, #0
 800244c:	833b      	strh	r3, [r7, #24]
 800244e:	2300      	movs	r3, #0
 8002450:	82fb      	strh	r3, [r7, #22]
 8002452:	2300      	movs	r3, #0
 8002454:	82bb      	strh	r3, [r7, #20]
          curpixel = 0;
 8002456:	2300      	movs	r3, #0
 8002458:	827b      	strh	r3, [r7, #18]

  deltax = ABS(X2 - X1);        /* The difference between the x's */
 800245a:	887a      	ldrh	r2, [r7, #2]
 800245c:	88fb      	ldrh	r3, [r7, #6]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	2b00      	cmp	r3, #0
 8002462:	bfb8      	it	lt
 8002464:	425b      	neglt	r3, r3
 8002466:	823b      	strh	r3, [r7, #16]
  deltay = ABS(Y2 - Y1);        /* The difference between the y's */
 8002468:	883a      	ldrh	r2, [r7, #0]
 800246a:	88bb      	ldrh	r3, [r7, #4]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	2b00      	cmp	r3, #0
 8002470:	bfb8      	it	lt
 8002472:	425b      	neglt	r3, r3
 8002474:	81fb      	strh	r3, [r7, #14]
  x = X1;                       /* Start x off at the first pixel */
 8002476:	88fb      	ldrh	r3, [r7, #6]
 8002478:	84fb      	strh	r3, [r7, #38]	@ 0x26
  y = Y1;                       /* Start y off at the first pixel */
 800247a:	88bb      	ldrh	r3, [r7, #4]
 800247c:	84bb      	strh	r3, [r7, #36]	@ 0x24

  if (X2 >= X1)                 /* The x-values are increasing */
 800247e:	887a      	ldrh	r2, [r7, #2]
 8002480:	88fb      	ldrh	r3, [r7, #6]
 8002482:	429a      	cmp	r2, r3
 8002484:	d304      	bcc.n	8002490 <BSP_LCD_DrawLine+0x88>
  {
    xinc1 = 1;
 8002486:	2301      	movs	r3, #1
 8002488:	847b      	strh	r3, [r7, #34]	@ 0x22
    xinc2 = 1;
 800248a:	2301      	movs	r3, #1
 800248c:	843b      	strh	r3, [r7, #32]
 800248e:	e005      	b.n	800249c <BSP_LCD_DrawLine+0x94>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 8002490:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002494:	847b      	strh	r3, [r7, #34]	@ 0x22
    xinc2 = -1;
 8002496:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800249a:	843b      	strh	r3, [r7, #32]
  }

  if (Y2 >= Y1)                 /* The y-values are increasing */
 800249c:	883a      	ldrh	r2, [r7, #0]
 800249e:	88bb      	ldrh	r3, [r7, #4]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d304      	bcc.n	80024ae <BSP_LCD_DrawLine+0xa6>
  {
    yinc1 = 1;
 80024a4:	2301      	movs	r3, #1
 80024a6:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 80024a8:	2301      	movs	r3, #1
 80024aa:	83bb      	strh	r3, [r7, #28]
 80024ac:	e005      	b.n	80024ba <BSP_LCD_DrawLine+0xb2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 80024ae:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80024b2:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 80024b4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80024b8:	83bb      	strh	r3, [r7, #28]
  }

  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 80024ba:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80024be:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80024c2:	429a      	cmp	r2, r3
 80024c4:	db10      	blt.n	80024e8 <BSP_LCD_DrawLine+0xe0>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 80024c6:	2300      	movs	r3, #0
 80024c8:	847b      	strh	r3, [r7, #34]	@ 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 80024ca:	2300      	movs	r3, #0
 80024cc:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 80024ce:	8a3b      	ldrh	r3, [r7, #16]
 80024d0:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 80024d2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80024d6:	0fda      	lsrs	r2, r3, #31
 80024d8:	4413      	add	r3, r2
 80024da:	105b      	asrs	r3, r3, #1
 80024dc:	833b      	strh	r3, [r7, #24]
    numadd = deltay;
 80024de:	89fb      	ldrh	r3, [r7, #14]
 80024e0:	82fb      	strh	r3, [r7, #22]
    numpixels = deltax;         /* There are more x-values than y-values */
 80024e2:	8a3b      	ldrh	r3, [r7, #16]
 80024e4:	82bb      	strh	r3, [r7, #20]
 80024e6:	e00f      	b.n	8002508 <BSP_LCD_DrawLine+0x100>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 80024e8:	2300      	movs	r3, #0
 80024ea:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 80024ec:	2300      	movs	r3, #0
 80024ee:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 80024f0:	89fb      	ldrh	r3, [r7, #14]
 80024f2:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 80024f4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80024f8:	0fda      	lsrs	r2, r3, #31
 80024fa:	4413      	add	r3, r2
 80024fc:	105b      	asrs	r3, r3, #1
 80024fe:	833b      	strh	r3, [r7, #24]
    numadd = deltax;
 8002500:	8a3b      	ldrh	r3, [r7, #16]
 8002502:	82fb      	strh	r3, [r7, #22]
    numpixels = deltay;         /* There are more y-values than x-values */
 8002504:	89fb      	ldrh	r3, [r7, #14]
 8002506:	82bb      	strh	r3, [r7, #20]
  }

  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8002508:	2300      	movs	r3, #0
 800250a:	827b      	strh	r3, [r7, #18]
 800250c:	e037      	b.n	800257e <BSP_LCD_DrawLine+0x176>
  {
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 800250e:	8cf8      	ldrh	r0, [r7, #38]	@ 0x26
 8002510:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 8002512:	4b20      	ldr	r3, [pc, #128]	@ (8002594 <BSP_LCD_DrawLine+0x18c>)
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	4c20      	ldr	r4, [pc, #128]	@ (8002598 <BSP_LCD_DrawLine+0x190>)
 8002518:	4613      	mov	r3, r2
 800251a:	005b      	lsls	r3, r3, #1
 800251c:	4413      	add	r3, r2
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	4423      	add	r3, r4
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	461a      	mov	r2, r3
 8002526:	f000 ff73 	bl	8003410 <BSP_LCD_DrawPixel>
    num += numadd;                            /* Increase the numerator by the top of the fraction */
 800252a:	8b3a      	ldrh	r2, [r7, #24]
 800252c:	8afb      	ldrh	r3, [r7, #22]
 800252e:	4413      	add	r3, r2
 8002530:	b29b      	uxth	r3, r3
 8002532:	833b      	strh	r3, [r7, #24]
    if (num >= den)                           /* Check if numerator >= denominator */
 8002534:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8002538:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800253c:	429a      	cmp	r2, r3
 800253e:	db0e      	blt.n	800255e <BSP_LCD_DrawLine+0x156>
    {
      num -= den;                             /* Calculate the new numerator value */
 8002540:	8b3a      	ldrh	r2, [r7, #24]
 8002542:	8b7b      	ldrh	r3, [r7, #26]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	b29b      	uxth	r3, r3
 8002548:	833b      	strh	r3, [r7, #24]
      x += xinc1;                             /* Change the x as appropriate */
 800254a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800254c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800254e:	4413      	add	r3, r2
 8002550:	b29b      	uxth	r3, r3
 8002552:	84fb      	strh	r3, [r7, #38]	@ 0x26
      y += yinc1;                             /* Change the y as appropriate */
 8002554:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002556:	8bfb      	ldrh	r3, [r7, #30]
 8002558:	4413      	add	r3, r2
 800255a:	b29b      	uxth	r3, r3
 800255c:	84bb      	strh	r3, [r7, #36]	@ 0x24
    }
    x += xinc2;                               /* Change the x as appropriate */
 800255e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8002560:	8c3b      	ldrh	r3, [r7, #32]
 8002562:	4413      	add	r3, r2
 8002564:	b29b      	uxth	r3, r3
 8002566:	84fb      	strh	r3, [r7, #38]	@ 0x26
    y += yinc2;                               /* Change the y as appropriate */
 8002568:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800256a:	8bbb      	ldrh	r3, [r7, #28]
 800256c:	4413      	add	r3, r2
 800256e:	b29b      	uxth	r3, r3
 8002570:	84bb      	strh	r3, [r7, #36]	@ 0x24
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8002572:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002576:	b29b      	uxth	r3, r3
 8002578:	3301      	adds	r3, #1
 800257a:	b29b      	uxth	r3, r3
 800257c:	827b      	strh	r3, [r7, #18]
 800257e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002582:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002586:	429a      	cmp	r2, r3
 8002588:	ddc1      	ble.n	800250e <BSP_LCD_DrawLine+0x106>
  }
}
 800258a:	bf00      	nop
 800258c:	bf00      	nop
 800258e:	372c      	adds	r7, #44	@ 0x2c
 8002590:	46bd      	mov	sp, r7
 8002592:	bd90      	pop	{r4, r7, pc}
 8002594:	20000418 	.word	0x20000418
 8002598:	2000041c 	.word	0x2000041c

0800259c <BSP_LCD_DrawRect>:
  * @param  Ypos: the Y position
  * @param  Height: display rectangle height
  * @param  Width: display rectangle width
  */
void BSP_LCD_DrawRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 800259c:	b590      	push	{r4, r7, lr}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	4604      	mov	r4, r0
 80025a4:	4608      	mov	r0, r1
 80025a6:	4611      	mov	r1, r2
 80025a8:	461a      	mov	r2, r3
 80025aa:	4623      	mov	r3, r4
 80025ac:	80fb      	strh	r3, [r7, #6]
 80025ae:	4603      	mov	r3, r0
 80025b0:	80bb      	strh	r3, [r7, #4]
 80025b2:	460b      	mov	r3, r1
 80025b4:	807b      	strh	r3, [r7, #2]
 80025b6:	4613      	mov	r3, r2
 80025b8:	803b      	strh	r3, [r7, #0]
  /* Draw horizontal lines */
  BSP_LCD_DrawHLine(Xpos, Ypos, Width);
 80025ba:	887a      	ldrh	r2, [r7, #2]
 80025bc:	88b9      	ldrh	r1, [r7, #4]
 80025be:	88fb      	ldrh	r3, [r7, #6]
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7ff fea1 	bl	8002308 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos, (Ypos + Height), Width);
 80025c6:	88ba      	ldrh	r2, [r7, #4]
 80025c8:	883b      	ldrh	r3, [r7, #0]
 80025ca:	4413      	add	r3, r2
 80025cc:	b299      	uxth	r1, r3
 80025ce:	887a      	ldrh	r2, [r7, #2]
 80025d0:	88fb      	ldrh	r3, [r7, #6]
 80025d2:	4618      	mov	r0, r3
 80025d4:	f7ff fe98 	bl	8002308 <BSP_LCD_DrawHLine>

  /* Draw vertical lines */
  BSP_LCD_DrawVLine(Xpos, Ypos, Height);
 80025d8:	883a      	ldrh	r2, [r7, #0]
 80025da:	88b9      	ldrh	r1, [r7, #4]
 80025dc:	88fb      	ldrh	r3, [r7, #6]
 80025de:	4618      	mov	r0, r3
 80025e0:	f7ff fed0 	bl	8002384 <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine((Xpos + Width), Ypos, Height);
 80025e4:	88fa      	ldrh	r2, [r7, #6]
 80025e6:	887b      	ldrh	r3, [r7, #2]
 80025e8:	4413      	add	r3, r2
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	883a      	ldrh	r2, [r7, #0]
 80025ee:	88b9      	ldrh	r1, [r7, #4]
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7ff fec7 	bl	8002384 <BSP_LCD_DrawVLine>
}
 80025f6:	bf00      	nop
 80025f8:	370c      	adds	r7, #12
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd90      	pop	{r4, r7, pc}
	...

08002600 <BSP_LCD_DrawCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8002600:	b590      	push	{r4, r7, lr}
 8002602:	b087      	sub	sp, #28
 8002604:	af00      	add	r7, sp, #0
 8002606:	4603      	mov	r3, r0
 8002608:	80fb      	strh	r3, [r7, #6]
 800260a:	460b      	mov	r3, r1
 800260c:	80bb      	strh	r3, [r7, #4]
 800260e:	4613      	mov	r3, r2
 8002610:	807b      	strh	r3, [r7, #2]
  int32_t  d;/* Decision Variable */
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */

  d = 3 - (Radius << 1);
 8002612:	887b      	ldrh	r3, [r7, #2]
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	f1c3 0303 	rsb	r3, r3, #3
 800261a:	617b      	str	r3, [r7, #20]
  curx = 0;
 800261c:	2300      	movs	r3, #0
 800261e:	613b      	str	r3, [r7, #16]
  cury = Radius;
 8002620:	887b      	ldrh	r3, [r7, #2]
 8002622:	60fb      	str	r3, [r7, #12]

  while (curx <= cury)
 8002624:	e0c7      	b.n	80027b6 <BSP_LCD_DrawCircle+0x1b6>
  {
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	b29a      	uxth	r2, r3
 800262a:	88fb      	ldrh	r3, [r7, #6]
 800262c:	4413      	add	r3, r2
 800262e:	b298      	uxth	r0, r3
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	b29b      	uxth	r3, r3
 8002634:	88ba      	ldrh	r2, [r7, #4]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	b299      	uxth	r1, r3
 800263a:	4b64      	ldr	r3, [pc, #400]	@ (80027cc <BSP_LCD_DrawCircle+0x1cc>)
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	4c64      	ldr	r4, [pc, #400]	@ (80027d0 <BSP_LCD_DrawCircle+0x1d0>)
 8002640:	4613      	mov	r3, r2
 8002642:	005b      	lsls	r3, r3, #1
 8002644:	4413      	add	r3, r2
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	4423      	add	r3, r4
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	461a      	mov	r2, r3
 800264e:	f000 fedf 	bl	8003410 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	b29b      	uxth	r3, r3
 8002656:	88fa      	ldrh	r2, [r7, #6]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	b298      	uxth	r0, r3
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	b29b      	uxth	r3, r3
 8002660:	88ba      	ldrh	r2, [r7, #4]
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	b299      	uxth	r1, r3
 8002666:	4b59      	ldr	r3, [pc, #356]	@ (80027cc <BSP_LCD_DrawCircle+0x1cc>)
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	4c59      	ldr	r4, [pc, #356]	@ (80027d0 <BSP_LCD_DrawCircle+0x1d0>)
 800266c:	4613      	mov	r3, r2
 800266e:	005b      	lsls	r3, r3, #1
 8002670:	4413      	add	r3, r2
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	4423      	add	r3, r4
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	461a      	mov	r2, r3
 800267a:	f000 fec9 	bl	8003410 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	b29a      	uxth	r2, r3
 8002682:	88fb      	ldrh	r3, [r7, #6]
 8002684:	4413      	add	r3, r2
 8002686:	b298      	uxth	r0, r3
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	b29b      	uxth	r3, r3
 800268c:	88ba      	ldrh	r2, [r7, #4]
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	b299      	uxth	r1, r3
 8002692:	4b4e      	ldr	r3, [pc, #312]	@ (80027cc <BSP_LCD_DrawCircle+0x1cc>)
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	4c4e      	ldr	r4, [pc, #312]	@ (80027d0 <BSP_LCD_DrawCircle+0x1d0>)
 8002698:	4613      	mov	r3, r2
 800269a:	005b      	lsls	r3, r3, #1
 800269c:	4413      	add	r3, r2
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	4423      	add	r3, r4
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	461a      	mov	r2, r3
 80026a6:	f000 feb3 	bl	8003410 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	88fa      	ldrh	r2, [r7, #6]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	b298      	uxth	r0, r3
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	88ba      	ldrh	r2, [r7, #4]
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	b299      	uxth	r1, r3
 80026be:	4b43      	ldr	r3, [pc, #268]	@ (80027cc <BSP_LCD_DrawCircle+0x1cc>)
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	4c43      	ldr	r4, [pc, #268]	@ (80027d0 <BSP_LCD_DrawCircle+0x1d0>)
 80026c4:	4613      	mov	r3, r2
 80026c6:	005b      	lsls	r3, r3, #1
 80026c8:	4413      	add	r3, r2
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	4423      	add	r3, r4
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	461a      	mov	r2, r3
 80026d2:	f000 fe9d 	bl	8003410 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	b29a      	uxth	r2, r3
 80026da:	88fb      	ldrh	r3, [r7, #6]
 80026dc:	4413      	add	r3, r2
 80026de:	b298      	uxth	r0, r3
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	b29a      	uxth	r2, r3
 80026e4:	88bb      	ldrh	r3, [r7, #4]
 80026e6:	4413      	add	r3, r2
 80026e8:	b299      	uxth	r1, r3
 80026ea:	4b38      	ldr	r3, [pc, #224]	@ (80027cc <BSP_LCD_DrawCircle+0x1cc>)
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	4c38      	ldr	r4, [pc, #224]	@ (80027d0 <BSP_LCD_DrawCircle+0x1d0>)
 80026f0:	4613      	mov	r3, r2
 80026f2:	005b      	lsls	r3, r3, #1
 80026f4:	4413      	add	r3, r2
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	4423      	add	r3, r4
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	461a      	mov	r2, r3
 80026fe:	f000 fe87 	bl	8003410 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	b29b      	uxth	r3, r3
 8002706:	88fa      	ldrh	r2, [r7, #6]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	b298      	uxth	r0, r3
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	b29a      	uxth	r2, r3
 8002710:	88bb      	ldrh	r3, [r7, #4]
 8002712:	4413      	add	r3, r2
 8002714:	b299      	uxth	r1, r3
 8002716:	4b2d      	ldr	r3, [pc, #180]	@ (80027cc <BSP_LCD_DrawCircle+0x1cc>)
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	4c2d      	ldr	r4, [pc, #180]	@ (80027d0 <BSP_LCD_DrawCircle+0x1d0>)
 800271c:	4613      	mov	r3, r2
 800271e:	005b      	lsls	r3, r3, #1
 8002720:	4413      	add	r3, r2
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	4423      	add	r3, r4
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	461a      	mov	r2, r3
 800272a:	f000 fe71 	bl	8003410 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	b29a      	uxth	r2, r3
 8002732:	88fb      	ldrh	r3, [r7, #6]
 8002734:	4413      	add	r3, r2
 8002736:	b298      	uxth	r0, r3
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	b29a      	uxth	r2, r3
 800273c:	88bb      	ldrh	r3, [r7, #4]
 800273e:	4413      	add	r3, r2
 8002740:	b299      	uxth	r1, r3
 8002742:	4b22      	ldr	r3, [pc, #136]	@ (80027cc <BSP_LCD_DrawCircle+0x1cc>)
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	4c22      	ldr	r4, [pc, #136]	@ (80027d0 <BSP_LCD_DrawCircle+0x1d0>)
 8002748:	4613      	mov	r3, r2
 800274a:	005b      	lsls	r3, r3, #1
 800274c:	4413      	add	r3, r2
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	4423      	add	r3, r4
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	461a      	mov	r2, r3
 8002756:	f000 fe5b 	bl	8003410 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	b29b      	uxth	r3, r3
 800275e:	88fa      	ldrh	r2, [r7, #6]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	b298      	uxth	r0, r3
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	b29a      	uxth	r2, r3
 8002768:	88bb      	ldrh	r3, [r7, #4]
 800276a:	4413      	add	r3, r2
 800276c:	b299      	uxth	r1, r3
 800276e:	4b17      	ldr	r3, [pc, #92]	@ (80027cc <BSP_LCD_DrawCircle+0x1cc>)
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	4c17      	ldr	r4, [pc, #92]	@ (80027d0 <BSP_LCD_DrawCircle+0x1d0>)
 8002774:	4613      	mov	r3, r2
 8002776:	005b      	lsls	r3, r3, #1
 8002778:	4413      	add	r3, r2
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	4423      	add	r3, r4
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	461a      	mov	r2, r3
 8002782:	f000 fe45 	bl	8003410 <BSP_LCD_DrawPixel>

    if (d < 0)
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	2b00      	cmp	r3, #0
 800278a:	da06      	bge.n	800279a <BSP_LCD_DrawCircle+0x19a>
    {
      d += (curx << 2) + 6;
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	009a      	lsls	r2, r3, #2
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	4413      	add	r3, r2
 8002794:	3306      	adds	r3, #6
 8002796:	617b      	str	r3, [r7, #20]
 8002798:	e00a      	b.n	80027b0 <BSP_LCD_DrawCircle+0x1b0>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 800279a:	693a      	ldr	r2, [r7, #16]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	009a      	lsls	r2, r3, #2
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	4413      	add	r3, r2
 80027a6:	330a      	adds	r3, #10
 80027a8:	617b      	str	r3, [r7, #20]
      cury--;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	3b01      	subs	r3, #1
 80027ae:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	3301      	adds	r3, #1
 80027b4:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 80027b6:	693a      	ldr	r2, [r7, #16]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	429a      	cmp	r2, r3
 80027bc:	f67f af33 	bls.w	8002626 <BSP_LCD_DrawCircle+0x26>
  }
}
 80027c0:	bf00      	nop
 80027c2:	bf00      	nop
 80027c4:	371c      	adds	r7, #28
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd90      	pop	{r4, r7, pc}
 80027ca:	bf00      	nop
 80027cc:	20000418 	.word	0x20000418
 80027d0:	2000041c 	.word	0x2000041c

080027d4 <BSP_LCD_DrawPolygon>:
  * @brief  Displays an poly-line (between many points).
  * @param  Points: pointer to the points array
  * @param  PointCount: Number of points
  */
void BSP_LCD_DrawPolygon(pPoint Points, uint16_t PointCount)
{
 80027d4:	b590      	push	{r4, r7, lr}
 80027d6:	b085      	sub	sp, #20
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	460b      	mov	r3, r1
 80027de:	807b      	strh	r3, [r7, #2]
  int16_t x = 0, y = 0;
 80027e0:	2300      	movs	r3, #0
 80027e2:	81fb      	strh	r3, [r7, #14]
 80027e4:	2300      	movs	r3, #0
 80027e6:	81bb      	strh	r3, [r7, #12]

  if (PointCount < 2)
 80027e8:	887b      	ldrh	r3, [r7, #2]
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d93b      	bls.n	8002866 <BSP_LCD_DrawPolygon+0x92>
  {
    return;
  }

  BSP_LCD_DrawLine(Points->X, Points->Y, (Points + PointCount - 1)->X, (Points + PointCount - 1)->Y);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027f4:	b298      	uxth	r0, r3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80027fc:	b299      	uxth	r1, r3
 80027fe:	887b      	ldrh	r3, [r7, #2]
 8002800:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002804:	3b01      	subs	r3, #1
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	4413      	add	r3, r2
 800280c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002810:	b29c      	uxth	r4, r3
 8002812:	887b      	ldrh	r3, [r7, #2]
 8002814:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002818:	3b01      	subs	r3, #1
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	4413      	add	r3, r2
 8002820:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002824:	b29b      	uxth	r3, r3
 8002826:	4622      	mov	r2, r4
 8002828:	f7ff fdee 	bl	8002408 <BSP_LCD_DrawLine>

  while (--PointCount)
 800282c:	e014      	b.n	8002858 <BSP_LCD_DrawPolygon+0x84>
  {
    x = Points->X;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	881b      	ldrh	r3, [r3, #0]
 8002832:	81fb      	strh	r3, [r7, #14]
    y = Points->Y;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	885b      	ldrh	r3, [r3, #2]
 8002838:	81bb      	strh	r3, [r7, #12]
    Points++;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	3304      	adds	r3, #4
 800283e:	607b      	str	r3, [r7, #4]
    BSP_LCD_DrawLine(x, y, Points->X, Points->Y);
 8002840:	89f8      	ldrh	r0, [r7, #14]
 8002842:	89b9      	ldrh	r1, [r7, #12]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f9b3 3000 	ldrsh.w	r3, [r3]
 800284a:	b29a      	uxth	r2, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002852:	b29b      	uxth	r3, r3
 8002854:	f7ff fdd8 	bl	8002408 <BSP_LCD_DrawLine>
  while (--PointCount)
 8002858:	887b      	ldrh	r3, [r7, #2]
 800285a:	3b01      	subs	r3, #1
 800285c:	807b      	strh	r3, [r7, #2]
 800285e:	887b      	ldrh	r3, [r7, #2]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d1e4      	bne.n	800282e <BSP_LCD_DrawPolygon+0x5a>
 8002864:	e000      	b.n	8002868 <BSP_LCD_DrawPolygon+0x94>
    return;
 8002866:	bf00      	nop
  }
}
 8002868:	3714      	adds	r7, #20
 800286a:	46bd      	mov	sp, r7
 800286c:	bd90      	pop	{r4, r7, pc}
	...

08002870 <BSP_LCD_DrawEllipse>:
  * @param  Ypos: the Y position
  * @param  XRadius: the X radius of ellipse
  * @param  YRadius: the Y radius of ellipse
  */
void BSP_LCD_DrawEllipse(int Xpos, int Ypos, int XRadius, int YRadius)
{
 8002870:	b590      	push	{r4, r7, lr}
 8002872:	b08d      	sub	sp, #52	@ 0x34
 8002874:	af00      	add	r7, sp, #0
 8002876:	60f8      	str	r0, [r7, #12]
 8002878:	60b9      	str	r1, [r7, #8]
 800287a:	607a      	str	r2, [r7, #4]
 800287c:	603b      	str	r3, [r7, #0]
  int x = 0, y = -YRadius, err = 2 - 2 * XRadius, e2;
 800287e:	2300      	movs	r3, #0
 8002880:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	425b      	negs	r3, r3
 8002886:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f1c3 0301 	rsb	r3, r3, #1
 800288e:	005b      	lsls	r3, r3, #1
 8002890:	627b      	str	r3, [r7, #36]	@ 0x24
  float k = 0, rad1 = 0, rad2 = 0;
 8002892:	f04f 0300 	mov.w	r3, #0
 8002896:	61fb      	str	r3, [r7, #28]
 8002898:	f04f 0300 	mov.w	r3, #0
 800289c:	61bb      	str	r3, [r7, #24]
 800289e:	f04f 0300 	mov.w	r3, #0
 80028a2:	617b      	str	r3, [r7, #20]

  rad1 = XRadius;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	ee07 3a90 	vmov	s15, r3
 80028aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028ae:	edc7 7a06 	vstr	s15, [r7, #24]
  rad2 = YRadius;
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	ee07 3a90 	vmov	s15, r3
 80028b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028bc:	edc7 7a05 	vstr	s15, [r7, #20]

  k = (float)(rad2 / rad1);
 80028c0:	edd7 6a05 	vldr	s13, [r7, #20]
 80028c4:	ed97 7a06 	vldr	s14, [r7, #24]
 80028c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028cc:	edc7 7a07 	vstr	s15, [r7, #28]

  do
  {
    BSP_LCD_DrawPixel((Xpos - (uint16_t)(x / k)), (Ypos + y), DrawProp[ActiveLayer].TextColor);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	b29a      	uxth	r2, r3
 80028d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028d6:	ee07 3a90 	vmov	s15, r3
 80028da:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80028de:	ed97 7a07 	vldr	s14, [r7, #28]
 80028e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028ea:	ee17 3a90 	vmov	r3, s15
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	b298      	uxth	r0, r3
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	b29a      	uxth	r2, r3
 80028f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	4413      	add	r3, r2
 80028fe:	b299      	uxth	r1, r3
 8002900:	4b53      	ldr	r3, [pc, #332]	@ (8002a50 <BSP_LCD_DrawEllipse+0x1e0>)
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	4c53      	ldr	r4, [pc, #332]	@ (8002a54 <BSP_LCD_DrawEllipse+0x1e4>)
 8002906:	4613      	mov	r3, r2
 8002908:	005b      	lsls	r3, r3, #1
 800290a:	4413      	add	r3, r2
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	4423      	add	r3, r4
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	461a      	mov	r2, r3
 8002914:	f000 fd7c 	bl	8003410 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + (uint16_t)(x / k)), (Ypos + y), DrawProp[ActiveLayer].TextColor);
 8002918:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800291a:	ee07 3a90 	vmov	s15, r3
 800291e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002922:	ed97 7a07 	vldr	s14, [r7, #28]
 8002926:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800292a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800292e:	ee17 3a90 	vmov	r3, s15
 8002932:	b29a      	uxth	r2, r3
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	b29b      	uxth	r3, r3
 8002938:	4413      	add	r3, r2
 800293a:	b298      	uxth	r0, r3
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	b29a      	uxth	r2, r3
 8002940:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002942:	b29b      	uxth	r3, r3
 8002944:	4413      	add	r3, r2
 8002946:	b299      	uxth	r1, r3
 8002948:	4b41      	ldr	r3, [pc, #260]	@ (8002a50 <BSP_LCD_DrawEllipse+0x1e0>)
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	4c41      	ldr	r4, [pc, #260]	@ (8002a54 <BSP_LCD_DrawEllipse+0x1e4>)
 800294e:	4613      	mov	r3, r2
 8002950:	005b      	lsls	r3, r3, #1
 8002952:	4413      	add	r3, r2
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	4423      	add	r3, r4
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	461a      	mov	r2, r3
 800295c:	f000 fd58 	bl	8003410 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + (uint16_t)(x / k)), (Ypos - y), DrawProp[ActiveLayer].TextColor);
 8002960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002962:	ee07 3a90 	vmov	s15, r3
 8002966:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800296a:	ed97 7a07 	vldr	s14, [r7, #28]
 800296e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002972:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002976:	ee17 3a90 	vmov	r3, s15
 800297a:	b29a      	uxth	r2, r3
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	b29b      	uxth	r3, r3
 8002980:	4413      	add	r3, r2
 8002982:	b298      	uxth	r0, r3
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	b29a      	uxth	r2, r3
 8002988:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800298a:	b29b      	uxth	r3, r3
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	b299      	uxth	r1, r3
 8002990:	4b2f      	ldr	r3, [pc, #188]	@ (8002a50 <BSP_LCD_DrawEllipse+0x1e0>)
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	4c2f      	ldr	r4, [pc, #188]	@ (8002a54 <BSP_LCD_DrawEllipse+0x1e4>)
 8002996:	4613      	mov	r3, r2
 8002998:	005b      	lsls	r3, r3, #1
 800299a:	4413      	add	r3, r2
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	4423      	add	r3, r4
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	461a      	mov	r2, r3
 80029a4:	f000 fd34 	bl	8003410 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - (uint16_t)(x / k)), (Ypos - y), DrawProp[ActiveLayer].TextColor);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	b29a      	uxth	r2, r3
 80029ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029ae:	ee07 3a90 	vmov	s15, r3
 80029b2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80029b6:	ed97 7a07 	vldr	s14, [r7, #28]
 80029ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029c2:	ee17 3a90 	vmov	r3, s15
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	b298      	uxth	r0, r3
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	b29a      	uxth	r2, r3
 80029d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	b299      	uxth	r1, r3
 80029d8:	4b1d      	ldr	r3, [pc, #116]	@ (8002a50 <BSP_LCD_DrawEllipse+0x1e0>)
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	4c1d      	ldr	r4, [pc, #116]	@ (8002a54 <BSP_LCD_DrawEllipse+0x1e4>)
 80029de:	4613      	mov	r3, r2
 80029e0:	005b      	lsls	r3, r3, #1
 80029e2:	4413      	add	r3, r2
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	4423      	add	r3, r4
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	461a      	mov	r2, r3
 80029ec:	f000 fd10 	bl	8003410 <BSP_LCD_DrawPixel>

    e2 = err;
 80029f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f2:	623b      	str	r3, [r7, #32]
    if (e2 <= x)
 80029f4:	6a3a      	ldr	r2, [r7, #32]
 80029f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029f8:	429a      	cmp	r2, r3
 80029fa:	dc13      	bgt.n	8002a24 <BSP_LCD_DrawEllipse+0x1b4>
    {
      err += ++x * 2 + 1;
 80029fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029fe:	3301      	adds	r3, #1
 8002a00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a04:	005b      	lsls	r3, r3, #1
 8002a06:	3301      	adds	r3, #1
 8002a08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a0a:	4413      	add	r3, r2
 8002a0c:	627b      	str	r3, [r7, #36]	@ 0x24
      if (-y == x && e2 <= y) { e2 = 0; }
 8002a0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a10:	425b      	negs	r3, r3
 8002a12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d105      	bne.n	8002a24 <BSP_LCD_DrawEllipse+0x1b4>
 8002a18:	6a3a      	ldr	r2, [r7, #32]
 8002a1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	dc01      	bgt.n	8002a24 <BSP_LCD_DrawEllipse+0x1b4>
 8002a20:	2300      	movs	r3, #0
 8002a22:	623b      	str	r3, [r7, #32]
    }
    if (e2 > y) { err += ++y * 2 + 1; }
 8002a24:	6a3a      	ldr	r2, [r7, #32]
 8002a26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	dd08      	ble.n	8002a3e <BSP_LCD_DrawEllipse+0x1ce>
 8002a2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a2e:	3301      	adds	r3, #1
 8002a30:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002a32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a34:	005b      	lsls	r3, r3, #1
 8002a36:	3301      	adds	r3, #1
 8002a38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a3a:	4413      	add	r3, r2
 8002a3c:	627b      	str	r3, [r7, #36]	@ 0x24
  } while (y <= 0);
 8002a3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	f77f af45 	ble.w	80028d0 <BSP_LCD_DrawEllipse+0x60>
}
 8002a46:	bf00      	nop
 8002a48:	bf00      	nop
 8002a4a:	3734      	adds	r7, #52	@ 0x34
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd90      	pop	{r4, r7, pc}
 8002a50:	20000418 	.word	0x20000418
 8002a54:	2000041c 	.word	0x2000041c

08002a58 <BSP_LCD_DrawBitmap>:
  * @param  X: the bmp x position in the LCD
  * @param  Y: the bmp Y position in the LCD
  * @param  pBmp: Bmp picture address in the internal Flash
  */
void BSP_LCD_DrawBitmap(uint32_t X, uint32_t Y, uint8_t *pBmp)
{
 8002a58:	b590      	push	{r4, r7, lr}
 8002a5a:	b08b      	sub	sp, #44	@ 0x2c
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	60f8      	str	r0, [r7, #12]
 8002a60:	60b9      	str	r1, [r7, #8]
 8002a62:	607a      	str	r2, [r7, #4]
  uint32_t index = 0, width = 0, height = 0, bitpixel = 0;
 8002a64:	2300      	movs	r3, #0
 8002a66:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a68:	2300      	movs	r3, #0
 8002a6a:	61bb      	str	r3, [r7, #24]
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	617b      	str	r3, [r7, #20]
 8002a70:	2300      	movs	r3, #0
 8002a72:	613b      	str	r3, [r7, #16]
  uint32_t address;
  uint32_t inputcolormode = 0;
 8002a74:	2300      	movs	r3, #0
 8002a76:	61fb      	str	r3, [r7, #28]

  /* Get bitmap data address offset */
  index = pBmp[10] + (pBmp[11] << 8) + (pBmp[12] << 16)  + (pBmp[13] << 24);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	330a      	adds	r3, #10
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	461a      	mov	r2, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	330b      	adds	r3, #11
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	021b      	lsls	r3, r3, #8
 8002a88:	441a      	add	r2, r3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	330c      	adds	r3, #12
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	041b      	lsls	r3, r3, #16
 8002a92:	441a      	add	r2, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	330d      	adds	r3, #13
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	061b      	lsls	r3, r3, #24
 8002a9c:	4413      	add	r3, r2
 8002a9e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Read bitmap width */
  width = pBmp[18] + (pBmp[19] << 8) + (pBmp[20] << 16)  + (pBmp[21] << 24);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	3312      	adds	r3, #18
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	3313      	adds	r3, #19
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	021b      	lsls	r3, r3, #8
 8002ab0:	441a      	add	r2, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	3314      	adds	r3, #20
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	041b      	lsls	r3, r3, #16
 8002aba:	441a      	add	r2, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	3315      	adds	r3, #21
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	061b      	lsls	r3, r3, #24
 8002ac4:	4413      	add	r3, r2
 8002ac6:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = pBmp[22] + (pBmp[23] << 8) + (pBmp[24] << 16)  + (pBmp[25] << 24);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	3316      	adds	r3, #22
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	461a      	mov	r2, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	3317      	adds	r3, #23
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	021b      	lsls	r3, r3, #8
 8002ad8:	441a      	add	r2, r3
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	3318      	adds	r3, #24
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	041b      	lsls	r3, r3, #16
 8002ae2:	441a      	add	r2, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	3319      	adds	r3, #25
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	061b      	lsls	r3, r3, #24
 8002aec:	4413      	add	r3, r2
 8002aee:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bitpixel = pBmp[28] + (pBmp[29] << 8);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	331c      	adds	r3, #28
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	461a      	mov	r2, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	331d      	adds	r3, #29
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	021b      	lsls	r3, r3, #8
 8002b00:	4413      	add	r3, r2
 8002b02:	613b      	str	r3, [r7, #16]

  /* Set Address */
  address = LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize() * Y) + X) * (4));
 8002b04:	4b2b      	ldr	r3, [pc, #172]	@ (8002bb4 <BSP_LCD_DrawBitmap+0x15c>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a2b      	ldr	r2, [pc, #172]	@ (8002bb8 <BSP_LCD_DrawBitmap+0x160>)
 8002b0a:	2134      	movs	r1, #52	@ 0x34
 8002b0c:	fb01 f303 	mul.w	r3, r1, r3
 8002b10:	4413      	add	r3, r2
 8002b12:	335c      	adds	r3, #92	@ 0x5c
 8002b14:	681c      	ldr	r4, [r3, #0]
 8002b16:	f7ff f963 	bl	8001de0 <BSP_LCD_GetXSize>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	fb03 f202 	mul.w	r2, r3, r2
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	4413      	add	r3, r2
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	4423      	add	r3, r4
 8002b2a:	623b      	str	r3, [r7, #32]

  /* Get the Layer pixel format */
  if ((bitpixel / 8) == 4)
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	3b20      	subs	r3, #32
 8002b30:	2b07      	cmp	r3, #7
 8002b32:	d802      	bhi.n	8002b3a <BSP_LCD_DrawBitmap+0xe2>
  {
    inputcolormode = CM_ARGB8888;
 8002b34:	2300      	movs	r3, #0
 8002b36:	61fb      	str	r3, [r7, #28]
 8002b38:	e008      	b.n	8002b4c <BSP_LCD_DrawBitmap+0xf4>
  }
  else if ((bitpixel / 8) == 2)
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	3b10      	subs	r3, #16
 8002b3e:	2b07      	cmp	r3, #7
 8002b40:	d802      	bhi.n	8002b48 <BSP_LCD_DrawBitmap+0xf0>
  {
    inputcolormode = CM_RGB565;
 8002b42:	2302      	movs	r3, #2
 8002b44:	61fb      	str	r3, [r7, #28]
 8002b46:	e001      	b.n	8002b4c <BSP_LCD_DrawBitmap+0xf4>
  }
  else
  {
    inputcolormode = CM_RGB888;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	61fb      	str	r3, [r7, #28]
  }

  /* bypass the bitmap header */
  pBmp += (index + (width * (height - 1) * (bitpixel / 8)));
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	3b01      	subs	r3, #1
 8002b50:	69ba      	ldr	r2, [r7, #24]
 8002b52:	fb02 f303 	mul.w	r3, r2, r3
 8002b56:	693a      	ldr	r2, [r7, #16]
 8002b58:	08d2      	lsrs	r2, r2, #3
 8002b5a:	fb03 f202 	mul.w	r2, r3, r2
 8002b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b60:	4413      	add	r3, r2
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	4413      	add	r3, r2
 8002b66:	607b      	str	r3, [r7, #4]

  /* Convert picture to ARGB8888 pixel format */
  for (index = 0; index < height; index++)
 8002b68:	2300      	movs	r3, #0
 8002b6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b6c:	e018      	b.n	8002ba0 <BSP_LCD_DrawBitmap+0x148>
  {
    /* Pixel format conversion */
    ConvertLineToARGB8888((uint32_t *)pBmp, (uint32_t *)address, width, inputcolormode);
 8002b6e:	6a39      	ldr	r1, [r7, #32]
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	69ba      	ldr	r2, [r7, #24]
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f000 fd63 	bl	8003640 <ConvertLineToARGB8888>

    /* Increment the source and destination buffers */
    address += ((BSP_LCD_GetXSize() - width + width) * 4);
 8002b7a:	f7ff f931 	bl	8001de0 <BSP_LCD_GetXSize>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	6a3a      	ldr	r2, [r7, #32]
 8002b84:	4413      	add	r3, r2
 8002b86:	623b      	str	r3, [r7, #32]
    pBmp -= width * (bitpixel / 8);
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	08db      	lsrs	r3, r3, #3
 8002b8c:	69ba      	ldr	r2, [r7, #24]
 8002b8e:	fb02 f303 	mul.w	r3, r2, r3
 8002b92:	425b      	negs	r3, r3
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	4413      	add	r3, r2
 8002b98:	607b      	str	r3, [r7, #4]
  for (index = 0; index < height; index++)
 8002b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b9c:	3301      	adds	r3, #1
 8002b9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ba0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d3e2      	bcc.n	8002b6e <BSP_LCD_DrawBitmap+0x116>
  }
}
 8002ba8:	bf00      	nop
 8002baa:	bf00      	nop
 8002bac:	372c      	adds	r7, #44	@ 0x2c
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd90      	pop	{r4, r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	20000418 	.word	0x20000418
 8002bb8:	20000300 	.word	0x20000300

08002bbc <BSP_LCD_FillRect>:
  * @param  Ypos: the Y position
  * @param  Height: rectangle height
  * @param  Width: rectangle width
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8002bbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002bc0:	b086      	sub	sp, #24
 8002bc2:	af02      	add	r7, sp, #8
 8002bc4:	4604      	mov	r4, r0
 8002bc6:	4608      	mov	r0, r1
 8002bc8:	4611      	mov	r1, r2
 8002bca:	461a      	mov	r2, r3
 8002bcc:	4623      	mov	r3, r4
 8002bce:	80fb      	strh	r3, [r7, #6]
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	80bb      	strh	r3, [r7, #4]
 8002bd4:	460b      	mov	r3, r1
 8002bd6:	807b      	strh	r3, [r7, #2]
 8002bd8:	4613      	mov	r3, r2
 8002bda:	803b      	strh	r3, [r7, #0]
  uint32_t xaddress = 0;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8002be0:	4b20      	ldr	r3, [pc, #128]	@ (8002c64 <BSP_LCD_FillRect+0xa8>)
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	4920      	ldr	r1, [pc, #128]	@ (8002c68 <BSP_LCD_FillRect+0xac>)
 8002be6:	4613      	mov	r3, r2
 8002be8:	005b      	lsls	r3, r3, #1
 8002bea:	4413      	add	r3, r2
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	440b      	add	r3, r1
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f7ff f980 	bl	8001ef8 <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4 * (BSP_LCD_GetXSize() * Ypos + Xpos);
 8002bf8:	4b1a      	ldr	r3, [pc, #104]	@ (8002c64 <BSP_LCD_FillRect+0xa8>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a1b      	ldr	r2, [pc, #108]	@ (8002c6c <BSP_LCD_FillRect+0xb0>)
 8002bfe:	2134      	movs	r1, #52	@ 0x34
 8002c00:	fb01 f303 	mul.w	r3, r1, r3
 8002c04:	4413      	add	r3, r2
 8002c06:	335c      	adds	r3, #92	@ 0x5c
 8002c08:	681c      	ldr	r4, [r3, #0]
 8002c0a:	f7ff f8e9 	bl	8001de0 <BSP_LCD_GetXSize>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	88bb      	ldrh	r3, [r7, #4]
 8002c12:	fb03 f202 	mul.w	r2, r3, r2
 8002c16:	88fb      	ldrh	r3, [r7, #6]
 8002c18:	4413      	add	r3, r2
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	4423      	add	r3, r4
 8002c1e:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width),
 8002c20:	4b10      	ldr	r3, [pc, #64]	@ (8002c64 <BSP_LCD_FillRect+0xa8>)
 8002c22:	681c      	ldr	r4, [r3, #0]
 8002c24:	68fd      	ldr	r5, [r7, #12]
 8002c26:	887e      	ldrh	r6, [r7, #2]
 8002c28:	f8b7 8000 	ldrh.w	r8, [r7]
 8002c2c:	f7ff f8d8 	bl	8001de0 <BSP_LCD_GetXSize>
 8002c30:	4602      	mov	r2, r0
 8002c32:	887b      	ldrh	r3, [r7, #2]
 8002c34:	1ad1      	subs	r1, r2, r3
 8002c36:	4b0b      	ldr	r3, [pc, #44]	@ (8002c64 <BSP_LCD_FillRect+0xa8>)
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	480b      	ldr	r0, [pc, #44]	@ (8002c68 <BSP_LCD_FillRect+0xac>)
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	005b      	lsls	r3, r3, #1
 8002c40:	4413      	add	r3, r2
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	4403      	add	r3, r0
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	9301      	str	r3, [sp, #4]
 8002c4a:	9100      	str	r1, [sp, #0]
 8002c4c:	4643      	mov	r3, r8
 8002c4e:	4632      	mov	r2, r6
 8002c50:	4629      	mov	r1, r5
 8002c52:	4620      	mov	r0, r4
 8002c54:	f000 fcbc 	bl	80035d0 <FillBuffer>
             DrawProp[ActiveLayer].TextColor);
}
 8002c58:	bf00      	nop
 8002c5a:	3710      	adds	r7, #16
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002c62:	bf00      	nop
 8002c64:	20000418 	.word	0x20000418
 8002c68:	2000041c 	.word	0x2000041c
 8002c6c:	20000300 	.word	0x20000300

08002c70 <BSP_LCD_FillCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b086      	sub	sp, #24
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	4603      	mov	r3, r0
 8002c78:	80fb      	strh	r3, [r7, #6]
 8002c7a:	460b      	mov	r3, r1
 8002c7c:	80bb      	strh	r3, [r7, #4]
 8002c7e:	4613      	mov	r3, r2
 8002c80:	807b      	strh	r3, [r7, #2]
  int32_t  d;    /* Decision Variable */
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */

  d = 3 - (Radius << 1);
 8002c82:	887b      	ldrh	r3, [r7, #2]
 8002c84:	005b      	lsls	r3, r3, #1
 8002c86:	f1c3 0303 	rsb	r3, r3, #3
 8002c8a:	617b      	str	r3, [r7, #20]

  curx = 0;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	613b      	str	r3, [r7, #16]
  cury = Radius;
 8002c90:	887b      	ldrh	r3, [r7, #2]
 8002c92:	60fb      	str	r3, [r7, #12]

  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8002c94:	4b44      	ldr	r3, [pc, #272]	@ (8002da8 <BSP_LCD_FillCircle+0x138>)
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	4944      	ldr	r1, [pc, #272]	@ (8002dac <BSP_LCD_FillCircle+0x13c>)
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	005b      	lsls	r3, r3, #1
 8002c9e:	4413      	add	r3, r2
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	440b      	add	r3, r1
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7ff f926 	bl	8001ef8 <BSP_LCD_SetTextColor>

  while (curx <= cury)
 8002cac:	e061      	b.n	8002d72 <BSP_LCD_FillCircle+0x102>
  {
    if (cury > 0)
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d021      	beq.n	8002cf8 <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - cury, Ypos + curx, 2 * cury);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	88fa      	ldrh	r2, [r7, #6]
 8002cba:	1ad3      	subs	r3, r2, r3
 8002cbc:	b298      	uxth	r0, r3
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	b29a      	uxth	r2, r3
 8002cc2:	88bb      	ldrh	r3, [r7, #4]
 8002cc4:	4413      	add	r3, r2
 8002cc6:	b299      	uxth	r1, r3
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	005b      	lsls	r3, r3, #1
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	f7ff fb19 	bl	8002308 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - cury, Ypos - curx, 2 * cury);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	88fa      	ldrh	r2, [r7, #6]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	b298      	uxth	r0, r3
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	88ba      	ldrh	r2, [r7, #4]
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	b299      	uxth	r1, r3
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	005b      	lsls	r3, r3, #1
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	f7ff fb08 	bl	8002308 <BSP_LCD_DrawHLine>
    }

    if (curx > 0)
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d021      	beq.n	8002d42 <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - curx, Ypos - cury, 2 * curx);
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	88fa      	ldrh	r2, [r7, #6]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	b298      	uxth	r0, r3
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	88ba      	ldrh	r2, [r7, #4]
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	b299      	uxth	r1, r3
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	005b      	lsls	r3, r3, #1
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	f7ff faf4 	bl	8002308 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - curx, Ypos + cury, 2 * curx);
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	88fa      	ldrh	r2, [r7, #6]
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	b298      	uxth	r0, r3
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	b29a      	uxth	r2, r3
 8002d2e:	88bb      	ldrh	r3, [r7, #4]
 8002d30:	4413      	add	r3, r2
 8002d32:	b299      	uxth	r1, r3
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	005b      	lsls	r3, r3, #1
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	f7ff fae3 	bl	8002308 <BSP_LCD_DrawHLine>
    }
    if (d < 0)
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	da06      	bge.n	8002d56 <BSP_LCD_FillCircle+0xe6>
    {
      d += (curx << 2) + 6;
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	009a      	lsls	r2, r3, #2
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	4413      	add	r3, r2
 8002d50:	3306      	adds	r3, #6
 8002d52:	617b      	str	r3, [r7, #20]
 8002d54:	e00a      	b.n	8002d6c <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 8002d56:	693a      	ldr	r2, [r7, #16]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	009a      	lsls	r2, r3, #2
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	4413      	add	r3, r2
 8002d62:	330a      	adds	r3, #10
 8002d64:	617b      	str	r3, [r7, #20]
      cury--;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	3b01      	subs	r3, #1
 8002d6a:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	3301      	adds	r3, #1
 8002d70:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 8002d72:	693a      	ldr	r2, [r7, #16]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d999      	bls.n	8002cae <BSP_LCD_FillCircle+0x3e>
  }

  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8002d7a:	4b0b      	ldr	r3, [pc, #44]	@ (8002da8 <BSP_LCD_FillCircle+0x138>)
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	490b      	ldr	r1, [pc, #44]	@ (8002dac <BSP_LCD_FillCircle+0x13c>)
 8002d80:	4613      	mov	r3, r2
 8002d82:	005b      	lsls	r3, r3, #1
 8002d84:	4413      	add	r3, r2
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	440b      	add	r3, r1
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7ff f8b3 	bl	8001ef8 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8002d92:	887a      	ldrh	r2, [r7, #2]
 8002d94:	88b9      	ldrh	r1, [r7, #4]
 8002d96:	88fb      	ldrh	r3, [r7, #6]
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f7ff fc31 	bl	8002600 <BSP_LCD_DrawCircle>
}
 8002d9e:	bf00      	nop
 8002da0:	3718      	adds	r7, #24
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	20000418 	.word	0x20000418
 8002dac:	2000041c 	.word	0x2000041c

08002db0 <BSP_LCD_FillTriangle>:
  * @param  Y2: the point 2 y position
  * @param  X3: the point 3 x position
  * @param  Y3: the point 3 y position
  */
void BSP_LCD_FillTriangle(uint16_t X1, uint16_t X2, uint16_t X3, uint16_t Y1, uint16_t Y2, uint16_t Y3)
{
 8002db0:	b590      	push	{r4, r7, lr}
 8002db2:	b08b      	sub	sp, #44	@ 0x2c
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	4604      	mov	r4, r0
 8002db8:	4608      	mov	r0, r1
 8002dba:	4611      	mov	r1, r2
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	4623      	mov	r3, r4
 8002dc0:	80fb      	strh	r3, [r7, #6]
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	80bb      	strh	r3, [r7, #4]
 8002dc6:	460b      	mov	r3, r1
 8002dc8:	807b      	strh	r3, [r7, #2]
 8002dca:	4613      	mov	r3, r2
 8002dcc:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0,
 8002dce:	2300      	movs	r3, #0
 8002dd0:	823b      	strh	r3, [r7, #16]
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	81fb      	strh	r3, [r7, #14]
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8002dda:	2300      	movs	r3, #0
 8002ddc:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8002dde:	2300      	movs	r3, #0
 8002de0:	847b      	strh	r3, [r7, #34]	@ 0x22
 8002de2:	2300      	movs	r3, #0
 8002de4:	843b      	strh	r3, [r7, #32]
          yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0,
 8002de6:	2300      	movs	r3, #0
 8002de8:	83fb      	strh	r3, [r7, #30]
 8002dea:	2300      	movs	r3, #0
 8002dec:	83bb      	strh	r3, [r7, #28]
 8002dee:	2300      	movs	r3, #0
 8002df0:	837b      	strh	r3, [r7, #26]
 8002df2:	2300      	movs	r3, #0
 8002df4:	833b      	strh	r3, [r7, #24]
 8002df6:	2300      	movs	r3, #0
 8002df8:	82fb      	strh	r3, [r7, #22]
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	82bb      	strh	r3, [r7, #20]
          curpixel = 0;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	827b      	strh	r3, [r7, #18]

  deltax = ABS(X2 - X1);        /* The difference between the x's */
 8002e02:	88ba      	ldrh	r2, [r7, #4]
 8002e04:	88fb      	ldrh	r3, [r7, #6]
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	bfb8      	it	lt
 8002e0c:	425b      	neglt	r3, r3
 8002e0e:	823b      	strh	r3, [r7, #16]
  deltay = ABS(Y2 - Y1);        /* The difference between the y's */
 8002e10:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8002e12:	883b      	ldrh	r3, [r7, #0]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	bfb8      	it	lt
 8002e1a:	425b      	neglt	r3, r3
 8002e1c:	81fb      	strh	r3, [r7, #14]
  x = X1;                       /* Start x off at the first pixel */
 8002e1e:	88fb      	ldrh	r3, [r7, #6]
 8002e20:	84fb      	strh	r3, [r7, #38]	@ 0x26
  y = Y1;                       /* Start y off at the first pixel */
 8002e22:	883b      	ldrh	r3, [r7, #0]
 8002e24:	84bb      	strh	r3, [r7, #36]	@ 0x24

  if (X2 >= X1)                 /* The x-values are increasing */
 8002e26:	88ba      	ldrh	r2, [r7, #4]
 8002e28:	88fb      	ldrh	r3, [r7, #6]
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d304      	bcc.n	8002e38 <BSP_LCD_FillTriangle+0x88>
  {
    xinc1 = 1;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	847b      	strh	r3, [r7, #34]	@ 0x22
    xinc2 = 1;
 8002e32:	2301      	movs	r3, #1
 8002e34:	843b      	strh	r3, [r7, #32]
 8002e36:	e005      	b.n	8002e44 <BSP_LCD_FillTriangle+0x94>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 8002e38:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002e3c:	847b      	strh	r3, [r7, #34]	@ 0x22
    xinc2 = -1;
 8002e3e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002e42:	843b      	strh	r3, [r7, #32]
  }

  if (Y2 >= Y1)                 /* The y-values are increasing */
 8002e44:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8002e46:	883b      	ldrh	r3, [r7, #0]
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d304      	bcc.n	8002e56 <BSP_LCD_FillTriangle+0xa6>
  {
    yinc1 = 1;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 8002e50:	2301      	movs	r3, #1
 8002e52:	83bb      	strh	r3, [r7, #28]
 8002e54:	e005      	b.n	8002e62 <BSP_LCD_FillTriangle+0xb2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 8002e56:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002e5a:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 8002e5c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002e60:	83bb      	strh	r3, [r7, #28]
  }

  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 8002e62:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002e66:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	db10      	blt.n	8002e90 <BSP_LCD_FillTriangle+0xe0>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 8002e6e:	2300      	movs	r3, #0
 8002e70:	847b      	strh	r3, [r7, #34]	@ 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 8002e72:	2300      	movs	r3, #0
 8002e74:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 8002e76:	8a3b      	ldrh	r3, [r7, #16]
 8002e78:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 8002e7a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002e7e:	0fda      	lsrs	r2, r3, #31
 8002e80:	4413      	add	r3, r2
 8002e82:	105b      	asrs	r3, r3, #1
 8002e84:	833b      	strh	r3, [r7, #24]
    numadd = deltay;
 8002e86:	89fb      	ldrh	r3, [r7, #14]
 8002e88:	82fb      	strh	r3, [r7, #22]
    numpixels = deltax;         /* There are more x-values than y-values */
 8002e8a:	8a3b      	ldrh	r3, [r7, #16]
 8002e8c:	82bb      	strh	r3, [r7, #20]
 8002e8e:	e00f      	b.n	8002eb0 <BSP_LCD_FillTriangle+0x100>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 8002e90:	2300      	movs	r3, #0
 8002e92:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 8002e94:	2300      	movs	r3, #0
 8002e96:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 8002e98:	89fb      	ldrh	r3, [r7, #14]
 8002e9a:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 8002e9c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002ea0:	0fda      	lsrs	r2, r3, #31
 8002ea2:	4413      	add	r3, r2
 8002ea4:	105b      	asrs	r3, r3, #1
 8002ea6:	833b      	strh	r3, [r7, #24]
    numadd = deltax;
 8002ea8:	8a3b      	ldrh	r3, [r7, #16]
 8002eaa:	82fb      	strh	r3, [r7, #22]
    numpixels = deltay;         /* There are more y-values than x-values */
 8002eac:	89fb      	ldrh	r3, [r7, #14]
 8002eae:	82bb      	strh	r3, [r7, #20]
  }

  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	827b      	strh	r3, [r7, #18]
 8002eb4:	e02f      	b.n	8002f16 <BSP_LCD_FillTriangle+0x166>
  {
    BSP_LCD_DrawLine(x, y, X3, Y3);
 8002eb6:	8cf8      	ldrh	r0, [r7, #38]	@ 0x26
 8002eb8:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 8002eba:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8002ebc:	887a      	ldrh	r2, [r7, #2]
 8002ebe:	f7ff faa3 	bl	8002408 <BSP_LCD_DrawLine>

    num += numadd;              /* Increase the numerator by the top of the fraction */
 8002ec2:	8b3a      	ldrh	r2, [r7, #24]
 8002ec4:	8afb      	ldrh	r3, [r7, #22]
 8002ec6:	4413      	add	r3, r2
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	833b      	strh	r3, [r7, #24]
    if (num >= den)             /* Check if numerator >= denominator */
 8002ecc:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8002ed0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	db0e      	blt.n	8002ef6 <BSP_LCD_FillTriangle+0x146>
    {
      num -= den;               /* Calculate the new numerator value */
 8002ed8:	8b3a      	ldrh	r2, [r7, #24]
 8002eda:	8b7b      	ldrh	r3, [r7, #26]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	b29b      	uxth	r3, r3
 8002ee0:	833b      	strh	r3, [r7, #24]
      x += xinc1;               /* Change the x as appropriate */
 8002ee2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8002ee4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002ee6:	4413      	add	r3, r2
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	84fb      	strh	r3, [r7, #38]	@ 0x26
      y += yinc1;               /* Change the y as appropriate */
 8002eec:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002eee:	8bfb      	ldrh	r3, [r7, #30]
 8002ef0:	4413      	add	r3, r2
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	84bb      	strh	r3, [r7, #36]	@ 0x24
    }
    x += xinc2;                 /* Change the x as appropriate */
 8002ef6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8002ef8:	8c3b      	ldrh	r3, [r7, #32]
 8002efa:	4413      	add	r3, r2
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	84fb      	strh	r3, [r7, #38]	@ 0x26
    y += yinc2;                 /* Change the y as appropriate */
 8002f00:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002f02:	8bbb      	ldrh	r3, [r7, #28]
 8002f04:	4413      	add	r3, r2
 8002f06:	b29b      	uxth	r3, r3
 8002f08:	84bb      	strh	r3, [r7, #36]	@ 0x24
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8002f0a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	3301      	adds	r3, #1
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	827b      	strh	r3, [r7, #18]
 8002f16:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002f1a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	ddc9      	ble.n	8002eb6 <BSP_LCD_FillTriangle+0x106>
  }
}
 8002f22:	bf00      	nop
 8002f24:	bf00      	nop
 8002f26:	372c      	adds	r7, #44	@ 0x2c
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd90      	pop	{r4, r7, pc}

08002f2c <BSP_LCD_FillPolygon>:
  * @brief  Displays a full poly-line (between many points).
  * @param  Points: pointer to the points array
  * @param  PointCount: Number of points
  */
void BSP_LCD_FillPolygon(pPoint Points, uint16_t PointCount)
{
 8002f2c:	b5b0      	push	{r4, r5, r7, lr}
 8002f2e:	b08c      	sub	sp, #48	@ 0x30
 8002f30:	af02      	add	r7, sp, #8
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	460b      	mov	r3, r1
 8002f36:	807b      	strh	r3, [r7, #2]

  int16_t x = 0, y = 0, x2 = 0, y2 = 0, xcenter = 0, ycenter = 0, xfirst = 0, yfirst = 0, pixelx = 0, pixely = 0, counter = 0;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	833b      	strh	r3, [r7, #24]
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	82fb      	strh	r3, [r7, #22]
 8002f40:	2300      	movs	r3, #0
 8002f42:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8002f44:	2300      	movs	r3, #0
 8002f46:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8002f48:	2300      	movs	r3, #0
 8002f4a:	82bb      	strh	r3, [r7, #20]
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	827b      	strh	r3, [r7, #18]
 8002f50:	2300      	movs	r3, #0
 8002f52:	823b      	strh	r3, [r7, #16]
 8002f54:	2300      	movs	r3, #0
 8002f56:	81fb      	strh	r3, [r7, #14]
 8002f58:	2300      	movs	r3, #0
 8002f5a:	81bb      	strh	r3, [r7, #12]
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	817b      	strh	r3, [r7, #10]
 8002f60:	2300      	movs	r3, #0
 8002f62:	847b      	strh	r3, [r7, #34]	@ 0x22
  uint16_t  imageleft = 0, imageright = 0, imagetop = 0, imagebottom = 0;
 8002f64:	2300      	movs	r3, #0
 8002f66:	843b      	strh	r3, [r7, #32]
 8002f68:	2300      	movs	r3, #0
 8002f6a:	83fb      	strh	r3, [r7, #30]
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	83bb      	strh	r3, [r7, #28]
 8002f70:	2300      	movs	r3, #0
 8002f72:	837b      	strh	r3, [r7, #26]

  imageleft = imageright = Points->X;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f7a:	83fb      	strh	r3, [r7, #30]
 8002f7c:	8bfb      	ldrh	r3, [r7, #30]
 8002f7e:	843b      	strh	r3, [r7, #32]
  imagetop = imagebottom = Points->Y;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002f86:	837b      	strh	r3, [r7, #26]
 8002f88:	8b7b      	ldrh	r3, [r7, #26]
 8002f8a:	83bb      	strh	r3, [r7, #28]

  for (counter = 1; counter < PointCount; counter++)
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8002f90:	e02f      	b.n	8002ff2 <BSP_LCD_FillPolygon+0xc6>
  {
    pixelx = POLY_X(counter);
 8002f92:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	4413      	add	r3, r2
 8002f9c:	881b      	ldrh	r3, [r3, #0]
 8002f9e:	81bb      	strh	r3, [r7, #12]
    if (pixelx < imageleft)
 8002fa0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002fa4:	8c3b      	ldrh	r3, [r7, #32]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	da01      	bge.n	8002fae <BSP_LCD_FillPolygon+0x82>
    {
      imageleft = pixelx;
 8002faa:	89bb      	ldrh	r3, [r7, #12]
 8002fac:	843b      	strh	r3, [r7, #32]
    }
    if (pixelx > imageright)
 8002fae:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002fb2:	8bfb      	ldrh	r3, [r7, #30]
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	dd01      	ble.n	8002fbc <BSP_LCD_FillPolygon+0x90>
    {
      imageright = pixelx;
 8002fb8:	89bb      	ldrh	r3, [r7, #12]
 8002fba:	83fb      	strh	r3, [r7, #30]
    }

    pixely = POLY_Y(counter);
 8002fbc:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	4413      	add	r3, r2
 8002fc6:	885b      	ldrh	r3, [r3, #2]
 8002fc8:	817b      	strh	r3, [r7, #10]
    if (pixely < imagetop)
 8002fca:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002fce:	8bbb      	ldrh	r3, [r7, #28]
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	da01      	bge.n	8002fd8 <BSP_LCD_FillPolygon+0xac>
    {
      imagetop = pixely;
 8002fd4:	897b      	ldrh	r3, [r7, #10]
 8002fd6:	83bb      	strh	r3, [r7, #28]
    }
    if (pixely > imagebottom)
 8002fd8:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002fdc:	8b7b      	ldrh	r3, [r7, #26]
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	dd01      	ble.n	8002fe6 <BSP_LCD_FillPolygon+0xba>
    {
      imagebottom = pixely;
 8002fe2:	897b      	ldrh	r3, [r7, #10]
 8002fe4:	837b      	strh	r3, [r7, #26]
  for (counter = 1; counter < PointCount; counter++)
 8002fe6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	3301      	adds	r3, #1
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	847b      	strh	r3, [r7, #34]	@ 0x22
 8002ff2:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	@ 0x22
 8002ff6:	887b      	ldrh	r3, [r7, #2]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	dbca      	blt.n	8002f92 <BSP_LCD_FillPolygon+0x66>
    }
  }

  if (PointCount < 2)
 8002ffc:	887b      	ldrh	r3, [r7, #2]
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d972      	bls.n	80030e8 <BSP_LCD_FillPolygon+0x1bc>
  {
    return;
  }

  xcenter = (imageleft + imageright) / 2;
 8003002:	8c3a      	ldrh	r2, [r7, #32]
 8003004:	8bfb      	ldrh	r3, [r7, #30]
 8003006:	4413      	add	r3, r2
 8003008:	0fda      	lsrs	r2, r3, #31
 800300a:	4413      	add	r3, r2
 800300c:	105b      	asrs	r3, r3, #1
 800300e:	82bb      	strh	r3, [r7, #20]
  ycenter = (imagebottom + imagetop) / 2;
 8003010:	8b7a      	ldrh	r2, [r7, #26]
 8003012:	8bbb      	ldrh	r3, [r7, #28]
 8003014:	4413      	add	r3, r2
 8003016:	0fda      	lsrs	r2, r3, #31
 8003018:	4413      	add	r3, r2
 800301a:	105b      	asrs	r3, r3, #1
 800301c:	827b      	strh	r3, [r7, #18]

  xfirst = Points->X;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	881b      	ldrh	r3, [r3, #0]
 8003022:	823b      	strh	r3, [r7, #16]
  yfirst = Points->Y;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	885b      	ldrh	r3, [r3, #2]
 8003028:	81fb      	strh	r3, [r7, #14]

  while (--PointCount)
 800302a:	e032      	b.n	8003092 <BSP_LCD_FillPolygon+0x166>
  {
    x = Points->X;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	881b      	ldrh	r3, [r3, #0]
 8003030:	833b      	strh	r3, [r7, #24]
    y = Points->Y;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	885b      	ldrh	r3, [r3, #2]
 8003036:	82fb      	strh	r3, [r7, #22]
    Points++;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	3304      	adds	r3, #4
 800303c:	607b      	str	r3, [r7, #4]
    x2 = Points->X;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	881b      	ldrh	r3, [r3, #0]
 8003042:	84fb      	strh	r3, [r7, #38]	@ 0x26
    y2 = Points->Y;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	885b      	ldrh	r3, [r3, #2]
 8003048:	84bb      	strh	r3, [r7, #36]	@ 0x24

    BSP_LCD_FillTriangle(x, x2, xcenter, y, y2, ycenter);
 800304a:	8b38      	ldrh	r0, [r7, #24]
 800304c:	8cf9      	ldrh	r1, [r7, #38]	@ 0x26
 800304e:	8abc      	ldrh	r4, [r7, #20]
 8003050:	8afd      	ldrh	r5, [r7, #22]
 8003052:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003054:	8a7a      	ldrh	r2, [r7, #18]
 8003056:	9201      	str	r2, [sp, #4]
 8003058:	9300      	str	r3, [sp, #0]
 800305a:	462b      	mov	r3, r5
 800305c:	4622      	mov	r2, r4
 800305e:	f7ff fea7 	bl	8002db0 <BSP_LCD_FillTriangle>
    BSP_LCD_FillTriangle(x, xcenter, x2, y, ycenter, y2);
 8003062:	8b38      	ldrh	r0, [r7, #24]
 8003064:	8ab9      	ldrh	r1, [r7, #20]
 8003066:	8cfc      	ldrh	r4, [r7, #38]	@ 0x26
 8003068:	8afd      	ldrh	r5, [r7, #22]
 800306a:	8a7b      	ldrh	r3, [r7, #18]
 800306c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800306e:	9201      	str	r2, [sp, #4]
 8003070:	9300      	str	r3, [sp, #0]
 8003072:	462b      	mov	r3, r5
 8003074:	4622      	mov	r2, r4
 8003076:	f7ff fe9b 	bl	8002db0 <BSP_LCD_FillTriangle>
    BSP_LCD_FillTriangle(xcenter, x2, x, ycenter, y2, y);
 800307a:	8ab8      	ldrh	r0, [r7, #20]
 800307c:	8cf9      	ldrh	r1, [r7, #38]	@ 0x26
 800307e:	8b3c      	ldrh	r4, [r7, #24]
 8003080:	8a7d      	ldrh	r5, [r7, #18]
 8003082:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003084:	8afa      	ldrh	r2, [r7, #22]
 8003086:	9201      	str	r2, [sp, #4]
 8003088:	9300      	str	r3, [sp, #0]
 800308a:	462b      	mov	r3, r5
 800308c:	4622      	mov	r2, r4
 800308e:	f7ff fe8f 	bl	8002db0 <BSP_LCD_FillTriangle>
  while (--PointCount)
 8003092:	887b      	ldrh	r3, [r7, #2]
 8003094:	3b01      	subs	r3, #1
 8003096:	807b      	strh	r3, [r7, #2]
 8003098:	887b      	ldrh	r3, [r7, #2]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d1c6      	bne.n	800302c <BSP_LCD_FillPolygon+0x100>
  }

  BSP_LCD_FillTriangle(xfirst, x2, xcenter, yfirst, y2, ycenter);
 800309e:	8a38      	ldrh	r0, [r7, #16]
 80030a0:	8cf9      	ldrh	r1, [r7, #38]	@ 0x26
 80030a2:	8abc      	ldrh	r4, [r7, #20]
 80030a4:	89fd      	ldrh	r5, [r7, #14]
 80030a6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80030a8:	8a7a      	ldrh	r2, [r7, #18]
 80030aa:	9201      	str	r2, [sp, #4]
 80030ac:	9300      	str	r3, [sp, #0]
 80030ae:	462b      	mov	r3, r5
 80030b0:	4622      	mov	r2, r4
 80030b2:	f7ff fe7d 	bl	8002db0 <BSP_LCD_FillTriangle>
  BSP_LCD_FillTriangle(xfirst, xcenter, x2, yfirst, ycenter, y2);
 80030b6:	8a38      	ldrh	r0, [r7, #16]
 80030b8:	8ab9      	ldrh	r1, [r7, #20]
 80030ba:	8cfc      	ldrh	r4, [r7, #38]	@ 0x26
 80030bc:	89fd      	ldrh	r5, [r7, #14]
 80030be:	8a7b      	ldrh	r3, [r7, #18]
 80030c0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80030c2:	9201      	str	r2, [sp, #4]
 80030c4:	9300      	str	r3, [sp, #0]
 80030c6:	462b      	mov	r3, r5
 80030c8:	4622      	mov	r2, r4
 80030ca:	f7ff fe71 	bl	8002db0 <BSP_LCD_FillTriangle>
  BSP_LCD_FillTriangle(xcenter, x2, xfirst, ycenter, y2, yfirst);
 80030ce:	8ab8      	ldrh	r0, [r7, #20]
 80030d0:	8cf9      	ldrh	r1, [r7, #38]	@ 0x26
 80030d2:	8a3c      	ldrh	r4, [r7, #16]
 80030d4:	8a7d      	ldrh	r5, [r7, #18]
 80030d6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80030d8:	89fa      	ldrh	r2, [r7, #14]
 80030da:	9201      	str	r2, [sp, #4]
 80030dc:	9300      	str	r3, [sp, #0]
 80030de:	462b      	mov	r3, r5
 80030e0:	4622      	mov	r2, r4
 80030e2:	f7ff fe65 	bl	8002db0 <BSP_LCD_FillTriangle>
 80030e6:	e000      	b.n	80030ea <BSP_LCD_FillPolygon+0x1be>
    return;
 80030e8:	bf00      	nop
}
 80030ea:	3728      	adds	r7, #40	@ 0x28
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bdb0      	pop	{r4, r5, r7, pc}

080030f0 <BSP_LCD_FillEllipse>:
  * @param  Ypos: the Y position
  * @param  XRadius: X radius of ellipse
  * @param  YRadius: Y radius of ellipse.
  */
void BSP_LCD_FillEllipse(int Xpos, int Ypos, int XRadius, int YRadius)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b08c      	sub	sp, #48	@ 0x30
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	60f8      	str	r0, [r7, #12]
 80030f8:	60b9      	str	r1, [r7, #8]
 80030fa:	607a      	str	r2, [r7, #4]
 80030fc:	603b      	str	r3, [r7, #0]
  int x = 0, y = -YRadius, err = 2 - 2 * XRadius, e2;
 80030fe:	2300      	movs	r3, #0
 8003100:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	425b      	negs	r3, r3
 8003106:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f1c3 0301 	rsb	r3, r3, #1
 800310e:	005b      	lsls	r3, r3, #1
 8003110:	627b      	str	r3, [r7, #36]	@ 0x24
  float K = 0, rad1 = 0, rad2 = 0;
 8003112:	f04f 0300 	mov.w	r3, #0
 8003116:	61fb      	str	r3, [r7, #28]
 8003118:	f04f 0300 	mov.w	r3, #0
 800311c:	61bb      	str	r3, [r7, #24]
 800311e:	f04f 0300 	mov.w	r3, #0
 8003122:	617b      	str	r3, [r7, #20]

  rad1 = XRadius;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	ee07 3a90 	vmov	s15, r3
 800312a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800312e:	edc7 7a06 	vstr	s15, [r7, #24]
  rad2 = YRadius;
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	ee07 3a90 	vmov	s15, r3
 8003138:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800313c:	edc7 7a05 	vstr	s15, [r7, #20]
  K = (float)(rad2 / rad1);
 8003140:	edd7 6a05 	vldr	s13, [r7, #20]
 8003144:	ed97 7a06 	vldr	s14, [r7, #24]
 8003148:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800314c:	edc7 7a07 	vstr	s15, [r7, #28]

  do
  {
    BSP_LCD_DrawHLine((Xpos - (uint16_t)(x / K)), (Ypos + y), (2 * (uint16_t)(x / K) + 1));
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	b29a      	uxth	r2, r3
 8003154:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003156:	ee07 3a90 	vmov	s15, r3
 800315a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800315e:	ed97 7a07 	vldr	s14, [r7, #28]
 8003162:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003166:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800316a:	ee17 3a90 	vmov	r3, s15
 800316e:	b29b      	uxth	r3, r3
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	b298      	uxth	r0, r3
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	b29a      	uxth	r2, r3
 8003178:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800317a:	b29b      	uxth	r3, r3
 800317c:	4413      	add	r3, r2
 800317e:	b299      	uxth	r1, r3
 8003180:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003182:	ee07 3a90 	vmov	s15, r3
 8003186:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800318a:	ed97 7a07 	vldr	s14, [r7, #28]
 800318e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003192:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003196:	ee17 3a90 	vmov	r3, s15
 800319a:	b29b      	uxth	r3, r3
 800319c:	005b      	lsls	r3, r3, #1
 800319e:	b29b      	uxth	r3, r3
 80031a0:	3301      	adds	r3, #1
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	461a      	mov	r2, r3
 80031a6:	f7ff f8af 	bl	8002308 <BSP_LCD_DrawHLine>
    BSP_LCD_DrawHLine((Xpos - (uint16_t)(x / K)), (Ypos - y), (2 * (uint16_t)(x / K) + 1));
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	b29a      	uxth	r2, r3
 80031ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031b0:	ee07 3a90 	vmov	s15, r3
 80031b4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80031b8:	ed97 7a07 	vldr	s14, [r7, #28]
 80031bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80031c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031c4:	ee17 3a90 	vmov	r3, s15
 80031c8:	b29b      	uxth	r3, r3
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	b298      	uxth	r0, r3
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	b29a      	uxth	r2, r3
 80031d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031d4:	b29b      	uxth	r3, r3
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	b299      	uxth	r1, r3
 80031da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031dc:	ee07 3a90 	vmov	s15, r3
 80031e0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80031e4:	ed97 7a07 	vldr	s14, [r7, #28]
 80031e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80031ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031f0:	ee17 3a90 	vmov	r3, s15
 80031f4:	b29b      	uxth	r3, r3
 80031f6:	005b      	lsls	r3, r3, #1
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	3301      	adds	r3, #1
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	461a      	mov	r2, r3
 8003200:	f7ff f882 	bl	8002308 <BSP_LCD_DrawHLine>

    e2 = err;
 8003204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003206:	623b      	str	r3, [r7, #32]
    if (e2 <= x)
 8003208:	6a3a      	ldr	r2, [r7, #32]
 800320a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800320c:	429a      	cmp	r2, r3
 800320e:	dc13      	bgt.n	8003238 <BSP_LCD_FillEllipse+0x148>
    {
      err += ++x * 2 + 1;
 8003210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003212:	3301      	adds	r3, #1
 8003214:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003216:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003218:	005b      	lsls	r3, r3, #1
 800321a:	3301      	adds	r3, #1
 800321c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800321e:	4413      	add	r3, r2
 8003220:	627b      	str	r3, [r7, #36]	@ 0x24
      if (-y == x && e2 <= y) { e2 = 0; }
 8003222:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003224:	425b      	negs	r3, r3
 8003226:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003228:	429a      	cmp	r2, r3
 800322a:	d105      	bne.n	8003238 <BSP_LCD_FillEllipse+0x148>
 800322c:	6a3a      	ldr	r2, [r7, #32]
 800322e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003230:	429a      	cmp	r2, r3
 8003232:	dc01      	bgt.n	8003238 <BSP_LCD_FillEllipse+0x148>
 8003234:	2300      	movs	r3, #0
 8003236:	623b      	str	r3, [r7, #32]
    }
    if (e2 > y) { err += ++y * 2 + 1; }
 8003238:	6a3a      	ldr	r2, [r7, #32]
 800323a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800323c:	429a      	cmp	r2, r3
 800323e:	dd08      	ble.n	8003252 <BSP_LCD_FillEllipse+0x162>
 8003240:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003242:	3301      	adds	r3, #1
 8003244:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003246:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003248:	005b      	lsls	r3, r3, #1
 800324a:	3301      	adds	r3, #1
 800324c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800324e:	4413      	add	r3, r2
 8003250:	627b      	str	r3, [r7, #36]	@ 0x24
  } while (y <= 0);
 8003252:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003254:	2b00      	cmp	r3, #0
 8003256:	f77f af7b 	ble.w	8003150 <BSP_LCD_FillEllipse+0x60>
}
 800325a:	bf00      	nop
 800325c:	bf00      	nop
 800325e:	3730      	adds	r7, #48	@ 0x30
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}

08003264 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b08e      	sub	sp, #56	@ 0x38
 8003268:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800326a:	2300      	movs	r3, #0
 800326c:	623b      	str	r3, [r7, #32]
 800326e:	4b61      	ldr	r3, [pc, #388]	@ (80033f4 <BSP_LCD_MspInit+0x190>)
 8003270:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003272:	4a60      	ldr	r2, [pc, #384]	@ (80033f4 <BSP_LCD_MspInit+0x190>)
 8003274:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003278:	6453      	str	r3, [r2, #68]	@ 0x44
 800327a:	4b5e      	ldr	r3, [pc, #376]	@ (80033f4 <BSP_LCD_MspInit+0x190>)
 800327c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800327e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003282:	623b      	str	r3, [r7, #32]
 8003284:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8003286:	2300      	movs	r3, #0
 8003288:	61fb      	str	r3, [r7, #28]
 800328a:	4b5a      	ldr	r3, [pc, #360]	@ (80033f4 <BSP_LCD_MspInit+0x190>)
 800328c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800328e:	4a59      	ldr	r2, [pc, #356]	@ (80033f4 <BSP_LCD_MspInit+0x190>)
 8003290:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003294:	6313      	str	r3, [r2, #48]	@ 0x30
 8003296:	4b57      	ldr	r3, [pc, #348]	@ (80033f4 <BSP_LCD_MspInit+0x190>)
 8003298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800329a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800329e:	61fb      	str	r3, [r7, #28]
 80032a0:	69fb      	ldr	r3, [r7, #28]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80032a2:	2300      	movs	r3, #0
 80032a4:	61bb      	str	r3, [r7, #24]
 80032a6:	4b53      	ldr	r3, [pc, #332]	@ (80033f4 <BSP_LCD_MspInit+0x190>)
 80032a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032aa:	4a52      	ldr	r2, [pc, #328]	@ (80033f4 <BSP_LCD_MspInit+0x190>)
 80032ac:	f043 0301 	orr.w	r3, r3, #1
 80032b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80032b2:	4b50      	ldr	r3, [pc, #320]	@ (80033f4 <BSP_LCD_MspInit+0x190>)
 80032b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032b6:	f003 0301 	and.w	r3, r3, #1
 80032ba:	61bb      	str	r3, [r7, #24]
 80032bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80032be:	2300      	movs	r3, #0
 80032c0:	617b      	str	r3, [r7, #20]
 80032c2:	4b4c      	ldr	r3, [pc, #304]	@ (80033f4 <BSP_LCD_MspInit+0x190>)
 80032c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032c6:	4a4b      	ldr	r2, [pc, #300]	@ (80033f4 <BSP_LCD_MspInit+0x190>)
 80032c8:	f043 0302 	orr.w	r3, r3, #2
 80032cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80032ce:	4b49      	ldr	r3, [pc, #292]	@ (80033f4 <BSP_LCD_MspInit+0x190>)
 80032d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032d2:	f003 0302 	and.w	r3, r3, #2
 80032d6:	617b      	str	r3, [r7, #20]
 80032d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80032da:	2300      	movs	r3, #0
 80032dc:	613b      	str	r3, [r7, #16]
 80032de:	4b45      	ldr	r3, [pc, #276]	@ (80033f4 <BSP_LCD_MspInit+0x190>)
 80032e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032e2:	4a44      	ldr	r2, [pc, #272]	@ (80033f4 <BSP_LCD_MspInit+0x190>)
 80032e4:	f043 0304 	orr.w	r3, r3, #4
 80032e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80032ea:	4b42      	ldr	r3, [pc, #264]	@ (80033f4 <BSP_LCD_MspInit+0x190>)
 80032ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ee:	f003 0304 	and.w	r3, r3, #4
 80032f2:	613b      	str	r3, [r7, #16]
 80032f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80032f6:	2300      	movs	r3, #0
 80032f8:	60fb      	str	r3, [r7, #12]
 80032fa:	4b3e      	ldr	r3, [pc, #248]	@ (80033f4 <BSP_LCD_MspInit+0x190>)
 80032fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032fe:	4a3d      	ldr	r2, [pc, #244]	@ (80033f4 <BSP_LCD_MspInit+0x190>)
 8003300:	f043 0308 	orr.w	r3, r3, #8
 8003304:	6313      	str	r3, [r2, #48]	@ 0x30
 8003306:	4b3b      	ldr	r3, [pc, #236]	@ (80033f4 <BSP_LCD_MspInit+0x190>)
 8003308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800330a:	f003 0308 	and.w	r3, r3, #8
 800330e:	60fb      	str	r3, [r7, #12]
 8003310:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003312:	2300      	movs	r3, #0
 8003314:	60bb      	str	r3, [r7, #8]
 8003316:	4b37      	ldr	r3, [pc, #220]	@ (80033f4 <BSP_LCD_MspInit+0x190>)
 8003318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800331a:	4a36      	ldr	r2, [pc, #216]	@ (80033f4 <BSP_LCD_MspInit+0x190>)
 800331c:	f043 0320 	orr.w	r3, r3, #32
 8003320:	6313      	str	r3, [r2, #48]	@ 0x30
 8003322:	4b34      	ldr	r3, [pc, #208]	@ (80033f4 <BSP_LCD_MspInit+0x190>)
 8003324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003326:	f003 0320 	and.w	r3, r3, #32
 800332a:	60bb      	str	r3, [r7, #8]
 800332c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800332e:	2300      	movs	r3, #0
 8003330:	607b      	str	r3, [r7, #4]
 8003332:	4b30      	ldr	r3, [pc, #192]	@ (80033f4 <BSP_LCD_MspInit+0x190>)
 8003334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003336:	4a2f      	ldr	r2, [pc, #188]	@ (80033f4 <BSP_LCD_MspInit+0x190>)
 8003338:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800333c:	6313      	str	r3, [r2, #48]	@ 0x30
 800333e:	4b2d      	ldr	r3, [pc, #180]	@ (80033f4 <BSP_LCD_MspInit+0x190>)
 8003340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003342:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003346:	607b      	str	r3, [r7, #4]
 8003348:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 800334a:	f641 0358 	movw	r3, #6232	@ 0x1858
 800334e:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8003350:	2302      	movs	r3, #2
 8003352:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8003354:	2300      	movs	r3, #0
 8003356:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8003358:	2302      	movs	r3, #2
 800335a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStructure.Alternate = GPIO_AF14_LTDC;
 800335c:	230e      	movs	r3, #14
 800335e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8003360:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003364:	4619      	mov	r1, r3
 8003366:	4824      	ldr	r0, [pc, #144]	@ (80033f8 <BSP_LCD_MspInit+0x194>)
 8003368:	f001 fa9e 	bl	80048a8 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 800336c:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8003370:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003372:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003376:	4619      	mov	r1, r3
 8003378:	4820      	ldr	r0, [pc, #128]	@ (80033fc <BSP_LCD_MspInit+0x198>)
 800337a:	f001 fa95 	bl	80048a8 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 800337e:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8003382:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8003384:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003388:	4619      	mov	r1, r3
 800338a:	481d      	ldr	r0, [pc, #116]	@ (8003400 <BSP_LCD_MspInit+0x19c>)
 800338c:	f001 fa8c 	bl	80048a8 <HAL_GPIO_Init>

  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8003390:	2348      	movs	r3, #72	@ 0x48
 8003392:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8003394:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003398:	4619      	mov	r1, r3
 800339a:	481a      	ldr	r0, [pc, #104]	@ (8003404 <BSP_LCD_MspInit+0x1a0>)
 800339c:	f001 fa84 	bl	80048a8 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 80033a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80033a4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80033a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80033aa:	4619      	mov	r1, r3
 80033ac:	4816      	ldr	r0, [pc, #88]	@ (8003408 <BSP_LCD_MspInit+0x1a4>)
 80033ae:	f001 fa7b 	bl	80048a8 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 80033b2:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 80033b6:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80033b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80033bc:	4619      	mov	r1, r3
 80033be:	4813      	ldr	r0, [pc, #76]	@ (800340c <BSP_LCD_MspInit+0x1a8>)
 80033c0:	f001 fa72 	bl	80048a8 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80033c4:	2303      	movs	r3, #3
 80033c6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Alternate = GPIO_AF9_LTDC;
 80033c8:	2309      	movs	r3, #9
 80033ca:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80033cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80033d0:	4619      	mov	r1, r3
 80033d2:	480a      	ldr	r0, [pc, #40]	@ (80033fc <BSP_LCD_MspInit+0x198>)
 80033d4:	f001 fa68 	bl	80048a8 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 80033d8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80033dc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80033de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80033e2:	4619      	mov	r1, r3
 80033e4:	4809      	ldr	r0, [pc, #36]	@ (800340c <BSP_LCD_MspInit+0x1a8>)
 80033e6:	f001 fa5f 	bl	80048a8 <HAL_GPIO_Init>
}
 80033ea:	bf00      	nop
 80033ec:	3738      	adds	r7, #56	@ 0x38
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	40023800 	.word	0x40023800
 80033f8:	40020000 	.word	0x40020000
 80033fc:	40020400 	.word	0x40020400
 8003400:	40020800 	.word	0x40020800
 8003404:	40020c00 	.word	0x40020c00
 8003408:	40021400 	.word	0x40021400
 800340c:	40021800 	.word	0x40021800

08003410 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8003410:	b5b0      	push	{r4, r5, r7, lr}
 8003412:	b082      	sub	sp, #8
 8003414:	af00      	add	r7, sp, #0
 8003416:	4603      	mov	r3, r0
 8003418:	603a      	str	r2, [r7, #0]
 800341a:	80fb      	strh	r3, [r7, #6]
 800341c:	460b      	mov	r3, r1
 800341e:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4 * (Ypos * BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8003420:	4b0c      	ldr	r3, [pc, #48]	@ (8003454 <BSP_LCD_DrawPixel+0x44>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a0c      	ldr	r2, [pc, #48]	@ (8003458 <BSP_LCD_DrawPixel+0x48>)
 8003426:	2134      	movs	r1, #52	@ 0x34
 8003428:	fb01 f303 	mul.w	r3, r1, r3
 800342c:	4413      	add	r3, r2
 800342e:	335c      	adds	r3, #92	@ 0x5c
 8003430:	681c      	ldr	r4, [r3, #0]
 8003432:	88bd      	ldrh	r5, [r7, #4]
 8003434:	f7fe fcd4 	bl	8001de0 <BSP_LCD_GetXSize>
 8003438:	4603      	mov	r3, r0
 800343a:	fb03 f205 	mul.w	r2, r3, r5
 800343e:	88fb      	ldrh	r3, [r7, #6]
 8003440:	4413      	add	r3, r2
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	4423      	add	r3, r4
 8003446:	461a      	mov	r2, r3
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	6013      	str	r3, [r2, #0]
}
 800344c:	bf00      	nop
 800344e:	3708      	adds	r7, #8
 8003450:	46bd      	mov	sp, r7
 8003452:	bdb0      	pop	{r4, r5, r7, pc}
 8003454:	20000418 	.word	0x20000418
 8003458:	20000300 	.word	0x20000300

0800345c <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b088      	sub	sp, #32
 8003460:	af00      	add	r7, sp, #0
 8003462:	4603      	mov	r3, r0
 8003464:	603a      	str	r2, [r7, #0]
 8003466:	80fb      	strh	r3, [r7, #6]
 8003468:	460b      	mov	r3, r1
 800346a:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 800346c:	2300      	movs	r3, #0
 800346e:	61fb      	str	r3, [r7, #28]
 8003470:	2300      	movs	r3, #0
 8003472:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line = 0;
 8003474:	2300      	movs	r3, #0
 8003476:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 8003478:	4b53      	ldr	r3, [pc, #332]	@ (80035c8 <DrawChar+0x16c>)
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	4953      	ldr	r1, [pc, #332]	@ (80035cc <DrawChar+0x170>)
 800347e:	4613      	mov	r3, r2
 8003480:	005b      	lsls	r3, r3, #1
 8003482:	4413      	add	r3, r2
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	440b      	add	r3, r1
 8003488:	3308      	adds	r3, #8
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	88db      	ldrh	r3, [r3, #6]
 800348e:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8003490:	4b4d      	ldr	r3, [pc, #308]	@ (80035c8 <DrawChar+0x16c>)
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	494d      	ldr	r1, [pc, #308]	@ (80035cc <DrawChar+0x170>)
 8003496:	4613      	mov	r3, r2
 8003498:	005b      	lsls	r3, r3, #1
 800349a:	4413      	add	r3, r2
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	440b      	add	r3, r1
 80034a0:	3308      	adds	r3, #8
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	889b      	ldrh	r3, [r3, #4]
 80034a6:	823b      	strh	r3, [r7, #16]

  offset = 8 * ((width + 7) / 8) -  width ;
 80034a8:	8a3b      	ldrh	r3, [r7, #16]
 80034aa:	3307      	adds	r3, #7
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	da00      	bge.n	80034b2 <DrawChar+0x56>
 80034b0:	3307      	adds	r3, #7
 80034b2:	10db      	asrs	r3, r3, #3
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	00db      	lsls	r3, r3, #3
 80034b8:	b2da      	uxtb	r2, r3
 80034ba:	8a3b      	ldrh	r3, [r7, #16]
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	73fb      	strb	r3, [r7, #15]

  for (i = 0; i < height; i++)
 80034c2:	2300      	movs	r3, #0
 80034c4:	61fb      	str	r3, [r7, #28]
 80034c6:	e076      	b.n	80035b6 <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7) / 8 * i);
 80034c8:	8a3b      	ldrh	r3, [r7, #16]
 80034ca:	3307      	adds	r3, #7
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	da00      	bge.n	80034d2 <DrawChar+0x76>
 80034d0:	3307      	adds	r3, #7
 80034d2:	10db      	asrs	r3, r3, #3
 80034d4:	461a      	mov	r2, r3
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	fb02 f303 	mul.w	r3, r2, r3
 80034dc:	683a      	ldr	r2, [r7, #0]
 80034de:	4413      	add	r3, r2
 80034e0:	60bb      	str	r3, [r7, #8]

    switch (((width + 7) / 8))
 80034e2:	8a3b      	ldrh	r3, [r7, #16]
 80034e4:	3307      	adds	r3, #7
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	da00      	bge.n	80034ec <DrawChar+0x90>
 80034ea:	3307      	adds	r3, #7
 80034ec:	10db      	asrs	r3, r3, #3
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d002      	beq.n	80034f8 <DrawChar+0x9c>
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d004      	beq.n	8003500 <DrawChar+0xa4>
 80034f6:	e00c      	b.n	8003512 <DrawChar+0xb6>
    {
      case 1:
        line =  pchar[0];
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	617b      	str	r3, [r7, #20]
        break;
 80034fe:	e016      	b.n	800352e <DrawChar+0xd2>

      case 2:
        line = (pchar[0] << 8) | pchar[1];
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	021b      	lsls	r3, r3, #8
 8003506:	68ba      	ldr	r2, [r7, #8]
 8003508:	3201      	adds	r2, #1
 800350a:	7812      	ldrb	r2, [r2, #0]
 800350c:	4313      	orrs	r3, r2
 800350e:	617b      	str	r3, [r7, #20]
        break;
 8003510:	e00d      	b.n	800352e <DrawChar+0xd2>

      case 3:
      default:
        line = (pchar[0] << 16) | (pchar[1] << 8) | pchar[2];
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	041a      	lsls	r2, r3, #16
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	3301      	adds	r3, #1
 800351c:	781b      	ldrb	r3, [r3, #0]
 800351e:	021b      	lsls	r3, r3, #8
 8003520:	4313      	orrs	r3, r2
 8003522:	68ba      	ldr	r2, [r7, #8]
 8003524:	3202      	adds	r2, #2
 8003526:	7812      	ldrb	r2, [r2, #0]
 8003528:	4313      	orrs	r3, r2
 800352a:	617b      	str	r3, [r7, #20]
        break;
 800352c:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 800352e:	2300      	movs	r3, #0
 8003530:	61bb      	str	r3, [r7, #24]
 8003532:	e036      	b.n	80035a2 <DrawChar+0x146>
    {
      if (line & (1 << (width - j + offset - 1)))
 8003534:	8a3a      	ldrh	r2, [r7, #16]
 8003536:	69bb      	ldr	r3, [r7, #24]
 8003538:	1ad2      	subs	r2, r2, r3
 800353a:	7bfb      	ldrb	r3, [r7, #15]
 800353c:	4413      	add	r3, r2
 800353e:	3b01      	subs	r3, #1
 8003540:	2201      	movs	r2, #1
 8003542:	fa02 f303 	lsl.w	r3, r2, r3
 8003546:	461a      	mov	r2, r3
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	4013      	ands	r3, r2
 800354c:	2b00      	cmp	r3, #0
 800354e:	d012      	beq.n	8003576 <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8003550:	69bb      	ldr	r3, [r7, #24]
 8003552:	b29a      	uxth	r2, r3
 8003554:	88fb      	ldrh	r3, [r7, #6]
 8003556:	4413      	add	r3, r2
 8003558:	b298      	uxth	r0, r3
 800355a:	4b1b      	ldr	r3, [pc, #108]	@ (80035c8 <DrawChar+0x16c>)
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	491b      	ldr	r1, [pc, #108]	@ (80035cc <DrawChar+0x170>)
 8003560:	4613      	mov	r3, r2
 8003562:	005b      	lsls	r3, r3, #1
 8003564:	4413      	add	r3, r2
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	440b      	add	r3, r1
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	88bb      	ldrh	r3, [r7, #4]
 800356e:	4619      	mov	r1, r3
 8003570:	f7ff ff4e 	bl	8003410 <BSP_LCD_DrawPixel>
 8003574:	e012      	b.n	800359c <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	b29a      	uxth	r2, r3
 800357a:	88fb      	ldrh	r3, [r7, #6]
 800357c:	4413      	add	r3, r2
 800357e:	b298      	uxth	r0, r3
 8003580:	4b11      	ldr	r3, [pc, #68]	@ (80035c8 <DrawChar+0x16c>)
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	4911      	ldr	r1, [pc, #68]	@ (80035cc <DrawChar+0x170>)
 8003586:	4613      	mov	r3, r2
 8003588:	005b      	lsls	r3, r3, #1
 800358a:	4413      	add	r3, r2
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	440b      	add	r3, r1
 8003590:	3304      	adds	r3, #4
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	88bb      	ldrh	r3, [r7, #4]
 8003596:	4619      	mov	r1, r3
 8003598:	f7ff ff3a 	bl	8003410 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 800359c:	69bb      	ldr	r3, [r7, #24]
 800359e:	3301      	adds	r3, #1
 80035a0:	61bb      	str	r3, [r7, #24]
 80035a2:	8a3b      	ldrh	r3, [r7, #16]
 80035a4:	69ba      	ldr	r2, [r7, #24]
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d3c4      	bcc.n	8003534 <DrawChar+0xd8>
      }
    }
    Ypos++;
 80035aa:	88bb      	ldrh	r3, [r7, #4]
 80035ac:	3301      	adds	r3, #1
 80035ae:	80bb      	strh	r3, [r7, #4]
  for (i = 0; i < height; i++)
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	3301      	adds	r3, #1
 80035b4:	61fb      	str	r3, [r7, #28]
 80035b6:	8a7b      	ldrh	r3, [r7, #18]
 80035b8:	69fa      	ldr	r2, [r7, #28]
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d384      	bcc.n	80034c8 <DrawChar+0x6c>
  }
}
 80035be:	bf00      	nop
 80035c0:	bf00      	nop
 80035c2:	3720      	adds	r7, #32
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}
 80035c8:	20000418 	.word	0x20000418
 80035cc:	2000041c 	.word	0x2000041c

080035d0 <FillBuffer>:
  * @param  OffLine: offset
  * @param  ColorIndex: color Index
  */
static void FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine,
                       uint32_t ColorIndex)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b086      	sub	sp, #24
 80035d4:	af02      	add	r7, sp, #8
 80035d6:	60f8      	str	r0, [r7, #12]
 80035d8:	60b9      	str	r1, [r7, #8]
 80035da:	607a      	str	r2, [r7, #4]
 80035dc:	603b      	str	r3, [r7, #0]

  /* Register to memory mode with ARGB8888 as color Mode */
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 80035de:	4b16      	ldr	r3, [pc, #88]	@ (8003638 <FillBuffer+0x68>)
 80035e0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80035e4:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80035e6:	4b14      	ldr	r3, [pc, #80]	@ (8003638 <FillBuffer+0x68>)
 80035e8:	2200      	movs	r2, #0
 80035ea:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;
 80035ec:	4a12      	ldr	r2, [pc, #72]	@ (8003638 <FillBuffer+0x68>)
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	60d3      	str	r3, [r2, #12]

  Dma2dHandler.Instance = DMA2D;
 80035f2:	4b11      	ldr	r3, [pc, #68]	@ (8003638 <FillBuffer+0x68>)
 80035f4:	4a11      	ldr	r2, [pc, #68]	@ (800363c <FillBuffer+0x6c>)
 80035f6:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if (HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK)
 80035f8:	480f      	ldr	r0, [pc, #60]	@ (8003638 <FillBuffer+0x68>)
 80035fa:	f000 febf 	bl	800437c <HAL_DMA2D_Init>
 80035fe:	4603      	mov	r3, r0
 8003600:	2b00      	cmp	r3, #0
 8003602:	d115      	bne.n	8003630 <FillBuffer+0x60>
  {
    if (HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK)
 8003604:	68f9      	ldr	r1, [r7, #12]
 8003606:	480c      	ldr	r0, [pc, #48]	@ (8003638 <FillBuffer+0x68>)
 8003608:	f001 f820 	bl	800464c <HAL_DMA2D_ConfigLayer>
 800360c:	4603      	mov	r3, r0
 800360e:	2b00      	cmp	r3, #0
 8003610:	d10e      	bne.n	8003630 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8003612:	68ba      	ldr	r2, [r7, #8]
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	9300      	str	r3, [sp, #0]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	69f9      	ldr	r1, [r7, #28]
 800361c:	4806      	ldr	r0, [pc, #24]	@ (8003638 <FillBuffer+0x68>)
 800361e:	f000 ff00 	bl	8004422 <HAL_DMA2D_Start>
 8003622:	4603      	mov	r3, r0
 8003624:	2b00      	cmp	r3, #0
 8003626:	d103      	bne.n	8003630 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8003628:	210a      	movs	r1, #10
 800362a:	4803      	ldr	r0, [pc, #12]	@ (8003638 <FillBuffer+0x68>)
 800362c:	f000 ff24 	bl	8004478 <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 8003630:	bf00      	nop
 8003632:	3710      	adds	r7, #16
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}
 8003638:	200003a8 	.word	0x200003a8
 800363c:	4002b000 	.word	0x4002b000

08003640 <ConvertLineToARGB8888>:
  * @param  pDst: output color
  * @param  xSize: buffer width
  * @param  ColorMode: input color mode
  */
static void ConvertLineToARGB8888(void *pSrc, void *pDst, uint32_t xSize, uint32_t ColorMode)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b086      	sub	sp, #24
 8003644:	af02      	add	r7, sp, #8
 8003646:	60f8      	str	r0, [r7, #12]
 8003648:	60b9      	str	r1, [r7, #8]
 800364a:	607a      	str	r2, [r7, #4]
 800364c:	603b      	str	r3, [r7, #0]
  /* Configure the DMA2D Mode, Color Mode and output offset */
  Dma2dHandler.Init.Mode         = DMA2D_M2M_PFC;
 800364e:	4b1c      	ldr	r3, [pc, #112]	@ (80036c0 <ConvertLineToARGB8888+0x80>)
 8003650:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003654:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8003656:	4b1a      	ldr	r3, [pc, #104]	@ (80036c0 <ConvertLineToARGB8888+0x80>)
 8003658:	2200      	movs	r2, #0
 800365a:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = 0;
 800365c:	4b18      	ldr	r3, [pc, #96]	@ (80036c0 <ConvertLineToARGB8888+0x80>)
 800365e:	2200      	movs	r2, #0
 8003660:	60da      	str	r2, [r3, #12]

  /* Foreground Configuration */
  Dma2dHandler.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8003662:	4b17      	ldr	r3, [pc, #92]	@ (80036c0 <ConvertLineToARGB8888+0x80>)
 8003664:	2200      	movs	r2, #0
 8003666:	631a      	str	r2, [r3, #48]	@ 0x30
  Dma2dHandler.LayerCfg[1].InputAlpha = 0xFF;
 8003668:	4b15      	ldr	r3, [pc, #84]	@ (80036c0 <ConvertLineToARGB8888+0x80>)
 800366a:	22ff      	movs	r2, #255	@ 0xff
 800366c:	635a      	str	r2, [r3, #52]	@ 0x34
  Dma2dHandler.LayerCfg[1].InputColorMode = ColorMode;
 800366e:	4a14      	ldr	r2, [pc, #80]	@ (80036c0 <ConvertLineToARGB8888+0x80>)
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	62d3      	str	r3, [r2, #44]	@ 0x2c
  Dma2dHandler.LayerCfg[1].InputOffset = 0;
 8003674:	4b12      	ldr	r3, [pc, #72]	@ (80036c0 <ConvertLineToARGB8888+0x80>)
 8003676:	2200      	movs	r2, #0
 8003678:	629a      	str	r2, [r3, #40]	@ 0x28

  Dma2dHandler.Instance = DMA2D;
 800367a:	4b11      	ldr	r3, [pc, #68]	@ (80036c0 <ConvertLineToARGB8888+0x80>)
 800367c:	4a11      	ldr	r2, [pc, #68]	@ (80036c4 <ConvertLineToARGB8888+0x84>)
 800367e:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if (HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK)
 8003680:	480f      	ldr	r0, [pc, #60]	@ (80036c0 <ConvertLineToARGB8888+0x80>)
 8003682:	f000 fe7b 	bl	800437c <HAL_DMA2D_Init>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d115      	bne.n	80036b8 <ConvertLineToARGB8888+0x78>
  {
    if (HAL_DMA2D_ConfigLayer(&Dma2dHandler, 1) == HAL_OK)
 800368c:	2101      	movs	r1, #1
 800368e:	480c      	ldr	r0, [pc, #48]	@ (80036c0 <ConvertLineToARGB8888+0x80>)
 8003690:	f000 ffdc 	bl	800464c <HAL_DMA2D_ConfigLayer>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d10e      	bne.n	80036b8 <ConvertLineToARGB8888+0x78>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 800369a:	68f9      	ldr	r1, [r7, #12]
 800369c:	68ba      	ldr	r2, [r7, #8]
 800369e:	2301      	movs	r3, #1
 80036a0:	9300      	str	r3, [sp, #0]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	4806      	ldr	r0, [pc, #24]	@ (80036c0 <ConvertLineToARGB8888+0x80>)
 80036a6:	f000 febc 	bl	8004422 <HAL_DMA2D_Start>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d103      	bne.n	80036b8 <ConvertLineToARGB8888+0x78>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 80036b0:	210a      	movs	r1, #10
 80036b2:	4803      	ldr	r0, [pc, #12]	@ (80036c0 <ConvertLineToARGB8888+0x80>)
 80036b4:	f000 fee0 	bl	8004478 <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 80036b8:	bf00      	nop
 80036ba:	3710      	adds	r7, #16
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	200003a8 	.word	0x200003a8
 80036c4:	4002b000 	.word	0x4002b000

080036c8 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 80036cc:	4b29      	ldr	r3, [pc, #164]	@ (8003774 <BSP_SDRAM_Init+0xac>)
 80036ce:	4a2a      	ldr	r2, [pc, #168]	@ (8003778 <BSP_SDRAM_Init+0xb0>)
 80036d0:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 80036d2:	4b2a      	ldr	r3, [pc, #168]	@ (800377c <BSP_SDRAM_Init+0xb4>)
 80036d4:	2202      	movs	r2, #2
 80036d6:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 80036d8:	4b28      	ldr	r3, [pc, #160]	@ (800377c <BSP_SDRAM_Init+0xb4>)
 80036da:	2207      	movs	r2, #7
 80036dc:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 80036de:	4b27      	ldr	r3, [pc, #156]	@ (800377c <BSP_SDRAM_Init+0xb4>)
 80036e0:	2204      	movs	r2, #4
 80036e2:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 80036e4:	4b25      	ldr	r3, [pc, #148]	@ (800377c <BSP_SDRAM_Init+0xb4>)
 80036e6:	2207      	movs	r2, #7
 80036e8:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 80036ea:	4b24      	ldr	r3, [pc, #144]	@ (800377c <BSP_SDRAM_Init+0xb4>)
 80036ec:	2202      	movs	r2, #2
 80036ee:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 80036f0:	4b22      	ldr	r3, [pc, #136]	@ (800377c <BSP_SDRAM_Init+0xb4>)
 80036f2:	2202      	movs	r2, #2
 80036f4:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 80036f6:	4b21      	ldr	r3, [pc, #132]	@ (800377c <BSP_SDRAM_Init+0xb4>)
 80036f8:	2202      	movs	r2, #2
 80036fa:	619a      	str	r2, [r3, #24]

  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 80036fc:	4b1d      	ldr	r3, [pc, #116]	@ (8003774 <BSP_SDRAM_Init+0xac>)
 80036fe:	2201      	movs	r2, #1
 8003700:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8003702:	4b1c      	ldr	r3, [pc, #112]	@ (8003774 <BSP_SDRAM_Init+0xac>)
 8003704:	2200      	movs	r2, #0
 8003706:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8003708:	4b1a      	ldr	r3, [pc, #104]	@ (8003774 <BSP_SDRAM_Init+0xac>)
 800370a:	2204      	movs	r2, #4
 800370c:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 800370e:	4b19      	ldr	r3, [pc, #100]	@ (8003774 <BSP_SDRAM_Init+0xac>)
 8003710:	2210      	movs	r2, #16
 8003712:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003714:	4b17      	ldr	r3, [pc, #92]	@ (8003774 <BSP_SDRAM_Init+0xac>)
 8003716:	2240      	movs	r2, #64	@ 0x40
 8003718:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 800371a:	4b16      	ldr	r3, [pc, #88]	@ (8003774 <BSP_SDRAM_Init+0xac>)
 800371c:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8003720:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003722:	4b14      	ldr	r3, [pc, #80]	@ (8003774 <BSP_SDRAM_Init+0xac>)
 8003724:	2200      	movs	r2, #0
 8003726:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8003728:	4b12      	ldr	r3, [pc, #72]	@ (8003774 <BSP_SDRAM_Init+0xac>)
 800372a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800372e:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8003730:	4b10      	ldr	r3, [pc, #64]	@ (8003774 <BSP_SDRAM_Init+0xac>)
 8003732:	2200      	movs	r2, #0
 8003734:	625a      	str	r2, [r3, #36]	@ 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8003736:	4b0f      	ldr	r3, [pc, #60]	@ (8003774 <BSP_SDRAM_Init+0xac>)
 8003738:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800373c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 800373e:	2100      	movs	r1, #0
 8003740:	480c      	ldr	r0, [pc, #48]	@ (8003774 <BSP_SDRAM_Init+0xac>)
 8003742:	f000 f87f 	bl	8003844 <BSP_SDRAM_MspInit>
  if (HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8003746:	490d      	ldr	r1, [pc, #52]	@ (800377c <BSP_SDRAM_Init+0xb4>)
 8003748:	480a      	ldr	r0, [pc, #40]	@ (8003774 <BSP_SDRAM_Init+0xac>)
 800374a:	f003 fca1 	bl	8007090 <HAL_SDRAM_Init>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d003      	beq.n	800375c <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8003754:	4b0a      	ldr	r3, [pc, #40]	@ (8003780 <BSP_SDRAM_Init+0xb8>)
 8003756:	2201      	movs	r2, #1
 8003758:	701a      	strb	r2, [r3, #0]
 800375a:	e002      	b.n	8003762 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 800375c:	4b08      	ldr	r3, [pc, #32]	@ (8003780 <BSP_SDRAM_Init+0xb8>)
 800375e:	2200      	movs	r2, #0
 8003760:	701a      	strb	r2, [r3, #0]
  }

  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8003762:	f240 506a 	movw	r0, #1386	@ 0x56a
 8003766:	f000 f80d 	bl	8003784 <BSP_SDRAM_Initialization_sequence>

  return sdramstatus;
 800376a:	4b05      	ldr	r3, [pc, #20]	@ (8003780 <BSP_SDRAM_Init+0xb8>)
 800376c:	781b      	ldrb	r3, [r3, #0]
}
 800376e:	4618      	mov	r0, r3
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	20000438 	.word	0x20000438
 8003778:	a0000140 	.word	0xa0000140
 800377c:	2000046c 	.word	0x2000046c
 8003780:	200000d0 	.word	0x200000d0

08003784 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 800378c:	2300      	movs	r3, #0
 800378e:	60fb      	str	r3, [r7, #12]

  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8003790:	4b2a      	ldr	r3, [pc, #168]	@ (800383c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003792:	2201      	movs	r2, #1
 8003794:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003796:	4b29      	ldr	r3, [pc, #164]	@ (800383c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003798:	2208      	movs	r2, #8
 800379a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 800379c:	4b27      	ldr	r3, [pc, #156]	@ (800383c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800379e:	2201      	movs	r2, #1
 80037a0:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80037a2:	4b26      	ldr	r3, [pc, #152]	@ (800383c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80037a4:	2200      	movs	r2, #0
 80037a6:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80037a8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80037ac:	4923      	ldr	r1, [pc, #140]	@ (800383c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80037ae:	4824      	ldr	r0, [pc, #144]	@ (8003840 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80037b0:	f003 fcac 	bl	800710c <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80037b4:	2001      	movs	r0, #1
 80037b6:	f000 faed 	bl	8003d94 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 80037ba:	4b20      	ldr	r3, [pc, #128]	@ (800383c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80037bc:	2202      	movs	r2, #2
 80037be:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80037c0:	4b1e      	ldr	r3, [pc, #120]	@ (800383c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80037c2:	2208      	movs	r2, #8
 80037c4:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80037c6:	4b1d      	ldr	r3, [pc, #116]	@ (800383c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80037c8:	2201      	movs	r2, #1
 80037ca:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80037cc:	4b1b      	ldr	r3, [pc, #108]	@ (800383c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80037ce:	2200      	movs	r2, #0
 80037d0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80037d2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80037d6:	4919      	ldr	r1, [pc, #100]	@ (800383c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80037d8:	4819      	ldr	r0, [pc, #100]	@ (8003840 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80037da:	f003 fc97 	bl	800710c <HAL_SDRAM_SendCommand>

  /* Step 4: Configure an Auto Refresh command */
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80037de:	4b17      	ldr	r3, [pc, #92]	@ (800383c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80037e0:	2203      	movs	r2, #3
 80037e2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80037e4:	4b15      	ldr	r3, [pc, #84]	@ (800383c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80037e6:	2208      	movs	r2, #8
 80037e8:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 80037ea:	4b14      	ldr	r3, [pc, #80]	@ (800383c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80037ec:	2204      	movs	r2, #4
 80037ee:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80037f0:	4b12      	ldr	r3, [pc, #72]	@ (800383c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80037f2:	2200      	movs	r2, #0
 80037f4:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80037f6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80037fa:	4910      	ldr	r1, [pc, #64]	@ (800383c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80037fc:	4810      	ldr	r0, [pc, #64]	@ (8003840 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80037fe:	f003 fc85 	bl	800710c <HAL_SDRAM_SendCommand>

  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8003802:	f44f 730c 	mov.w	r3, #560	@ 0x230
 8003806:	60fb      	str	r3, [r7, #12]
           SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
           SDRAM_MODEREG_CAS_LATENCY_3           |
           SDRAM_MODEREG_OPERATING_MODE_STANDARD |
           SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8003808:	4b0c      	ldr	r3, [pc, #48]	@ (800383c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800380a:	2204      	movs	r2, #4
 800380c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800380e:	4b0b      	ldr	r3, [pc, #44]	@ (800383c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003810:	2208      	movs	r2, #8
 8003812:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003814:	4b09      	ldr	r3, [pc, #36]	@ (800383c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003816:	2201      	movs	r2, #1
 8003818:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	4a07      	ldr	r2, [pc, #28]	@ (800383c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800381e:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003820:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003824:	4905      	ldr	r1, [pc, #20]	@ (800383c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003826:	4806      	ldr	r0, [pc, #24]	@ (8003840 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003828:	f003 fc70 	bl	800710c <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount);
 800382c:	6879      	ldr	r1, [r7, #4]
 800382e:	4804      	ldr	r0, [pc, #16]	@ (8003840 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003830:	f003 fca1 	bl	8007176 <HAL_SDRAM_ProgramRefreshRate>
}
 8003834:	bf00      	nop
 8003836:	3710      	adds	r7, #16
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}
 800383c:	20000488 	.word	0x20000488
 8003840:	20000438 	.word	0x20000438

08003844 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b090      	sub	sp, #64	@ 0x40
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if (hsdram != (SDRAM_HandleTypeDef *)NULL)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2b00      	cmp	r3, #0
 8003852:	f000 80ec 	beq.w	8003a2e <BSP_SDRAM_MspInit+0x1ea>
  {
    /* Enable FMC clock */
    __HAL_RCC_FMC_CLK_ENABLE();
 8003856:	2300      	movs	r3, #0
 8003858:	62bb      	str	r3, [r7, #40]	@ 0x28
 800385a:	4b77      	ldr	r3, [pc, #476]	@ (8003a38 <BSP_SDRAM_MspInit+0x1f4>)
 800385c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800385e:	4a76      	ldr	r2, [pc, #472]	@ (8003a38 <BSP_SDRAM_MspInit+0x1f4>)
 8003860:	f043 0301 	orr.w	r3, r3, #1
 8003864:	6393      	str	r3, [r2, #56]	@ 0x38
 8003866:	4b74      	ldr	r3, [pc, #464]	@ (8003a38 <BSP_SDRAM_MspInit+0x1f4>)
 8003868:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800386a:	f003 0301 	and.w	r3, r3, #1
 800386e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003870:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    /* Enable chosen DMAx clock */
    __DMAx_CLK_ENABLE();
 8003872:	2300      	movs	r3, #0
 8003874:	627b      	str	r3, [r7, #36]	@ 0x24
 8003876:	4b70      	ldr	r3, [pc, #448]	@ (8003a38 <BSP_SDRAM_MspInit+0x1f4>)
 8003878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800387a:	4a6f      	ldr	r2, [pc, #444]	@ (8003a38 <BSP_SDRAM_MspInit+0x1f4>)
 800387c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003880:	6313      	str	r3, [r2, #48]	@ 0x30
 8003882:	4b6d      	ldr	r3, [pc, #436]	@ (8003a38 <BSP_SDRAM_MspInit+0x1f4>)
 8003884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003886:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800388a:	627b      	str	r3, [r7, #36]	@ 0x24
 800388c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    /* Enable GPIOs clock */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800388e:	2300      	movs	r3, #0
 8003890:	623b      	str	r3, [r7, #32]
 8003892:	4b69      	ldr	r3, [pc, #420]	@ (8003a38 <BSP_SDRAM_MspInit+0x1f4>)
 8003894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003896:	4a68      	ldr	r2, [pc, #416]	@ (8003a38 <BSP_SDRAM_MspInit+0x1f4>)
 8003898:	f043 0302 	orr.w	r3, r3, #2
 800389c:	6313      	str	r3, [r2, #48]	@ 0x30
 800389e:	4b66      	ldr	r3, [pc, #408]	@ (8003a38 <BSP_SDRAM_MspInit+0x1f4>)
 80038a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038a2:	f003 0302 	and.w	r3, r3, #2
 80038a6:	623b      	str	r3, [r7, #32]
 80038a8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80038aa:	2300      	movs	r3, #0
 80038ac:	61fb      	str	r3, [r7, #28]
 80038ae:	4b62      	ldr	r3, [pc, #392]	@ (8003a38 <BSP_SDRAM_MspInit+0x1f4>)
 80038b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038b2:	4a61      	ldr	r2, [pc, #388]	@ (8003a38 <BSP_SDRAM_MspInit+0x1f4>)
 80038b4:	f043 0304 	orr.w	r3, r3, #4
 80038b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80038ba:	4b5f      	ldr	r3, [pc, #380]	@ (8003a38 <BSP_SDRAM_MspInit+0x1f4>)
 80038bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038be:	f003 0304 	and.w	r3, r3, #4
 80038c2:	61fb      	str	r3, [r7, #28]
 80038c4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80038c6:	2300      	movs	r3, #0
 80038c8:	61bb      	str	r3, [r7, #24]
 80038ca:	4b5b      	ldr	r3, [pc, #364]	@ (8003a38 <BSP_SDRAM_MspInit+0x1f4>)
 80038cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ce:	4a5a      	ldr	r2, [pc, #360]	@ (8003a38 <BSP_SDRAM_MspInit+0x1f4>)
 80038d0:	f043 0308 	orr.w	r3, r3, #8
 80038d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80038d6:	4b58      	ldr	r3, [pc, #352]	@ (8003a38 <BSP_SDRAM_MspInit+0x1f4>)
 80038d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038da:	f003 0308 	and.w	r3, r3, #8
 80038de:	61bb      	str	r3, [r7, #24]
 80038e0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80038e2:	2300      	movs	r3, #0
 80038e4:	617b      	str	r3, [r7, #20]
 80038e6:	4b54      	ldr	r3, [pc, #336]	@ (8003a38 <BSP_SDRAM_MspInit+0x1f4>)
 80038e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ea:	4a53      	ldr	r2, [pc, #332]	@ (8003a38 <BSP_SDRAM_MspInit+0x1f4>)
 80038ec:	f043 0310 	orr.w	r3, r3, #16
 80038f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80038f2:	4b51      	ldr	r3, [pc, #324]	@ (8003a38 <BSP_SDRAM_MspInit+0x1f4>)
 80038f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038f6:	f003 0310 	and.w	r3, r3, #16
 80038fa:	617b      	str	r3, [r7, #20]
 80038fc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80038fe:	2300      	movs	r3, #0
 8003900:	613b      	str	r3, [r7, #16]
 8003902:	4b4d      	ldr	r3, [pc, #308]	@ (8003a38 <BSP_SDRAM_MspInit+0x1f4>)
 8003904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003906:	4a4c      	ldr	r2, [pc, #304]	@ (8003a38 <BSP_SDRAM_MspInit+0x1f4>)
 8003908:	f043 0320 	orr.w	r3, r3, #32
 800390c:	6313      	str	r3, [r2, #48]	@ 0x30
 800390e:	4b4a      	ldr	r3, [pc, #296]	@ (8003a38 <BSP_SDRAM_MspInit+0x1f4>)
 8003910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003912:	f003 0320 	and.w	r3, r3, #32
 8003916:	613b      	str	r3, [r7, #16]
 8003918:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800391a:	2300      	movs	r3, #0
 800391c:	60fb      	str	r3, [r7, #12]
 800391e:	4b46      	ldr	r3, [pc, #280]	@ (8003a38 <BSP_SDRAM_MspInit+0x1f4>)
 8003920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003922:	4a45      	ldr	r2, [pc, #276]	@ (8003a38 <BSP_SDRAM_MspInit+0x1f4>)
 8003924:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003928:	6313      	str	r3, [r2, #48]	@ 0x30
 800392a:	4b43      	ldr	r3, [pc, #268]	@ (8003a38 <BSP_SDRAM_MspInit+0x1f4>)
 800392c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800392e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003932:	60fb      	str	r3, [r7, #12]
 8003934:	68fb      	ldr	r3, [r7, #12]
     +-------------------+

    */

    /* Common GPIO configuration */
    GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8003936:	2302      	movs	r3, #2
 8003938:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800393a:	2302      	movs	r3, #2
 800393c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800393e:	2300      	movs	r3, #0
 8003940:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8003942:	230c      	movs	r3, #12
 8003944:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* GPIOB configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8003946:	2360      	movs	r3, #96	@ 0x60
 8003948:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800394a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800394e:	4619      	mov	r1, r3
 8003950:	483a      	ldr	r0, [pc, #232]	@ (8003a3c <BSP_SDRAM_MspInit+0x1f8>)
 8003952:	f000 ffa9 	bl	80048a8 <HAL_GPIO_Init>

    /* GPIOC configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0;
 8003956:	2301      	movs	r3, #1
 8003958:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 800395a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800395e:	4619      	mov	r1, r3
 8003960:	4837      	ldr	r0, [pc, #220]	@ (8003a40 <BSP_SDRAM_MspInit+0x1fc>)
 8003962:	f000 ffa1 	bl	80048a8 <HAL_GPIO_Init>

    /* GPIOD configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8003966:	f24c 7303 	movw	r3, #50947	@ 0xc703
 800396a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                             GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                             GPIO_PIN_15;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 800396c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003970:	4619      	mov	r1, r3
 8003972:	4834      	ldr	r0, [pc, #208]	@ (8003a44 <BSP_SDRAM_MspInit+0x200>)
 8003974:	f000 ff98 	bl	80048a8 <HAL_GPIO_Init>

    /* GPIOE configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8003978:	f64f 7383 	movw	r3, #65411	@ 0xff83
 800397c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                             GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                             GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                             GPIO_PIN_14 | GPIO_PIN_15;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 800397e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003982:	4619      	mov	r1, r3
 8003984:	4830      	ldr	r0, [pc, #192]	@ (8003a48 <BSP_SDRAM_MspInit+0x204>)
 8003986:	f000 ff8f 	bl	80048a8 <HAL_GPIO_Init>

    /* GPIOF configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 |
 800398a:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 800398e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                             GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                             GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                             GPIO_PIN_14 | GPIO_PIN_15;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8003990:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003994:	4619      	mov	r1, r3
 8003996:	482d      	ldr	r0, [pc, #180]	@ (8003a4c <BSP_SDRAM_MspInit+0x208>)
 8003998:	f000 ff86 	bl	80048a8 <HAL_GPIO_Init>

    /* GPIOG configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 800399c:	f248 1333 	movw	r3, #33075	@ 0x8133
 80039a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                             GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80039a2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80039a6:	4619      	mov	r1, r3
 80039a8:	4829      	ldr	r0, [pc, #164]	@ (8003a50 <BSP_SDRAM_MspInit+0x20c>)
 80039aa:	f000 ff7d 	bl	80048a8 <HAL_GPIO_Init>

    /* Configure common DMA parameters */
    dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80039ae:	4b29      	ldr	r3, [pc, #164]	@ (8003a54 <BSP_SDRAM_MspInit+0x210>)
 80039b0:	2200      	movs	r2, #0
 80039b2:	605a      	str	r2, [r3, #4]
    dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80039b4:	4b27      	ldr	r3, [pc, #156]	@ (8003a54 <BSP_SDRAM_MspInit+0x210>)
 80039b6:	2280      	movs	r2, #128	@ 0x80
 80039b8:	609a      	str	r2, [r3, #8]
    dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80039ba:	4b26      	ldr	r3, [pc, #152]	@ (8003a54 <BSP_SDRAM_MspInit+0x210>)
 80039bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80039c0:	60da      	str	r2, [r3, #12]
    dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 80039c2:	4b24      	ldr	r3, [pc, #144]	@ (8003a54 <BSP_SDRAM_MspInit+0x210>)
 80039c4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80039c8:	611a      	str	r2, [r3, #16]
    dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80039ca:	4b22      	ldr	r3, [pc, #136]	@ (8003a54 <BSP_SDRAM_MspInit+0x210>)
 80039cc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80039d0:	615a      	str	r2, [r3, #20]
    dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80039d2:	4b20      	ldr	r3, [pc, #128]	@ (8003a54 <BSP_SDRAM_MspInit+0x210>)
 80039d4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80039d8:	619a      	str	r2, [r3, #24]
    dmaHandle.Init.Mode                = DMA_NORMAL;
 80039da:	4b1e      	ldr	r3, [pc, #120]	@ (8003a54 <BSP_SDRAM_MspInit+0x210>)
 80039dc:	2200      	movs	r2, #0
 80039de:	61da      	str	r2, [r3, #28]
    dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 80039e0:	4b1c      	ldr	r3, [pc, #112]	@ (8003a54 <BSP_SDRAM_MspInit+0x210>)
 80039e2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80039e6:	621a      	str	r2, [r3, #32]
    dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 80039e8:	4b1a      	ldr	r3, [pc, #104]	@ (8003a54 <BSP_SDRAM_MspInit+0x210>)
 80039ea:	2200      	movs	r2, #0
 80039ec:	625a      	str	r2, [r3, #36]	@ 0x24
    dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80039ee:	4b19      	ldr	r3, [pc, #100]	@ (8003a54 <BSP_SDRAM_MspInit+0x210>)
 80039f0:	2203      	movs	r2, #3
 80039f2:	629a      	str	r2, [r3, #40]	@ 0x28
    dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80039f4:	4b17      	ldr	r3, [pc, #92]	@ (8003a54 <BSP_SDRAM_MspInit+0x210>)
 80039f6:	2200      	movs	r2, #0
 80039f8:	62da      	str	r2, [r3, #44]	@ 0x2c
    dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE;
 80039fa:	4b16      	ldr	r3, [pc, #88]	@ (8003a54 <BSP_SDRAM_MspInit+0x210>)
 80039fc:	2200      	movs	r2, #0
 80039fe:	631a      	str	r2, [r3, #48]	@ 0x30

    dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8003a00:	4b14      	ldr	r3, [pc, #80]	@ (8003a54 <BSP_SDRAM_MspInit+0x210>)
 8003a02:	4a15      	ldr	r2, [pc, #84]	@ (8003a58 <BSP_SDRAM_MspInit+0x214>)
 8003a04:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a12      	ldr	r2, [pc, #72]	@ (8003a54 <BSP_SDRAM_MspInit+0x210>)
 8003a0a:	631a      	str	r2, [r3, #48]	@ 0x30
 8003a0c:	4a11      	ldr	r2, [pc, #68]	@ (8003a54 <BSP_SDRAM_MspInit+0x210>)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6393      	str	r3, [r2, #56]	@ 0x38

    /* Deinitialize the stream for new transfer */
    HAL_DMA_DeInit(&dmaHandle);
 8003a12:	4810      	ldr	r0, [pc, #64]	@ (8003a54 <BSP_SDRAM_MspInit+0x210>)
 8003a14:	f000 fba2 	bl	800415c <HAL_DMA_DeInit>

    /* Configure the DMA stream */
    HAL_DMA_Init(&dmaHandle);
 8003a18:	480e      	ldr	r0, [pc, #56]	@ (8003a54 <BSP_SDRAM_MspInit+0x210>)
 8003a1a:	f000 faf1 	bl	8004000 <HAL_DMA_Init>

    /* NVIC configuration for DMA transfer complete interrupt */
    HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8003a1e:	2200      	movs	r2, #0
 8003a20:	210f      	movs	r1, #15
 8003a22:	2038      	movs	r0, #56	@ 0x38
 8003a24:	f000 fab5 	bl	8003f92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8003a28:	2038      	movs	r0, #56	@ 0x38
 8003a2a:	f000 face 	bl	8003fca <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8003a2e:	bf00      	nop
 8003a30:	3740      	adds	r7, #64	@ 0x40
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	40023800 	.word	0x40023800
 8003a3c:	40020400 	.word	0x40020400
 8003a40:	40020800 	.word	0x40020800
 8003a44:	40020c00 	.word	0x40020c00
 8003a48:	40021000 	.word	0x40021000
 8003a4c:	40021400 	.word	0x40021400
 8003a50:	40021800 	.word	0x40021800
 8003a54:	20000498 	.word	0x20000498
 8003a58:	40026410 	.word	0x40026410

08003a5c <BSP_TS_Init>:
  * @param  XSize: The maximum X size of the TS area on LCD
  * @param  YSize: The maximum Y size of the TS area on LCD
  * @retval TS_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b084      	sub	sp, #16
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	4603      	mov	r3, r0
 8003a64:	460a      	mov	r2, r1
 8003a66:	80fb      	strh	r3, [r7, #6]
 8003a68:	4613      	mov	r3, r2
 8003a6a:	80bb      	strh	r3, [r7, #4]
  uint8_t ret = TS_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	73fb      	strb	r3, [r7, #15]

  /* Initialize x and y positions boundaries */
  TsXBoundary = XSize;
 8003a70:	4a13      	ldr	r2, [pc, #76]	@ (8003ac0 <BSP_TS_Init+0x64>)
 8003a72:	88fb      	ldrh	r3, [r7, #6]
 8003a74:	8013      	strh	r3, [r2, #0]
  TsYBoundary = YSize;
 8003a76:	4a13      	ldr	r2, [pc, #76]	@ (8003ac4 <BSP_TS_Init+0x68>)
 8003a78:	88bb      	ldrh	r3, [r7, #4]
 8003a7a:	8013      	strh	r3, [r2, #0]

  /* Read ID and verify if the IO expander is ready */
  if (stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 8003a7c:	4b12      	ldr	r3, [pc, #72]	@ (8003ac8 <BSP_TS_Init+0x6c>)
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	2082      	movs	r0, #130	@ 0x82
 8003a82:	4798      	blx	r3
 8003a84:	4603      	mov	r3, r0
 8003a86:	461a      	mov	r2, r3
 8003a88:	f640 0311 	movw	r3, #2065	@ 0x811
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d104      	bne.n	8003a9a <BSP_TS_Init+0x3e>
  {
    /* Initialize the TS driver structure */
    TsDrv = &stmpe811_ts_drv;
 8003a90:	4b0e      	ldr	r3, [pc, #56]	@ (8003acc <BSP_TS_Init+0x70>)
 8003a92:	4a0d      	ldr	r2, [pc, #52]	@ (8003ac8 <BSP_TS_Init+0x6c>)
 8003a94:	601a      	str	r2, [r3, #0]

    ret = TS_OK;
 8003a96:	2300      	movs	r3, #0
 8003a98:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == TS_OK)
 8003a9a:	7bfb      	ldrb	r3, [r7, #15]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d109      	bne.n	8003ab4 <BSP_TS_Init+0x58>
  {
    /* Initialize the LL TS Driver */
    TsDrv->Init(TS_I2C_ADDRESS);
 8003aa0:	4b0a      	ldr	r3, [pc, #40]	@ (8003acc <BSP_TS_Init+0x70>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	2082      	movs	r0, #130	@ 0x82
 8003aa8:	4798      	blx	r3
    TsDrv->Start(TS_I2C_ADDRESS);
 8003aaa:	4b08      	ldr	r3, [pc, #32]	@ (8003acc <BSP_TS_Init+0x70>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	2082      	movs	r0, #130	@ 0x82
 8003ab2:	4798      	blx	r3
  }

  return ret;
 8003ab4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3710      	adds	r7, #16
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	200004fc 	.word	0x200004fc
 8003ac4:	200004fe 	.word	0x200004fe
 8003ac8:	2000006c 	.word	0x2000006c
 8003acc:	200004f8 	.word	0x200004f8

08003ad0 <BSP_TS_GetState>:
/**
  * @brief  Returns status and positions of the touch screen.
  * @param  TsState: Pointer to touch screen current state structure
  */
void BSP_TS_GetState(TS_StateTypeDef *TsState)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b086      	sub	sp, #24
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  static uint32_t _x = 0, _y = 0;
  uint16_t xDiff, yDiff, x, y, xr, yr;

  TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 8003ad8:	4b4f      	ldr	r3, [pc, #316]	@ (8003c18 <BSP_TS_GetState+0x148>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	691b      	ldr	r3, [r3, #16]
 8003ade:	2082      	movs	r0, #130	@ 0x82
 8003ae0:	4798      	blx	r3
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	801a      	strh	r2, [r3, #0]

  if (TsState->TouchDetected)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	881b      	ldrh	r3, [r3, #0]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	f000 808d 	beq.w	8003c0e <BSP_TS_GetState+0x13e>
  {
    TsDrv->GetXY(TS_I2C_ADDRESS, &x, &y);
 8003af4:	4b48      	ldr	r3, [pc, #288]	@ (8003c18 <BSP_TS_GetState+0x148>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	695b      	ldr	r3, [r3, #20]
 8003afa:	f107 020c 	add.w	r2, r7, #12
 8003afe:	f107 010e 	add.w	r1, r7, #14
 8003b02:	2082      	movs	r0, #130	@ 0x82
 8003b04:	4798      	blx	r3
    /* Y value first correction */
    y = 3700 - y;
#else

    /* Y value first correction */
    y -= 360;
 8003b06:	89bb      	ldrh	r3, [r7, #12]
 8003b08:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	81bb      	strh	r3, [r7, #12]

#endif

    /* Y value second correction */
    yr = y / 11;
 8003b10:	89bb      	ldrh	r3, [r7, #12]
 8003b12:	4a42      	ldr	r2, [pc, #264]	@ (8003c1c <BSP_TS_GetState+0x14c>)
 8003b14:	fba2 2303 	umull	r2, r3, r2, r3
 8003b18:	08db      	lsrs	r3, r3, #3
 8003b1a:	82bb      	strh	r3, [r7, #20]

    /* Return y position value */
    if (yr <= 0)
 8003b1c:	8abb      	ldrh	r3, [r7, #20]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d102      	bne.n	8003b28 <BSP_TS_GetState+0x58>
    {
      yr = 0;
 8003b22:	2300      	movs	r3, #0
 8003b24:	82bb      	strh	r3, [r7, #20]
 8003b26:	e008      	b.n	8003b3a <BSP_TS_GetState+0x6a>
    }
    else if (yr > TsYBoundary)
 8003b28:	4b3d      	ldr	r3, [pc, #244]	@ (8003c20 <BSP_TS_GetState+0x150>)
 8003b2a:	881b      	ldrh	r3, [r3, #0]
 8003b2c:	8aba      	ldrh	r2, [r7, #20]
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d903      	bls.n	8003b3a <BSP_TS_GetState+0x6a>
    {
      yr = TsYBoundary - 1;
 8003b32:	4b3b      	ldr	r3, [pc, #236]	@ (8003c20 <BSP_TS_GetState+0x150>)
 8003b34:	881b      	ldrh	r3, [r3, #0]
 8003b36:	3b01      	subs	r3, #1
 8003b38:	82bb      	strh	r3, [r7, #20]
    }
    else
    {}
    y = yr;
 8003b3a:	8abb      	ldrh	r3, [r7, #20]
 8003b3c:	81bb      	strh	r3, [r7, #12]

    /* X value first correction */
    if (x <= 3000)
 8003b3e:	89fb      	ldrh	r3, [r7, #14]
 8003b40:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d806      	bhi.n	8003b56 <BSP_TS_GetState+0x86>
    {
      x = 3870 - x;
 8003b48:	89fb      	ldrh	r3, [r7, #14]
 8003b4a:	f5c3 6371 	rsb	r3, r3, #3856	@ 0xf10
 8003b4e:	330e      	adds	r3, #14
 8003b50:	b29b      	uxth	r3, r3
 8003b52:	81fb      	strh	r3, [r7, #14]
 8003b54:	e005      	b.n	8003b62 <BSP_TS_GetState+0x92>
    }
    else
    {
      x = 3800 - x;
 8003b56:	89fb      	ldrh	r3, [r7, #14]
 8003b58:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 8003b5c:	3308      	adds	r3, #8
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	81fb      	strh	r3, [r7, #14]
    }

    /* X value second correction */
    xr = x / 15;
 8003b62:	89fb      	ldrh	r3, [r7, #14]
 8003b64:	4a2f      	ldr	r2, [pc, #188]	@ (8003c24 <BSP_TS_GetState+0x154>)
 8003b66:	fba2 2303 	umull	r2, r3, r2, r3
 8003b6a:	08db      	lsrs	r3, r3, #3
 8003b6c:	82fb      	strh	r3, [r7, #22]

    /* Return X position value */
    if (xr <= 0)
 8003b6e:	8afb      	ldrh	r3, [r7, #22]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d102      	bne.n	8003b7a <BSP_TS_GetState+0xaa>
    {
      xr = 0;
 8003b74:	2300      	movs	r3, #0
 8003b76:	82fb      	strh	r3, [r7, #22]
 8003b78:	e008      	b.n	8003b8c <BSP_TS_GetState+0xbc>
    }
    else if (xr > TsXBoundary)
 8003b7a:	4b2b      	ldr	r3, [pc, #172]	@ (8003c28 <BSP_TS_GetState+0x158>)
 8003b7c:	881b      	ldrh	r3, [r3, #0]
 8003b7e:	8afa      	ldrh	r2, [r7, #22]
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d903      	bls.n	8003b8c <BSP_TS_GetState+0xbc>
    {
      xr = TsXBoundary - 1;
 8003b84:	4b28      	ldr	r3, [pc, #160]	@ (8003c28 <BSP_TS_GetState+0x158>)
 8003b86:	881b      	ldrh	r3, [r3, #0]
 8003b88:	3b01      	subs	r3, #1
 8003b8a:	82fb      	strh	r3, [r7, #22]
    }
    else
    {}

    x = xr;
 8003b8c:	8afb      	ldrh	r3, [r7, #22]
 8003b8e:	81fb      	strh	r3, [r7, #14]
    xDiff = x > _x ? (x - _x): (_x - x);
 8003b90:	89fb      	ldrh	r3, [r7, #14]
 8003b92:	461a      	mov	r2, r3
 8003b94:	4b25      	ldr	r3, [pc, #148]	@ (8003c2c <BSP_TS_GetState+0x15c>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d906      	bls.n	8003baa <BSP_TS_GetState+0xda>
 8003b9c:	89fa      	ldrh	r2, [r7, #14]
 8003b9e:	4b23      	ldr	r3, [pc, #140]	@ (8003c2c <BSP_TS_GetState+0x15c>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	e005      	b.n	8003bb6 <BSP_TS_GetState+0xe6>
 8003baa:	4b20      	ldr	r3, [pc, #128]	@ (8003c2c <BSP_TS_GetState+0x15c>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	b29a      	uxth	r2, r3
 8003bb0:	89fb      	ldrh	r3, [r7, #14]
 8003bb2:	1ad3      	subs	r3, r2, r3
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	827b      	strh	r3, [r7, #18]
    yDiff = y > _y ? (y - _y) : (_y - y);
 8003bb8:	89bb      	ldrh	r3, [r7, #12]
 8003bba:	461a      	mov	r2, r3
 8003bbc:	4b1c      	ldr	r3, [pc, #112]	@ (8003c30 <BSP_TS_GetState+0x160>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d906      	bls.n	8003bd2 <BSP_TS_GetState+0x102>
 8003bc4:	89ba      	ldrh	r2, [r7, #12]
 8003bc6:	4b1a      	ldr	r3, [pc, #104]	@ (8003c30 <BSP_TS_GetState+0x160>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	e005      	b.n	8003bde <BSP_TS_GetState+0x10e>
 8003bd2:	4b17      	ldr	r3, [pc, #92]	@ (8003c30 <BSP_TS_GetState+0x160>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	b29a      	uxth	r2, r3
 8003bd8:	89bb      	ldrh	r3, [r7, #12]
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	823b      	strh	r3, [r7, #16]

    if (xDiff + yDiff > 5)
 8003be0:	8a7a      	ldrh	r2, [r7, #18]
 8003be2:	8a3b      	ldrh	r3, [r7, #16]
 8003be4:	4413      	add	r3, r2
 8003be6:	2b05      	cmp	r3, #5
 8003be8:	dd07      	ble.n	8003bfa <BSP_TS_GetState+0x12a>
    {
      _x = x;
 8003bea:	89fb      	ldrh	r3, [r7, #14]
 8003bec:	461a      	mov	r2, r3
 8003bee:	4b0f      	ldr	r3, [pc, #60]	@ (8003c2c <BSP_TS_GetState+0x15c>)
 8003bf0:	601a      	str	r2, [r3, #0]
      _y = y;
 8003bf2:	89bb      	ldrh	r3, [r7, #12]
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	4b0e      	ldr	r3, [pc, #56]	@ (8003c30 <BSP_TS_GetState+0x160>)
 8003bf8:	601a      	str	r2, [r3, #0]
    }

    /* Update the X position */
    TsState->X = _x;
 8003bfa:	4b0c      	ldr	r3, [pc, #48]	@ (8003c2c <BSP_TS_GetState+0x15c>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	b29a      	uxth	r2, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	805a      	strh	r2, [r3, #2]

    /* Update the Y position */
    TsState->Y = _y;
 8003c04:	4b0a      	ldr	r3, [pc, #40]	@ (8003c30 <BSP_TS_GetState+0x160>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	b29a      	uxth	r2, r3
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	809a      	strh	r2, [r3, #4]
  }
}
 8003c0e:	bf00      	nop
 8003c10:	3718      	adds	r7, #24
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	200004f8 	.word	0x200004f8
 8003c1c:	ba2e8ba3 	.word	0xba2e8ba3
 8003c20:	200004fe 	.word	0x200004fe
 8003c24:	88888889 	.word	0x88888889
 8003c28:	200004fc 	.word	0x200004fc
 8003c2c:	20000500 	.word	0x20000500
 8003c30:	20000504 	.word	0x20000504

08003c34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003c34:	b480      	push	{r7}
 8003c36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003c38:	4b16      	ldr	r3, [pc, #88]	@ (8003c94 <SystemInit+0x60>)
 8003c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c3e:	4a15      	ldr	r2, [pc, #84]	@ (8003c94 <SystemInit+0x60>)
 8003c40:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003c44:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003c48:	4b13      	ldr	r3, [pc, #76]	@ (8003c98 <SystemInit+0x64>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a12      	ldr	r2, [pc, #72]	@ (8003c98 <SystemInit+0x64>)
 8003c4e:	f043 0301 	orr.w	r3, r3, #1
 8003c52:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003c54:	4b10      	ldr	r3, [pc, #64]	@ (8003c98 <SystemInit+0x64>)
 8003c56:	2200      	movs	r2, #0
 8003c58:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003c5a:	4b0f      	ldr	r3, [pc, #60]	@ (8003c98 <SystemInit+0x64>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a0e      	ldr	r2, [pc, #56]	@ (8003c98 <SystemInit+0x64>)
 8003c60:	f023 7384 	bic.w	r3, r3, #17301504	@ 0x1080000
 8003c64:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c68:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003c6a:	4b0b      	ldr	r3, [pc, #44]	@ (8003c98 <SystemInit+0x64>)
 8003c6c:	4a0b      	ldr	r2, [pc, #44]	@ (8003c9c <SystemInit+0x68>)
 8003c6e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003c70:	4b09      	ldr	r3, [pc, #36]	@ (8003c98 <SystemInit+0x64>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a08      	ldr	r2, [pc, #32]	@ (8003c98 <SystemInit+0x64>)
 8003c76:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c7a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003c7c:	4b06      	ldr	r3, [pc, #24]	@ (8003c98 <SystemInit+0x64>)
 8003c7e:	2200      	movs	r2, #0
 8003c80:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003c82:	4b04      	ldr	r3, [pc, #16]	@ (8003c94 <SystemInit+0x60>)
 8003c84:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003c88:	609a      	str	r2, [r3, #8]
#endif
}
 8003c8a:	bf00      	nop
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr
 8003c94:	e000ed00 	.word	0xe000ed00
 8003c98:	40023800 	.word	0x40023800
 8003c9c:	24003010 	.word	0x24003010

08003ca0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003ca4:	4b0e      	ldr	r3, [pc, #56]	@ (8003ce0 <HAL_Init+0x40>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a0d      	ldr	r2, [pc, #52]	@ (8003ce0 <HAL_Init+0x40>)
 8003caa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003cae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003cb0:	4b0b      	ldr	r3, [pc, #44]	@ (8003ce0 <HAL_Init+0x40>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a0a      	ldr	r2, [pc, #40]	@ (8003ce0 <HAL_Init+0x40>)
 8003cb6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003cba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003cbc:	4b08      	ldr	r3, [pc, #32]	@ (8003ce0 <HAL_Init+0x40>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a07      	ldr	r2, [pc, #28]	@ (8003ce0 <HAL_Init+0x40>)
 8003cc2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cc6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003cc8:	2003      	movs	r0, #3
 8003cca:	f000 f957 	bl	8003f7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003cce:	200f      	movs	r0, #15
 8003cd0:	f000 f810 	bl	8003cf4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003cd4:	f000 f806 	bl	8003ce4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003cd8:	2300      	movs	r3, #0
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	40023c00 	.word	0x40023c00

08003ce4 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8003ce8:	bf00      	nop
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr
	...

08003cf4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b082      	sub	sp, #8
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003cfc:	4b12      	ldr	r3, [pc, #72]	@ (8003d48 <HAL_InitTick+0x54>)
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	4b12      	ldr	r3, [pc, #72]	@ (8003d4c <HAL_InitTick+0x58>)
 8003d02:	781b      	ldrb	r3, [r3, #0]
 8003d04:	4619      	mov	r1, r3
 8003d06:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003d0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d12:	4618      	mov	r0, r3
 8003d14:	f000 f967 	bl	8003fe6 <HAL_SYSTICK_Config>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d001      	beq.n	8003d22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e00e      	b.n	8003d40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2b0f      	cmp	r3, #15
 8003d26:	d80a      	bhi.n	8003d3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003d28:	2200      	movs	r2, #0
 8003d2a:	6879      	ldr	r1, [r7, #4]
 8003d2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003d30:	f000 f92f 	bl	8003f92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003d34:	4a06      	ldr	r2, [pc, #24]	@ (8003d50 <HAL_InitTick+0x5c>)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	e000      	b.n	8003d40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3708      	adds	r7, #8
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}
 8003d48:	200000d4 	.word	0x200000d4
 8003d4c:	200000dc 	.word	0x200000dc
 8003d50:	200000d8 	.word	0x200000d8

08003d54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d54:	b480      	push	{r7}
 8003d56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003d58:	4b06      	ldr	r3, [pc, #24]	@ (8003d74 <HAL_IncTick+0x20>)
 8003d5a:	781b      	ldrb	r3, [r3, #0]
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	4b06      	ldr	r3, [pc, #24]	@ (8003d78 <HAL_IncTick+0x24>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4413      	add	r3, r2
 8003d64:	4a04      	ldr	r2, [pc, #16]	@ (8003d78 <HAL_IncTick+0x24>)
 8003d66:	6013      	str	r3, [r2, #0]
}
 8003d68:	bf00      	nop
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr
 8003d72:	bf00      	nop
 8003d74:	200000dc 	.word	0x200000dc
 8003d78:	20000508 	.word	0x20000508

08003d7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	af00      	add	r7, sp, #0
  return uwTick;
 8003d80:	4b03      	ldr	r3, [pc, #12]	@ (8003d90 <HAL_GetTick+0x14>)
 8003d82:	681b      	ldr	r3, [r3, #0]
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr
 8003d8e:	bf00      	nop
 8003d90:	20000508 	.word	0x20000508

08003d94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b084      	sub	sp, #16
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d9c:	f7ff ffee 	bl	8003d7c <HAL_GetTick>
 8003da0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003dac:	d005      	beq.n	8003dba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003dae:	4b0a      	ldr	r3, [pc, #40]	@ (8003dd8 <HAL_Delay+0x44>)
 8003db0:	781b      	ldrb	r3, [r3, #0]
 8003db2:	461a      	mov	r2, r3
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	4413      	add	r3, r2
 8003db8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003dba:	bf00      	nop
 8003dbc:	f7ff ffde 	bl	8003d7c <HAL_GetTick>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	68fa      	ldr	r2, [r7, #12]
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d8f7      	bhi.n	8003dbc <HAL_Delay+0x28>
  {
  }
}
 8003dcc:	bf00      	nop
 8003dce:	bf00      	nop
 8003dd0:	3710      	adds	r7, #16
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	200000dc 	.word	0x200000dc

08003ddc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b085      	sub	sp, #20
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f003 0307 	and.w	r3, r3, #7
 8003dea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003dec:	4b0c      	ldr	r3, [pc, #48]	@ (8003e20 <__NVIC_SetPriorityGrouping+0x44>)
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003df2:	68ba      	ldr	r2, [r7, #8]
 8003df4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003df8:	4013      	ands	r3, r2
 8003dfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003e04:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003e08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e0e:	4a04      	ldr	r2, [pc, #16]	@ (8003e20 <__NVIC_SetPriorityGrouping+0x44>)
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	60d3      	str	r3, [r2, #12]
}
 8003e14:	bf00      	nop
 8003e16:	3714      	adds	r7, #20
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr
 8003e20:	e000ed00 	.word	0xe000ed00

08003e24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003e24:	b480      	push	{r7}
 8003e26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e28:	4b04      	ldr	r3, [pc, #16]	@ (8003e3c <__NVIC_GetPriorityGrouping+0x18>)
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	0a1b      	lsrs	r3, r3, #8
 8003e2e:	f003 0307 	and.w	r3, r3, #7
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr
 8003e3c:	e000ed00 	.word	0xe000ed00

08003e40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b083      	sub	sp, #12
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	4603      	mov	r3, r0
 8003e48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	db0b      	blt.n	8003e6a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e52:	79fb      	ldrb	r3, [r7, #7]
 8003e54:	f003 021f 	and.w	r2, r3, #31
 8003e58:	4907      	ldr	r1, [pc, #28]	@ (8003e78 <__NVIC_EnableIRQ+0x38>)
 8003e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e5e:	095b      	lsrs	r3, r3, #5
 8003e60:	2001      	movs	r0, #1
 8003e62:	fa00 f202 	lsl.w	r2, r0, r2
 8003e66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003e6a:	bf00      	nop
 8003e6c:	370c      	adds	r7, #12
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr
 8003e76:	bf00      	nop
 8003e78:	e000e100 	.word	0xe000e100

08003e7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b083      	sub	sp, #12
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	4603      	mov	r3, r0
 8003e84:	6039      	str	r1, [r7, #0]
 8003e86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	db0a      	blt.n	8003ea6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	b2da      	uxtb	r2, r3
 8003e94:	490c      	ldr	r1, [pc, #48]	@ (8003ec8 <__NVIC_SetPriority+0x4c>)
 8003e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e9a:	0112      	lsls	r2, r2, #4
 8003e9c:	b2d2      	uxtb	r2, r2
 8003e9e:	440b      	add	r3, r1
 8003ea0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ea4:	e00a      	b.n	8003ebc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	b2da      	uxtb	r2, r3
 8003eaa:	4908      	ldr	r1, [pc, #32]	@ (8003ecc <__NVIC_SetPriority+0x50>)
 8003eac:	79fb      	ldrb	r3, [r7, #7]
 8003eae:	f003 030f 	and.w	r3, r3, #15
 8003eb2:	3b04      	subs	r3, #4
 8003eb4:	0112      	lsls	r2, r2, #4
 8003eb6:	b2d2      	uxtb	r2, r2
 8003eb8:	440b      	add	r3, r1
 8003eba:	761a      	strb	r2, [r3, #24]
}
 8003ebc:	bf00      	nop
 8003ebe:	370c      	adds	r7, #12
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr
 8003ec8:	e000e100 	.word	0xe000e100
 8003ecc:	e000ed00 	.word	0xe000ed00

08003ed0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b089      	sub	sp, #36	@ 0x24
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	60f8      	str	r0, [r7, #12]
 8003ed8:	60b9      	str	r1, [r7, #8]
 8003eda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f003 0307 	and.w	r3, r3, #7
 8003ee2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ee4:	69fb      	ldr	r3, [r7, #28]
 8003ee6:	f1c3 0307 	rsb	r3, r3, #7
 8003eea:	2b04      	cmp	r3, #4
 8003eec:	bf28      	it	cs
 8003eee:	2304      	movcs	r3, #4
 8003ef0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	3304      	adds	r3, #4
 8003ef6:	2b06      	cmp	r3, #6
 8003ef8:	d902      	bls.n	8003f00 <NVIC_EncodePriority+0x30>
 8003efa:	69fb      	ldr	r3, [r7, #28]
 8003efc:	3b03      	subs	r3, #3
 8003efe:	e000      	b.n	8003f02 <NVIC_EncodePriority+0x32>
 8003f00:	2300      	movs	r3, #0
 8003f02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f04:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003f08:	69bb      	ldr	r3, [r7, #24]
 8003f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0e:	43da      	mvns	r2, r3
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	401a      	ands	r2, r3
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f18:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f22:	43d9      	mvns	r1, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f28:	4313      	orrs	r3, r2
         );
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3724      	adds	r7, #36	@ 0x24
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f34:	4770      	bx	lr
	...

08003f38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b082      	sub	sp, #8
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	3b01      	subs	r3, #1
 8003f44:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003f48:	d301      	bcc.n	8003f4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e00f      	b.n	8003f6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f4e:	4a0a      	ldr	r2, [pc, #40]	@ (8003f78 <SysTick_Config+0x40>)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	3b01      	subs	r3, #1
 8003f54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f56:	210f      	movs	r1, #15
 8003f58:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003f5c:	f7ff ff8e 	bl	8003e7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f60:	4b05      	ldr	r3, [pc, #20]	@ (8003f78 <SysTick_Config+0x40>)
 8003f62:	2200      	movs	r2, #0
 8003f64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f66:	4b04      	ldr	r3, [pc, #16]	@ (8003f78 <SysTick_Config+0x40>)
 8003f68:	2207      	movs	r2, #7
 8003f6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f6c:	2300      	movs	r3, #0
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3708      	adds	r7, #8
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	bf00      	nop
 8003f78:	e000e010 	.word	0xe000e010

08003f7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b082      	sub	sp, #8
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	f7ff ff29 	bl	8003ddc <__NVIC_SetPriorityGrouping>
}
 8003f8a:	bf00      	nop
 8003f8c:	3708      	adds	r7, #8
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}

08003f92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f92:	b580      	push	{r7, lr}
 8003f94:	b086      	sub	sp, #24
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	4603      	mov	r3, r0
 8003f9a:	60b9      	str	r1, [r7, #8]
 8003f9c:	607a      	str	r2, [r7, #4]
 8003f9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003fa4:	f7ff ff3e 	bl	8003e24 <__NVIC_GetPriorityGrouping>
 8003fa8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	68b9      	ldr	r1, [r7, #8]
 8003fae:	6978      	ldr	r0, [r7, #20]
 8003fb0:	f7ff ff8e 	bl	8003ed0 <NVIC_EncodePriority>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fba:	4611      	mov	r1, r2
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f7ff ff5d 	bl	8003e7c <__NVIC_SetPriority>
}
 8003fc2:	bf00      	nop
 8003fc4:	3718      	adds	r7, #24
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}

08003fca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fca:	b580      	push	{r7, lr}
 8003fcc:	b082      	sub	sp, #8
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003fd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f7ff ff31 	bl	8003e40 <__NVIC_EnableIRQ>
}
 8003fde:	bf00      	nop
 8003fe0:	3708      	adds	r7, #8
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}

08003fe6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003fe6:	b580      	push	{r7, lr}
 8003fe8:	b082      	sub	sp, #8
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f7ff ffa2 	bl	8003f38 <SysTick_Config>
 8003ff4:	4603      	mov	r3, r0
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3708      	adds	r7, #8
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
	...

08004000 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b086      	sub	sp, #24
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004008:	2300      	movs	r3, #0
 800400a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800400c:	f7ff feb6 	bl	8003d7c <HAL_GetTick>
 8004010:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d101      	bne.n	800401c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e099      	b.n	8004150 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2202      	movs	r2, #2
 8004020:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f022 0201 	bic.w	r2, r2, #1
 800403a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800403c:	e00f      	b.n	800405e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800403e:	f7ff fe9d 	bl	8003d7c <HAL_GetTick>
 8004042:	4602      	mov	r2, r0
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	1ad3      	subs	r3, r2, r3
 8004048:	2b05      	cmp	r3, #5
 800404a:	d908      	bls.n	800405e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2220      	movs	r2, #32
 8004050:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2203      	movs	r2, #3
 8004056:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800405a:	2303      	movs	r3, #3
 800405c:	e078      	b.n	8004150 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 0301 	and.w	r3, r3, #1
 8004068:	2b00      	cmp	r3, #0
 800406a:	d1e8      	bne.n	800403e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004074:	697a      	ldr	r2, [r7, #20]
 8004076:	4b38      	ldr	r3, [pc, #224]	@ (8004158 <HAL_DMA_Init+0x158>)
 8004078:	4013      	ands	r3, r2
 800407a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	685a      	ldr	r2, [r3, #4]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800408a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	691b      	ldr	r3, [r3, #16]
 8004090:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004096:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	699b      	ldr	r3, [r3, #24]
 800409c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6a1b      	ldr	r3, [r3, #32]
 80040a8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80040aa:	697a      	ldr	r2, [r7, #20]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040b4:	2b04      	cmp	r3, #4
 80040b6:	d107      	bne.n	80040c8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040c0:	4313      	orrs	r3, r2
 80040c2:	697a      	ldr	r2, [r7, #20]
 80040c4:	4313      	orrs	r3, r2
 80040c6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	697a      	ldr	r2, [r7, #20]
 80040ce:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	695b      	ldr	r3, [r3, #20]
 80040d6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	f023 0307 	bic.w	r3, r3, #7
 80040de:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040e4:	697a      	ldr	r2, [r7, #20]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ee:	2b04      	cmp	r3, #4
 80040f0:	d117      	bne.n	8004122 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040f6:	697a      	ldr	r2, [r7, #20]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004100:	2b00      	cmp	r3, #0
 8004102:	d00e      	beq.n	8004122 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f000 f8bd 	bl	8004284 <DMA_CheckFifoParam>
 800410a:	4603      	mov	r3, r0
 800410c:	2b00      	cmp	r3, #0
 800410e:	d008      	beq.n	8004122 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2240      	movs	r2, #64	@ 0x40
 8004114:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2201      	movs	r2, #1
 800411a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800411e:	2301      	movs	r3, #1
 8004120:	e016      	b.n	8004150 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	697a      	ldr	r2, [r7, #20]
 8004128:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f000 f874 	bl	8004218 <DMA_CalcBaseAndBitshift>
 8004130:	4603      	mov	r3, r0
 8004132:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004138:	223f      	movs	r2, #63	@ 0x3f
 800413a:	409a      	lsls	r2, r3
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2200      	movs	r2, #0
 8004144:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2201      	movs	r2, #1
 800414a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800414e:	2300      	movs	r3, #0
}
 8004150:	4618      	mov	r0, r3
 8004152:	3718      	adds	r7, #24
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}
 8004158:	f010803f 	.word	0xf010803f

0800415c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b084      	sub	sp, #16
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d101      	bne.n	800416e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e050      	b.n	8004210 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004174:	b2db      	uxtb	r3, r3
 8004176:	2b02      	cmp	r3, #2
 8004178:	d101      	bne.n	800417e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800417a:	2302      	movs	r3, #2
 800417c:	e048      	b.n	8004210 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f022 0201 	bic.w	r2, r2, #1
 800418c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	2200      	movs	r2, #0
 8004194:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	2200      	movs	r2, #0
 800419c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	2200      	movs	r2, #0
 80041a4:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	2200      	movs	r2, #0
 80041ac:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	2200      	movs	r2, #0
 80041b4:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	2221      	movs	r2, #33	@ 0x21
 80041bc:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f000 f82a 	bl	8004218 <DMA_CalcBaseAndBitshift>
 80041c4:	4603      	mov	r3, r0
 80041c6:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2200      	movs	r2, #0
 80041de:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2200      	movs	r2, #0
 80041ea:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041f0:	223f      	movs	r2, #63	@ 0x3f
 80041f2:	409a      	lsls	r2, r3
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2200      	movs	r2, #0
 80041fc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800420e:	2300      	movs	r3, #0
}
 8004210:	4618      	mov	r0, r3
 8004212:	3710      	adds	r7, #16
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}

08004218 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004218:	b480      	push	{r7}
 800421a:	b085      	sub	sp, #20
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	b2db      	uxtb	r3, r3
 8004226:	3b10      	subs	r3, #16
 8004228:	4a14      	ldr	r2, [pc, #80]	@ (800427c <DMA_CalcBaseAndBitshift+0x64>)
 800422a:	fba2 2303 	umull	r2, r3, r2, r3
 800422e:	091b      	lsrs	r3, r3, #4
 8004230:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004232:	4a13      	ldr	r2, [pc, #76]	@ (8004280 <DMA_CalcBaseAndBitshift+0x68>)
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	4413      	add	r3, r2
 8004238:	781b      	ldrb	r3, [r3, #0]
 800423a:	461a      	mov	r2, r3
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2b03      	cmp	r3, #3
 8004244:	d909      	bls.n	800425a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800424e:	f023 0303 	bic.w	r3, r3, #3
 8004252:	1d1a      	adds	r2, r3, #4
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	659a      	str	r2, [r3, #88]	@ 0x58
 8004258:	e007      	b.n	800426a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004262:	f023 0303 	bic.w	r3, r3, #3
 8004266:	687a      	ldr	r2, [r7, #4]
 8004268:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800426e:	4618      	mov	r0, r3
 8004270:	3714      	adds	r7, #20
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr
 800427a:	bf00      	nop
 800427c:	aaaaaaab 	.word	0xaaaaaaab
 8004280:	0800f680 	.word	0x0800f680

08004284 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004284:	b480      	push	{r7}
 8004286:	b085      	sub	sp, #20
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800428c:	2300      	movs	r3, #0
 800428e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004294:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	699b      	ldr	r3, [r3, #24]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d11f      	bne.n	80042de <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	2b03      	cmp	r3, #3
 80042a2:	d856      	bhi.n	8004352 <DMA_CheckFifoParam+0xce>
 80042a4:	a201      	add	r2, pc, #4	@ (adr r2, 80042ac <DMA_CheckFifoParam+0x28>)
 80042a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042aa:	bf00      	nop
 80042ac:	080042bd 	.word	0x080042bd
 80042b0:	080042cf 	.word	0x080042cf
 80042b4:	080042bd 	.word	0x080042bd
 80042b8:	08004353 	.word	0x08004353
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042c0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d046      	beq.n	8004356 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042cc:	e043      	b.n	8004356 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042d2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80042d6:	d140      	bne.n	800435a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042dc:	e03d      	b.n	800435a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	699b      	ldr	r3, [r3, #24]
 80042e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042e6:	d121      	bne.n	800432c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	2b03      	cmp	r3, #3
 80042ec:	d837      	bhi.n	800435e <DMA_CheckFifoParam+0xda>
 80042ee:	a201      	add	r2, pc, #4	@ (adr r2, 80042f4 <DMA_CheckFifoParam+0x70>)
 80042f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042f4:	08004305 	.word	0x08004305
 80042f8:	0800430b 	.word	0x0800430b
 80042fc:	08004305 	.word	0x08004305
 8004300:	0800431d 	.word	0x0800431d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	73fb      	strb	r3, [r7, #15]
      break;
 8004308:	e030      	b.n	800436c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800430e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004312:	2b00      	cmp	r3, #0
 8004314:	d025      	beq.n	8004362 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800431a:	e022      	b.n	8004362 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004320:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004324:	d11f      	bne.n	8004366 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800432a:	e01c      	b.n	8004366 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	2b02      	cmp	r3, #2
 8004330:	d903      	bls.n	800433a <DMA_CheckFifoParam+0xb6>
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	2b03      	cmp	r3, #3
 8004336:	d003      	beq.n	8004340 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004338:	e018      	b.n	800436c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	73fb      	strb	r3, [r7, #15]
      break;
 800433e:	e015      	b.n	800436c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004344:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004348:	2b00      	cmp	r3, #0
 800434a:	d00e      	beq.n	800436a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	73fb      	strb	r3, [r7, #15]
      break;
 8004350:	e00b      	b.n	800436a <DMA_CheckFifoParam+0xe6>
      break;
 8004352:	bf00      	nop
 8004354:	e00a      	b.n	800436c <DMA_CheckFifoParam+0xe8>
      break;
 8004356:	bf00      	nop
 8004358:	e008      	b.n	800436c <DMA_CheckFifoParam+0xe8>
      break;
 800435a:	bf00      	nop
 800435c:	e006      	b.n	800436c <DMA_CheckFifoParam+0xe8>
      break;
 800435e:	bf00      	nop
 8004360:	e004      	b.n	800436c <DMA_CheckFifoParam+0xe8>
      break;
 8004362:	bf00      	nop
 8004364:	e002      	b.n	800436c <DMA_CheckFifoParam+0xe8>
      break;   
 8004366:	bf00      	nop
 8004368:	e000      	b.n	800436c <DMA_CheckFifoParam+0xe8>
      break;
 800436a:	bf00      	nop
    }
  } 
  
  return status; 
 800436c:	7bfb      	ldrb	r3, [r7, #15]
}
 800436e:	4618      	mov	r0, r3
 8004370:	3714      	adds	r7, #20
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr
 800437a:	bf00      	nop

0800437c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b082      	sub	sp, #8
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d101      	bne.n	800438e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e03b      	b.n	8004406 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8004394:	b2db      	uxtb	r3, r3
 8004396:	2b00      	cmp	r3, #0
 8004398:	d106      	bne.n	80043a8 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2200      	movs	r2, #0
 800439e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f000 f833 	bl	800440e <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2202      	movs	r2, #2
 80043ac:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	685a      	ldr	r2, [r3, #4]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	430a      	orrs	r2, r1
 80043c4:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043cc:	f023 0107 	bic.w	r1, r3, #7
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	689a      	ldr	r2, [r3, #8]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	430a      	orrs	r2, r1
 80043da:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043e2:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80043e6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	68d1      	ldr	r1, [r2, #12]
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	6812      	ldr	r2, [r2, #0]
 80043f2:	430b      	orrs	r3, r1
 80043f4:	6413      	str	r3, [r2, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2200      	movs	r2, #0
 80043fa:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8004404:	2300      	movs	r3, #0
}
 8004406:	4618      	mov	r0, r3
 8004408:	3708      	adds	r7, #8
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}

0800440e <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 800440e:	b480      	push	{r7}
 8004410:	b083      	sub	sp, #12
 8004412:	af00      	add	r7, sp, #0
 8004414:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 8004416:	bf00      	nop
 8004418:	370c      	adds	r7, #12
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr

08004422 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8004422:	b580      	push	{r7, lr}
 8004424:	b086      	sub	sp, #24
 8004426:	af02      	add	r7, sp, #8
 8004428:	60f8      	str	r0, [r7, #12]
 800442a:	60b9      	str	r1, [r7, #8]
 800442c:	607a      	str	r2, [r7, #4]
 800442e:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004436:	2b01      	cmp	r3, #1
 8004438:	d101      	bne.n	800443e <HAL_DMA2D_Start+0x1c>
 800443a:	2302      	movs	r3, #2
 800443c:	e018      	b.n	8004470 <HAL_DMA2D_Start+0x4e>
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2201      	movs	r2, #1
 8004442:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2202      	movs	r2, #2
 800444a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800444e:	69bb      	ldr	r3, [r7, #24]
 8004450:	9300      	str	r3, [sp, #0]
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	68b9      	ldr	r1, [r7, #8]
 8004458:	68f8      	ldr	r0, [r7, #12]
 800445a:	f000 f989 	bl	8004770 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f042 0201 	orr.w	r2, r2, #1
 800446c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800446e:	2300      	movs	r3, #0
}
 8004470:	4618      	mov	r0, r3
 8004472:	3710      	adds	r7, #16
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}

08004478 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b086      	sub	sp, #24
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
 8004480:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8004482:	2300      	movs	r3, #0
 8004484:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 0301 	and.w	r3, r3, #1
 8004490:	2b00      	cmp	r3, #0
 8004492:	d056      	beq.n	8004542 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004494:	f7ff fc72 	bl	8003d7c <HAL_GetTick>
 8004498:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800449a:	e04b      	b.n	8004534 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d023      	beq.n	80044f6 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	f003 0320 	and.w	r3, r3, #32
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d005      	beq.n	80044c4 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044bc:	f043 0202 	orr.w	r2, r3, #2
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f003 0301 	and.w	r3, r3, #1
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d005      	beq.n	80044da <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044d2:	f043 0201 	orr.w	r2, r3, #1
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	2221      	movs	r2, #33	@ 0x21
 80044e0:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2204      	movs	r2, #4
 80044e6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2200      	movs	r2, #0
 80044ee:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e0a5      	b.n	8004642 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80044fc:	d01a      	beq.n	8004534 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80044fe:	f7ff fc3d 	bl	8003d7c <HAL_GetTick>
 8004502:	4602      	mov	r2, r0
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	1ad3      	subs	r3, r2, r3
 8004508:	683a      	ldr	r2, [r7, #0]
 800450a:	429a      	cmp	r2, r3
 800450c:	d302      	bcc.n	8004514 <HAL_DMA2D_PollForTransfer+0x9c>
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d10f      	bne.n	8004534 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004518:	f043 0220 	orr.w	r2, r3, #32
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2203      	movs	r2, #3
 8004524:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2200      	movs	r2, #0
 800452c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8004530:	2303      	movs	r3, #3
 8004532:	e086      	b.n	8004642 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	f003 0302 	and.w	r3, r3, #2
 800453e:	2b00      	cmp	r3, #0
 8004540:	d0ac      	beq.n	800449c <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	69db      	ldr	r3, [r3, #28]
 8004548:	f003 0320 	and.w	r3, r3, #32
 800454c:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004554:	f003 0320 	and.w	r3, r3, #32
 8004558:	693a      	ldr	r2, [r7, #16]
 800455a:	4313      	orrs	r3, r2
 800455c:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d061      	beq.n	8004628 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004564:	f7ff fc0a 	bl	8003d7c <HAL_GetTick>
 8004568:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800456a:	e056      	b.n	800461a <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 800457a:	2b00      	cmp	r3, #0
 800457c:	d02e      	beq.n	80045dc <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	f003 0308 	and.w	r3, r3, #8
 8004584:	2b00      	cmp	r3, #0
 8004586:	d005      	beq.n	8004594 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800458c:	f043 0204 	orr.w	r2, r3, #4
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f003 0320 	and.w	r3, r3, #32
 800459a:	2b00      	cmp	r3, #0
 800459c:	d005      	beq.n	80045aa <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045a2:	f043 0202 	orr.w	r2, r3, #2
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	f003 0301 	and.w	r3, r3, #1
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d005      	beq.n	80045c0 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045b8:	f043 0201 	orr.w	r2, r3, #1
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	2229      	movs	r2, #41	@ 0x29
 80045c6:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2204      	movs	r2, #4
 80045cc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2200      	movs	r2, #0
 80045d4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	e032      	b.n	8004642 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80045e2:	d01a      	beq.n	800461a <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80045e4:	f7ff fbca 	bl	8003d7c <HAL_GetTick>
 80045e8:	4602      	mov	r2, r0
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	683a      	ldr	r2, [r7, #0]
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d302      	bcc.n	80045fa <HAL_DMA2D_PollForTransfer+0x182>
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d10f      	bne.n	800461a <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045fe:	f043 0220 	orr.w	r2, r3, #32
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2203      	movs	r2, #3
 800460a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2200      	movs	r2, #0
 8004612:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8004616:	2303      	movs	r3, #3
 8004618:	e013      	b.n	8004642 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	f003 0310 	and.w	r3, r3, #16
 8004624:	2b00      	cmp	r3, #0
 8004626:	d0a1      	beq.n	800456c <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	2212      	movs	r2, #18
 800462e:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2200      	movs	r2, #0
 800463c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8004640:	2300      	movs	r3, #0
}
 8004642:	4618      	mov	r0, r3
 8004644:	3718      	adds	r7, #24
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
	...

0800464c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800464c:	b480      	push	{r7}
 800464e:	b087      	sub	sp, #28
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004664:	2b01      	cmp	r3, #1
 8004666:	d101      	bne.n	800466c <HAL_DMA2D_ConfigLayer+0x20>
 8004668:	2302      	movs	r3, #2
 800466a:	e079      	b.n	8004760 <HAL_DMA2D_ConfigLayer+0x114>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2202      	movs	r2, #2
 8004678:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	011b      	lsls	r3, r3, #4
 8004680:	3318      	adds	r3, #24
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	4413      	add	r3, r2
 8004686:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	685a      	ldr	r2, [r3, #4]
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	041b      	lsls	r3, r3, #16
 8004692:	4313      	orrs	r3, r2
 8004694:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8004696:	4b35      	ldr	r3, [pc, #212]	@ (800476c <HAL_DMA2D_ConfigLayer+0x120>)
 8004698:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	2b0a      	cmp	r3, #10
 80046a0:	d003      	beq.n	80046aa <HAL_DMA2D_ConfigLayer+0x5e>
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	2b09      	cmp	r3, #9
 80046a8:	d107      	bne.n	80046ba <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	68db      	ldr	r3, [r3, #12]
 80046ae:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80046b2:	697a      	ldr	r2, [r7, #20]
 80046b4:	4313      	orrs	r3, r2
 80046b6:	617b      	str	r3, [r7, #20]
 80046b8:	e005      	b.n	80046c6 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	68db      	ldr	r3, [r3, #12]
 80046be:	061b      	lsls	r3, r3, #24
 80046c0:	697a      	ldr	r2, [r7, #20]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d120      	bne.n	800470e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	43db      	mvns	r3, r3
 80046d6:	ea02 0103 	and.w	r1, r2, r3
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	697a      	ldr	r2, [r7, #20]
 80046e0:	430a      	orrs	r2, r1
 80046e2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	693a      	ldr	r2, [r7, #16]
 80046ea:	6812      	ldr	r2, [r2, #0]
 80046ec:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	2b0a      	cmp	r3, #10
 80046f4:	d003      	beq.n	80046fe <HAL_DMA2D_ConfigLayer+0xb2>
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	2b09      	cmp	r3, #9
 80046fc:	d127      	bne.n	800474e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	68da      	ldr	r2, [r3, #12]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 800470a:	629a      	str	r2, [r3, #40]	@ 0x28
 800470c:	e01f      	b.n	800474e <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	69da      	ldr	r2, [r3, #28]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	43db      	mvns	r3, r3
 8004718:	ea02 0103 	and.w	r1, r2, r3
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	697a      	ldr	r2, [r7, #20]
 8004722:	430a      	orrs	r2, r1
 8004724:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	693a      	ldr	r2, [r7, #16]
 800472c:	6812      	ldr	r2, [r2, #0]
 800472e:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	2b0a      	cmp	r3, #10
 8004736:	d003      	beq.n	8004740 <HAL_DMA2D_ConfigLayer+0xf4>
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	2b09      	cmp	r3, #9
 800473e:	d106      	bne.n	800474e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	68da      	ldr	r2, [r3, #12]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 800474c:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2201      	movs	r2, #1
 8004752:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 800475e:	2300      	movs	r3, #0
}
 8004760:	4618      	mov	r0, r3
 8004762:	371c      	adds	r7, #28
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr
 800476c:	ff03000f 	.word	0xff03000f

08004770 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8004770:	b480      	push	{r7}
 8004772:	b08b      	sub	sp, #44	@ 0x2c
 8004774:	af00      	add	r7, sp, #0
 8004776:	60f8      	str	r0, [r7, #12]
 8004778:	60b9      	str	r1, [r7, #8]
 800477a:	607a      	str	r2, [r7, #4]
 800477c:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004784:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	041a      	lsls	r2, r3, #16
 800478c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800478e:	431a      	orrs	r2, r3
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	430a      	orrs	r2, r1
 8004796:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	687a      	ldr	r2, [r7, #4]
 800479e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80047a8:	d174      	bne.n	8004894 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80047b0:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80047b8:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80047c0:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d108      	bne.n	80047e2 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 80047d0:	69ba      	ldr	r2, [r7, #24]
 80047d2:	69fb      	ldr	r3, [r7, #28]
 80047d4:	431a      	orrs	r2, r3
 80047d6:	6a3b      	ldr	r3, [r7, #32]
 80047d8:	4313      	orrs	r3, r2
 80047da:	697a      	ldr	r2, [r7, #20]
 80047dc:	4313      	orrs	r3, r2
 80047de:	627b      	str	r3, [r7, #36]	@ 0x24
 80047e0:	e053      	b.n	800488a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d106      	bne.n	80047f8 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80047ea:	69ba      	ldr	r2, [r7, #24]
 80047ec:	69fb      	ldr	r3, [r7, #28]
 80047ee:	4313      	orrs	r3, r2
 80047f0:	697a      	ldr	r2, [r7, #20]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80047f6:	e048      	b.n	800488a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	2b02      	cmp	r3, #2
 80047fe:	d111      	bne.n	8004824 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8004800:	69fb      	ldr	r3, [r7, #28]
 8004802:	0cdb      	lsrs	r3, r3, #19
 8004804:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8004806:	69bb      	ldr	r3, [r7, #24]
 8004808:	0a9b      	lsrs	r3, r3, #10
 800480a:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	08db      	lsrs	r3, r3, #3
 8004810:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8004812:	69bb      	ldr	r3, [r7, #24]
 8004814:	015a      	lsls	r2, r3, #5
 8004816:	69fb      	ldr	r3, [r7, #28]
 8004818:	02db      	lsls	r3, r3, #11
 800481a:	4313      	orrs	r3, r2
 800481c:	697a      	ldr	r2, [r7, #20]
 800481e:	4313      	orrs	r3, r2
 8004820:	627b      	str	r3, [r7, #36]	@ 0x24
 8004822:	e032      	b.n	800488a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	2b03      	cmp	r3, #3
 800482a:	d117      	bne.n	800485c <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 800482c:	6a3b      	ldr	r3, [r7, #32]
 800482e:	0fdb      	lsrs	r3, r3, #31
 8004830:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8004832:	69fb      	ldr	r3, [r7, #28]
 8004834:	0cdb      	lsrs	r3, r3, #19
 8004836:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8004838:	69bb      	ldr	r3, [r7, #24]
 800483a:	0adb      	lsrs	r3, r3, #11
 800483c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	08db      	lsrs	r3, r3, #3
 8004842:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8004844:	69bb      	ldr	r3, [r7, #24]
 8004846:	015a      	lsls	r2, r3, #5
 8004848:	69fb      	ldr	r3, [r7, #28]
 800484a:	029b      	lsls	r3, r3, #10
 800484c:	431a      	orrs	r2, r3
 800484e:	6a3b      	ldr	r3, [r7, #32]
 8004850:	03db      	lsls	r3, r3, #15
 8004852:	4313      	orrs	r3, r2
 8004854:	697a      	ldr	r2, [r7, #20]
 8004856:	4313      	orrs	r3, r2
 8004858:	627b      	str	r3, [r7, #36]	@ 0x24
 800485a:	e016      	b.n	800488a <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 800485c:	6a3b      	ldr	r3, [r7, #32]
 800485e:	0f1b      	lsrs	r3, r3, #28
 8004860:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8004862:	69fb      	ldr	r3, [r7, #28]
 8004864:	0d1b      	lsrs	r3, r3, #20
 8004866:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8004868:	69bb      	ldr	r3, [r7, #24]
 800486a:	0b1b      	lsrs	r3, r3, #12
 800486c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	091b      	lsrs	r3, r3, #4
 8004872:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8004874:	69bb      	ldr	r3, [r7, #24]
 8004876:	011a      	lsls	r2, r3, #4
 8004878:	69fb      	ldr	r3, [r7, #28]
 800487a:	021b      	lsls	r3, r3, #8
 800487c:	431a      	orrs	r2, r3
 800487e:	6a3b      	ldr	r3, [r7, #32]
 8004880:	031b      	lsls	r3, r3, #12
 8004882:	4313      	orrs	r3, r2
 8004884:	697a      	ldr	r2, [r7, #20]
 8004886:	4313      	orrs	r3, r2
 8004888:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004890:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8004892:	e003      	b.n	800489c <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	68ba      	ldr	r2, [r7, #8]
 800489a:	60da      	str	r2, [r3, #12]
}
 800489c:	bf00      	nop
 800489e:	372c      	adds	r7, #44	@ 0x2c
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr

080048a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b089      	sub	sp, #36	@ 0x24
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
 80048b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80048b2:	2300      	movs	r3, #0
 80048b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80048b6:	2300      	movs	r3, #0
 80048b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80048ba:	2300      	movs	r3, #0
 80048bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80048be:	2300      	movs	r3, #0
 80048c0:	61fb      	str	r3, [r7, #28]
 80048c2:	e177      	b.n	8004bb4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80048c4:	2201      	movs	r2, #1
 80048c6:	69fb      	ldr	r3, [r7, #28]
 80048c8:	fa02 f303 	lsl.w	r3, r2, r3
 80048cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	697a      	ldr	r2, [r7, #20]
 80048d4:	4013      	ands	r3, r2
 80048d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80048d8:	693a      	ldr	r2, [r7, #16]
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	429a      	cmp	r2, r3
 80048de:	f040 8166 	bne.w	8004bae <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	f003 0303 	and.w	r3, r3, #3
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d005      	beq.n	80048fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	d130      	bne.n	800495c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004900:	69fb      	ldr	r3, [r7, #28]
 8004902:	005b      	lsls	r3, r3, #1
 8004904:	2203      	movs	r2, #3
 8004906:	fa02 f303 	lsl.w	r3, r2, r3
 800490a:	43db      	mvns	r3, r3
 800490c:	69ba      	ldr	r2, [r7, #24]
 800490e:	4013      	ands	r3, r2
 8004910:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	68da      	ldr	r2, [r3, #12]
 8004916:	69fb      	ldr	r3, [r7, #28]
 8004918:	005b      	lsls	r3, r3, #1
 800491a:	fa02 f303 	lsl.w	r3, r2, r3
 800491e:	69ba      	ldr	r2, [r7, #24]
 8004920:	4313      	orrs	r3, r2
 8004922:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	69ba      	ldr	r2, [r7, #24]
 8004928:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004930:	2201      	movs	r2, #1
 8004932:	69fb      	ldr	r3, [r7, #28]
 8004934:	fa02 f303 	lsl.w	r3, r2, r3
 8004938:	43db      	mvns	r3, r3
 800493a:	69ba      	ldr	r2, [r7, #24]
 800493c:	4013      	ands	r3, r2
 800493e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	091b      	lsrs	r3, r3, #4
 8004946:	f003 0201 	and.w	r2, r3, #1
 800494a:	69fb      	ldr	r3, [r7, #28]
 800494c:	fa02 f303 	lsl.w	r3, r2, r3
 8004950:	69ba      	ldr	r2, [r7, #24]
 8004952:	4313      	orrs	r3, r2
 8004954:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	69ba      	ldr	r2, [r7, #24]
 800495a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	f003 0303 	and.w	r3, r3, #3
 8004964:	2b03      	cmp	r3, #3
 8004966:	d017      	beq.n	8004998 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800496e:	69fb      	ldr	r3, [r7, #28]
 8004970:	005b      	lsls	r3, r3, #1
 8004972:	2203      	movs	r2, #3
 8004974:	fa02 f303 	lsl.w	r3, r2, r3
 8004978:	43db      	mvns	r3, r3
 800497a:	69ba      	ldr	r2, [r7, #24]
 800497c:	4013      	ands	r3, r2
 800497e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	689a      	ldr	r2, [r3, #8]
 8004984:	69fb      	ldr	r3, [r7, #28]
 8004986:	005b      	lsls	r3, r3, #1
 8004988:	fa02 f303 	lsl.w	r3, r2, r3
 800498c:	69ba      	ldr	r2, [r7, #24]
 800498e:	4313      	orrs	r3, r2
 8004990:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	69ba      	ldr	r2, [r7, #24]
 8004996:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	f003 0303 	and.w	r3, r3, #3
 80049a0:	2b02      	cmp	r3, #2
 80049a2:	d123      	bne.n	80049ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80049a4:	69fb      	ldr	r3, [r7, #28]
 80049a6:	08da      	lsrs	r2, r3, #3
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	3208      	adds	r2, #8
 80049ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80049b2:	69fb      	ldr	r3, [r7, #28]
 80049b4:	f003 0307 	and.w	r3, r3, #7
 80049b8:	009b      	lsls	r3, r3, #2
 80049ba:	220f      	movs	r2, #15
 80049bc:	fa02 f303 	lsl.w	r3, r2, r3
 80049c0:	43db      	mvns	r3, r3
 80049c2:	69ba      	ldr	r2, [r7, #24]
 80049c4:	4013      	ands	r3, r2
 80049c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	691a      	ldr	r2, [r3, #16]
 80049cc:	69fb      	ldr	r3, [r7, #28]
 80049ce:	f003 0307 	and.w	r3, r3, #7
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	fa02 f303 	lsl.w	r3, r2, r3
 80049d8:	69ba      	ldr	r2, [r7, #24]
 80049da:	4313      	orrs	r3, r2
 80049dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80049de:	69fb      	ldr	r3, [r7, #28]
 80049e0:	08da      	lsrs	r2, r3, #3
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	3208      	adds	r2, #8
 80049e6:	69b9      	ldr	r1, [r7, #24]
 80049e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80049f2:	69fb      	ldr	r3, [r7, #28]
 80049f4:	005b      	lsls	r3, r3, #1
 80049f6:	2203      	movs	r2, #3
 80049f8:	fa02 f303 	lsl.w	r3, r2, r3
 80049fc:	43db      	mvns	r3, r3
 80049fe:	69ba      	ldr	r2, [r7, #24]
 8004a00:	4013      	ands	r3, r2
 8004a02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	f003 0203 	and.w	r2, r3, #3
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	005b      	lsls	r3, r3, #1
 8004a10:	fa02 f303 	lsl.w	r3, r2, r3
 8004a14:	69ba      	ldr	r2, [r7, #24]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	69ba      	ldr	r2, [r7, #24]
 8004a1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	f000 80c0 	beq.w	8004bae <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a2e:	2300      	movs	r3, #0
 8004a30:	60fb      	str	r3, [r7, #12]
 8004a32:	4b66      	ldr	r3, [pc, #408]	@ (8004bcc <HAL_GPIO_Init+0x324>)
 8004a34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a36:	4a65      	ldr	r2, [pc, #404]	@ (8004bcc <HAL_GPIO_Init+0x324>)
 8004a38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004a3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8004a3e:	4b63      	ldr	r3, [pc, #396]	@ (8004bcc <HAL_GPIO_Init+0x324>)
 8004a40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a46:	60fb      	str	r3, [r7, #12]
 8004a48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004a4a:	4a61      	ldr	r2, [pc, #388]	@ (8004bd0 <HAL_GPIO_Init+0x328>)
 8004a4c:	69fb      	ldr	r3, [r7, #28]
 8004a4e:	089b      	lsrs	r3, r3, #2
 8004a50:	3302      	adds	r3, #2
 8004a52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004a58:	69fb      	ldr	r3, [r7, #28]
 8004a5a:	f003 0303 	and.w	r3, r3, #3
 8004a5e:	009b      	lsls	r3, r3, #2
 8004a60:	220f      	movs	r2, #15
 8004a62:	fa02 f303 	lsl.w	r3, r2, r3
 8004a66:	43db      	mvns	r3, r3
 8004a68:	69ba      	ldr	r2, [r7, #24]
 8004a6a:	4013      	ands	r3, r2
 8004a6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	4a58      	ldr	r2, [pc, #352]	@ (8004bd4 <HAL_GPIO_Init+0x32c>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d037      	beq.n	8004ae6 <HAL_GPIO_Init+0x23e>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	4a57      	ldr	r2, [pc, #348]	@ (8004bd8 <HAL_GPIO_Init+0x330>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d031      	beq.n	8004ae2 <HAL_GPIO_Init+0x23a>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	4a56      	ldr	r2, [pc, #344]	@ (8004bdc <HAL_GPIO_Init+0x334>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d02b      	beq.n	8004ade <HAL_GPIO_Init+0x236>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	4a55      	ldr	r2, [pc, #340]	@ (8004be0 <HAL_GPIO_Init+0x338>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d025      	beq.n	8004ada <HAL_GPIO_Init+0x232>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	4a54      	ldr	r2, [pc, #336]	@ (8004be4 <HAL_GPIO_Init+0x33c>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d01f      	beq.n	8004ad6 <HAL_GPIO_Init+0x22e>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	4a53      	ldr	r2, [pc, #332]	@ (8004be8 <HAL_GPIO_Init+0x340>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d019      	beq.n	8004ad2 <HAL_GPIO_Init+0x22a>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	4a52      	ldr	r2, [pc, #328]	@ (8004bec <HAL_GPIO_Init+0x344>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d013      	beq.n	8004ace <HAL_GPIO_Init+0x226>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	4a51      	ldr	r2, [pc, #324]	@ (8004bf0 <HAL_GPIO_Init+0x348>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d00d      	beq.n	8004aca <HAL_GPIO_Init+0x222>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	4a50      	ldr	r2, [pc, #320]	@ (8004bf4 <HAL_GPIO_Init+0x34c>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d007      	beq.n	8004ac6 <HAL_GPIO_Init+0x21e>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	4a4f      	ldr	r2, [pc, #316]	@ (8004bf8 <HAL_GPIO_Init+0x350>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d101      	bne.n	8004ac2 <HAL_GPIO_Init+0x21a>
 8004abe:	2309      	movs	r3, #9
 8004ac0:	e012      	b.n	8004ae8 <HAL_GPIO_Init+0x240>
 8004ac2:	230a      	movs	r3, #10
 8004ac4:	e010      	b.n	8004ae8 <HAL_GPIO_Init+0x240>
 8004ac6:	2308      	movs	r3, #8
 8004ac8:	e00e      	b.n	8004ae8 <HAL_GPIO_Init+0x240>
 8004aca:	2307      	movs	r3, #7
 8004acc:	e00c      	b.n	8004ae8 <HAL_GPIO_Init+0x240>
 8004ace:	2306      	movs	r3, #6
 8004ad0:	e00a      	b.n	8004ae8 <HAL_GPIO_Init+0x240>
 8004ad2:	2305      	movs	r3, #5
 8004ad4:	e008      	b.n	8004ae8 <HAL_GPIO_Init+0x240>
 8004ad6:	2304      	movs	r3, #4
 8004ad8:	e006      	b.n	8004ae8 <HAL_GPIO_Init+0x240>
 8004ada:	2303      	movs	r3, #3
 8004adc:	e004      	b.n	8004ae8 <HAL_GPIO_Init+0x240>
 8004ade:	2302      	movs	r3, #2
 8004ae0:	e002      	b.n	8004ae8 <HAL_GPIO_Init+0x240>
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e000      	b.n	8004ae8 <HAL_GPIO_Init+0x240>
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	69fa      	ldr	r2, [r7, #28]
 8004aea:	f002 0203 	and.w	r2, r2, #3
 8004aee:	0092      	lsls	r2, r2, #2
 8004af0:	4093      	lsls	r3, r2
 8004af2:	69ba      	ldr	r2, [r7, #24]
 8004af4:	4313      	orrs	r3, r2
 8004af6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004af8:	4935      	ldr	r1, [pc, #212]	@ (8004bd0 <HAL_GPIO_Init+0x328>)
 8004afa:	69fb      	ldr	r3, [r7, #28]
 8004afc:	089b      	lsrs	r3, r3, #2
 8004afe:	3302      	adds	r3, #2
 8004b00:	69ba      	ldr	r2, [r7, #24]
 8004b02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004b06:	4b3d      	ldr	r3, [pc, #244]	@ (8004bfc <HAL_GPIO_Init+0x354>)
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	43db      	mvns	r3, r3
 8004b10:	69ba      	ldr	r2, [r7, #24]
 8004b12:	4013      	ands	r3, r2
 8004b14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d003      	beq.n	8004b2a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004b22:	69ba      	ldr	r2, [r7, #24]
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	4313      	orrs	r3, r2
 8004b28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004b2a:	4a34      	ldr	r2, [pc, #208]	@ (8004bfc <HAL_GPIO_Init+0x354>)
 8004b2c:	69bb      	ldr	r3, [r7, #24]
 8004b2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004b30:	4b32      	ldr	r3, [pc, #200]	@ (8004bfc <HAL_GPIO_Init+0x354>)
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	43db      	mvns	r3, r3
 8004b3a:	69ba      	ldr	r2, [r7, #24]
 8004b3c:	4013      	ands	r3, r2
 8004b3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d003      	beq.n	8004b54 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004b4c:	69ba      	ldr	r2, [r7, #24]
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	4313      	orrs	r3, r2
 8004b52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004b54:	4a29      	ldr	r2, [pc, #164]	@ (8004bfc <HAL_GPIO_Init+0x354>)
 8004b56:	69bb      	ldr	r3, [r7, #24]
 8004b58:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004b5a:	4b28      	ldr	r3, [pc, #160]	@ (8004bfc <HAL_GPIO_Init+0x354>)
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	43db      	mvns	r3, r3
 8004b64:	69ba      	ldr	r2, [r7, #24]
 8004b66:	4013      	ands	r3, r2
 8004b68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d003      	beq.n	8004b7e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004b76:	69ba      	ldr	r2, [r7, #24]
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004b7e:	4a1f      	ldr	r2, [pc, #124]	@ (8004bfc <HAL_GPIO_Init+0x354>)
 8004b80:	69bb      	ldr	r3, [r7, #24]
 8004b82:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004b84:	4b1d      	ldr	r3, [pc, #116]	@ (8004bfc <HAL_GPIO_Init+0x354>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	43db      	mvns	r3, r3
 8004b8e:	69ba      	ldr	r2, [r7, #24]
 8004b90:	4013      	ands	r3, r2
 8004b92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d003      	beq.n	8004ba8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004ba0:	69ba      	ldr	r2, [r7, #24]
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004ba8:	4a14      	ldr	r2, [pc, #80]	@ (8004bfc <HAL_GPIO_Init+0x354>)
 8004baa:	69bb      	ldr	r3, [r7, #24]
 8004bac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004bae:	69fb      	ldr	r3, [r7, #28]
 8004bb0:	3301      	adds	r3, #1
 8004bb2:	61fb      	str	r3, [r7, #28]
 8004bb4:	69fb      	ldr	r3, [r7, #28]
 8004bb6:	2b0f      	cmp	r3, #15
 8004bb8:	f67f ae84 	bls.w	80048c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004bbc:	bf00      	nop
 8004bbe:	bf00      	nop
 8004bc0:	3724      	adds	r7, #36	@ 0x24
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc8:	4770      	bx	lr
 8004bca:	bf00      	nop
 8004bcc:	40023800 	.word	0x40023800
 8004bd0:	40013800 	.word	0x40013800
 8004bd4:	40020000 	.word	0x40020000
 8004bd8:	40020400 	.word	0x40020400
 8004bdc:	40020800 	.word	0x40020800
 8004be0:	40020c00 	.word	0x40020c00
 8004be4:	40021000 	.word	0x40021000
 8004be8:	40021400 	.word	0x40021400
 8004bec:	40021800 	.word	0x40021800
 8004bf0:	40021c00 	.word	0x40021c00
 8004bf4:	40022000 	.word	0x40022000
 8004bf8:	40022400 	.word	0x40022400
 8004bfc:	40013c00 	.word	0x40013c00

08004c00 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b085      	sub	sp, #20
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	460b      	mov	r3, r1
 8004c0a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	691a      	ldr	r2, [r3, #16]
 8004c10:	887b      	ldrh	r3, [r7, #2]
 8004c12:	4013      	ands	r3, r2
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d002      	beq.n	8004c1e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	73fb      	strb	r3, [r7, #15]
 8004c1c:	e001      	b.n	8004c22 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004c22:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	3714      	adds	r7, #20
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2e:	4770      	bx	lr

08004c30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b083      	sub	sp, #12
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
 8004c38:	460b      	mov	r3, r1
 8004c3a:	807b      	strh	r3, [r7, #2]
 8004c3c:	4613      	mov	r3, r2
 8004c3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004c40:	787b      	ldrb	r3, [r7, #1]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d003      	beq.n	8004c4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004c46:	887a      	ldrh	r2, [r7, #2]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004c4c:	e003      	b.n	8004c56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004c4e:	887b      	ldrh	r3, [r7, #2]
 8004c50:	041a      	lsls	r2, r3, #16
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	619a      	str	r2, [r3, #24]
}
 8004c56:	bf00      	nop
 8004c58:	370c      	adds	r7, #12
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr

08004c62 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004c62:	b480      	push	{r7}
 8004c64:	b085      	sub	sp, #20
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	6078      	str	r0, [r7, #4]
 8004c6a:	460b      	mov	r3, r1
 8004c6c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	695b      	ldr	r3, [r3, #20]
 8004c72:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004c74:	887a      	ldrh	r2, [r7, #2]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	4013      	ands	r3, r2
 8004c7a:	041a      	lsls	r2, r3, #16
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	43d9      	mvns	r1, r3
 8004c80:	887b      	ldrh	r3, [r7, #2]
 8004c82:	400b      	ands	r3, r1
 8004c84:	431a      	orrs	r2, r3
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	619a      	str	r2, [r3, #24]
}
 8004c8a:	bf00      	nop
 8004c8c:	3714      	adds	r7, #20
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr
	...

08004c98 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b082      	sub	sp, #8
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004ca2:	4b08      	ldr	r3, [pc, #32]	@ (8004cc4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004ca4:	695a      	ldr	r2, [r3, #20]
 8004ca6:	88fb      	ldrh	r3, [r7, #6]
 8004ca8:	4013      	ands	r3, r2
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d006      	beq.n	8004cbc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004cae:	4a05      	ldr	r2, [pc, #20]	@ (8004cc4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004cb0:	88fb      	ldrh	r3, [r7, #6]
 8004cb2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004cb4:	88fb      	ldrh	r3, [r7, #6]
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f003 ff04 	bl	8008ac4 <HAL_GPIO_EXTI_Callback>
  }
}
 8004cbc:	bf00      	nop
 8004cbe:	3708      	adds	r7, #8
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}
 8004cc4:	40013c00 	.word	0x40013c00

08004cc8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b084      	sub	sp, #16
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d101      	bne.n	8004cda <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e12b      	b.n	8004f32 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d106      	bne.n	8004cf4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f000 f95d 	bl	8004fae <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2224      	movs	r2, #36	@ 0x24
 8004cf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f022 0201 	bic.w	r2, r2, #1
 8004d0a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004d1a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004d2a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004d2c:	f001 ffdc 	bl	8006ce8 <HAL_RCC_GetPCLK1Freq>
 8004d30:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	4a81      	ldr	r2, [pc, #516]	@ (8004f3c <HAL_I2C_Init+0x274>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d807      	bhi.n	8004d4c <HAL_I2C_Init+0x84>
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	4a80      	ldr	r2, [pc, #512]	@ (8004f40 <HAL_I2C_Init+0x278>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	bf94      	ite	ls
 8004d44:	2301      	movls	r3, #1
 8004d46:	2300      	movhi	r3, #0
 8004d48:	b2db      	uxtb	r3, r3
 8004d4a:	e006      	b.n	8004d5a <HAL_I2C_Init+0x92>
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	4a7d      	ldr	r2, [pc, #500]	@ (8004f44 <HAL_I2C_Init+0x27c>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	bf94      	ite	ls
 8004d54:	2301      	movls	r3, #1
 8004d56:	2300      	movhi	r3, #0
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d001      	beq.n	8004d62 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e0e7      	b.n	8004f32 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	4a78      	ldr	r2, [pc, #480]	@ (8004f48 <HAL_I2C_Init+0x280>)
 8004d66:	fba2 2303 	umull	r2, r3, r2, r3
 8004d6a:	0c9b      	lsrs	r3, r3, #18
 8004d6c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	68ba      	ldr	r2, [r7, #8]
 8004d7e:	430a      	orrs	r2, r1
 8004d80:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	6a1b      	ldr	r3, [r3, #32]
 8004d88:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	4a6a      	ldr	r2, [pc, #424]	@ (8004f3c <HAL_I2C_Init+0x274>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d802      	bhi.n	8004d9c <HAL_I2C_Init+0xd4>
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	3301      	adds	r3, #1
 8004d9a:	e009      	b.n	8004db0 <HAL_I2C_Init+0xe8>
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004da2:	fb02 f303 	mul.w	r3, r2, r3
 8004da6:	4a69      	ldr	r2, [pc, #420]	@ (8004f4c <HAL_I2C_Init+0x284>)
 8004da8:	fba2 2303 	umull	r2, r3, r2, r3
 8004dac:	099b      	lsrs	r3, r3, #6
 8004dae:	3301      	adds	r3, #1
 8004db0:	687a      	ldr	r2, [r7, #4]
 8004db2:	6812      	ldr	r2, [r2, #0]
 8004db4:	430b      	orrs	r3, r1
 8004db6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	69db      	ldr	r3, [r3, #28]
 8004dbe:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004dc2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	495c      	ldr	r1, [pc, #368]	@ (8004f3c <HAL_I2C_Init+0x274>)
 8004dcc:	428b      	cmp	r3, r1
 8004dce:	d819      	bhi.n	8004e04 <HAL_I2C_Init+0x13c>
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	1e59      	subs	r1, r3, #1
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	005b      	lsls	r3, r3, #1
 8004dda:	fbb1 f3f3 	udiv	r3, r1, r3
 8004dde:	1c59      	adds	r1, r3, #1
 8004de0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004de4:	400b      	ands	r3, r1
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d00a      	beq.n	8004e00 <HAL_I2C_Init+0x138>
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	1e59      	subs	r1, r3, #1
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	005b      	lsls	r3, r3, #1
 8004df4:	fbb1 f3f3 	udiv	r3, r1, r3
 8004df8:	3301      	adds	r3, #1
 8004dfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004dfe:	e051      	b.n	8004ea4 <HAL_I2C_Init+0x1dc>
 8004e00:	2304      	movs	r3, #4
 8004e02:	e04f      	b.n	8004ea4 <HAL_I2C_Init+0x1dc>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d111      	bne.n	8004e30 <HAL_I2C_Init+0x168>
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	1e58      	subs	r0, r3, #1
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6859      	ldr	r1, [r3, #4]
 8004e14:	460b      	mov	r3, r1
 8004e16:	005b      	lsls	r3, r3, #1
 8004e18:	440b      	add	r3, r1
 8004e1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e1e:	3301      	adds	r3, #1
 8004e20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	bf0c      	ite	eq
 8004e28:	2301      	moveq	r3, #1
 8004e2a:	2300      	movne	r3, #0
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	e012      	b.n	8004e56 <HAL_I2C_Init+0x18e>
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	1e58      	subs	r0, r3, #1
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6859      	ldr	r1, [r3, #4]
 8004e38:	460b      	mov	r3, r1
 8004e3a:	009b      	lsls	r3, r3, #2
 8004e3c:	440b      	add	r3, r1
 8004e3e:	0099      	lsls	r1, r3, #2
 8004e40:	440b      	add	r3, r1
 8004e42:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e46:	3301      	adds	r3, #1
 8004e48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	bf0c      	ite	eq
 8004e50:	2301      	moveq	r3, #1
 8004e52:	2300      	movne	r3, #0
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d001      	beq.n	8004e5e <HAL_I2C_Init+0x196>
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e022      	b.n	8004ea4 <HAL_I2C_Init+0x1dc>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	689b      	ldr	r3, [r3, #8]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d10e      	bne.n	8004e84 <HAL_I2C_Init+0x1bc>
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	1e58      	subs	r0, r3, #1
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6859      	ldr	r1, [r3, #4]
 8004e6e:	460b      	mov	r3, r1
 8004e70:	005b      	lsls	r3, r3, #1
 8004e72:	440b      	add	r3, r1
 8004e74:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e78:	3301      	adds	r3, #1
 8004e7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e7e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e82:	e00f      	b.n	8004ea4 <HAL_I2C_Init+0x1dc>
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	1e58      	subs	r0, r3, #1
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6859      	ldr	r1, [r3, #4]
 8004e8c:	460b      	mov	r3, r1
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	440b      	add	r3, r1
 8004e92:	0099      	lsls	r1, r3, #2
 8004e94:	440b      	add	r3, r1
 8004e96:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e9a:	3301      	adds	r3, #1
 8004e9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ea0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004ea4:	6879      	ldr	r1, [r7, #4]
 8004ea6:	6809      	ldr	r1, [r1, #0]
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	69da      	ldr	r2, [r3, #28]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6a1b      	ldr	r3, [r3, #32]
 8004ebe:	431a      	orrs	r2, r3
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	430a      	orrs	r2, r1
 8004ec6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004ed2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004ed6:	687a      	ldr	r2, [r7, #4]
 8004ed8:	6911      	ldr	r1, [r2, #16]
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	68d2      	ldr	r2, [r2, #12]
 8004ede:	4311      	orrs	r1, r2
 8004ee0:	687a      	ldr	r2, [r7, #4]
 8004ee2:	6812      	ldr	r2, [r2, #0]
 8004ee4:	430b      	orrs	r3, r1
 8004ee6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	68db      	ldr	r3, [r3, #12]
 8004eee:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	695a      	ldr	r2, [r3, #20]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	699b      	ldr	r3, [r3, #24]
 8004efa:	431a      	orrs	r2, r3
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	430a      	orrs	r2, r1
 8004f02:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f042 0201 	orr.w	r2, r2, #1
 8004f12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2200      	movs	r2, #0
 8004f18:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2220      	movs	r2, #32
 8004f1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2200      	movs	r2, #0
 8004f26:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004f30:	2300      	movs	r3, #0
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3710      	adds	r7, #16
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}
 8004f3a:	bf00      	nop
 8004f3c:	000186a0 	.word	0x000186a0
 8004f40:	001e847f 	.word	0x001e847f
 8004f44:	003d08ff 	.word	0x003d08ff
 8004f48:	431bde83 	.word	0x431bde83
 8004f4c:	10624dd3 	.word	0x10624dd3

08004f50 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b082      	sub	sp, #8
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d101      	bne.n	8004f62 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e021      	b.n	8004fa6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2224      	movs	r2, #36	@ 0x24
 8004f66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f022 0201 	bic.w	r2, r2, #1
 8004f78:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f000 f821 	bl	8004fc2 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2200      	movs	r2, #0
 8004f84:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2200      	movs	r2, #0
 8004f92:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2200      	movs	r2, #0
 8004f98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004fa4:	2300      	movs	r3, #0
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3708      	adds	r7, #8
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}

08004fae <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8004fae:	b480      	push	{r7}
 8004fb0:	b083      	sub	sp, #12
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8004fb6:	bf00      	nop
 8004fb8:	370c      	adds	r7, #12
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr

08004fc2 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8004fc2:	b480      	push	{r7}
 8004fc4:	b083      	sub	sp, #12
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8004fca:	bf00      	nop
 8004fcc:	370c      	adds	r7, #12
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr
	...

08004fd8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b088      	sub	sp, #32
 8004fdc:	af02      	add	r7, sp, #8
 8004fde:	60f8      	str	r0, [r7, #12]
 8004fe0:	4608      	mov	r0, r1
 8004fe2:	4611      	mov	r1, r2
 8004fe4:	461a      	mov	r2, r3
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	817b      	strh	r3, [r7, #10]
 8004fea:	460b      	mov	r3, r1
 8004fec:	813b      	strh	r3, [r7, #8]
 8004fee:	4613      	mov	r3, r2
 8004ff0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004ff2:	f7fe fec3 	bl	8003d7c <HAL_GetTick>
 8004ff6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ffe:	b2db      	uxtb	r3, r3
 8005000:	2b20      	cmp	r3, #32
 8005002:	f040 80d9 	bne.w	80051b8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	9300      	str	r3, [sp, #0]
 800500a:	2319      	movs	r3, #25
 800500c:	2201      	movs	r2, #1
 800500e:	496d      	ldr	r1, [pc, #436]	@ (80051c4 <HAL_I2C_Mem_Write+0x1ec>)
 8005010:	68f8      	ldr	r0, [r7, #12]
 8005012:	f000 fc99 	bl	8005948 <I2C_WaitOnFlagUntilTimeout>
 8005016:	4603      	mov	r3, r0
 8005018:	2b00      	cmp	r3, #0
 800501a:	d001      	beq.n	8005020 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800501c:	2302      	movs	r3, #2
 800501e:	e0cc      	b.n	80051ba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005026:	2b01      	cmp	r3, #1
 8005028:	d101      	bne.n	800502e <HAL_I2C_Mem_Write+0x56>
 800502a:	2302      	movs	r3, #2
 800502c:	e0c5      	b.n	80051ba <HAL_I2C_Mem_Write+0x1e2>
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2201      	movs	r2, #1
 8005032:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f003 0301 	and.w	r3, r3, #1
 8005040:	2b01      	cmp	r3, #1
 8005042:	d007      	beq.n	8005054 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f042 0201 	orr.w	r2, r2, #1
 8005052:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005062:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2221      	movs	r2, #33	@ 0x21
 8005068:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2240      	movs	r2, #64	@ 0x40
 8005070:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2200      	movs	r2, #0
 8005078:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	6a3a      	ldr	r2, [r7, #32]
 800507e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005084:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800508a:	b29a      	uxth	r2, r3
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	4a4d      	ldr	r2, [pc, #308]	@ (80051c8 <HAL_I2C_Mem_Write+0x1f0>)
 8005094:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005096:	88f8      	ldrh	r0, [r7, #6]
 8005098:	893a      	ldrh	r2, [r7, #8]
 800509a:	8979      	ldrh	r1, [r7, #10]
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	9301      	str	r3, [sp, #4]
 80050a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050a2:	9300      	str	r3, [sp, #0]
 80050a4:	4603      	mov	r3, r0
 80050a6:	68f8      	ldr	r0, [r7, #12]
 80050a8:	f000 fad0 	bl	800564c <I2C_RequestMemoryWrite>
 80050ac:	4603      	mov	r3, r0
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d052      	beq.n	8005158 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	e081      	b.n	80051ba <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050b6:	697a      	ldr	r2, [r7, #20]
 80050b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80050ba:	68f8      	ldr	r0, [r7, #12]
 80050bc:	f000 fd5e 	bl	8005b7c <I2C_WaitOnTXEFlagUntilTimeout>
 80050c0:	4603      	mov	r3, r0
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d00d      	beq.n	80050e2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ca:	2b04      	cmp	r3, #4
 80050cc:	d107      	bne.n	80050de <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80050dc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	e06b      	b.n	80051ba <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050e6:	781a      	ldrb	r2, [r3, #0]
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050f2:	1c5a      	adds	r2, r3, #1
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050fc:	3b01      	subs	r3, #1
 80050fe:	b29a      	uxth	r2, r3
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005108:	b29b      	uxth	r3, r3
 800510a:	3b01      	subs	r3, #1
 800510c:	b29a      	uxth	r2, r3
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	695b      	ldr	r3, [r3, #20]
 8005118:	f003 0304 	and.w	r3, r3, #4
 800511c:	2b04      	cmp	r3, #4
 800511e:	d11b      	bne.n	8005158 <HAL_I2C_Mem_Write+0x180>
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005124:	2b00      	cmp	r3, #0
 8005126:	d017      	beq.n	8005158 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800512c:	781a      	ldrb	r2, [r3, #0]
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005138:	1c5a      	adds	r2, r3, #1
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005142:	3b01      	subs	r3, #1
 8005144:	b29a      	uxth	r2, r3
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800514e:	b29b      	uxth	r3, r3
 8005150:	3b01      	subs	r3, #1
 8005152:	b29a      	uxth	r2, r3
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800515c:	2b00      	cmp	r3, #0
 800515e:	d1aa      	bne.n	80050b6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005160:	697a      	ldr	r2, [r7, #20]
 8005162:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005164:	68f8      	ldr	r0, [r7, #12]
 8005166:	f000 fd51 	bl	8005c0c <I2C_WaitOnBTFFlagUntilTimeout>
 800516a:	4603      	mov	r3, r0
 800516c:	2b00      	cmp	r3, #0
 800516e:	d00d      	beq.n	800518c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005174:	2b04      	cmp	r3, #4
 8005176:	d107      	bne.n	8005188 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005186:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	e016      	b.n	80051ba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800519a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2220      	movs	r2, #32
 80051a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2200      	movs	r2, #0
 80051a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2200      	movs	r2, #0
 80051b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80051b4:	2300      	movs	r3, #0
 80051b6:	e000      	b.n	80051ba <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80051b8:	2302      	movs	r3, #2
  }
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3718      	adds	r7, #24
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
 80051c2:	bf00      	nop
 80051c4:	00100002 	.word	0x00100002
 80051c8:	ffff0000 	.word	0xffff0000

080051cc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b08c      	sub	sp, #48	@ 0x30
 80051d0:	af02      	add	r7, sp, #8
 80051d2:	60f8      	str	r0, [r7, #12]
 80051d4:	4608      	mov	r0, r1
 80051d6:	4611      	mov	r1, r2
 80051d8:	461a      	mov	r2, r3
 80051da:	4603      	mov	r3, r0
 80051dc:	817b      	strh	r3, [r7, #10]
 80051de:	460b      	mov	r3, r1
 80051e0:	813b      	strh	r3, [r7, #8]
 80051e2:	4613      	mov	r3, r2
 80051e4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80051e6:	f7fe fdc9 	bl	8003d7c <HAL_GetTick>
 80051ea:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051f2:	b2db      	uxtb	r3, r3
 80051f4:	2b20      	cmp	r3, #32
 80051f6:	f040 8214 	bne.w	8005622 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80051fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051fc:	9300      	str	r3, [sp, #0]
 80051fe:	2319      	movs	r3, #25
 8005200:	2201      	movs	r2, #1
 8005202:	497b      	ldr	r1, [pc, #492]	@ (80053f0 <HAL_I2C_Mem_Read+0x224>)
 8005204:	68f8      	ldr	r0, [r7, #12]
 8005206:	f000 fb9f 	bl	8005948 <I2C_WaitOnFlagUntilTimeout>
 800520a:	4603      	mov	r3, r0
 800520c:	2b00      	cmp	r3, #0
 800520e:	d001      	beq.n	8005214 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005210:	2302      	movs	r3, #2
 8005212:	e207      	b.n	8005624 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800521a:	2b01      	cmp	r3, #1
 800521c:	d101      	bne.n	8005222 <HAL_I2C_Mem_Read+0x56>
 800521e:	2302      	movs	r3, #2
 8005220:	e200      	b.n	8005624 <HAL_I2C_Mem_Read+0x458>
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2201      	movs	r2, #1
 8005226:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 0301 	and.w	r3, r3, #1
 8005234:	2b01      	cmp	r3, #1
 8005236:	d007      	beq.n	8005248 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f042 0201 	orr.w	r2, r2, #1
 8005246:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	681a      	ldr	r2, [r3, #0]
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005256:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2222      	movs	r2, #34	@ 0x22
 800525c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2240      	movs	r2, #64	@ 0x40
 8005264:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2200      	movs	r2, #0
 800526c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005272:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005278:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800527e:	b29a      	uxth	r2, r3
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	4a5b      	ldr	r2, [pc, #364]	@ (80053f4 <HAL_I2C_Mem_Read+0x228>)
 8005288:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800528a:	88f8      	ldrh	r0, [r7, #6]
 800528c:	893a      	ldrh	r2, [r7, #8]
 800528e:	8979      	ldrh	r1, [r7, #10]
 8005290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005292:	9301      	str	r3, [sp, #4]
 8005294:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005296:	9300      	str	r3, [sp, #0]
 8005298:	4603      	mov	r3, r0
 800529a:	68f8      	ldr	r0, [r7, #12]
 800529c:	f000 fa6c 	bl	8005778 <I2C_RequestMemoryRead>
 80052a0:	4603      	mov	r3, r0
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d001      	beq.n	80052aa <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	e1bc      	b.n	8005624 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d113      	bne.n	80052da <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052b2:	2300      	movs	r3, #0
 80052b4:	623b      	str	r3, [r7, #32]
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	695b      	ldr	r3, [r3, #20]
 80052bc:	623b      	str	r3, [r7, #32]
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	699b      	ldr	r3, [r3, #24]
 80052c4:	623b      	str	r3, [r7, #32]
 80052c6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	681a      	ldr	r2, [r3, #0]
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80052d6:	601a      	str	r2, [r3, #0]
 80052d8:	e190      	b.n	80055fc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052de:	2b01      	cmp	r3, #1
 80052e0:	d11b      	bne.n	800531a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80052f0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052f2:	2300      	movs	r3, #0
 80052f4:	61fb      	str	r3, [r7, #28]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	695b      	ldr	r3, [r3, #20]
 80052fc:	61fb      	str	r3, [r7, #28]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	699b      	ldr	r3, [r3, #24]
 8005304:	61fb      	str	r3, [r7, #28]
 8005306:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005316:	601a      	str	r2, [r3, #0]
 8005318:	e170      	b.n	80055fc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800531e:	2b02      	cmp	r3, #2
 8005320:	d11b      	bne.n	800535a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005330:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005340:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005342:	2300      	movs	r3, #0
 8005344:	61bb      	str	r3, [r7, #24]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	695b      	ldr	r3, [r3, #20]
 800534c:	61bb      	str	r3, [r7, #24]
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	699b      	ldr	r3, [r3, #24]
 8005354:	61bb      	str	r3, [r7, #24]
 8005356:	69bb      	ldr	r3, [r7, #24]
 8005358:	e150      	b.n	80055fc <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800535a:	2300      	movs	r3, #0
 800535c:	617b      	str	r3, [r7, #20]
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	695b      	ldr	r3, [r3, #20]
 8005364:	617b      	str	r3, [r7, #20]
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	699b      	ldr	r3, [r3, #24]
 800536c:	617b      	str	r3, [r7, #20]
 800536e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005370:	e144      	b.n	80055fc <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005376:	2b03      	cmp	r3, #3
 8005378:	f200 80f1 	bhi.w	800555e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005380:	2b01      	cmp	r3, #1
 8005382:	d123      	bne.n	80053cc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005384:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005386:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005388:	68f8      	ldr	r0, [r7, #12]
 800538a:	f000 fc87 	bl	8005c9c <I2C_WaitOnRXNEFlagUntilTimeout>
 800538e:	4603      	mov	r3, r0
 8005390:	2b00      	cmp	r3, #0
 8005392:	d001      	beq.n	8005398 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005394:	2301      	movs	r3, #1
 8005396:	e145      	b.n	8005624 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	691a      	ldr	r2, [r3, #16]
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053a2:	b2d2      	uxtb	r2, r2
 80053a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053aa:	1c5a      	adds	r2, r3, #1
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053b4:	3b01      	subs	r3, #1
 80053b6:	b29a      	uxth	r2, r3
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	3b01      	subs	r3, #1
 80053c4:	b29a      	uxth	r2, r3
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80053ca:	e117      	b.n	80055fc <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053d0:	2b02      	cmp	r3, #2
 80053d2:	d14e      	bne.n	8005472 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80053d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053d6:	9300      	str	r3, [sp, #0]
 80053d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053da:	2200      	movs	r2, #0
 80053dc:	4906      	ldr	r1, [pc, #24]	@ (80053f8 <HAL_I2C_Mem_Read+0x22c>)
 80053de:	68f8      	ldr	r0, [r7, #12]
 80053e0:	f000 fab2 	bl	8005948 <I2C_WaitOnFlagUntilTimeout>
 80053e4:	4603      	mov	r3, r0
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d008      	beq.n	80053fc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	e11a      	b.n	8005624 <HAL_I2C_Mem_Read+0x458>
 80053ee:	bf00      	nop
 80053f0:	00100002 	.word	0x00100002
 80053f4:	ffff0000 	.word	0xffff0000
 80053f8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	681a      	ldr	r2, [r3, #0]
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800540a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	691a      	ldr	r2, [r3, #16]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005416:	b2d2      	uxtb	r2, r2
 8005418:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800541e:	1c5a      	adds	r2, r3, #1
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005428:	3b01      	subs	r3, #1
 800542a:	b29a      	uxth	r2, r3
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005434:	b29b      	uxth	r3, r3
 8005436:	3b01      	subs	r3, #1
 8005438:	b29a      	uxth	r2, r3
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	691a      	ldr	r2, [r3, #16]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005448:	b2d2      	uxtb	r2, r2
 800544a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005450:	1c5a      	adds	r2, r3, #1
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800545a:	3b01      	subs	r3, #1
 800545c:	b29a      	uxth	r2, r3
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005466:	b29b      	uxth	r3, r3
 8005468:	3b01      	subs	r3, #1
 800546a:	b29a      	uxth	r2, r3
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005470:	e0c4      	b.n	80055fc <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005474:	9300      	str	r3, [sp, #0]
 8005476:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005478:	2200      	movs	r2, #0
 800547a:	496c      	ldr	r1, [pc, #432]	@ (800562c <HAL_I2C_Mem_Read+0x460>)
 800547c:	68f8      	ldr	r0, [r7, #12]
 800547e:	f000 fa63 	bl	8005948 <I2C_WaitOnFlagUntilTimeout>
 8005482:	4603      	mov	r3, r0
 8005484:	2b00      	cmp	r3, #0
 8005486:	d001      	beq.n	800548c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	e0cb      	b.n	8005624 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800549a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	691a      	ldr	r2, [r3, #16]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054a6:	b2d2      	uxtb	r2, r2
 80054a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054ae:	1c5a      	adds	r2, r3, #1
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054b8:	3b01      	subs	r3, #1
 80054ba:	b29a      	uxth	r2, r3
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054c4:	b29b      	uxth	r3, r3
 80054c6:	3b01      	subs	r3, #1
 80054c8:	b29a      	uxth	r2, r3
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80054ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054d0:	9300      	str	r3, [sp, #0]
 80054d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054d4:	2200      	movs	r2, #0
 80054d6:	4955      	ldr	r1, [pc, #340]	@ (800562c <HAL_I2C_Mem_Read+0x460>)
 80054d8:	68f8      	ldr	r0, [r7, #12]
 80054da:	f000 fa35 	bl	8005948 <I2C_WaitOnFlagUntilTimeout>
 80054de:	4603      	mov	r3, r0
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d001      	beq.n	80054e8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80054e4:	2301      	movs	r3, #1
 80054e6:	e09d      	b.n	8005624 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80054f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	691a      	ldr	r2, [r3, #16]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005502:	b2d2      	uxtb	r2, r2
 8005504:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800550a:	1c5a      	adds	r2, r3, #1
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005514:	3b01      	subs	r3, #1
 8005516:	b29a      	uxth	r2, r3
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005520:	b29b      	uxth	r3, r3
 8005522:	3b01      	subs	r3, #1
 8005524:	b29a      	uxth	r2, r3
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	691a      	ldr	r2, [r3, #16]
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005534:	b2d2      	uxtb	r2, r2
 8005536:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800553c:	1c5a      	adds	r2, r3, #1
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005546:	3b01      	subs	r3, #1
 8005548:	b29a      	uxth	r2, r3
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005552:	b29b      	uxth	r3, r3
 8005554:	3b01      	subs	r3, #1
 8005556:	b29a      	uxth	r2, r3
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800555c:	e04e      	b.n	80055fc <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800555e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005560:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005562:	68f8      	ldr	r0, [r7, #12]
 8005564:	f000 fb9a 	bl	8005c9c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005568:	4603      	mov	r3, r0
 800556a:	2b00      	cmp	r3, #0
 800556c:	d001      	beq.n	8005572 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	e058      	b.n	8005624 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	691a      	ldr	r2, [r3, #16]
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800557c:	b2d2      	uxtb	r2, r2
 800557e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005584:	1c5a      	adds	r2, r3, #1
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800558e:	3b01      	subs	r3, #1
 8005590:	b29a      	uxth	r2, r3
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800559a:	b29b      	uxth	r3, r3
 800559c:	3b01      	subs	r3, #1
 800559e:	b29a      	uxth	r2, r3
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	695b      	ldr	r3, [r3, #20]
 80055aa:	f003 0304 	and.w	r3, r3, #4
 80055ae:	2b04      	cmp	r3, #4
 80055b0:	d124      	bne.n	80055fc <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055b6:	2b03      	cmp	r3, #3
 80055b8:	d107      	bne.n	80055ca <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80055c8:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	691a      	ldr	r2, [r3, #16]
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055d4:	b2d2      	uxtb	r2, r2
 80055d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055dc:	1c5a      	adds	r2, r3, #1
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055e6:	3b01      	subs	r3, #1
 80055e8:	b29a      	uxth	r2, r3
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055f2:	b29b      	uxth	r3, r3
 80055f4:	3b01      	subs	r3, #1
 80055f6:	b29a      	uxth	r2, r3
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005600:	2b00      	cmp	r3, #0
 8005602:	f47f aeb6 	bne.w	8005372 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2220      	movs	r2, #32
 800560a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2200      	movs	r2, #0
 8005612:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2200      	movs	r2, #0
 800561a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800561e:	2300      	movs	r3, #0
 8005620:	e000      	b.n	8005624 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8005622:	2302      	movs	r3, #2
  }
}
 8005624:	4618      	mov	r0, r3
 8005626:	3728      	adds	r7, #40	@ 0x28
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}
 800562c:	00010004 	.word	0x00010004

08005630 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8005630:	b480      	push	{r7}
 8005632:	b083      	sub	sp, #12
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800563e:	b2db      	uxtb	r3, r3
}
 8005640:	4618      	mov	r0, r3
 8005642:	370c      	adds	r7, #12
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr

0800564c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b088      	sub	sp, #32
 8005650:	af02      	add	r7, sp, #8
 8005652:	60f8      	str	r0, [r7, #12]
 8005654:	4608      	mov	r0, r1
 8005656:	4611      	mov	r1, r2
 8005658:	461a      	mov	r2, r3
 800565a:	4603      	mov	r3, r0
 800565c:	817b      	strh	r3, [r7, #10]
 800565e:	460b      	mov	r3, r1
 8005660:	813b      	strh	r3, [r7, #8]
 8005662:	4613      	mov	r3, r2
 8005664:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	681a      	ldr	r2, [r3, #0]
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005674:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005678:	9300      	str	r3, [sp, #0]
 800567a:	6a3b      	ldr	r3, [r7, #32]
 800567c:	2200      	movs	r2, #0
 800567e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005682:	68f8      	ldr	r0, [r7, #12]
 8005684:	f000 f960 	bl	8005948 <I2C_WaitOnFlagUntilTimeout>
 8005688:	4603      	mov	r3, r0
 800568a:	2b00      	cmp	r3, #0
 800568c:	d00d      	beq.n	80056aa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005698:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800569c:	d103      	bne.n	80056a6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80056a4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80056a6:	2303      	movs	r3, #3
 80056a8:	e05f      	b.n	800576a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80056aa:	897b      	ldrh	r3, [r7, #10]
 80056ac:	b2db      	uxtb	r3, r3
 80056ae:	461a      	mov	r2, r3
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80056b8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80056ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056bc:	6a3a      	ldr	r2, [r7, #32]
 80056be:	492d      	ldr	r1, [pc, #180]	@ (8005774 <I2C_RequestMemoryWrite+0x128>)
 80056c0:	68f8      	ldr	r0, [r7, #12]
 80056c2:	f000 f9bb 	bl	8005a3c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80056c6:	4603      	mov	r3, r0
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d001      	beq.n	80056d0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80056cc:	2301      	movs	r3, #1
 80056ce:	e04c      	b.n	800576a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056d0:	2300      	movs	r3, #0
 80056d2:	617b      	str	r3, [r7, #20]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	695b      	ldr	r3, [r3, #20]
 80056da:	617b      	str	r3, [r7, #20]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	699b      	ldr	r3, [r3, #24]
 80056e2:	617b      	str	r3, [r7, #20]
 80056e4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80056e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056e8:	6a39      	ldr	r1, [r7, #32]
 80056ea:	68f8      	ldr	r0, [r7, #12]
 80056ec:	f000 fa46 	bl	8005b7c <I2C_WaitOnTXEFlagUntilTimeout>
 80056f0:	4603      	mov	r3, r0
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d00d      	beq.n	8005712 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056fa:	2b04      	cmp	r3, #4
 80056fc:	d107      	bne.n	800570e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800570c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	e02b      	b.n	800576a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005712:	88fb      	ldrh	r3, [r7, #6]
 8005714:	2b01      	cmp	r3, #1
 8005716:	d105      	bne.n	8005724 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005718:	893b      	ldrh	r3, [r7, #8]
 800571a:	b2da      	uxtb	r2, r3
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	611a      	str	r2, [r3, #16]
 8005722:	e021      	b.n	8005768 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005724:	893b      	ldrh	r3, [r7, #8]
 8005726:	0a1b      	lsrs	r3, r3, #8
 8005728:	b29b      	uxth	r3, r3
 800572a:	b2da      	uxtb	r2, r3
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005732:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005734:	6a39      	ldr	r1, [r7, #32]
 8005736:	68f8      	ldr	r0, [r7, #12]
 8005738:	f000 fa20 	bl	8005b7c <I2C_WaitOnTXEFlagUntilTimeout>
 800573c:	4603      	mov	r3, r0
 800573e:	2b00      	cmp	r3, #0
 8005740:	d00d      	beq.n	800575e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005746:	2b04      	cmp	r3, #4
 8005748:	d107      	bne.n	800575a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005758:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	e005      	b.n	800576a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800575e:	893b      	ldrh	r3, [r7, #8]
 8005760:	b2da      	uxtb	r2, r3
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005768:	2300      	movs	r3, #0
}
 800576a:	4618      	mov	r0, r3
 800576c:	3718      	adds	r7, #24
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}
 8005772:	bf00      	nop
 8005774:	00010002 	.word	0x00010002

08005778 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b088      	sub	sp, #32
 800577c:	af02      	add	r7, sp, #8
 800577e:	60f8      	str	r0, [r7, #12]
 8005780:	4608      	mov	r0, r1
 8005782:	4611      	mov	r1, r2
 8005784:	461a      	mov	r2, r3
 8005786:	4603      	mov	r3, r0
 8005788:	817b      	strh	r3, [r7, #10]
 800578a:	460b      	mov	r3, r1
 800578c:	813b      	strh	r3, [r7, #8]
 800578e:	4613      	mov	r3, r2
 8005790:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	681a      	ldr	r2, [r3, #0]
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80057a0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80057b0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80057b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057b4:	9300      	str	r3, [sp, #0]
 80057b6:	6a3b      	ldr	r3, [r7, #32]
 80057b8:	2200      	movs	r2, #0
 80057ba:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80057be:	68f8      	ldr	r0, [r7, #12]
 80057c0:	f000 f8c2 	bl	8005948 <I2C_WaitOnFlagUntilTimeout>
 80057c4:	4603      	mov	r3, r0
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d00d      	beq.n	80057e6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80057d8:	d103      	bne.n	80057e2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80057e0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80057e2:	2303      	movs	r3, #3
 80057e4:	e0aa      	b.n	800593c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80057e6:	897b      	ldrh	r3, [r7, #10]
 80057e8:	b2db      	uxtb	r3, r3
 80057ea:	461a      	mov	r2, r3
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80057f4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80057f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057f8:	6a3a      	ldr	r2, [r7, #32]
 80057fa:	4952      	ldr	r1, [pc, #328]	@ (8005944 <I2C_RequestMemoryRead+0x1cc>)
 80057fc:	68f8      	ldr	r0, [r7, #12]
 80057fe:	f000 f91d 	bl	8005a3c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005802:	4603      	mov	r3, r0
 8005804:	2b00      	cmp	r3, #0
 8005806:	d001      	beq.n	800580c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005808:	2301      	movs	r3, #1
 800580a:	e097      	b.n	800593c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800580c:	2300      	movs	r3, #0
 800580e:	617b      	str	r3, [r7, #20]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	695b      	ldr	r3, [r3, #20]
 8005816:	617b      	str	r3, [r7, #20]
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	699b      	ldr	r3, [r3, #24]
 800581e:	617b      	str	r3, [r7, #20]
 8005820:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005822:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005824:	6a39      	ldr	r1, [r7, #32]
 8005826:	68f8      	ldr	r0, [r7, #12]
 8005828:	f000 f9a8 	bl	8005b7c <I2C_WaitOnTXEFlagUntilTimeout>
 800582c:	4603      	mov	r3, r0
 800582e:	2b00      	cmp	r3, #0
 8005830:	d00d      	beq.n	800584e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005836:	2b04      	cmp	r3, #4
 8005838:	d107      	bne.n	800584a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005848:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	e076      	b.n	800593c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800584e:	88fb      	ldrh	r3, [r7, #6]
 8005850:	2b01      	cmp	r3, #1
 8005852:	d105      	bne.n	8005860 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005854:	893b      	ldrh	r3, [r7, #8]
 8005856:	b2da      	uxtb	r2, r3
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	611a      	str	r2, [r3, #16]
 800585e:	e021      	b.n	80058a4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005860:	893b      	ldrh	r3, [r7, #8]
 8005862:	0a1b      	lsrs	r3, r3, #8
 8005864:	b29b      	uxth	r3, r3
 8005866:	b2da      	uxtb	r2, r3
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800586e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005870:	6a39      	ldr	r1, [r7, #32]
 8005872:	68f8      	ldr	r0, [r7, #12]
 8005874:	f000 f982 	bl	8005b7c <I2C_WaitOnTXEFlagUntilTimeout>
 8005878:	4603      	mov	r3, r0
 800587a:	2b00      	cmp	r3, #0
 800587c:	d00d      	beq.n	800589a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005882:	2b04      	cmp	r3, #4
 8005884:	d107      	bne.n	8005896 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005894:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	e050      	b.n	800593c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800589a:	893b      	ldrh	r3, [r7, #8]
 800589c:	b2da      	uxtb	r2, r3
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80058a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058a6:	6a39      	ldr	r1, [r7, #32]
 80058a8:	68f8      	ldr	r0, [r7, #12]
 80058aa:	f000 f967 	bl	8005b7c <I2C_WaitOnTXEFlagUntilTimeout>
 80058ae:	4603      	mov	r3, r0
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d00d      	beq.n	80058d0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058b8:	2b04      	cmp	r3, #4
 80058ba:	d107      	bne.n	80058cc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	681a      	ldr	r2, [r3, #0]
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80058ca:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	e035      	b.n	800593c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80058de:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80058e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058e2:	9300      	str	r3, [sp, #0]
 80058e4:	6a3b      	ldr	r3, [r7, #32]
 80058e6:	2200      	movs	r2, #0
 80058e8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80058ec:	68f8      	ldr	r0, [r7, #12]
 80058ee:	f000 f82b 	bl	8005948 <I2C_WaitOnFlagUntilTimeout>
 80058f2:	4603      	mov	r3, r0
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d00d      	beq.n	8005914 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005902:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005906:	d103      	bne.n	8005910 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800590e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005910:	2303      	movs	r3, #3
 8005912:	e013      	b.n	800593c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005914:	897b      	ldrh	r3, [r7, #10]
 8005916:	b2db      	uxtb	r3, r3
 8005918:	f043 0301 	orr.w	r3, r3, #1
 800591c:	b2da      	uxtb	r2, r3
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005926:	6a3a      	ldr	r2, [r7, #32]
 8005928:	4906      	ldr	r1, [pc, #24]	@ (8005944 <I2C_RequestMemoryRead+0x1cc>)
 800592a:	68f8      	ldr	r0, [r7, #12]
 800592c:	f000 f886 	bl	8005a3c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005930:	4603      	mov	r3, r0
 8005932:	2b00      	cmp	r3, #0
 8005934:	d001      	beq.n	800593a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	e000      	b.n	800593c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800593a:	2300      	movs	r3, #0
}
 800593c:	4618      	mov	r0, r3
 800593e:	3718      	adds	r7, #24
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}
 8005944:	00010002 	.word	0x00010002

08005948 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b084      	sub	sp, #16
 800594c:	af00      	add	r7, sp, #0
 800594e:	60f8      	str	r0, [r7, #12]
 8005950:	60b9      	str	r1, [r7, #8]
 8005952:	603b      	str	r3, [r7, #0]
 8005954:	4613      	mov	r3, r2
 8005956:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005958:	e048      	b.n	80059ec <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005960:	d044      	beq.n	80059ec <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005962:	f7fe fa0b 	bl	8003d7c <HAL_GetTick>
 8005966:	4602      	mov	r2, r0
 8005968:	69bb      	ldr	r3, [r7, #24]
 800596a:	1ad3      	subs	r3, r2, r3
 800596c:	683a      	ldr	r2, [r7, #0]
 800596e:	429a      	cmp	r2, r3
 8005970:	d302      	bcc.n	8005978 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d139      	bne.n	80059ec <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	0c1b      	lsrs	r3, r3, #16
 800597c:	b2db      	uxtb	r3, r3
 800597e:	2b01      	cmp	r3, #1
 8005980:	d10d      	bne.n	800599e <I2C_WaitOnFlagUntilTimeout+0x56>
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	695b      	ldr	r3, [r3, #20]
 8005988:	43da      	mvns	r2, r3
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	4013      	ands	r3, r2
 800598e:	b29b      	uxth	r3, r3
 8005990:	2b00      	cmp	r3, #0
 8005992:	bf0c      	ite	eq
 8005994:	2301      	moveq	r3, #1
 8005996:	2300      	movne	r3, #0
 8005998:	b2db      	uxtb	r3, r3
 800599a:	461a      	mov	r2, r3
 800599c:	e00c      	b.n	80059b8 <I2C_WaitOnFlagUntilTimeout+0x70>
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	699b      	ldr	r3, [r3, #24]
 80059a4:	43da      	mvns	r2, r3
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	4013      	ands	r3, r2
 80059aa:	b29b      	uxth	r3, r3
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	bf0c      	ite	eq
 80059b0:	2301      	moveq	r3, #1
 80059b2:	2300      	movne	r3, #0
 80059b4:	b2db      	uxtb	r3, r3
 80059b6:	461a      	mov	r2, r3
 80059b8:	79fb      	ldrb	r3, [r7, #7]
 80059ba:	429a      	cmp	r2, r3
 80059bc:	d116      	bne.n	80059ec <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2200      	movs	r2, #0
 80059c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2220      	movs	r2, #32
 80059c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2200      	movs	r2, #0
 80059d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059d8:	f043 0220 	orr.w	r2, r3, #32
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2200      	movs	r2, #0
 80059e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80059e8:	2301      	movs	r3, #1
 80059ea:	e023      	b.n	8005a34 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	0c1b      	lsrs	r3, r3, #16
 80059f0:	b2db      	uxtb	r3, r3
 80059f2:	2b01      	cmp	r3, #1
 80059f4:	d10d      	bne.n	8005a12 <I2C_WaitOnFlagUntilTimeout+0xca>
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	695b      	ldr	r3, [r3, #20]
 80059fc:	43da      	mvns	r2, r3
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	4013      	ands	r3, r2
 8005a02:	b29b      	uxth	r3, r3
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	bf0c      	ite	eq
 8005a08:	2301      	moveq	r3, #1
 8005a0a:	2300      	movne	r3, #0
 8005a0c:	b2db      	uxtb	r3, r3
 8005a0e:	461a      	mov	r2, r3
 8005a10:	e00c      	b.n	8005a2c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	699b      	ldr	r3, [r3, #24]
 8005a18:	43da      	mvns	r2, r3
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	4013      	ands	r3, r2
 8005a1e:	b29b      	uxth	r3, r3
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	bf0c      	ite	eq
 8005a24:	2301      	moveq	r3, #1
 8005a26:	2300      	movne	r3, #0
 8005a28:	b2db      	uxtb	r3, r3
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	79fb      	ldrb	r3, [r7, #7]
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	d093      	beq.n	800595a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a32:	2300      	movs	r3, #0
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	3710      	adds	r7, #16
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}

08005a3c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b084      	sub	sp, #16
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	60f8      	str	r0, [r7, #12]
 8005a44:	60b9      	str	r1, [r7, #8]
 8005a46:	607a      	str	r2, [r7, #4]
 8005a48:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005a4a:	e071      	b.n	8005b30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	695b      	ldr	r3, [r3, #20]
 8005a52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a5a:	d123      	bne.n	8005aa4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a6a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005a74:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2220      	movs	r2, #32
 8005a80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	2200      	movs	r2, #0
 8005a88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a90:	f043 0204 	orr.w	r2, r3, #4
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	e067      	b.n	8005b74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005aaa:	d041      	beq.n	8005b30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005aac:	f7fe f966 	bl	8003d7c <HAL_GetTick>
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	1ad3      	subs	r3, r2, r3
 8005ab6:	687a      	ldr	r2, [r7, #4]
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	d302      	bcc.n	8005ac2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d136      	bne.n	8005b30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	0c1b      	lsrs	r3, r3, #16
 8005ac6:	b2db      	uxtb	r3, r3
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d10c      	bne.n	8005ae6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	695b      	ldr	r3, [r3, #20]
 8005ad2:	43da      	mvns	r2, r3
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	4013      	ands	r3, r2
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	bf14      	ite	ne
 8005ade:	2301      	movne	r3, #1
 8005ae0:	2300      	moveq	r3, #0
 8005ae2:	b2db      	uxtb	r3, r3
 8005ae4:	e00b      	b.n	8005afe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	699b      	ldr	r3, [r3, #24]
 8005aec:	43da      	mvns	r2, r3
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	4013      	ands	r3, r2
 8005af2:	b29b      	uxth	r3, r3
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	bf14      	ite	ne
 8005af8:	2301      	movne	r3, #1
 8005afa:	2300      	moveq	r3, #0
 8005afc:	b2db      	uxtb	r3, r3
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d016      	beq.n	8005b30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2200      	movs	r2, #0
 8005b06:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2220      	movs	r2, #32
 8005b0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2200      	movs	r2, #0
 8005b14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b1c:	f043 0220 	orr.w	r2, r3, #32
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2200      	movs	r2, #0
 8005b28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	e021      	b.n	8005b74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	0c1b      	lsrs	r3, r3, #16
 8005b34:	b2db      	uxtb	r3, r3
 8005b36:	2b01      	cmp	r3, #1
 8005b38:	d10c      	bne.n	8005b54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	695b      	ldr	r3, [r3, #20]
 8005b40:	43da      	mvns	r2, r3
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	4013      	ands	r3, r2
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	bf14      	ite	ne
 8005b4c:	2301      	movne	r3, #1
 8005b4e:	2300      	moveq	r3, #0
 8005b50:	b2db      	uxtb	r3, r3
 8005b52:	e00b      	b.n	8005b6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	699b      	ldr	r3, [r3, #24]
 8005b5a:	43da      	mvns	r2, r3
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	4013      	ands	r3, r2
 8005b60:	b29b      	uxth	r3, r3
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	bf14      	ite	ne
 8005b66:	2301      	movne	r3, #1
 8005b68:	2300      	moveq	r3, #0
 8005b6a:	b2db      	uxtb	r3, r3
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	f47f af6d 	bne.w	8005a4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005b72:	2300      	movs	r3, #0
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	3710      	adds	r7, #16
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}

08005b7c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b084      	sub	sp, #16
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	60f8      	str	r0, [r7, #12]
 8005b84:	60b9      	str	r1, [r7, #8]
 8005b86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005b88:	e034      	b.n	8005bf4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005b8a:	68f8      	ldr	r0, [r7, #12]
 8005b8c:	f000 f8e3 	bl	8005d56 <I2C_IsAcknowledgeFailed>
 8005b90:	4603      	mov	r3, r0
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d001      	beq.n	8005b9a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005b96:	2301      	movs	r3, #1
 8005b98:	e034      	b.n	8005c04 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005ba0:	d028      	beq.n	8005bf4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ba2:	f7fe f8eb 	bl	8003d7c <HAL_GetTick>
 8005ba6:	4602      	mov	r2, r0
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	1ad3      	subs	r3, r2, r3
 8005bac:	68ba      	ldr	r2, [r7, #8]
 8005bae:	429a      	cmp	r2, r3
 8005bb0:	d302      	bcc.n	8005bb8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d11d      	bne.n	8005bf4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	695b      	ldr	r3, [r3, #20]
 8005bbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bc2:	2b80      	cmp	r3, #128	@ 0x80
 8005bc4:	d016      	beq.n	8005bf4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2220      	movs	r2, #32
 8005bd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005be0:	f043 0220 	orr.w	r2, r3, #32
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2200      	movs	r2, #0
 8005bec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	e007      	b.n	8005c04 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	695b      	ldr	r3, [r3, #20]
 8005bfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bfe:	2b80      	cmp	r3, #128	@ 0x80
 8005c00:	d1c3      	bne.n	8005b8a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005c02:	2300      	movs	r3, #0
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	3710      	adds	r7, #16
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}

08005c0c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b084      	sub	sp, #16
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	60f8      	str	r0, [r7, #12]
 8005c14:	60b9      	str	r1, [r7, #8]
 8005c16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005c18:	e034      	b.n	8005c84 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005c1a:	68f8      	ldr	r0, [r7, #12]
 8005c1c:	f000 f89b 	bl	8005d56 <I2C_IsAcknowledgeFailed>
 8005c20:	4603      	mov	r3, r0
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d001      	beq.n	8005c2a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	e034      	b.n	8005c94 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005c30:	d028      	beq.n	8005c84 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c32:	f7fe f8a3 	bl	8003d7c <HAL_GetTick>
 8005c36:	4602      	mov	r2, r0
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	1ad3      	subs	r3, r2, r3
 8005c3c:	68ba      	ldr	r2, [r7, #8]
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d302      	bcc.n	8005c48 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d11d      	bne.n	8005c84 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	695b      	ldr	r3, [r3, #20]
 8005c4e:	f003 0304 	and.w	r3, r3, #4
 8005c52:	2b04      	cmp	r3, #4
 8005c54:	d016      	beq.n	8005c84 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2220      	movs	r2, #32
 8005c60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2200      	movs	r2, #0
 8005c68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c70:	f043 0220 	orr.w	r2, r3, #32
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005c80:	2301      	movs	r3, #1
 8005c82:	e007      	b.n	8005c94 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	695b      	ldr	r3, [r3, #20]
 8005c8a:	f003 0304 	and.w	r3, r3, #4
 8005c8e:	2b04      	cmp	r3, #4
 8005c90:	d1c3      	bne.n	8005c1a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005c92:	2300      	movs	r3, #0
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3710      	adds	r7, #16
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}

08005c9c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b084      	sub	sp, #16
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	60f8      	str	r0, [r7, #12]
 8005ca4:	60b9      	str	r1, [r7, #8]
 8005ca6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005ca8:	e049      	b.n	8005d3e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	695b      	ldr	r3, [r3, #20]
 8005cb0:	f003 0310 	and.w	r3, r3, #16
 8005cb4:	2b10      	cmp	r3, #16
 8005cb6:	d119      	bne.n	8005cec <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f06f 0210 	mvn.w	r2, #16
 8005cc0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2220      	movs	r2, #32
 8005ccc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	e030      	b.n	8005d4e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cec:	f7fe f846 	bl	8003d7c <HAL_GetTick>
 8005cf0:	4602      	mov	r2, r0
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	1ad3      	subs	r3, r2, r3
 8005cf6:	68ba      	ldr	r2, [r7, #8]
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	d302      	bcc.n	8005d02 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d11d      	bne.n	8005d3e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	695b      	ldr	r3, [r3, #20]
 8005d08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d0c:	2b40      	cmp	r3, #64	@ 0x40
 8005d0e:	d016      	beq.n	8005d3e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2200      	movs	r2, #0
 8005d14:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2220      	movs	r2, #32
 8005d1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2200      	movs	r2, #0
 8005d22:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d2a:	f043 0220 	orr.w	r2, r3, #32
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2200      	movs	r2, #0
 8005d36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	e007      	b.n	8005d4e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	695b      	ldr	r3, [r3, #20]
 8005d44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d48:	2b40      	cmp	r3, #64	@ 0x40
 8005d4a:	d1ae      	bne.n	8005caa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005d4c:	2300      	movs	r3, #0
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3710      	adds	r7, #16
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}

08005d56 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005d56:	b480      	push	{r7}
 8005d58:	b083      	sub	sp, #12
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	695b      	ldr	r3, [r3, #20]
 8005d64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d6c:	d11b      	bne.n	8005da6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005d76:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2220      	movs	r2, #32
 8005d82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d92:	f043 0204 	orr.w	r2, r3, #4
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005da2:	2301      	movs	r3, #1
 8005da4:	e000      	b.n	8005da8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005da6:	2300      	movs	r3, #0
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	370c      	adds	r7, #12
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr

08005db4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b084      	sub	sp, #16
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d101      	bne.n	8005dc6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	e0bf      	b.n	8005f46 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8005dcc:	b2db      	uxtb	r3, r3
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d106      	bne.n	8005de0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f000 f8ba 	bl	8005f54 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2202      	movs	r2, #2
 8005de4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	699a      	ldr	r2, [r3, #24]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8005df6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	6999      	ldr	r1, [r3, #24]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	685a      	ldr	r2, [r3, #4]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005e0c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	691b      	ldr	r3, [r3, #16]
 8005e12:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	430a      	orrs	r2, r1
 8005e1a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	6899      	ldr	r1, [r3, #8]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681a      	ldr	r2, [r3, #0]
 8005e26:	4b4a      	ldr	r3, [pc, #296]	@ (8005f50 <HAL_LTDC_Init+0x19c>)
 8005e28:	400b      	ands	r3, r1
 8005e2a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	695b      	ldr	r3, [r3, #20]
 8005e30:	041b      	lsls	r3, r3, #16
 8005e32:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	6899      	ldr	r1, [r3, #8]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	699a      	ldr	r2, [r3, #24]
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	431a      	orrs	r2, r3
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	430a      	orrs	r2, r1
 8005e48:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	68d9      	ldr	r1, [r3, #12]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	4b3e      	ldr	r3, [pc, #248]	@ (8005f50 <HAL_LTDC_Init+0x19c>)
 8005e56:	400b      	ands	r3, r1
 8005e58:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	69db      	ldr	r3, [r3, #28]
 8005e5e:	041b      	lsls	r3, r3, #16
 8005e60:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	68d9      	ldr	r1, [r3, #12]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6a1a      	ldr	r2, [r3, #32]
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	431a      	orrs	r2, r3
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	430a      	orrs	r2, r1
 8005e76:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	6919      	ldr	r1, [r3, #16]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	4b33      	ldr	r3, [pc, #204]	@ (8005f50 <HAL_LTDC_Init+0x19c>)
 8005e84:	400b      	ands	r3, r1
 8005e86:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e8c:	041b      	lsls	r3, r3, #16
 8005e8e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	6919      	ldr	r1, [r3, #16]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	431a      	orrs	r2, r3
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	430a      	orrs	r2, r1
 8005ea4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	6959      	ldr	r1, [r3, #20]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681a      	ldr	r2, [r3, #0]
 8005eb0:	4b27      	ldr	r3, [pc, #156]	@ (8005f50 <HAL_LTDC_Init+0x19c>)
 8005eb2:	400b      	ands	r3, r1
 8005eb4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eba:	041b      	lsls	r3, r3, #16
 8005ebc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	6959      	ldr	r1, [r3, #20]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	431a      	orrs	r2, r3
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	430a      	orrs	r2, r1
 8005ed2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005eda:	021b      	lsls	r3, r3, #8
 8005edc:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8005ee4:	041b      	lsls	r3, r3, #16
 8005ee6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8005ef6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005efe:	68ba      	ldr	r2, [r7, #8]
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	4313      	orrs	r3, r2
 8005f04:	687a      	ldr	r2, [r7, #4]
 8005f06:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8005f0a:	431a      	orrs	r2, r3
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	430a      	orrs	r2, r1
 8005f12:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f042 0206 	orr.w	r2, r2, #6
 8005f22:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	699a      	ldr	r2, [r3, #24]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f042 0201 	orr.w	r2, r2, #1
 8005f32:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2200      	movs	r2, #0
 8005f38:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2201      	movs	r2, #1
 8005f40:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8005f44:	2300      	movs	r3, #0
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3710      	adds	r7, #16
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}
 8005f4e:	bf00      	nop
 8005f50:	f000f800 	.word	0xf000f800

08005f54 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b083      	sub	sp, #12
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 8005f5c:	bf00      	nop
 8005f5e:	370c      	adds	r7, #12
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr

08005f68 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005f68:	b5b0      	push	{r4, r5, r7, lr}
 8005f6a:	b084      	sub	sp, #16
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	60f8      	str	r0, [r7, #12]
 8005f70:	60b9      	str	r1, [r7, #8]
 8005f72:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	d101      	bne.n	8005f82 <HAL_LTDC_ConfigLayer+0x1a>
 8005f7e:	2302      	movs	r3, #2
 8005f80:	e02c      	b.n	8005fdc <HAL_LTDC_ConfigLayer+0x74>
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2201      	movs	r2, #1
 8005f86:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2202      	movs	r2, #2
 8005f8e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005f92:	68fa      	ldr	r2, [r7, #12]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2134      	movs	r1, #52	@ 0x34
 8005f98:	fb01 f303 	mul.w	r3, r1, r3
 8005f9c:	4413      	add	r3, r2
 8005f9e:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	4614      	mov	r4, r2
 8005fa6:	461d      	mov	r5, r3
 8005fa8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005faa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005fac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005fae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005fb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005fb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005fb4:	682b      	ldr	r3, [r5, #0]
 8005fb6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005fb8:	687a      	ldr	r2, [r7, #4]
 8005fba:	68b9      	ldr	r1, [r7, #8]
 8005fbc:	68f8      	ldr	r0, [r7, #12]
 8005fbe:	f000 f83b 	bl	8006038 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2201      	movs	r2, #1
 8005fce:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8005fda:	2300      	movs	r3, #0
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3710      	adds	r7, #16
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bdb0      	pop	{r4, r5, r7, pc}

08005fe4 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b083      	sub	sp, #12
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d101      	bne.n	8005ffa <HAL_LTDC_EnableDither+0x16>
 8005ff6:	2302      	movs	r3, #2
 8005ff8:	e016      	b.n	8006028 <HAL_LTDC_EnableDither+0x44>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2202      	movs	r2, #2
 8006006:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 800600a:	4b0a      	ldr	r3, [pc, #40]	@ (8006034 <HAL_LTDC_EnableDither+0x50>)
 800600c:	699b      	ldr	r3, [r3, #24]
 800600e:	4a09      	ldr	r2, [pc, #36]	@ (8006034 <HAL_LTDC_EnableDither+0x50>)
 8006010:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006014:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2201      	movs	r2, #1
 800601a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2200      	movs	r2, #0
 8006022:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8006026:	2300      	movs	r3, #0
}
 8006028:	4618      	mov	r0, r3
 800602a:	370c      	adds	r7, #12
 800602c:	46bd      	mov	sp, r7
 800602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006032:	4770      	bx	lr
 8006034:	40016800 	.word	0x40016800

08006038 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006038:	b480      	push	{r7}
 800603a:	b089      	sub	sp, #36	@ 0x24
 800603c:	af00      	add	r7, sp, #0
 800603e:	60f8      	str	r0, [r7, #12]
 8006040:	60b9      	str	r1, [r7, #8]
 8006042:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	685a      	ldr	r2, [r3, #4]
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	68db      	ldr	r3, [r3, #12]
 800604e:	0c1b      	lsrs	r3, r3, #16
 8006050:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006054:	4413      	add	r3, r2
 8006056:	041b      	lsls	r3, r3, #16
 8006058:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	461a      	mov	r2, r3
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	01db      	lsls	r3, r3, #7
 8006064:	4413      	add	r3, r2
 8006066:	3384      	adds	r3, #132	@ 0x84
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	68fa      	ldr	r2, [r7, #12]
 800606c:	6812      	ldr	r2, [r2, #0]
 800606e:	4611      	mov	r1, r2
 8006070:	687a      	ldr	r2, [r7, #4]
 8006072:	01d2      	lsls	r2, r2, #7
 8006074:	440a      	add	r2, r1
 8006076:	3284      	adds	r2, #132	@ 0x84
 8006078:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800607c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	68db      	ldr	r3, [r3, #12]
 8006088:	0c1b      	lsrs	r3, r3, #16
 800608a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800608e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006090:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4619      	mov	r1, r3
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	01db      	lsls	r3, r3, #7
 800609c:	440b      	add	r3, r1
 800609e:	3384      	adds	r3, #132	@ 0x84
 80060a0:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80060a2:	69fb      	ldr	r3, [r7, #28]
 80060a4:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80060a6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	68da      	ldr	r2, [r3, #12]
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	68db      	ldr	r3, [r3, #12]
 80060b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80060b6:	4413      	add	r3, r2
 80060b8:	041b      	lsls	r3, r3, #16
 80060ba:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	461a      	mov	r2, r3
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	01db      	lsls	r3, r3, #7
 80060c6:	4413      	add	r3, r2
 80060c8:	3384      	adds	r3, #132	@ 0x84
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	68fa      	ldr	r2, [r7, #12]
 80060ce:	6812      	ldr	r2, [r2, #0]
 80060d0:	4611      	mov	r1, r2
 80060d2:	687a      	ldr	r2, [r7, #4]
 80060d4:	01d2      	lsls	r2, r2, #7
 80060d6:	440a      	add	r2, r1
 80060d8:	3284      	adds	r2, #132	@ 0x84
 80060da:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80060de:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	689a      	ldr	r2, [r3, #8]
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	68db      	ldr	r3, [r3, #12]
 80060ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80060ee:	4413      	add	r3, r2
 80060f0:	1c5a      	adds	r2, r3, #1
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4619      	mov	r1, r3
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	01db      	lsls	r3, r3, #7
 80060fc:	440b      	add	r3, r1
 80060fe:	3384      	adds	r3, #132	@ 0x84
 8006100:	4619      	mov	r1, r3
 8006102:	69fb      	ldr	r3, [r7, #28]
 8006104:	4313      	orrs	r3, r2
 8006106:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	461a      	mov	r2, r3
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	01db      	lsls	r3, r3, #7
 8006112:	4413      	add	r3, r2
 8006114:	3384      	adds	r3, #132	@ 0x84
 8006116:	691b      	ldr	r3, [r3, #16]
 8006118:	68fa      	ldr	r2, [r7, #12]
 800611a:	6812      	ldr	r2, [r2, #0]
 800611c:	4611      	mov	r1, r2
 800611e:	687a      	ldr	r2, [r7, #4]
 8006120:	01d2      	lsls	r2, r2, #7
 8006122:	440a      	add	r2, r1
 8006124:	3284      	adds	r2, #132	@ 0x84
 8006126:	f023 0307 	bic.w	r3, r3, #7
 800612a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	461a      	mov	r2, r3
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	01db      	lsls	r3, r3, #7
 8006136:	4413      	add	r3, r2
 8006138:	3384      	adds	r3, #132	@ 0x84
 800613a:	461a      	mov	r2, r3
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	691b      	ldr	r3, [r3, #16]
 8006140:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006148:	021b      	lsls	r3, r3, #8
 800614a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8006152:	041b      	lsls	r3, r3, #16
 8006154:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	699b      	ldr	r3, [r3, #24]
 800615a:	061b      	lsls	r3, r3, #24
 800615c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	461a      	mov	r2, r3
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	01db      	lsls	r3, r3, #7
 8006168:	4413      	add	r3, r2
 800616a:	3384      	adds	r3, #132	@ 0x84
 800616c:	699b      	ldr	r3, [r3, #24]
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	461a      	mov	r2, r3
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	01db      	lsls	r3, r3, #7
 8006178:	4413      	add	r3, r2
 800617a:	3384      	adds	r3, #132	@ 0x84
 800617c:	461a      	mov	r2, r3
 800617e:	2300      	movs	r3, #0
 8006180:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006188:	461a      	mov	r2, r3
 800618a:	69fb      	ldr	r3, [r7, #28]
 800618c:	431a      	orrs	r2, r3
 800618e:	69bb      	ldr	r3, [r7, #24]
 8006190:	431a      	orrs	r2, r3
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4619      	mov	r1, r3
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	01db      	lsls	r3, r3, #7
 800619c:	440b      	add	r3, r1
 800619e:	3384      	adds	r3, #132	@ 0x84
 80061a0:	4619      	mov	r1, r3
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	4313      	orrs	r3, r2
 80061a6:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	461a      	mov	r2, r3
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	01db      	lsls	r3, r3, #7
 80061b2:	4413      	add	r3, r2
 80061b4:	3384      	adds	r3, #132	@ 0x84
 80061b6:	695b      	ldr	r3, [r3, #20]
 80061b8:	68fa      	ldr	r2, [r7, #12]
 80061ba:	6812      	ldr	r2, [r2, #0]
 80061bc:	4611      	mov	r1, r2
 80061be:	687a      	ldr	r2, [r7, #4]
 80061c0:	01d2      	lsls	r2, r2, #7
 80061c2:	440a      	add	r2, r1
 80061c4:	3284      	adds	r2, #132	@ 0x84
 80061c6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80061ca:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	461a      	mov	r2, r3
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	01db      	lsls	r3, r3, #7
 80061d6:	4413      	add	r3, r2
 80061d8:	3384      	adds	r3, #132	@ 0x84
 80061da:	461a      	mov	r2, r3
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	695b      	ldr	r3, [r3, #20]
 80061e0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	461a      	mov	r2, r3
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	01db      	lsls	r3, r3, #7
 80061ec:	4413      	add	r3, r2
 80061ee:	3384      	adds	r3, #132	@ 0x84
 80061f0:	69db      	ldr	r3, [r3, #28]
 80061f2:	68fa      	ldr	r2, [r7, #12]
 80061f4:	6812      	ldr	r2, [r2, #0]
 80061f6:	4611      	mov	r1, r2
 80061f8:	687a      	ldr	r2, [r7, #4]
 80061fa:	01d2      	lsls	r2, r2, #7
 80061fc:	440a      	add	r2, r1
 80061fe:	3284      	adds	r2, #132	@ 0x84
 8006200:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8006204:	f023 0307 	bic.w	r3, r3, #7
 8006208:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	69da      	ldr	r2, [r3, #28]
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	6a1b      	ldr	r3, [r3, #32]
 8006212:	68f9      	ldr	r1, [r7, #12]
 8006214:	6809      	ldr	r1, [r1, #0]
 8006216:	4608      	mov	r0, r1
 8006218:	6879      	ldr	r1, [r7, #4]
 800621a:	01c9      	lsls	r1, r1, #7
 800621c:	4401      	add	r1, r0
 800621e:	3184      	adds	r1, #132	@ 0x84
 8006220:	4313      	orrs	r3, r2
 8006222:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	461a      	mov	r2, r3
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	01db      	lsls	r3, r3, #7
 800622e:	4413      	add	r3, r2
 8006230:	3384      	adds	r3, #132	@ 0x84
 8006232:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	461a      	mov	r2, r3
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	01db      	lsls	r3, r3, #7
 800623e:	4413      	add	r3, r2
 8006240:	3384      	adds	r3, #132	@ 0x84
 8006242:	461a      	mov	r2, r3
 8006244:	2300      	movs	r3, #0
 8006246:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	461a      	mov	r2, r3
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	01db      	lsls	r3, r3, #7
 8006252:	4413      	add	r3, r2
 8006254:	3384      	adds	r3, #132	@ 0x84
 8006256:	461a      	mov	r2, r3
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800625c:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	691b      	ldr	r3, [r3, #16]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d102      	bne.n	800626c <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8006266:	2304      	movs	r3, #4
 8006268:	61fb      	str	r3, [r7, #28]
 800626a:	e01b      	b.n	80062a4 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	691b      	ldr	r3, [r3, #16]
 8006270:	2b01      	cmp	r3, #1
 8006272:	d102      	bne.n	800627a <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8006274:	2303      	movs	r3, #3
 8006276:	61fb      	str	r3, [r7, #28]
 8006278:	e014      	b.n	80062a4 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	691b      	ldr	r3, [r3, #16]
 800627e:	2b04      	cmp	r3, #4
 8006280:	d00b      	beq.n	800629a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006286:	2b02      	cmp	r3, #2
 8006288:	d007      	beq.n	800629a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800628e:	2b03      	cmp	r3, #3
 8006290:	d003      	beq.n	800629a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006296:	2b07      	cmp	r3, #7
 8006298:	d102      	bne.n	80062a0 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800629a:	2302      	movs	r3, #2
 800629c:	61fb      	str	r3, [r7, #28]
 800629e:	e001      	b.n	80062a4 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80062a0:	2301      	movs	r3, #1
 80062a2:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	461a      	mov	r2, r3
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	01db      	lsls	r3, r3, #7
 80062ae:	4413      	add	r3, r2
 80062b0:	3384      	adds	r3, #132	@ 0x84
 80062b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062b4:	68fa      	ldr	r2, [r7, #12]
 80062b6:	6812      	ldr	r2, [r2, #0]
 80062b8:	4611      	mov	r1, r2
 80062ba:	687a      	ldr	r2, [r7, #4]
 80062bc:	01d2      	lsls	r2, r2, #7
 80062be:	440a      	add	r2, r1
 80062c0:	3284      	adds	r2, #132	@ 0x84
 80062c2:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 80062c6:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062cc:	69fa      	ldr	r2, [r7, #28]
 80062ce:	fb02 f303 	mul.w	r3, r2, r3
 80062d2:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	6859      	ldr	r1, [r3, #4]
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	1acb      	subs	r3, r1, r3
 80062de:	69f9      	ldr	r1, [r7, #28]
 80062e0:	fb01 f303 	mul.w	r3, r1, r3
 80062e4:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80062e6:	68f9      	ldr	r1, [r7, #12]
 80062e8:	6809      	ldr	r1, [r1, #0]
 80062ea:	4608      	mov	r0, r1
 80062ec:	6879      	ldr	r1, [r7, #4]
 80062ee:	01c9      	lsls	r1, r1, #7
 80062f0:	4401      	add	r1, r0
 80062f2:	3184      	adds	r1, #132	@ 0x84
 80062f4:	4313      	orrs	r3, r2
 80062f6:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	461a      	mov	r2, r3
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	01db      	lsls	r3, r3, #7
 8006302:	4413      	add	r3, r2
 8006304:	3384      	adds	r3, #132	@ 0x84
 8006306:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006308:	68fa      	ldr	r2, [r7, #12]
 800630a:	6812      	ldr	r2, [r2, #0]
 800630c:	4611      	mov	r1, r2
 800630e:	687a      	ldr	r2, [r7, #4]
 8006310:	01d2      	lsls	r2, r2, #7
 8006312:	440a      	add	r2, r1
 8006314:	3284      	adds	r2, #132	@ 0x84
 8006316:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800631a:	f023 0307 	bic.w	r3, r3, #7
 800631e:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	461a      	mov	r2, r3
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	01db      	lsls	r3, r3, #7
 800632a:	4413      	add	r3, r2
 800632c:	3384      	adds	r3, #132	@ 0x84
 800632e:	461a      	mov	r2, r3
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006334:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	461a      	mov	r2, r3
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	01db      	lsls	r3, r3, #7
 8006340:	4413      	add	r3, r2
 8006342:	3384      	adds	r3, #132	@ 0x84
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	68fa      	ldr	r2, [r7, #12]
 8006348:	6812      	ldr	r2, [r2, #0]
 800634a:	4611      	mov	r1, r2
 800634c:	687a      	ldr	r2, [r7, #4]
 800634e:	01d2      	lsls	r2, r2, #7
 8006350:	440a      	add	r2, r1
 8006352:	3284      	adds	r2, #132	@ 0x84
 8006354:	f043 0301 	orr.w	r3, r3, #1
 8006358:	6013      	str	r3, [r2, #0]
}
 800635a:	bf00      	nop
 800635c:	3724      	adds	r7, #36	@ 0x24
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr
	...

08006368 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b082      	sub	sp, #8
 800636c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800636e:	2300      	movs	r3, #0
 8006370:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006372:	2300      	movs	r3, #0
 8006374:	603b      	str	r3, [r7, #0]
 8006376:	4b20      	ldr	r3, [pc, #128]	@ (80063f8 <HAL_PWREx_EnableOverDrive+0x90>)
 8006378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800637a:	4a1f      	ldr	r2, [pc, #124]	@ (80063f8 <HAL_PWREx_EnableOverDrive+0x90>)
 800637c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006380:	6413      	str	r3, [r2, #64]	@ 0x40
 8006382:	4b1d      	ldr	r3, [pc, #116]	@ (80063f8 <HAL_PWREx_EnableOverDrive+0x90>)
 8006384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006386:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800638a:	603b      	str	r3, [r7, #0]
 800638c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800638e:	4b1b      	ldr	r3, [pc, #108]	@ (80063fc <HAL_PWREx_EnableOverDrive+0x94>)
 8006390:	2201      	movs	r2, #1
 8006392:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006394:	f7fd fcf2 	bl	8003d7c <HAL_GetTick>
 8006398:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800639a:	e009      	b.n	80063b0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800639c:	f7fd fcee 	bl	8003d7c <HAL_GetTick>
 80063a0:	4602      	mov	r2, r0
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	1ad3      	subs	r3, r2, r3
 80063a6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80063aa:	d901      	bls.n	80063b0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80063ac:	2303      	movs	r3, #3
 80063ae:	e01f      	b.n	80063f0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80063b0:	4b13      	ldr	r3, [pc, #76]	@ (8006400 <HAL_PWREx_EnableOverDrive+0x98>)
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80063b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063bc:	d1ee      	bne.n	800639c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80063be:	4b11      	ldr	r3, [pc, #68]	@ (8006404 <HAL_PWREx_EnableOverDrive+0x9c>)
 80063c0:	2201      	movs	r2, #1
 80063c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80063c4:	f7fd fcda 	bl	8003d7c <HAL_GetTick>
 80063c8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80063ca:	e009      	b.n	80063e0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80063cc:	f7fd fcd6 	bl	8003d7c <HAL_GetTick>
 80063d0:	4602      	mov	r2, r0
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	1ad3      	subs	r3, r2, r3
 80063d6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80063da:	d901      	bls.n	80063e0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80063dc:	2303      	movs	r3, #3
 80063de:	e007      	b.n	80063f0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80063e0:	4b07      	ldr	r3, [pc, #28]	@ (8006400 <HAL_PWREx_EnableOverDrive+0x98>)
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80063ec:	d1ee      	bne.n	80063cc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80063ee:	2300      	movs	r3, #0
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	3708      	adds	r7, #8
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}
 80063f8:	40023800 	.word	0x40023800
 80063fc:	420e0040 	.word	0x420e0040
 8006400:	40007000 	.word	0x40007000
 8006404:	420e0044 	.word	0x420e0044

08006408 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b086      	sub	sp, #24
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d101      	bne.n	800641a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006416:	2301      	movs	r3, #1
 8006418:	e267      	b.n	80068ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f003 0301 	and.w	r3, r3, #1
 8006422:	2b00      	cmp	r3, #0
 8006424:	d075      	beq.n	8006512 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006426:	4b88      	ldr	r3, [pc, #544]	@ (8006648 <HAL_RCC_OscConfig+0x240>)
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	f003 030c 	and.w	r3, r3, #12
 800642e:	2b04      	cmp	r3, #4
 8006430:	d00c      	beq.n	800644c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006432:	4b85      	ldr	r3, [pc, #532]	@ (8006648 <HAL_RCC_OscConfig+0x240>)
 8006434:	689b      	ldr	r3, [r3, #8]
 8006436:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800643a:	2b08      	cmp	r3, #8
 800643c:	d112      	bne.n	8006464 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800643e:	4b82      	ldr	r3, [pc, #520]	@ (8006648 <HAL_RCC_OscConfig+0x240>)
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006446:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800644a:	d10b      	bne.n	8006464 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800644c:	4b7e      	ldr	r3, [pc, #504]	@ (8006648 <HAL_RCC_OscConfig+0x240>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006454:	2b00      	cmp	r3, #0
 8006456:	d05b      	beq.n	8006510 <HAL_RCC_OscConfig+0x108>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d157      	bne.n	8006510 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006460:	2301      	movs	r3, #1
 8006462:	e242      	b.n	80068ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800646c:	d106      	bne.n	800647c <HAL_RCC_OscConfig+0x74>
 800646e:	4b76      	ldr	r3, [pc, #472]	@ (8006648 <HAL_RCC_OscConfig+0x240>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a75      	ldr	r2, [pc, #468]	@ (8006648 <HAL_RCC_OscConfig+0x240>)
 8006474:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006478:	6013      	str	r3, [r2, #0]
 800647a:	e01d      	b.n	80064b8 <HAL_RCC_OscConfig+0xb0>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006484:	d10c      	bne.n	80064a0 <HAL_RCC_OscConfig+0x98>
 8006486:	4b70      	ldr	r3, [pc, #448]	@ (8006648 <HAL_RCC_OscConfig+0x240>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a6f      	ldr	r2, [pc, #444]	@ (8006648 <HAL_RCC_OscConfig+0x240>)
 800648c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006490:	6013      	str	r3, [r2, #0]
 8006492:	4b6d      	ldr	r3, [pc, #436]	@ (8006648 <HAL_RCC_OscConfig+0x240>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a6c      	ldr	r2, [pc, #432]	@ (8006648 <HAL_RCC_OscConfig+0x240>)
 8006498:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800649c:	6013      	str	r3, [r2, #0]
 800649e:	e00b      	b.n	80064b8 <HAL_RCC_OscConfig+0xb0>
 80064a0:	4b69      	ldr	r3, [pc, #420]	@ (8006648 <HAL_RCC_OscConfig+0x240>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a68      	ldr	r2, [pc, #416]	@ (8006648 <HAL_RCC_OscConfig+0x240>)
 80064a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80064aa:	6013      	str	r3, [r2, #0]
 80064ac:	4b66      	ldr	r3, [pc, #408]	@ (8006648 <HAL_RCC_OscConfig+0x240>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a65      	ldr	r2, [pc, #404]	@ (8006648 <HAL_RCC_OscConfig+0x240>)
 80064b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80064b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d013      	beq.n	80064e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064c0:	f7fd fc5c 	bl	8003d7c <HAL_GetTick>
 80064c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064c6:	e008      	b.n	80064da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80064c8:	f7fd fc58 	bl	8003d7c <HAL_GetTick>
 80064cc:	4602      	mov	r2, r0
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	1ad3      	subs	r3, r2, r3
 80064d2:	2b64      	cmp	r3, #100	@ 0x64
 80064d4:	d901      	bls.n	80064da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80064d6:	2303      	movs	r3, #3
 80064d8:	e207      	b.n	80068ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064da:	4b5b      	ldr	r3, [pc, #364]	@ (8006648 <HAL_RCC_OscConfig+0x240>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d0f0      	beq.n	80064c8 <HAL_RCC_OscConfig+0xc0>
 80064e6:	e014      	b.n	8006512 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064e8:	f7fd fc48 	bl	8003d7c <HAL_GetTick>
 80064ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80064ee:	e008      	b.n	8006502 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80064f0:	f7fd fc44 	bl	8003d7c <HAL_GetTick>
 80064f4:	4602      	mov	r2, r0
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	1ad3      	subs	r3, r2, r3
 80064fa:	2b64      	cmp	r3, #100	@ 0x64
 80064fc:	d901      	bls.n	8006502 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80064fe:	2303      	movs	r3, #3
 8006500:	e1f3      	b.n	80068ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006502:	4b51      	ldr	r3, [pc, #324]	@ (8006648 <HAL_RCC_OscConfig+0x240>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800650a:	2b00      	cmp	r3, #0
 800650c:	d1f0      	bne.n	80064f0 <HAL_RCC_OscConfig+0xe8>
 800650e:	e000      	b.n	8006512 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006510:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f003 0302 	and.w	r3, r3, #2
 800651a:	2b00      	cmp	r3, #0
 800651c:	d063      	beq.n	80065e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800651e:	4b4a      	ldr	r3, [pc, #296]	@ (8006648 <HAL_RCC_OscConfig+0x240>)
 8006520:	689b      	ldr	r3, [r3, #8]
 8006522:	f003 030c 	and.w	r3, r3, #12
 8006526:	2b00      	cmp	r3, #0
 8006528:	d00b      	beq.n	8006542 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800652a:	4b47      	ldr	r3, [pc, #284]	@ (8006648 <HAL_RCC_OscConfig+0x240>)
 800652c:	689b      	ldr	r3, [r3, #8]
 800652e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006532:	2b08      	cmp	r3, #8
 8006534:	d11c      	bne.n	8006570 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006536:	4b44      	ldr	r3, [pc, #272]	@ (8006648 <HAL_RCC_OscConfig+0x240>)
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800653e:	2b00      	cmp	r3, #0
 8006540:	d116      	bne.n	8006570 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006542:	4b41      	ldr	r3, [pc, #260]	@ (8006648 <HAL_RCC_OscConfig+0x240>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f003 0302 	and.w	r3, r3, #2
 800654a:	2b00      	cmp	r3, #0
 800654c:	d005      	beq.n	800655a <HAL_RCC_OscConfig+0x152>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	68db      	ldr	r3, [r3, #12]
 8006552:	2b01      	cmp	r3, #1
 8006554:	d001      	beq.n	800655a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006556:	2301      	movs	r3, #1
 8006558:	e1c7      	b.n	80068ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800655a:	4b3b      	ldr	r3, [pc, #236]	@ (8006648 <HAL_RCC_OscConfig+0x240>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	691b      	ldr	r3, [r3, #16]
 8006566:	00db      	lsls	r3, r3, #3
 8006568:	4937      	ldr	r1, [pc, #220]	@ (8006648 <HAL_RCC_OscConfig+0x240>)
 800656a:	4313      	orrs	r3, r2
 800656c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800656e:	e03a      	b.n	80065e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	68db      	ldr	r3, [r3, #12]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d020      	beq.n	80065ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006578:	4b34      	ldr	r3, [pc, #208]	@ (800664c <HAL_RCC_OscConfig+0x244>)
 800657a:	2201      	movs	r2, #1
 800657c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800657e:	f7fd fbfd 	bl	8003d7c <HAL_GetTick>
 8006582:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006584:	e008      	b.n	8006598 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006586:	f7fd fbf9 	bl	8003d7c <HAL_GetTick>
 800658a:	4602      	mov	r2, r0
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	1ad3      	subs	r3, r2, r3
 8006590:	2b02      	cmp	r3, #2
 8006592:	d901      	bls.n	8006598 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006594:	2303      	movs	r3, #3
 8006596:	e1a8      	b.n	80068ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006598:	4b2b      	ldr	r3, [pc, #172]	@ (8006648 <HAL_RCC_OscConfig+0x240>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f003 0302 	and.w	r3, r3, #2
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d0f0      	beq.n	8006586 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065a4:	4b28      	ldr	r3, [pc, #160]	@ (8006648 <HAL_RCC_OscConfig+0x240>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	691b      	ldr	r3, [r3, #16]
 80065b0:	00db      	lsls	r3, r3, #3
 80065b2:	4925      	ldr	r1, [pc, #148]	@ (8006648 <HAL_RCC_OscConfig+0x240>)
 80065b4:	4313      	orrs	r3, r2
 80065b6:	600b      	str	r3, [r1, #0]
 80065b8:	e015      	b.n	80065e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80065ba:	4b24      	ldr	r3, [pc, #144]	@ (800664c <HAL_RCC_OscConfig+0x244>)
 80065bc:	2200      	movs	r2, #0
 80065be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065c0:	f7fd fbdc 	bl	8003d7c <HAL_GetTick>
 80065c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80065c6:	e008      	b.n	80065da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80065c8:	f7fd fbd8 	bl	8003d7c <HAL_GetTick>
 80065cc:	4602      	mov	r2, r0
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	1ad3      	subs	r3, r2, r3
 80065d2:	2b02      	cmp	r3, #2
 80065d4:	d901      	bls.n	80065da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80065d6:	2303      	movs	r3, #3
 80065d8:	e187      	b.n	80068ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80065da:	4b1b      	ldr	r3, [pc, #108]	@ (8006648 <HAL_RCC_OscConfig+0x240>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f003 0302 	and.w	r3, r3, #2
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d1f0      	bne.n	80065c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f003 0308 	and.w	r3, r3, #8
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d036      	beq.n	8006660 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	695b      	ldr	r3, [r3, #20]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d016      	beq.n	8006628 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80065fa:	4b15      	ldr	r3, [pc, #84]	@ (8006650 <HAL_RCC_OscConfig+0x248>)
 80065fc:	2201      	movs	r2, #1
 80065fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006600:	f7fd fbbc 	bl	8003d7c <HAL_GetTick>
 8006604:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006606:	e008      	b.n	800661a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006608:	f7fd fbb8 	bl	8003d7c <HAL_GetTick>
 800660c:	4602      	mov	r2, r0
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	1ad3      	subs	r3, r2, r3
 8006612:	2b02      	cmp	r3, #2
 8006614:	d901      	bls.n	800661a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006616:	2303      	movs	r3, #3
 8006618:	e167      	b.n	80068ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800661a:	4b0b      	ldr	r3, [pc, #44]	@ (8006648 <HAL_RCC_OscConfig+0x240>)
 800661c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800661e:	f003 0302 	and.w	r3, r3, #2
 8006622:	2b00      	cmp	r3, #0
 8006624:	d0f0      	beq.n	8006608 <HAL_RCC_OscConfig+0x200>
 8006626:	e01b      	b.n	8006660 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006628:	4b09      	ldr	r3, [pc, #36]	@ (8006650 <HAL_RCC_OscConfig+0x248>)
 800662a:	2200      	movs	r2, #0
 800662c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800662e:	f7fd fba5 	bl	8003d7c <HAL_GetTick>
 8006632:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006634:	e00e      	b.n	8006654 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006636:	f7fd fba1 	bl	8003d7c <HAL_GetTick>
 800663a:	4602      	mov	r2, r0
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	1ad3      	subs	r3, r2, r3
 8006640:	2b02      	cmp	r3, #2
 8006642:	d907      	bls.n	8006654 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006644:	2303      	movs	r3, #3
 8006646:	e150      	b.n	80068ea <HAL_RCC_OscConfig+0x4e2>
 8006648:	40023800 	.word	0x40023800
 800664c:	42470000 	.word	0x42470000
 8006650:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006654:	4b88      	ldr	r3, [pc, #544]	@ (8006878 <HAL_RCC_OscConfig+0x470>)
 8006656:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006658:	f003 0302 	and.w	r3, r3, #2
 800665c:	2b00      	cmp	r3, #0
 800665e:	d1ea      	bne.n	8006636 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f003 0304 	and.w	r3, r3, #4
 8006668:	2b00      	cmp	r3, #0
 800666a:	f000 8097 	beq.w	800679c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800666e:	2300      	movs	r3, #0
 8006670:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006672:	4b81      	ldr	r3, [pc, #516]	@ (8006878 <HAL_RCC_OscConfig+0x470>)
 8006674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006676:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800667a:	2b00      	cmp	r3, #0
 800667c:	d10f      	bne.n	800669e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800667e:	2300      	movs	r3, #0
 8006680:	60bb      	str	r3, [r7, #8]
 8006682:	4b7d      	ldr	r3, [pc, #500]	@ (8006878 <HAL_RCC_OscConfig+0x470>)
 8006684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006686:	4a7c      	ldr	r2, [pc, #496]	@ (8006878 <HAL_RCC_OscConfig+0x470>)
 8006688:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800668c:	6413      	str	r3, [r2, #64]	@ 0x40
 800668e:	4b7a      	ldr	r3, [pc, #488]	@ (8006878 <HAL_RCC_OscConfig+0x470>)
 8006690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006692:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006696:	60bb      	str	r3, [r7, #8]
 8006698:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800669a:	2301      	movs	r3, #1
 800669c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800669e:	4b77      	ldr	r3, [pc, #476]	@ (800687c <HAL_RCC_OscConfig+0x474>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d118      	bne.n	80066dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80066aa:	4b74      	ldr	r3, [pc, #464]	@ (800687c <HAL_RCC_OscConfig+0x474>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a73      	ldr	r2, [pc, #460]	@ (800687c <HAL_RCC_OscConfig+0x474>)
 80066b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80066b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80066b6:	f7fd fb61 	bl	8003d7c <HAL_GetTick>
 80066ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066bc:	e008      	b.n	80066d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80066be:	f7fd fb5d 	bl	8003d7c <HAL_GetTick>
 80066c2:	4602      	mov	r2, r0
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	1ad3      	subs	r3, r2, r3
 80066c8:	2b02      	cmp	r3, #2
 80066ca:	d901      	bls.n	80066d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80066cc:	2303      	movs	r3, #3
 80066ce:	e10c      	b.n	80068ea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066d0:	4b6a      	ldr	r3, [pc, #424]	@ (800687c <HAL_RCC_OscConfig+0x474>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d0f0      	beq.n	80066be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	689b      	ldr	r3, [r3, #8]
 80066e0:	2b01      	cmp	r3, #1
 80066e2:	d106      	bne.n	80066f2 <HAL_RCC_OscConfig+0x2ea>
 80066e4:	4b64      	ldr	r3, [pc, #400]	@ (8006878 <HAL_RCC_OscConfig+0x470>)
 80066e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066e8:	4a63      	ldr	r2, [pc, #396]	@ (8006878 <HAL_RCC_OscConfig+0x470>)
 80066ea:	f043 0301 	orr.w	r3, r3, #1
 80066ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80066f0:	e01c      	b.n	800672c <HAL_RCC_OscConfig+0x324>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	689b      	ldr	r3, [r3, #8]
 80066f6:	2b05      	cmp	r3, #5
 80066f8:	d10c      	bne.n	8006714 <HAL_RCC_OscConfig+0x30c>
 80066fa:	4b5f      	ldr	r3, [pc, #380]	@ (8006878 <HAL_RCC_OscConfig+0x470>)
 80066fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066fe:	4a5e      	ldr	r2, [pc, #376]	@ (8006878 <HAL_RCC_OscConfig+0x470>)
 8006700:	f043 0304 	orr.w	r3, r3, #4
 8006704:	6713      	str	r3, [r2, #112]	@ 0x70
 8006706:	4b5c      	ldr	r3, [pc, #368]	@ (8006878 <HAL_RCC_OscConfig+0x470>)
 8006708:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800670a:	4a5b      	ldr	r2, [pc, #364]	@ (8006878 <HAL_RCC_OscConfig+0x470>)
 800670c:	f043 0301 	orr.w	r3, r3, #1
 8006710:	6713      	str	r3, [r2, #112]	@ 0x70
 8006712:	e00b      	b.n	800672c <HAL_RCC_OscConfig+0x324>
 8006714:	4b58      	ldr	r3, [pc, #352]	@ (8006878 <HAL_RCC_OscConfig+0x470>)
 8006716:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006718:	4a57      	ldr	r2, [pc, #348]	@ (8006878 <HAL_RCC_OscConfig+0x470>)
 800671a:	f023 0301 	bic.w	r3, r3, #1
 800671e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006720:	4b55      	ldr	r3, [pc, #340]	@ (8006878 <HAL_RCC_OscConfig+0x470>)
 8006722:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006724:	4a54      	ldr	r2, [pc, #336]	@ (8006878 <HAL_RCC_OscConfig+0x470>)
 8006726:	f023 0304 	bic.w	r3, r3, #4
 800672a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	689b      	ldr	r3, [r3, #8]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d015      	beq.n	8006760 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006734:	f7fd fb22 	bl	8003d7c <HAL_GetTick>
 8006738:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800673a:	e00a      	b.n	8006752 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800673c:	f7fd fb1e 	bl	8003d7c <HAL_GetTick>
 8006740:	4602      	mov	r2, r0
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	1ad3      	subs	r3, r2, r3
 8006746:	f241 3288 	movw	r2, #5000	@ 0x1388
 800674a:	4293      	cmp	r3, r2
 800674c:	d901      	bls.n	8006752 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800674e:	2303      	movs	r3, #3
 8006750:	e0cb      	b.n	80068ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006752:	4b49      	ldr	r3, [pc, #292]	@ (8006878 <HAL_RCC_OscConfig+0x470>)
 8006754:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006756:	f003 0302 	and.w	r3, r3, #2
 800675a:	2b00      	cmp	r3, #0
 800675c:	d0ee      	beq.n	800673c <HAL_RCC_OscConfig+0x334>
 800675e:	e014      	b.n	800678a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006760:	f7fd fb0c 	bl	8003d7c <HAL_GetTick>
 8006764:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006766:	e00a      	b.n	800677e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006768:	f7fd fb08 	bl	8003d7c <HAL_GetTick>
 800676c:	4602      	mov	r2, r0
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	1ad3      	subs	r3, r2, r3
 8006772:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006776:	4293      	cmp	r3, r2
 8006778:	d901      	bls.n	800677e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800677a:	2303      	movs	r3, #3
 800677c:	e0b5      	b.n	80068ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800677e:	4b3e      	ldr	r3, [pc, #248]	@ (8006878 <HAL_RCC_OscConfig+0x470>)
 8006780:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006782:	f003 0302 	and.w	r3, r3, #2
 8006786:	2b00      	cmp	r3, #0
 8006788:	d1ee      	bne.n	8006768 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800678a:	7dfb      	ldrb	r3, [r7, #23]
 800678c:	2b01      	cmp	r3, #1
 800678e:	d105      	bne.n	800679c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006790:	4b39      	ldr	r3, [pc, #228]	@ (8006878 <HAL_RCC_OscConfig+0x470>)
 8006792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006794:	4a38      	ldr	r2, [pc, #224]	@ (8006878 <HAL_RCC_OscConfig+0x470>)
 8006796:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800679a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	699b      	ldr	r3, [r3, #24]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	f000 80a1 	beq.w	80068e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80067a6:	4b34      	ldr	r3, [pc, #208]	@ (8006878 <HAL_RCC_OscConfig+0x470>)
 80067a8:	689b      	ldr	r3, [r3, #8]
 80067aa:	f003 030c 	and.w	r3, r3, #12
 80067ae:	2b08      	cmp	r3, #8
 80067b0:	d05c      	beq.n	800686c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	699b      	ldr	r3, [r3, #24]
 80067b6:	2b02      	cmp	r3, #2
 80067b8:	d141      	bne.n	800683e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067ba:	4b31      	ldr	r3, [pc, #196]	@ (8006880 <HAL_RCC_OscConfig+0x478>)
 80067bc:	2200      	movs	r2, #0
 80067be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067c0:	f7fd fadc 	bl	8003d7c <HAL_GetTick>
 80067c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067c6:	e008      	b.n	80067da <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80067c8:	f7fd fad8 	bl	8003d7c <HAL_GetTick>
 80067cc:	4602      	mov	r2, r0
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	1ad3      	subs	r3, r2, r3
 80067d2:	2b02      	cmp	r3, #2
 80067d4:	d901      	bls.n	80067da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80067d6:	2303      	movs	r3, #3
 80067d8:	e087      	b.n	80068ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067da:	4b27      	ldr	r3, [pc, #156]	@ (8006878 <HAL_RCC_OscConfig+0x470>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d1f0      	bne.n	80067c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	69da      	ldr	r2, [r3, #28]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6a1b      	ldr	r3, [r3, #32]
 80067ee:	431a      	orrs	r2, r3
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067f4:	019b      	lsls	r3, r3, #6
 80067f6:	431a      	orrs	r2, r3
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067fc:	085b      	lsrs	r3, r3, #1
 80067fe:	3b01      	subs	r3, #1
 8006800:	041b      	lsls	r3, r3, #16
 8006802:	431a      	orrs	r2, r3
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006808:	061b      	lsls	r3, r3, #24
 800680a:	491b      	ldr	r1, [pc, #108]	@ (8006878 <HAL_RCC_OscConfig+0x470>)
 800680c:	4313      	orrs	r3, r2
 800680e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006810:	4b1b      	ldr	r3, [pc, #108]	@ (8006880 <HAL_RCC_OscConfig+0x478>)
 8006812:	2201      	movs	r2, #1
 8006814:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006816:	f7fd fab1 	bl	8003d7c <HAL_GetTick>
 800681a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800681c:	e008      	b.n	8006830 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800681e:	f7fd faad 	bl	8003d7c <HAL_GetTick>
 8006822:	4602      	mov	r2, r0
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	1ad3      	subs	r3, r2, r3
 8006828:	2b02      	cmp	r3, #2
 800682a:	d901      	bls.n	8006830 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800682c:	2303      	movs	r3, #3
 800682e:	e05c      	b.n	80068ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006830:	4b11      	ldr	r3, [pc, #68]	@ (8006878 <HAL_RCC_OscConfig+0x470>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006838:	2b00      	cmp	r3, #0
 800683a:	d0f0      	beq.n	800681e <HAL_RCC_OscConfig+0x416>
 800683c:	e054      	b.n	80068e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800683e:	4b10      	ldr	r3, [pc, #64]	@ (8006880 <HAL_RCC_OscConfig+0x478>)
 8006840:	2200      	movs	r2, #0
 8006842:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006844:	f7fd fa9a 	bl	8003d7c <HAL_GetTick>
 8006848:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800684a:	e008      	b.n	800685e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800684c:	f7fd fa96 	bl	8003d7c <HAL_GetTick>
 8006850:	4602      	mov	r2, r0
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	1ad3      	subs	r3, r2, r3
 8006856:	2b02      	cmp	r3, #2
 8006858:	d901      	bls.n	800685e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800685a:	2303      	movs	r3, #3
 800685c:	e045      	b.n	80068ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800685e:	4b06      	ldr	r3, [pc, #24]	@ (8006878 <HAL_RCC_OscConfig+0x470>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006866:	2b00      	cmp	r3, #0
 8006868:	d1f0      	bne.n	800684c <HAL_RCC_OscConfig+0x444>
 800686a:	e03d      	b.n	80068e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	699b      	ldr	r3, [r3, #24]
 8006870:	2b01      	cmp	r3, #1
 8006872:	d107      	bne.n	8006884 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006874:	2301      	movs	r3, #1
 8006876:	e038      	b.n	80068ea <HAL_RCC_OscConfig+0x4e2>
 8006878:	40023800 	.word	0x40023800
 800687c:	40007000 	.word	0x40007000
 8006880:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006884:	4b1b      	ldr	r3, [pc, #108]	@ (80068f4 <HAL_RCC_OscConfig+0x4ec>)
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	699b      	ldr	r3, [r3, #24]
 800688e:	2b01      	cmp	r3, #1
 8006890:	d028      	beq.n	80068e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800689c:	429a      	cmp	r2, r3
 800689e:	d121      	bne.n	80068e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068aa:	429a      	cmp	r2, r3
 80068ac:	d11a      	bne.n	80068e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80068ae:	68fa      	ldr	r2, [r7, #12]
 80068b0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80068b4:	4013      	ands	r3, r2
 80068b6:	687a      	ldr	r2, [r7, #4]
 80068b8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80068ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80068bc:	4293      	cmp	r3, r2
 80068be:	d111      	bne.n	80068e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068ca:	085b      	lsrs	r3, r3, #1
 80068cc:	3b01      	subs	r3, #1
 80068ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80068d0:	429a      	cmp	r2, r3
 80068d2:	d107      	bne.n	80068e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80068e0:	429a      	cmp	r2, r3
 80068e2:	d001      	beq.n	80068e8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80068e4:	2301      	movs	r3, #1
 80068e6:	e000      	b.n	80068ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80068e8:	2300      	movs	r3, #0
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	3718      	adds	r7, #24
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}
 80068f2:	bf00      	nop
 80068f4:	40023800 	.word	0x40023800

080068f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b084      	sub	sp, #16
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d101      	bne.n	800690c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006908:	2301      	movs	r3, #1
 800690a:	e0cc      	b.n	8006aa6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800690c:	4b68      	ldr	r3, [pc, #416]	@ (8006ab0 <HAL_RCC_ClockConfig+0x1b8>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f003 030f 	and.w	r3, r3, #15
 8006914:	683a      	ldr	r2, [r7, #0]
 8006916:	429a      	cmp	r2, r3
 8006918:	d90c      	bls.n	8006934 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800691a:	4b65      	ldr	r3, [pc, #404]	@ (8006ab0 <HAL_RCC_ClockConfig+0x1b8>)
 800691c:	683a      	ldr	r2, [r7, #0]
 800691e:	b2d2      	uxtb	r2, r2
 8006920:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006922:	4b63      	ldr	r3, [pc, #396]	@ (8006ab0 <HAL_RCC_ClockConfig+0x1b8>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f003 030f 	and.w	r3, r3, #15
 800692a:	683a      	ldr	r2, [r7, #0]
 800692c:	429a      	cmp	r2, r3
 800692e:	d001      	beq.n	8006934 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006930:	2301      	movs	r3, #1
 8006932:	e0b8      	b.n	8006aa6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f003 0302 	and.w	r3, r3, #2
 800693c:	2b00      	cmp	r3, #0
 800693e:	d020      	beq.n	8006982 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f003 0304 	and.w	r3, r3, #4
 8006948:	2b00      	cmp	r3, #0
 800694a:	d005      	beq.n	8006958 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800694c:	4b59      	ldr	r3, [pc, #356]	@ (8006ab4 <HAL_RCC_ClockConfig+0x1bc>)
 800694e:	689b      	ldr	r3, [r3, #8]
 8006950:	4a58      	ldr	r2, [pc, #352]	@ (8006ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8006952:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006956:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f003 0308 	and.w	r3, r3, #8
 8006960:	2b00      	cmp	r3, #0
 8006962:	d005      	beq.n	8006970 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006964:	4b53      	ldr	r3, [pc, #332]	@ (8006ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8006966:	689b      	ldr	r3, [r3, #8]
 8006968:	4a52      	ldr	r2, [pc, #328]	@ (8006ab4 <HAL_RCC_ClockConfig+0x1bc>)
 800696a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800696e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006970:	4b50      	ldr	r3, [pc, #320]	@ (8006ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8006972:	689b      	ldr	r3, [r3, #8]
 8006974:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	689b      	ldr	r3, [r3, #8]
 800697c:	494d      	ldr	r1, [pc, #308]	@ (8006ab4 <HAL_RCC_ClockConfig+0x1bc>)
 800697e:	4313      	orrs	r3, r2
 8006980:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f003 0301 	and.w	r3, r3, #1
 800698a:	2b00      	cmp	r3, #0
 800698c:	d044      	beq.n	8006a18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	2b01      	cmp	r3, #1
 8006994:	d107      	bne.n	80069a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006996:	4b47      	ldr	r3, [pc, #284]	@ (8006ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d119      	bne.n	80069d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80069a2:	2301      	movs	r3, #1
 80069a4:	e07f      	b.n	8006aa6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	685b      	ldr	r3, [r3, #4]
 80069aa:	2b02      	cmp	r3, #2
 80069ac:	d003      	beq.n	80069b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80069b2:	2b03      	cmp	r3, #3
 80069b4:	d107      	bne.n	80069c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069b6:	4b3f      	ldr	r3, [pc, #252]	@ (8006ab4 <HAL_RCC_ClockConfig+0x1bc>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d109      	bne.n	80069d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80069c2:	2301      	movs	r3, #1
 80069c4:	e06f      	b.n	8006aa6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069c6:	4b3b      	ldr	r3, [pc, #236]	@ (8006ab4 <HAL_RCC_ClockConfig+0x1bc>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f003 0302 	and.w	r3, r3, #2
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d101      	bne.n	80069d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80069d2:	2301      	movs	r3, #1
 80069d4:	e067      	b.n	8006aa6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80069d6:	4b37      	ldr	r3, [pc, #220]	@ (8006ab4 <HAL_RCC_ClockConfig+0x1bc>)
 80069d8:	689b      	ldr	r3, [r3, #8]
 80069da:	f023 0203 	bic.w	r2, r3, #3
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	685b      	ldr	r3, [r3, #4]
 80069e2:	4934      	ldr	r1, [pc, #208]	@ (8006ab4 <HAL_RCC_ClockConfig+0x1bc>)
 80069e4:	4313      	orrs	r3, r2
 80069e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80069e8:	f7fd f9c8 	bl	8003d7c <HAL_GetTick>
 80069ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069ee:	e00a      	b.n	8006a06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80069f0:	f7fd f9c4 	bl	8003d7c <HAL_GetTick>
 80069f4:	4602      	mov	r2, r0
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	1ad3      	subs	r3, r2, r3
 80069fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d901      	bls.n	8006a06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006a02:	2303      	movs	r3, #3
 8006a04:	e04f      	b.n	8006aa6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a06:	4b2b      	ldr	r3, [pc, #172]	@ (8006ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8006a08:	689b      	ldr	r3, [r3, #8]
 8006a0a:	f003 020c 	and.w	r2, r3, #12
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	009b      	lsls	r3, r3, #2
 8006a14:	429a      	cmp	r2, r3
 8006a16:	d1eb      	bne.n	80069f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006a18:	4b25      	ldr	r3, [pc, #148]	@ (8006ab0 <HAL_RCC_ClockConfig+0x1b8>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f003 030f 	and.w	r3, r3, #15
 8006a20:	683a      	ldr	r2, [r7, #0]
 8006a22:	429a      	cmp	r2, r3
 8006a24:	d20c      	bcs.n	8006a40 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a26:	4b22      	ldr	r3, [pc, #136]	@ (8006ab0 <HAL_RCC_ClockConfig+0x1b8>)
 8006a28:	683a      	ldr	r2, [r7, #0]
 8006a2a:	b2d2      	uxtb	r2, r2
 8006a2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a2e:	4b20      	ldr	r3, [pc, #128]	@ (8006ab0 <HAL_RCC_ClockConfig+0x1b8>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f003 030f 	and.w	r3, r3, #15
 8006a36:	683a      	ldr	r2, [r7, #0]
 8006a38:	429a      	cmp	r2, r3
 8006a3a:	d001      	beq.n	8006a40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	e032      	b.n	8006aa6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f003 0304 	and.w	r3, r3, #4
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d008      	beq.n	8006a5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006a4c:	4b19      	ldr	r3, [pc, #100]	@ (8006ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8006a4e:	689b      	ldr	r3, [r3, #8]
 8006a50:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	68db      	ldr	r3, [r3, #12]
 8006a58:	4916      	ldr	r1, [pc, #88]	@ (8006ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f003 0308 	and.w	r3, r3, #8
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d009      	beq.n	8006a7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006a6a:	4b12      	ldr	r3, [pc, #72]	@ (8006ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8006a6c:	689b      	ldr	r3, [r3, #8]
 8006a6e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	691b      	ldr	r3, [r3, #16]
 8006a76:	00db      	lsls	r3, r3, #3
 8006a78:	490e      	ldr	r1, [pc, #56]	@ (8006ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006a7e:	f000 f821 	bl	8006ac4 <HAL_RCC_GetSysClockFreq>
 8006a82:	4602      	mov	r2, r0
 8006a84:	4b0b      	ldr	r3, [pc, #44]	@ (8006ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8006a86:	689b      	ldr	r3, [r3, #8]
 8006a88:	091b      	lsrs	r3, r3, #4
 8006a8a:	f003 030f 	and.w	r3, r3, #15
 8006a8e:	490a      	ldr	r1, [pc, #40]	@ (8006ab8 <HAL_RCC_ClockConfig+0x1c0>)
 8006a90:	5ccb      	ldrb	r3, [r1, r3]
 8006a92:	fa22 f303 	lsr.w	r3, r2, r3
 8006a96:	4a09      	ldr	r2, [pc, #36]	@ (8006abc <HAL_RCC_ClockConfig+0x1c4>)
 8006a98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006a9a:	4b09      	ldr	r3, [pc, #36]	@ (8006ac0 <HAL_RCC_ClockConfig+0x1c8>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	f7fd f928 	bl	8003cf4 <HAL_InitTick>

  return HAL_OK;
 8006aa4:	2300      	movs	r3, #0
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	3710      	adds	r7, #16
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}
 8006aae:	bf00      	nop
 8006ab0:	40023c00 	.word	0x40023c00
 8006ab4:	40023800 	.word	0x40023800
 8006ab8:	0800f668 	.word	0x0800f668
 8006abc:	200000d4 	.word	0x200000d4
 8006ac0:	200000d8 	.word	0x200000d8

08006ac4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ac4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ac8:	b094      	sub	sp, #80	@ 0x50
 8006aca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006acc:	2300      	movs	r3, #0
 8006ace:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006ad8:	2300      	movs	r3, #0
 8006ada:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006adc:	4b79      	ldr	r3, [pc, #484]	@ (8006cc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006ade:	689b      	ldr	r3, [r3, #8]
 8006ae0:	f003 030c 	and.w	r3, r3, #12
 8006ae4:	2b08      	cmp	r3, #8
 8006ae6:	d00d      	beq.n	8006b04 <HAL_RCC_GetSysClockFreq+0x40>
 8006ae8:	2b08      	cmp	r3, #8
 8006aea:	f200 80e1 	bhi.w	8006cb0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d002      	beq.n	8006af8 <HAL_RCC_GetSysClockFreq+0x34>
 8006af2:	2b04      	cmp	r3, #4
 8006af4:	d003      	beq.n	8006afe <HAL_RCC_GetSysClockFreq+0x3a>
 8006af6:	e0db      	b.n	8006cb0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006af8:	4b73      	ldr	r3, [pc, #460]	@ (8006cc8 <HAL_RCC_GetSysClockFreq+0x204>)
 8006afa:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8006afc:	e0db      	b.n	8006cb6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006afe:	4b73      	ldr	r3, [pc, #460]	@ (8006ccc <HAL_RCC_GetSysClockFreq+0x208>)
 8006b00:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006b02:	e0d8      	b.n	8006cb6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006b04:	4b6f      	ldr	r3, [pc, #444]	@ (8006cc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006b0c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006b0e:	4b6d      	ldr	r3, [pc, #436]	@ (8006cc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006b10:	685b      	ldr	r3, [r3, #4]
 8006b12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d063      	beq.n	8006be2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006b1a:	4b6a      	ldr	r3, [pc, #424]	@ (8006cc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006b1c:	685b      	ldr	r3, [r3, #4]
 8006b1e:	099b      	lsrs	r3, r3, #6
 8006b20:	2200      	movs	r2, #0
 8006b22:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006b24:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006b26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b2c:	633b      	str	r3, [r7, #48]	@ 0x30
 8006b2e:	2300      	movs	r3, #0
 8006b30:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b32:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006b36:	4622      	mov	r2, r4
 8006b38:	462b      	mov	r3, r5
 8006b3a:	f04f 0000 	mov.w	r0, #0
 8006b3e:	f04f 0100 	mov.w	r1, #0
 8006b42:	0159      	lsls	r1, r3, #5
 8006b44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006b48:	0150      	lsls	r0, r2, #5
 8006b4a:	4602      	mov	r2, r0
 8006b4c:	460b      	mov	r3, r1
 8006b4e:	4621      	mov	r1, r4
 8006b50:	1a51      	subs	r1, r2, r1
 8006b52:	6139      	str	r1, [r7, #16]
 8006b54:	4629      	mov	r1, r5
 8006b56:	eb63 0301 	sbc.w	r3, r3, r1
 8006b5a:	617b      	str	r3, [r7, #20]
 8006b5c:	f04f 0200 	mov.w	r2, #0
 8006b60:	f04f 0300 	mov.w	r3, #0
 8006b64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006b68:	4659      	mov	r1, fp
 8006b6a:	018b      	lsls	r3, r1, #6
 8006b6c:	4651      	mov	r1, sl
 8006b6e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006b72:	4651      	mov	r1, sl
 8006b74:	018a      	lsls	r2, r1, #6
 8006b76:	4651      	mov	r1, sl
 8006b78:	ebb2 0801 	subs.w	r8, r2, r1
 8006b7c:	4659      	mov	r1, fp
 8006b7e:	eb63 0901 	sbc.w	r9, r3, r1
 8006b82:	f04f 0200 	mov.w	r2, #0
 8006b86:	f04f 0300 	mov.w	r3, #0
 8006b8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006b8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006b92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006b96:	4690      	mov	r8, r2
 8006b98:	4699      	mov	r9, r3
 8006b9a:	4623      	mov	r3, r4
 8006b9c:	eb18 0303 	adds.w	r3, r8, r3
 8006ba0:	60bb      	str	r3, [r7, #8]
 8006ba2:	462b      	mov	r3, r5
 8006ba4:	eb49 0303 	adc.w	r3, r9, r3
 8006ba8:	60fb      	str	r3, [r7, #12]
 8006baa:	f04f 0200 	mov.w	r2, #0
 8006bae:	f04f 0300 	mov.w	r3, #0
 8006bb2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006bb6:	4629      	mov	r1, r5
 8006bb8:	024b      	lsls	r3, r1, #9
 8006bba:	4621      	mov	r1, r4
 8006bbc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006bc0:	4621      	mov	r1, r4
 8006bc2:	024a      	lsls	r2, r1, #9
 8006bc4:	4610      	mov	r0, r2
 8006bc6:	4619      	mov	r1, r3
 8006bc8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006bca:	2200      	movs	r2, #0
 8006bcc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006bce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006bd0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006bd4:	f7f9 fb5c 	bl	8000290 <__aeabi_uldivmod>
 8006bd8:	4602      	mov	r2, r0
 8006bda:	460b      	mov	r3, r1
 8006bdc:	4613      	mov	r3, r2
 8006bde:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006be0:	e058      	b.n	8006c94 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006be2:	4b38      	ldr	r3, [pc, #224]	@ (8006cc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006be4:	685b      	ldr	r3, [r3, #4]
 8006be6:	099b      	lsrs	r3, r3, #6
 8006be8:	2200      	movs	r2, #0
 8006bea:	4618      	mov	r0, r3
 8006bec:	4611      	mov	r1, r2
 8006bee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006bf2:	623b      	str	r3, [r7, #32]
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	627b      	str	r3, [r7, #36]	@ 0x24
 8006bf8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006bfc:	4642      	mov	r2, r8
 8006bfe:	464b      	mov	r3, r9
 8006c00:	f04f 0000 	mov.w	r0, #0
 8006c04:	f04f 0100 	mov.w	r1, #0
 8006c08:	0159      	lsls	r1, r3, #5
 8006c0a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006c0e:	0150      	lsls	r0, r2, #5
 8006c10:	4602      	mov	r2, r0
 8006c12:	460b      	mov	r3, r1
 8006c14:	4641      	mov	r1, r8
 8006c16:	ebb2 0a01 	subs.w	sl, r2, r1
 8006c1a:	4649      	mov	r1, r9
 8006c1c:	eb63 0b01 	sbc.w	fp, r3, r1
 8006c20:	f04f 0200 	mov.w	r2, #0
 8006c24:	f04f 0300 	mov.w	r3, #0
 8006c28:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006c2c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006c30:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006c34:	ebb2 040a 	subs.w	r4, r2, sl
 8006c38:	eb63 050b 	sbc.w	r5, r3, fp
 8006c3c:	f04f 0200 	mov.w	r2, #0
 8006c40:	f04f 0300 	mov.w	r3, #0
 8006c44:	00eb      	lsls	r3, r5, #3
 8006c46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006c4a:	00e2      	lsls	r2, r4, #3
 8006c4c:	4614      	mov	r4, r2
 8006c4e:	461d      	mov	r5, r3
 8006c50:	4643      	mov	r3, r8
 8006c52:	18e3      	adds	r3, r4, r3
 8006c54:	603b      	str	r3, [r7, #0]
 8006c56:	464b      	mov	r3, r9
 8006c58:	eb45 0303 	adc.w	r3, r5, r3
 8006c5c:	607b      	str	r3, [r7, #4]
 8006c5e:	f04f 0200 	mov.w	r2, #0
 8006c62:	f04f 0300 	mov.w	r3, #0
 8006c66:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006c6a:	4629      	mov	r1, r5
 8006c6c:	028b      	lsls	r3, r1, #10
 8006c6e:	4621      	mov	r1, r4
 8006c70:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006c74:	4621      	mov	r1, r4
 8006c76:	028a      	lsls	r2, r1, #10
 8006c78:	4610      	mov	r0, r2
 8006c7a:	4619      	mov	r1, r3
 8006c7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c7e:	2200      	movs	r2, #0
 8006c80:	61bb      	str	r3, [r7, #24]
 8006c82:	61fa      	str	r2, [r7, #28]
 8006c84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006c88:	f7f9 fb02 	bl	8000290 <__aeabi_uldivmod>
 8006c8c:	4602      	mov	r2, r0
 8006c8e:	460b      	mov	r3, r1
 8006c90:	4613      	mov	r3, r2
 8006c92:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006c94:	4b0b      	ldr	r3, [pc, #44]	@ (8006cc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	0c1b      	lsrs	r3, r3, #16
 8006c9a:	f003 0303 	and.w	r3, r3, #3
 8006c9e:	3301      	adds	r3, #1
 8006ca0:	005b      	lsls	r3, r3, #1
 8006ca2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8006ca4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006ca6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ca8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006cae:	e002      	b.n	8006cb6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006cb0:	4b05      	ldr	r3, [pc, #20]	@ (8006cc8 <HAL_RCC_GetSysClockFreq+0x204>)
 8006cb2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006cb4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006cb6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	3750      	adds	r7, #80	@ 0x50
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006cc2:	bf00      	nop
 8006cc4:	40023800 	.word	0x40023800
 8006cc8:	00f42400 	.word	0x00f42400
 8006ccc:	007a1200 	.word	0x007a1200

08006cd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006cd4:	4b03      	ldr	r3, [pc, #12]	@ (8006ce4 <HAL_RCC_GetHCLKFreq+0x14>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce0:	4770      	bx	lr
 8006ce2:	bf00      	nop
 8006ce4:	200000d4 	.word	0x200000d4

08006ce8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006cec:	f7ff fff0 	bl	8006cd0 <HAL_RCC_GetHCLKFreq>
 8006cf0:	4602      	mov	r2, r0
 8006cf2:	4b05      	ldr	r3, [pc, #20]	@ (8006d08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006cf4:	689b      	ldr	r3, [r3, #8]
 8006cf6:	0a9b      	lsrs	r3, r3, #10
 8006cf8:	f003 0307 	and.w	r3, r3, #7
 8006cfc:	4903      	ldr	r1, [pc, #12]	@ (8006d0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006cfe:	5ccb      	ldrb	r3, [r1, r3]
 8006d00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	bd80      	pop	{r7, pc}
 8006d08:	40023800 	.word	0x40023800
 8006d0c:	0800f678 	.word	0x0800f678

08006d10 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b086      	sub	sp, #24
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f003 0301 	and.w	r3, r3, #1
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d10b      	bne.n	8006d44 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d105      	bne.n	8006d44 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d075      	beq.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006d44:	4b91      	ldr	r3, [pc, #580]	@ (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006d46:	2200      	movs	r2, #0
 8006d48:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006d4a:	f7fd f817 	bl	8003d7c <HAL_GetTick>
 8006d4e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006d50:	e008      	b.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006d52:	f7fd f813 	bl	8003d7c <HAL_GetTick>
 8006d56:	4602      	mov	r2, r0
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	1ad3      	subs	r3, r2, r3
 8006d5c:	2b02      	cmp	r3, #2
 8006d5e:	d901      	bls.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006d60:	2303      	movs	r3, #3
 8006d62:	e189      	b.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006d64:	4b8a      	ldr	r3, [pc, #552]	@ (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d1f0      	bne.n	8006d52 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f003 0301 	and.w	r3, r3, #1
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d009      	beq.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	019a      	lsls	r2, r3, #6
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	689b      	ldr	r3, [r3, #8]
 8006d86:	071b      	lsls	r3, r3, #28
 8006d88:	4981      	ldr	r1, [pc, #516]	@ (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f003 0302 	and.w	r3, r3, #2
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d01f      	beq.n	8006ddc <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006d9c:	4b7c      	ldr	r3, [pc, #496]	@ (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006d9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006da2:	0f1b      	lsrs	r3, r3, #28
 8006da4:	f003 0307 	and.w	r3, r3, #7
 8006da8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	019a      	lsls	r2, r3, #6
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	68db      	ldr	r3, [r3, #12]
 8006db4:	061b      	lsls	r3, r3, #24
 8006db6:	431a      	orrs	r2, r3
 8006db8:	693b      	ldr	r3, [r7, #16]
 8006dba:	071b      	lsls	r3, r3, #28
 8006dbc:	4974      	ldr	r1, [pc, #464]	@ (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006dc4:	4b72      	ldr	r3, [pc, #456]	@ (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006dc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006dca:	f023 021f 	bic.w	r2, r3, #31
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	69db      	ldr	r3, [r3, #28]
 8006dd2:	3b01      	subs	r3, #1
 8006dd4:	496e      	ldr	r1, [pc, #440]	@ (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d00d      	beq.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	019a      	lsls	r2, r3, #6
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	68db      	ldr	r3, [r3, #12]
 8006df2:	061b      	lsls	r3, r3, #24
 8006df4:	431a      	orrs	r2, r3
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	689b      	ldr	r3, [r3, #8]
 8006dfa:	071b      	lsls	r3, r3, #28
 8006dfc:	4964      	ldr	r1, [pc, #400]	@ (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006e04:	4b61      	ldr	r3, [pc, #388]	@ (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006e06:	2201      	movs	r2, #1
 8006e08:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006e0a:	f7fc ffb7 	bl	8003d7c <HAL_GetTick>
 8006e0e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006e10:	e008      	b.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006e12:	f7fc ffb3 	bl	8003d7c <HAL_GetTick>
 8006e16:	4602      	mov	r2, r0
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	1ad3      	subs	r3, r2, r3
 8006e1c:	2b02      	cmp	r3, #2
 8006e1e:	d901      	bls.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006e20:	2303      	movs	r3, #3
 8006e22:	e129      	b.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006e24:	4b5a      	ldr	r3, [pc, #360]	@ (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d0f0      	beq.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f003 0304 	and.w	r3, r3, #4
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d105      	bne.n	8006e48 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d079      	beq.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006e48:	4b52      	ldr	r3, [pc, #328]	@ (8006f94 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006e4e:	f7fc ff95 	bl	8003d7c <HAL_GetTick>
 8006e52:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006e54:	e008      	b.n	8006e68 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006e56:	f7fc ff91 	bl	8003d7c <HAL_GetTick>
 8006e5a:	4602      	mov	r2, r0
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	1ad3      	subs	r3, r2, r3
 8006e60:	2b02      	cmp	r3, #2
 8006e62:	d901      	bls.n	8006e68 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006e64:	2303      	movs	r3, #3
 8006e66:	e107      	b.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006e68:	4b49      	ldr	r3, [pc, #292]	@ (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006e70:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006e74:	d0ef      	beq.n	8006e56 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f003 0304 	and.w	r3, r3, #4
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d020      	beq.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006e82:	4b43      	ldr	r3, [pc, #268]	@ (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006e84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e88:	0f1b      	lsrs	r3, r3, #28
 8006e8a:	f003 0307 	and.w	r3, r3, #7
 8006e8e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	691b      	ldr	r3, [r3, #16]
 8006e94:	019a      	lsls	r2, r3, #6
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	695b      	ldr	r3, [r3, #20]
 8006e9a:	061b      	lsls	r3, r3, #24
 8006e9c:	431a      	orrs	r2, r3
 8006e9e:	693b      	ldr	r3, [r7, #16]
 8006ea0:	071b      	lsls	r3, r3, #28
 8006ea2:	493b      	ldr	r1, [pc, #236]	@ (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006eaa:	4b39      	ldr	r3, [pc, #228]	@ (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006eac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006eb0:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6a1b      	ldr	r3, [r3, #32]
 8006eb8:	3b01      	subs	r3, #1
 8006eba:	021b      	lsls	r3, r3, #8
 8006ebc:	4934      	ldr	r1, [pc, #208]	@ (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f003 0308 	and.w	r3, r3, #8
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d01e      	beq.n	8006f0e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006ed0:	4b2f      	ldr	r3, [pc, #188]	@ (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ed6:	0e1b      	lsrs	r3, r3, #24
 8006ed8:	f003 030f 	and.w	r3, r3, #15
 8006edc:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	691b      	ldr	r3, [r3, #16]
 8006ee2:	019a      	lsls	r2, r3, #6
 8006ee4:	693b      	ldr	r3, [r7, #16]
 8006ee6:	061b      	lsls	r3, r3, #24
 8006ee8:	431a      	orrs	r2, r3
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	699b      	ldr	r3, [r3, #24]
 8006eee:	071b      	lsls	r3, r3, #28
 8006ef0:	4927      	ldr	r1, [pc, #156]	@ (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006ef2:	4313      	orrs	r3, r2
 8006ef4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006ef8:	4b25      	ldr	r3, [pc, #148]	@ (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006efa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006efe:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f06:	4922      	ldr	r1, [pc, #136]	@ (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006f0e:	4b21      	ldr	r3, [pc, #132]	@ (8006f94 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006f10:	2201      	movs	r2, #1
 8006f12:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006f14:	f7fc ff32 	bl	8003d7c <HAL_GetTick>
 8006f18:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006f1a:	e008      	b.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006f1c:	f7fc ff2e 	bl	8003d7c <HAL_GetTick>
 8006f20:	4602      	mov	r2, r0
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	1ad3      	subs	r3, r2, r3
 8006f26:	2b02      	cmp	r3, #2
 8006f28:	d901      	bls.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006f2a:	2303      	movs	r3, #3
 8006f2c:	e0a4      	b.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006f2e:	4b18      	ldr	r3, [pc, #96]	@ (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006f36:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006f3a:	d1ef      	bne.n	8006f1c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f003 0320 	and.w	r3, r3, #32
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	f000 808b 	beq.w	8007060 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	60fb      	str	r3, [r7, #12]
 8006f4e:	4b10      	ldr	r3, [pc, #64]	@ (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f52:	4a0f      	ldr	r2, [pc, #60]	@ (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006f54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006f58:	6413      	str	r3, [r2, #64]	@ 0x40
 8006f5a:	4b0d      	ldr	r3, [pc, #52]	@ (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f62:	60fb      	str	r3, [r7, #12]
 8006f64:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006f66:	4b0c      	ldr	r3, [pc, #48]	@ (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a0b      	ldr	r2, [pc, #44]	@ (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006f6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f70:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006f72:	f7fc ff03 	bl	8003d7c <HAL_GetTick>
 8006f76:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006f78:	e010      	b.n	8006f9c <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006f7a:	f7fc feff 	bl	8003d7c <HAL_GetTick>
 8006f7e:	4602      	mov	r2, r0
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	1ad3      	subs	r3, r2, r3
 8006f84:	2b02      	cmp	r3, #2
 8006f86:	d909      	bls.n	8006f9c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8006f88:	2303      	movs	r3, #3
 8006f8a:	e075      	b.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8006f8c:	42470068 	.word	0x42470068
 8006f90:	40023800 	.word	0x40023800
 8006f94:	42470070 	.word	0x42470070
 8006f98:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006f9c:	4b38      	ldr	r3, [pc, #224]	@ (8007080 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d0e8      	beq.n	8006f7a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006fa8:	4b36      	ldr	r3, [pc, #216]	@ (8007084 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006faa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006fb0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d02f      	beq.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fbc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006fc0:	693a      	ldr	r2, [r7, #16]
 8006fc2:	429a      	cmp	r2, r3
 8006fc4:	d028      	beq.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006fc6:	4b2f      	ldr	r3, [pc, #188]	@ (8007084 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006fc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006fce:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006fd0:	4b2d      	ldr	r3, [pc, #180]	@ (8007088 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006fd2:	2201      	movs	r2, #1
 8006fd4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006fd6:	4b2c      	ldr	r3, [pc, #176]	@ (8007088 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006fd8:	2200      	movs	r2, #0
 8006fda:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006fdc:	4a29      	ldr	r2, [pc, #164]	@ (8007084 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006fde:	693b      	ldr	r3, [r7, #16]
 8006fe0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006fe2:	4b28      	ldr	r3, [pc, #160]	@ (8007084 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006fe4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fe6:	f003 0301 	and.w	r3, r3, #1
 8006fea:	2b01      	cmp	r3, #1
 8006fec:	d114      	bne.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006fee:	f7fc fec5 	bl	8003d7c <HAL_GetTick>
 8006ff2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ff4:	e00a      	b.n	800700c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ff6:	f7fc fec1 	bl	8003d7c <HAL_GetTick>
 8006ffa:	4602      	mov	r2, r0
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	1ad3      	subs	r3, r2, r3
 8007000:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007004:	4293      	cmp	r3, r2
 8007006:	d901      	bls.n	800700c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8007008:	2303      	movs	r3, #3
 800700a:	e035      	b.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800700c:	4b1d      	ldr	r3, [pc, #116]	@ (8007084 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800700e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007010:	f003 0302 	and.w	r3, r3, #2
 8007014:	2b00      	cmp	r3, #0
 8007016:	d0ee      	beq.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800701c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007020:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007024:	d10d      	bne.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8007026:	4b17      	ldr	r3, [pc, #92]	@ (8007084 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007028:	689b      	ldr	r3, [r3, #8]
 800702a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007032:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8007036:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800703a:	4912      	ldr	r1, [pc, #72]	@ (8007084 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800703c:	4313      	orrs	r3, r2
 800703e:	608b      	str	r3, [r1, #8]
 8007040:	e005      	b.n	800704e <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8007042:	4b10      	ldr	r3, [pc, #64]	@ (8007084 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007044:	689b      	ldr	r3, [r3, #8]
 8007046:	4a0f      	ldr	r2, [pc, #60]	@ (8007084 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007048:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800704c:	6093      	str	r3, [r2, #8]
 800704e:	4b0d      	ldr	r3, [pc, #52]	@ (8007084 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007050:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007056:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800705a:	490a      	ldr	r1, [pc, #40]	@ (8007084 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800705c:	4313      	orrs	r3, r2
 800705e:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f003 0310 	and.w	r3, r3, #16
 8007068:	2b00      	cmp	r3, #0
 800706a:	d004      	beq.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8007072:	4b06      	ldr	r3, [pc, #24]	@ (800708c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8007074:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8007076:	2300      	movs	r3, #0
}
 8007078:	4618      	mov	r0, r3
 800707a:	3718      	adds	r7, #24
 800707c:	46bd      	mov	sp, r7
 800707e:	bd80      	pop	{r7, pc}
 8007080:	40007000 	.word	0x40007000
 8007084:	40023800 	.word	0x40023800
 8007088:	42470e40 	.word	0x42470e40
 800708c:	424711e0 	.word	0x424711e0

08007090 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b082      	sub	sp, #8
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
 8007098:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d101      	bne.n	80070a4 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80070a0:	2301      	movs	r3, #1
 80070a2:	e025      	b.n	80070f0 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80070aa:	b2db      	uxtb	r3, r3
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d106      	bne.n	80070be <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2200      	movs	r2, #0
 80070b4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f000 f81d 	bl	80070f8 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2202      	movs	r2, #2
 80070c2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681a      	ldr	r2, [r3, #0]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	3304      	adds	r3, #4
 80070ce:	4619      	mov	r1, r3
 80070d0:	4610      	mov	r0, r2
 80070d2:	f000 ffd3 	bl	800807c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6818      	ldr	r0, [r3, #0]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	461a      	mov	r2, r3
 80070e0:	6839      	ldr	r1, [r7, #0]
 80070e2:	f001 f828 	bl	8008136 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2201      	movs	r2, #1
 80070ea:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80070ee:	2300      	movs	r3, #0
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	3708      	adds	r7, #8
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}

080070f8 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b083      	sub	sp, #12
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 8007100:	bf00      	nop
 8007102:	370c      	adds	r7, #12
 8007104:	46bd      	mov	sp, r7
 8007106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710a:	4770      	bx	lr

0800710c <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b086      	sub	sp, #24
 8007110:	af00      	add	r7, sp, #0
 8007112:	60f8      	str	r0, [r7, #12]
 8007114:	60b9      	str	r1, [r7, #8]
 8007116:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800711e:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8007120:	7dfb      	ldrb	r3, [r7, #23]
 8007122:	2b02      	cmp	r3, #2
 8007124:	d101      	bne.n	800712a <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8007126:	2302      	movs	r3, #2
 8007128:	e021      	b.n	800716e <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800712a:	7dfb      	ldrb	r3, [r7, #23]
 800712c:	2b01      	cmp	r3, #1
 800712e:	d002      	beq.n	8007136 <HAL_SDRAM_SendCommand+0x2a>
 8007130:	7dfb      	ldrb	r3, [r7, #23]
 8007132:	2b05      	cmp	r3, #5
 8007134:	d118      	bne.n	8007168 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2202      	movs	r2, #2
 800713a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	687a      	ldr	r2, [r7, #4]
 8007144:	68b9      	ldr	r1, [r7, #8]
 8007146:	4618      	mov	r0, r3
 8007148:	f001 f85e 	bl	8008208 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	2b02      	cmp	r3, #2
 8007152:	d104      	bne.n	800715e <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	2205      	movs	r2, #5
 8007158:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800715c:	e006      	b.n	800716c <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2201      	movs	r2, #1
 8007162:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007166:	e001      	b.n	800716c <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8007168:	2301      	movs	r3, #1
 800716a:	e000      	b.n	800716e <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800716c:	2300      	movs	r3, #0
}
 800716e:	4618      	mov	r0, r3
 8007170:	3718      	adds	r7, #24
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}

08007176 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8007176:	b580      	push	{r7, lr}
 8007178:	b082      	sub	sp, #8
 800717a:	af00      	add	r7, sp, #0
 800717c:	6078      	str	r0, [r7, #4]
 800717e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8007186:	b2db      	uxtb	r3, r3
 8007188:	2b02      	cmp	r3, #2
 800718a:	d101      	bne.n	8007190 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800718c:	2302      	movs	r3, #2
 800718e:	e016      	b.n	80071be <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8007196:	b2db      	uxtb	r3, r3
 8007198:	2b01      	cmp	r3, #1
 800719a:	d10f      	bne.n	80071bc <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2202      	movs	r2, #2
 80071a0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	6839      	ldr	r1, [r7, #0]
 80071aa:	4618      	mov	r0, r3
 80071ac:	f001 f869 	bl	8008282 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2201      	movs	r2, #1
 80071b4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80071b8:	2300      	movs	r3, #0
 80071ba:	e000      	b.n	80071be <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 80071bc:	2301      	movs	r3, #1
}
 80071be:	4618      	mov	r0, r3
 80071c0:	3708      	adds	r7, #8
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}

080071c6 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80071c6:	b580      	push	{r7, lr}
 80071c8:	b082      	sub	sp, #8
 80071ca:	af00      	add	r7, sp, #0
 80071cc:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d101      	bne.n	80071d8 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80071d4:	2301      	movs	r3, #1
 80071d6:	e083      	b.n	80072e0 <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d108      	bne.n	80071f2 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	685b      	ldr	r3, [r3, #4]
 80071e4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80071e8:	d009      	beq.n	80071fe <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2200      	movs	r2, #0
 80071ee:	61da      	str	r2, [r3, #28]
 80071f0:	e005      	b.n	80071fe <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2200      	movs	r2, #0
 80071f6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2200      	movs	r2, #0
 80071fc:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007204:	b2db      	uxtb	r3, r3
 8007206:	2b00      	cmp	r3, #0
 8007208:	d106      	bne.n	8007218 <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2200      	movs	r2, #0
 800720e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f000 f890 	bl	8007338 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2202      	movs	r2, #2
 800721c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	681a      	ldr	r2, [r3, #0]
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800722e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	689b      	ldr	r3, [r3, #8]
 800723c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007240:	431a      	orrs	r2, r3
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	68db      	ldr	r3, [r3, #12]
 8007246:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800724a:	431a      	orrs	r2, r3
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	691b      	ldr	r3, [r3, #16]
 8007250:	f003 0302 	and.w	r3, r3, #2
 8007254:	431a      	orrs	r2, r3
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	695b      	ldr	r3, [r3, #20]
 800725a:	f003 0301 	and.w	r3, r3, #1
 800725e:	431a      	orrs	r2, r3
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	699b      	ldr	r3, [r3, #24]
 8007264:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007268:	431a      	orrs	r2, r3
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	69db      	ldr	r3, [r3, #28]
 800726e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007272:	431a      	orrs	r2, r3
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6a1b      	ldr	r3, [r3, #32]
 8007278:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800727c:	ea42 0103 	orr.w	r1, r2, r3
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007284:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	430a      	orrs	r2, r1
 800728e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	699b      	ldr	r3, [r3, #24]
 8007294:	0c1b      	lsrs	r3, r3, #16
 8007296:	f003 0104 	and.w	r1, r3, #4
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800729e:	f003 0210 	and.w	r2, r3, #16
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	430a      	orrs	r2, r1
 80072a8:	605a      	str	r2, [r3, #4]

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80072b2:	d105      	bne.n	80072c0 <HAL_SPI_Init+0xfa>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	b292      	uxth	r2, r2
 80072be:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	69da      	ldr	r2, [r3, #28]
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80072ce:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2200      	movs	r2, #0
 80072d4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2201      	movs	r2, #1
 80072da:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80072de:	2300      	movs	r3, #0
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	3708      	adds	r7, #8
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd80      	pop	{r7, pc}

080072e8 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b082      	sub	sp, #8
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d101      	bne.n	80072fa <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80072f6:	2301      	movs	r3, #1
 80072f8:	e01a      	b.n	8007330 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2202      	movs	r2, #2
 80072fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	681a      	ldr	r2, [r3, #0]
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007310:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f000 f81a 	bl	800734c <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2200      	movs	r2, #0
 800731c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2200      	movs	r2, #0
 8007322:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2200      	movs	r2, #0
 800732a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800732e:	2300      	movs	r3, #0
}
 8007330:	4618      	mov	r0, r3
 8007332:	3708      	adds	r7, #8
 8007334:	46bd      	mov	sp, r7
 8007336:	bd80      	pop	{r7, pc}

08007338 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8007338:	b480      	push	{r7}
 800733a:	b083      	sub	sp, #12
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8007340:	bf00      	nop
 8007342:	370c      	adds	r7, #12
 8007344:	46bd      	mov	sp, r7
 8007346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734a:	4770      	bx	lr

0800734c <HAL_SPI_MspDeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 800734c:	b480      	push	{r7}
 800734e:	b083      	sub	sp, #12
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
 8007354:	bf00      	nop
 8007356:	370c      	adds	r7, #12
 8007358:	46bd      	mov	sp, r7
 800735a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735e:	4770      	bx	lr

08007360 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b088      	sub	sp, #32
 8007364:	af00      	add	r7, sp, #0
 8007366:	60f8      	str	r0, [r7, #12]
 8007368:	60b9      	str	r1, [r7, #8]
 800736a:	603b      	str	r3, [r7, #0]
 800736c:	4613      	mov	r3, r2
 800736e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007370:	2300      	movs	r3, #0
 8007372:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800737a:	2b01      	cmp	r3, #1
 800737c:	d101      	bne.n	8007382 <HAL_SPI_Transmit+0x22>
 800737e:	2302      	movs	r3, #2
 8007380:	e14f      	b.n	8007622 <HAL_SPI_Transmit+0x2c2>
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	2201      	movs	r2, #1
 8007386:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800738a:	f7fc fcf7 	bl	8003d7c <HAL_GetTick>
 800738e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007390:	88fb      	ldrh	r3, [r7, #6]
 8007392:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800739a:	b2db      	uxtb	r3, r3
 800739c:	2b01      	cmp	r3, #1
 800739e:	d002      	beq.n	80073a6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80073a0:	2302      	movs	r3, #2
 80073a2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80073a4:	e138      	b.n	8007618 <HAL_SPI_Transmit+0x2b8>
  }

  if ((pData == NULL) || (Size == 0U))
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d002      	beq.n	80073b2 <HAL_SPI_Transmit+0x52>
 80073ac:	88fb      	ldrh	r3, [r7, #6]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d102      	bne.n	80073b8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80073b2:	2301      	movs	r3, #1
 80073b4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80073b6:	e12f      	b.n	8007618 <HAL_SPI_Transmit+0x2b8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	2203      	movs	r2, #3
 80073bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	2200      	movs	r2, #0
 80073c4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	68ba      	ldr	r2, [r7, #8]
 80073ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	88fa      	ldrh	r2, [r7, #6]
 80073d0:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	88fa      	ldrh	r2, [r7, #6]
 80073d6:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	2200      	movs	r2, #0
 80073dc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	2200      	movs	r2, #0
 80073e2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	2200      	movs	r2, #0
 80073e8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	2200      	movs	r2, #0
 80073ee:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	2200      	movs	r2, #0
 80073f4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	689b      	ldr	r3, [r3, #8]
 80073fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80073fe:	d10f      	bne.n	8007420 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	681a      	ldr	r2, [r3, #0]
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800740e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	681a      	ldr	r2, [r3, #0]
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800741e:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007424:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007428:	d10f      	bne.n	800744a <HAL_SPI_Transmit+0xea>
  {
    SPI_RESET_CRC(hspi);
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	681a      	ldr	r2, [r3, #0]
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007438:	601a      	str	r2, [r3, #0]
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	681a      	ldr	r2, [r3, #0]
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007448:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007454:	2b40      	cmp	r3, #64	@ 0x40
 8007456:	d007      	beq.n	8007468 <HAL_SPI_Transmit+0x108>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	681a      	ldr	r2, [r3, #0]
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007466:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	68db      	ldr	r3, [r3, #12]
 800746c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007470:	d14f      	bne.n	8007512 <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	685b      	ldr	r3, [r3, #4]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d002      	beq.n	8007480 <HAL_SPI_Transmit+0x120>
 800747a:	8afb      	ldrh	r3, [r7, #22]
 800747c:	2b01      	cmp	r3, #1
 800747e:	d142      	bne.n	8007506 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007484:	881a      	ldrh	r2, [r3, #0]
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007490:	1c9a      	adds	r2, r3, #2
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800749a:	b29b      	uxth	r3, r3
 800749c:	3b01      	subs	r3, #1
 800749e:	b29a      	uxth	r2, r3
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80074a4:	e02f      	b.n	8007506 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	689b      	ldr	r3, [r3, #8]
 80074ac:	f003 0302 	and.w	r3, r3, #2
 80074b0:	2b02      	cmp	r3, #2
 80074b2:	d112      	bne.n	80074da <HAL_SPI_Transmit+0x17a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074b8:	881a      	ldrh	r2, [r3, #0]
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074c4:	1c9a      	adds	r2, r3, #2
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80074ce:	b29b      	uxth	r3, r3
 80074d0:	3b01      	subs	r3, #1
 80074d2:	b29a      	uxth	r2, r3
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	86da      	strh	r2, [r3, #54]	@ 0x36
 80074d8:	e015      	b.n	8007506 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80074da:	f7fc fc4f 	bl	8003d7c <HAL_GetTick>
 80074de:	4602      	mov	r2, r0
 80074e0:	69bb      	ldr	r3, [r7, #24]
 80074e2:	1ad3      	subs	r3, r2, r3
 80074e4:	683a      	ldr	r2, [r7, #0]
 80074e6:	429a      	cmp	r2, r3
 80074e8:	d803      	bhi.n	80074f2 <HAL_SPI_Transmit+0x192>
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80074f0:	d102      	bne.n	80074f8 <HAL_SPI_Transmit+0x198>
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d106      	bne.n	8007506 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 80074f8:	2303      	movs	r3, #3
 80074fa:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	2201      	movs	r2, #1
 8007500:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8007504:	e088      	b.n	8007618 <HAL_SPI_Transmit+0x2b8>
    while (hspi->TxXferCount > 0U)
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800750a:	b29b      	uxth	r3, r3
 800750c:	2b00      	cmp	r3, #0
 800750e:	d1ca      	bne.n	80074a6 <HAL_SPI_Transmit+0x146>
 8007510:	e050      	b.n	80075b4 <HAL_SPI_Transmit+0x254>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	685b      	ldr	r3, [r3, #4]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d002      	beq.n	8007520 <HAL_SPI_Transmit+0x1c0>
 800751a:	8afb      	ldrh	r3, [r7, #22]
 800751c:	2b01      	cmp	r3, #1
 800751e:	d144      	bne.n	80075aa <HAL_SPI_Transmit+0x24a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	330c      	adds	r3, #12
 800752a:	7812      	ldrb	r2, [r2, #0]
 800752c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007532:	1c5a      	adds	r2, r3, #1
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800753c:	b29b      	uxth	r3, r3
 800753e:	3b01      	subs	r3, #1
 8007540:	b29a      	uxth	r2, r3
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007546:	e030      	b.n	80075aa <HAL_SPI_Transmit+0x24a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	689b      	ldr	r3, [r3, #8]
 800754e:	f003 0302 	and.w	r3, r3, #2
 8007552:	2b02      	cmp	r3, #2
 8007554:	d113      	bne.n	800757e <HAL_SPI_Transmit+0x21e>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	330c      	adds	r3, #12
 8007560:	7812      	ldrb	r2, [r2, #0]
 8007562:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007568:	1c5a      	adds	r2, r3, #1
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007572:	b29b      	uxth	r3, r3
 8007574:	3b01      	subs	r3, #1
 8007576:	b29a      	uxth	r2, r3
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800757c:	e015      	b.n	80075aa <HAL_SPI_Transmit+0x24a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800757e:	f7fc fbfd 	bl	8003d7c <HAL_GetTick>
 8007582:	4602      	mov	r2, r0
 8007584:	69bb      	ldr	r3, [r7, #24]
 8007586:	1ad3      	subs	r3, r2, r3
 8007588:	683a      	ldr	r2, [r7, #0]
 800758a:	429a      	cmp	r2, r3
 800758c:	d803      	bhi.n	8007596 <HAL_SPI_Transmit+0x236>
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007594:	d102      	bne.n	800759c <HAL_SPI_Transmit+0x23c>
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d106      	bne.n	80075aa <HAL_SPI_Transmit+0x24a>
        {
          errorcode = HAL_TIMEOUT;
 800759c:	2303      	movs	r3, #3
 800759e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	2201      	movs	r2, #1
 80075a4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80075a8:	e036      	b.n	8007618 <HAL_SPI_Transmit+0x2b8>
    while (hspi->TxXferCount > 0U)
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80075ae:	b29b      	uxth	r3, r3
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d1c9      	bne.n	8007548 <HAL_SPI_Transmit+0x1e8>
      }
    }
  }
#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80075bc:	d107      	bne.n	80075ce <HAL_SPI_Transmit+0x26e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	681a      	ldr	r2, [r3, #0]
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80075cc:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80075ce:	69ba      	ldr	r2, [r7, #24]
 80075d0:	6839      	ldr	r1, [r7, #0]
 80075d2:	68f8      	ldr	r0, [r7, #12]
 80075d4:	f000 fcfe 	bl	8007fd4 <SPI_EndRxTxTransaction>
 80075d8:	4603      	mov	r3, r0
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d002      	beq.n	80075e4 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	2220      	movs	r2, #32
 80075e2:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	689b      	ldr	r3, [r3, #8]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d10a      	bne.n	8007602 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80075ec:	2300      	movs	r3, #0
 80075ee:	613b      	str	r3, [r7, #16]
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	68db      	ldr	r3, [r3, #12]
 80075f6:	613b      	str	r3, [r7, #16]
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	689b      	ldr	r3, [r3, #8]
 80075fe:	613b      	str	r3, [r7, #16]
 8007600:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007606:	2b00      	cmp	r3, #0
 8007608:	d002      	beq.n	8007610 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 800760a:	2301      	movs	r3, #1
 800760c:	77fb      	strb	r3, [r7, #31]
 800760e:	e003      	b.n	8007618 <HAL_SPI_Transmit+0x2b8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	2201      	movs	r2, #1
 8007614:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	2200      	movs	r2, #0
 800761c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8007620:	7ffb      	ldrb	r3, [r7, #31]
}
 8007622:	4618      	mov	r0, r3
 8007624:	3720      	adds	r7, #32
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}

0800762a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800762a:	b580      	push	{r7, lr}
 800762c:	b08a      	sub	sp, #40	@ 0x28
 800762e:	af02      	add	r7, sp, #8
 8007630:	60f8      	str	r0, [r7, #12]
 8007632:	60b9      	str	r1, [r7, #8]
 8007634:	603b      	str	r3, [r7, #0]
 8007636:	4613      	mov	r3, r2
 8007638:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 800763a:	2300      	movs	r3, #0
 800763c:	617b      	str	r3, [r7, #20]
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800763e:	2300      	movs	r3, #0
 8007640:	77fb      	strb	r3, [r7, #31]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007648:	b2db      	uxtb	r3, r3
 800764a:	2b01      	cmp	r3, #1
 800764c:	d002      	beq.n	8007654 <HAL_SPI_Receive+0x2a>
  {
    errorcode = HAL_BUSY;
 800764e:	2302      	movs	r3, #2
 8007650:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007652:	e173      	b.n	800793c <HAL_SPI_Receive+0x312>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	685b      	ldr	r3, [r3, #4]
 8007658:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800765c:	d112      	bne.n	8007684 <HAL_SPI_Receive+0x5a>
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	689b      	ldr	r3, [r3, #8]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d10e      	bne.n	8007684 <HAL_SPI_Receive+0x5a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	2204      	movs	r2, #4
 800766a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800766e:	88fa      	ldrh	r2, [r7, #6]
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	9300      	str	r3, [sp, #0]
 8007674:	4613      	mov	r3, r2
 8007676:	68ba      	ldr	r2, [r7, #8]
 8007678:	68b9      	ldr	r1, [r7, #8]
 800767a:	68f8      	ldr	r0, [r7, #12]
 800767c:	f000 f967 	bl	800794e <HAL_SPI_TransmitReceive>
 8007680:	4603      	mov	r3, r0
 8007682:	e160      	b.n	8007946 <HAL_SPI_Receive+0x31c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800768a:	2b01      	cmp	r3, #1
 800768c:	d101      	bne.n	8007692 <HAL_SPI_Receive+0x68>
 800768e:	2302      	movs	r3, #2
 8007690:	e159      	b.n	8007946 <HAL_SPI_Receive+0x31c>
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	2201      	movs	r2, #1
 8007696:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800769a:	f7fc fb6f 	bl	8003d7c <HAL_GetTick>
 800769e:	61b8      	str	r0, [r7, #24]

  if ((pData == NULL) || (Size == 0U))
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d002      	beq.n	80076ac <HAL_SPI_Receive+0x82>
 80076a6:	88fb      	ldrh	r3, [r7, #6]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d102      	bne.n	80076b2 <HAL_SPI_Receive+0x88>
  {
    errorcode = HAL_ERROR;
 80076ac:	2301      	movs	r3, #1
 80076ae:	77fb      	strb	r3, [r7, #31]
    goto error;
 80076b0:	e144      	b.n	800793c <HAL_SPI_Receive+0x312>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	2204      	movs	r2, #4
 80076b6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	2200      	movs	r2, #0
 80076be:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	68ba      	ldr	r2, [r7, #8]
 80076c4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	88fa      	ldrh	r2, [r7, #6]
 80076ca:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	88fa      	ldrh	r2, [r7, #6]
 80076d0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	2200      	movs	r2, #0
 80076d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	2200      	movs	r2, #0
 80076dc:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	2200      	movs	r2, #0
 80076e2:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	2200      	movs	r2, #0
 80076e8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	2200      	movs	r2, #0
 80076ee:	645a      	str	r2, [r3, #68]	@ 0x44

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80076f8:	d116      	bne.n	8007728 <HAL_SPI_Receive+0xfe>
  {
    SPI_RESET_CRC(hspi);
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	681a      	ldr	r2, [r3, #0]
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007708:	601a      	str	r2, [r3, #0]
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	681a      	ldr	r2, [r3, #0]
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007718:	601a      	str	r2, [r3, #0]
    /* this is done to handle the CRCNEXT before the latest data */
    hspi->RxXferCount--;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800771e:	b29b      	uxth	r3, r3
 8007720:	3b01      	subs	r3, #1
 8007722:	b29a      	uxth	r2, r3
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	87da      	strh	r2, [r3, #62]	@ 0x3e
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	689b      	ldr	r3, [r3, #8]
 800772c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007730:	d10f      	bne.n	8007752 <HAL_SPI_Receive+0x128>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	681a      	ldr	r2, [r3, #0]
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007740:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	681a      	ldr	r2, [r3, #0]
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007750:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800775c:	2b40      	cmp	r3, #64	@ 0x40
 800775e:	d007      	beq.n	8007770 <HAL_SPI_Receive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	681a      	ldr	r2, [r3, #0]
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800776e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	68db      	ldr	r3, [r3, #12]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d16a      	bne.n	800784e <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007778:	e032      	b.n	80077e0 <HAL_SPI_Receive+0x1b6>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	689b      	ldr	r3, [r3, #8]
 8007780:	f003 0301 	and.w	r3, r3, #1
 8007784:	2b01      	cmp	r3, #1
 8007786:	d115      	bne.n	80077b4 <HAL_SPI_Receive+0x18a>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f103 020c 	add.w	r2, r3, #12
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007794:	7812      	ldrb	r2, [r2, #0]
 8007796:	b2d2      	uxtb	r2, r2
 8007798:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800779e:	1c5a      	adds	r2, r3, #1
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80077a8:	b29b      	uxth	r3, r3
 80077aa:	3b01      	subs	r3, #1
 80077ac:	b29a      	uxth	r2, r3
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80077b2:	e015      	b.n	80077e0 <HAL_SPI_Receive+0x1b6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80077b4:	f7fc fae2 	bl	8003d7c <HAL_GetTick>
 80077b8:	4602      	mov	r2, r0
 80077ba:	69bb      	ldr	r3, [r7, #24]
 80077bc:	1ad3      	subs	r3, r2, r3
 80077be:	683a      	ldr	r2, [r7, #0]
 80077c0:	429a      	cmp	r2, r3
 80077c2:	d803      	bhi.n	80077cc <HAL_SPI_Receive+0x1a2>
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80077ca:	d102      	bne.n	80077d2 <HAL_SPI_Receive+0x1a8>
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d106      	bne.n	80077e0 <HAL_SPI_Receive+0x1b6>
        {
          errorcode = HAL_TIMEOUT;
 80077d2:	2303      	movs	r3, #3
 80077d4:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	2201      	movs	r2, #1
 80077da:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80077de:	e0ad      	b.n	800793c <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0U)
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80077e4:	b29b      	uxth	r3, r3
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d1c7      	bne.n	800777a <HAL_SPI_Receive+0x150>
 80077ea:	e035      	b.n	8007858 <HAL_SPI_Receive+0x22e>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	689b      	ldr	r3, [r3, #8]
 80077f2:	f003 0301 	and.w	r3, r3, #1
 80077f6:	2b01      	cmp	r3, #1
 80077f8:	d113      	bne.n	8007822 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	68da      	ldr	r2, [r3, #12]
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007804:	b292      	uxth	r2, r2
 8007806:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800780c:	1c9a      	adds	r2, r3, #2
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007816:	b29b      	uxth	r3, r3
 8007818:	3b01      	subs	r3, #1
 800781a:	b29a      	uxth	r2, r3
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007820:	e015      	b.n	800784e <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007822:	f7fc faab 	bl	8003d7c <HAL_GetTick>
 8007826:	4602      	mov	r2, r0
 8007828:	69bb      	ldr	r3, [r7, #24]
 800782a:	1ad3      	subs	r3, r2, r3
 800782c:	683a      	ldr	r2, [r7, #0]
 800782e:	429a      	cmp	r2, r3
 8007830:	d803      	bhi.n	800783a <HAL_SPI_Receive+0x210>
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007838:	d102      	bne.n	8007840 <HAL_SPI_Receive+0x216>
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d106      	bne.n	800784e <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8007840:	2303      	movs	r3, #3
 8007842:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	2201      	movs	r2, #1
 8007848:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 800784c:	e076      	b.n	800793c <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0U)
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007852:	b29b      	uxth	r3, r3
 8007854:	2b00      	cmp	r3, #0
 8007856:	d1c9      	bne.n	80077ec <HAL_SPI_Receive+0x1c2>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Handle the CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800785c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007860:	d144      	bne.n	80078ec <HAL_SPI_Receive+0x2c2>
  {
    /* freeze the CRC before the latest data */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	681a      	ldr	r2, [r3, #0]
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007870:	601a      	str	r2, [r3, #0]

    /* Read the latest data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8007872:	69bb      	ldr	r3, [r7, #24]
 8007874:	9300      	str	r3, [sp, #0]
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	2201      	movs	r2, #1
 800787a:	2101      	movs	r1, #1
 800787c:	68f8      	ldr	r0, [r7, #12]
 800787e:	f000 fabb 	bl	8007df8 <SPI_WaitFlagStateUntilTimeout>
 8007882:	4603      	mov	r3, r0
 8007884:	2b00      	cmp	r3, #0
 8007886:	d002      	beq.n	800788e <HAL_SPI_Receive+0x264>
    {
      /* the latest data has not been received */
      errorcode = HAL_TIMEOUT;
 8007888:	2303      	movs	r3, #3
 800788a:	77fb      	strb	r3, [r7, #31]
      goto error;
 800788c:	e056      	b.n	800793c <HAL_SPI_Receive+0x312>
    }

    /* Receive last data in 16 Bit mode */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	68db      	ldr	r3, [r3, #12]
 8007892:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007896:	d107      	bne.n	80078a8 <HAL_SPI_Receive+0x27e>
    {
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	68da      	ldr	r2, [r3, #12]
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078a2:	b292      	uxth	r2, r2
 80078a4:	801a      	strh	r2, [r3, #0]
 80078a6:	e008      	b.n	80078ba <HAL_SPI_Receive+0x290>
    }
    /* Receive last data in 8 Bit mode */
    else
    {
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f103 020c 	add.w	r2, r3, #12
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078b4:	7812      	ldrb	r2, [r2, #0]
 80078b6:	b2d2      	uxtb	r2, r2
 80078b8:	701a      	strb	r2, [r3, #0]
    }

    /* Wait the CRC data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80078ba:	69bb      	ldr	r3, [r7, #24]
 80078bc:	9300      	str	r3, [sp, #0]
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	2201      	movs	r2, #1
 80078c2:	2101      	movs	r1, #1
 80078c4:	68f8      	ldr	r0, [r7, #12]
 80078c6:	f000 fa97 	bl	8007df8 <SPI_WaitFlagStateUntilTimeout>
 80078ca:	4603      	mov	r3, r0
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d008      	beq.n	80078e2 <HAL_SPI_Receive+0x2b8>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078d4:	f043 0202 	orr.w	r2, r3, #2
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	655a      	str	r2, [r3, #84]	@ 0x54
      errorcode = HAL_TIMEOUT;
 80078dc:	2303      	movs	r3, #3
 80078de:	77fb      	strb	r3, [r7, #31]
      goto error;
 80078e0:	e02c      	b.n	800793c <HAL_SPI_Receive+0x312>
    }

    /* Read CRC to Flush DR and RXNE flag */
    tmpreg = READ_REG(hspi->Instance->DR);
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	68db      	ldr	r3, [r3, #12]
 80078e8:	617b      	str	r3, [r7, #20]
    /* To avoid GCC warning */
    UNUSED(tmpreg);
 80078ea:	697b      	ldr	r3, [r7, #20]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80078ec:	69ba      	ldr	r2, [r7, #24]
 80078ee:	6839      	ldr	r1, [r7, #0]
 80078f0:	68f8      	ldr	r0, [r7, #12]
 80078f2:	f000 fb09 	bl	8007f08 <SPI_EndRxTransaction>
 80078f6:	4603      	mov	r3, r0
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d002      	beq.n	8007902 <HAL_SPI_Receive+0x2d8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	2220      	movs	r2, #32
 8007900:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	689b      	ldr	r3, [r3, #8]
 8007908:	f003 0310 	and.w	r3, r3, #16
 800790c:	2b10      	cmp	r3, #16
 800790e:	d10a      	bne.n	8007926 <HAL_SPI_Receive+0x2fc>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007914:	f043 0202 	orr.w	r2, r3, #2
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8007924:	609a      	str	r2, [r3, #8]
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800792a:	2b00      	cmp	r3, #0
 800792c:	d002      	beq.n	8007934 <HAL_SPI_Receive+0x30a>
  {
    errorcode = HAL_ERROR;
 800792e:	2301      	movs	r3, #1
 8007930:	77fb      	strb	r3, [r7, #31]
 8007932:	e003      	b.n	800793c <HAL_SPI_Receive+0x312>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	2201      	movs	r2, #1
 8007938:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	2200      	movs	r2, #0
 8007940:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8007944:	7ffb      	ldrb	r3, [r7, #31]
}
 8007946:	4618      	mov	r0, r3
 8007948:	3720      	adds	r7, #32
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}

0800794e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800794e:	b580      	push	{r7, lr}
 8007950:	b08e      	sub	sp, #56	@ 0x38
 8007952:	af02      	add	r7, sp, #8
 8007954:	60f8      	str	r0, [r7, #12]
 8007956:	60b9      	str	r1, [r7, #8]
 8007958:	607a      	str	r2, [r7, #4]
 800795a:	807b      	strh	r3, [r7, #2]
  uint16_t             initial_TxXferCount;
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 800795c:	2300      	movs	r3, #0
 800795e:	617b      	str	r3, [r7, #20]
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007960:	2301      	movs	r3, #1
 8007962:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007964:	2300      	movs	r3, #0
 8007966:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007970:	2b01      	cmp	r3, #1
 8007972:	d101      	bne.n	8007978 <HAL_SPI_TransmitReceive+0x2a>
 8007974:	2302      	movs	r3, #2
 8007976:	e22c      	b.n	8007dd2 <HAL_SPI_TransmitReceive+0x484>
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	2201      	movs	r2, #1
 800797c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007980:	f7fc f9fc 	bl	8003d7c <HAL_GetTick>
 8007984:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800798c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	685b      	ldr	r3, [r3, #4]
 8007994:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007996:	887b      	ldrh	r3, [r7, #2]
 8007998:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800799a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800799e:	2b01      	cmp	r3, #1
 80079a0:	d00f      	beq.n	80079c2 <HAL_SPI_TransmitReceive+0x74>
 80079a2:	69fb      	ldr	r3, [r7, #28]
 80079a4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80079a8:	d107      	bne.n	80079ba <HAL_SPI_TransmitReceive+0x6c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	689b      	ldr	r3, [r3, #8]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d103      	bne.n	80079ba <HAL_SPI_TransmitReceive+0x6c>
 80079b2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80079b6:	2b04      	cmp	r3, #4
 80079b8:	d003      	beq.n	80079c2 <HAL_SPI_TransmitReceive+0x74>
  {
    errorcode = HAL_BUSY;
 80079ba:	2302      	movs	r3, #2
 80079bc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80079c0:	e201      	b.n	8007dc6 <HAL_SPI_TransmitReceive+0x478>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d005      	beq.n	80079d4 <HAL_SPI_TransmitReceive+0x86>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d002      	beq.n	80079d4 <HAL_SPI_TransmitReceive+0x86>
 80079ce:	887b      	ldrh	r3, [r7, #2]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d103      	bne.n	80079dc <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 80079d4:	2301      	movs	r3, #1
 80079d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80079da:	e1f4      	b.n	8007dc6 <HAL_SPI_TransmitReceive+0x478>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80079e2:	b2db      	uxtb	r3, r3
 80079e4:	2b04      	cmp	r3, #4
 80079e6:	d003      	beq.n	80079f0 <HAL_SPI_TransmitReceive+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	2205      	movs	r2, #5
 80079ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	2200      	movs	r2, #0
 80079f4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	687a      	ldr	r2, [r7, #4]
 80079fa:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	887a      	ldrh	r2, [r7, #2]
 8007a00:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	887a      	ldrh	r2, [r7, #2]
 8007a06:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	68ba      	ldr	r2, [r7, #8]
 8007a0c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	887a      	ldrh	r2, [r7, #2]
 8007a12:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	887a      	ldrh	r2, [r7, #2]
 8007a18:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	2200      	movs	r2, #0
 8007a24:	645a      	str	r2, [r3, #68]	@ 0x44

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a2e:	d10f      	bne.n	8007a50 <HAL_SPI_TransmitReceive+0x102>
  {
    SPI_RESET_CRC(hspi);
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	681a      	ldr	r2, [r3, #0]
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007a3e:	601a      	str	r2, [r3, #0]
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	681a      	ldr	r2, [r3, #0]
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007a4e:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a5a:	2b40      	cmp	r3, #64	@ 0x40
 8007a5c:	d007      	beq.n	8007a6e <HAL_SPI_TransmitReceive+0x120>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	681a      	ldr	r2, [r3, #0]
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007a6c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	68db      	ldr	r3, [r3, #12]
 8007a72:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007a76:	f040 80a2 	bne.w	8007bbe <HAL_SPI_TransmitReceive+0x270>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	685b      	ldr	r3, [r3, #4]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d003      	beq.n	8007a8a <HAL_SPI_TransmitReceive+0x13c>
 8007a82:	8b7b      	ldrh	r3, [r7, #26]
 8007a84:	2b01      	cmp	r3, #1
 8007a86:	f040 808f 	bne.w	8007ba8 <HAL_SPI_TransmitReceive+0x25a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a8e:	881a      	ldrh	r2, [r3, #0]
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a9a:	1c9a      	adds	r2, r3, #2
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007aa4:	b29b      	uxth	r3, r3
 8007aa6:	3b01      	subs	r3, #1
 8007aa8:	b29a      	uxth	r2, r3
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	86da      	strh	r2, [r3, #54]	@ 0x36

#if (USE_SPI_CRC != 0U)
      /* Enable CRC Transmission */
      if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007ab2:	b29b      	uxth	r3, r3
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d177      	bne.n	8007ba8 <HAL_SPI_TransmitReceive+0x25a>
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007abc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ac0:	d172      	bne.n	8007ba8 <HAL_SPI_TransmitReceive+0x25a>
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	681a      	ldr	r2, [r3, #0]
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007ad0:	601a      	str	r2, [r3, #0]
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007ad2:	e069      	b.n	8007ba8 <HAL_SPI_TransmitReceive+0x25a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	689b      	ldr	r3, [r3, #8]
 8007ada:	f003 0302 	and.w	r3, r3, #2
 8007ade:	2b02      	cmp	r3, #2
 8007ae0:	d12d      	bne.n	8007b3e <HAL_SPI_TransmitReceive+0x1f0>
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007ae6:	b29b      	uxth	r3, r3
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d028      	beq.n	8007b3e <HAL_SPI_TransmitReceive+0x1f0>
 8007aec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007aee:	2b01      	cmp	r3, #1
 8007af0:	d125      	bne.n	8007b3e <HAL_SPI_TransmitReceive+0x1f0>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007af6:	881a      	ldrh	r2, [r3, #0]
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b02:	1c9a      	adds	r2, r3, #2
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007b0c:	b29b      	uxth	r3, r3
 8007b0e:	3b01      	subs	r3, #1
 8007b10:	b29a      	uxth	r2, r3
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007b16:	2300      	movs	r3, #0
 8007b18:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007b1e:	b29b      	uxth	r3, r3
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d10c      	bne.n	8007b3e <HAL_SPI_TransmitReceive+0x1f0>
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b28:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007b2c:	d107      	bne.n	8007b3e <HAL_SPI_TransmitReceive+0x1f0>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	681a      	ldr	r2, [r3, #0]
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007b3c:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	689b      	ldr	r3, [r3, #8]
 8007b44:	f003 0301 	and.w	r3, r3, #1
 8007b48:	2b01      	cmp	r3, #1
 8007b4a:	d119      	bne.n	8007b80 <HAL_SPI_TransmitReceive+0x232>
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b50:	b29b      	uxth	r3, r3
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d014      	beq.n	8007b80 <HAL_SPI_TransmitReceive+0x232>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	68da      	ldr	r2, [r3, #12]
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b60:	b292      	uxth	r2, r2
 8007b62:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b68:	1c9a      	adds	r2, r3, #2
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b72:	b29b      	uxth	r3, r3
 8007b74:	3b01      	subs	r3, #1
 8007b76:	b29a      	uxth	r2, r3
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007b80:	f7fc f8fc 	bl	8003d7c <HAL_GetTick>
 8007b84:	4602      	mov	r2, r0
 8007b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b88:	1ad3      	subs	r3, r2, r3
 8007b8a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007b8c:	429a      	cmp	r2, r3
 8007b8e:	d80b      	bhi.n	8007ba8 <HAL_SPI_TransmitReceive+0x25a>
 8007b90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b92:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007b96:	d007      	beq.n	8007ba8 <HAL_SPI_TransmitReceive+0x25a>
      {
        errorcode = HAL_TIMEOUT;
 8007b98:	2303      	movs	r3, #3
 8007b9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	2201      	movs	r2, #1
 8007ba2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8007ba6:	e10e      	b.n	8007dc6 <HAL_SPI_TransmitReceive+0x478>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007bac:	b29b      	uxth	r3, r3
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d190      	bne.n	8007ad4 <HAL_SPI_TransmitReceive+0x186>
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007bb6:	b29b      	uxth	r3, r3
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d18b      	bne.n	8007ad4 <HAL_SPI_TransmitReceive+0x186>
 8007bbc:	e0a5      	b.n	8007d0a <HAL_SPI_TransmitReceive+0x3bc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	685b      	ldr	r3, [r3, #4]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d003      	beq.n	8007bce <HAL_SPI_TransmitReceive+0x280>
 8007bc6:	8b7b      	ldrh	r3, [r7, #26]
 8007bc8:	2b01      	cmp	r3, #1
 8007bca:	f040 8094 	bne.w	8007cf6 <HAL_SPI_TransmitReceive+0x3a8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	330c      	adds	r3, #12
 8007bd8:	7812      	ldrb	r2, [r2, #0]
 8007bda:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007be0:	1c5a      	adds	r2, r3, #1
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007bea:	b29b      	uxth	r3, r3
 8007bec:	3b01      	subs	r3, #1
 8007bee:	b29a      	uxth	r2, r3
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	86da      	strh	r2, [r3, #54]	@ 0x36

#if (USE_SPI_CRC != 0U)
      /* Enable CRC Transmission */
      if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007bf8:	b29b      	uxth	r3, r3
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d17b      	bne.n	8007cf6 <HAL_SPI_TransmitReceive+0x3a8>
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c02:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007c06:	d176      	bne.n	8007cf6 <HAL_SPI_TransmitReceive+0x3a8>
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	681a      	ldr	r2, [r3, #0]
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007c16:	601a      	str	r2, [r3, #0]
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007c18:	e06d      	b.n	8007cf6 <HAL_SPI_TransmitReceive+0x3a8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	689b      	ldr	r3, [r3, #8]
 8007c20:	f003 0302 	and.w	r3, r3, #2
 8007c24:	2b02      	cmp	r3, #2
 8007c26:	d12e      	bne.n	8007c86 <HAL_SPI_TransmitReceive+0x338>
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007c2c:	b29b      	uxth	r3, r3
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d029      	beq.n	8007c86 <HAL_SPI_TransmitReceive+0x338>
 8007c32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c34:	2b01      	cmp	r3, #1
 8007c36:	d126      	bne.n	8007c86 <HAL_SPI_TransmitReceive+0x338>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	330c      	adds	r3, #12
 8007c42:	7812      	ldrb	r2, [r2, #0]
 8007c44:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c4a:	1c5a      	adds	r2, r3, #1
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007c54:	b29b      	uxth	r3, r3
 8007c56:	3b01      	subs	r3, #1
 8007c58:	b29a      	uxth	r2, r3
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007c5e:	2300      	movs	r3, #0
 8007c60:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007c66:	b29b      	uxth	r3, r3
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d10c      	bne.n	8007c86 <HAL_SPI_TransmitReceive+0x338>
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007c74:	d107      	bne.n	8007c86 <HAL_SPI_TransmitReceive+0x338>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	681a      	ldr	r2, [r3, #0]
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007c84:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	689b      	ldr	r3, [r3, #8]
 8007c8c:	f003 0301 	and.w	r3, r3, #1
 8007c90:	2b01      	cmp	r3, #1
 8007c92:	d119      	bne.n	8007cc8 <HAL_SPI_TransmitReceive+0x37a>
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c98:	b29b      	uxth	r3, r3
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d014      	beq.n	8007cc8 <HAL_SPI_TransmitReceive+0x37a>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	68da      	ldr	r2, [r3, #12]
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ca8:	b2d2      	uxtb	r2, r2
 8007caa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cb0:	1c5a      	adds	r2, r3, #1
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007cba:	b29b      	uxth	r3, r3
 8007cbc:	3b01      	subs	r3, #1
 8007cbe:	b29a      	uxth	r2, r3
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007cc4:	2301      	movs	r3, #1
 8007cc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007cc8:	f7fc f858 	bl	8003d7c <HAL_GetTick>
 8007ccc:	4602      	mov	r2, r0
 8007cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cd0:	1ad3      	subs	r3, r2, r3
 8007cd2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007cd4:	429a      	cmp	r2, r3
 8007cd6:	d803      	bhi.n	8007ce0 <HAL_SPI_TransmitReceive+0x392>
 8007cd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cda:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007cde:	d102      	bne.n	8007ce6 <HAL_SPI_TransmitReceive+0x398>
 8007ce0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d107      	bne.n	8007cf6 <HAL_SPI_TransmitReceive+0x3a8>
      {
        errorcode = HAL_TIMEOUT;
 8007ce6:	2303      	movs	r3, #3
 8007ce8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	2201      	movs	r2, #1
 8007cf0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8007cf4:	e067      	b.n	8007dc6 <HAL_SPI_TransmitReceive+0x478>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007cfa:	b29b      	uxth	r3, r3
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d18c      	bne.n	8007c1a <HAL_SPI_TransmitReceive+0x2cc>
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d04:	b29b      	uxth	r3, r3
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d187      	bne.n	8007c1a <HAL_SPI_TransmitReceive+0x2cc>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007d12:	d119      	bne.n	8007d48 <HAL_SPI_TransmitReceive+0x3fa>
  {
    /* Wait until TXE flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8007d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d16:	9300      	str	r3, [sp, #0]
 8007d18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d1a:	2201      	movs	r2, #1
 8007d1c:	2101      	movs	r1, #1
 8007d1e:	68f8      	ldr	r0, [r7, #12]
 8007d20:	f000 f86a 	bl	8007df8 <SPI_WaitFlagStateUntilTimeout>
 8007d24:	4603      	mov	r3, r0
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d009      	beq.n	8007d3e <HAL_SPI_TransmitReceive+0x3f0>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d2e:	f043 0202 	orr.w	r2, r3, #2
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	655a      	str	r2, [r3, #84]	@ 0x54
      errorcode = HAL_TIMEOUT;
 8007d36:	2303      	movs	r3, #3
 8007d38:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
      goto error;
 8007d3c:	e043      	b.n	8007dc6 <HAL_SPI_TransmitReceive+0x478>
    }
    /* Read CRC */
    tmpreg = READ_REG(hspi->Instance->DR);
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	68db      	ldr	r3, [r3, #12]
 8007d44:	617b      	str	r3, [r7, #20]
    /* To avoid GCC warning */
    UNUSED(tmpreg);
 8007d46:	697b      	ldr	r3, [r7, #20]
  }

  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	689b      	ldr	r3, [r3, #8]
 8007d4e:	f003 0310 	and.w	r3, r3, #16
 8007d52:	2b10      	cmp	r3, #16
 8007d54:	d10d      	bne.n	8007d72 <HAL_SPI_TransmitReceive+0x424>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d5a:	f043 0202 	orr.w	r2, r3, #2
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8007d6a:	609a      	str	r2, [r3, #8]

    errorcode = HAL_ERROR;
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007d72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d74:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007d76:	68f8      	ldr	r0, [r7, #12]
 8007d78:	f000 f92c 	bl	8007fd4 <SPI_EndRxTxTransaction>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d006      	beq.n	8007d90 <HAL_SPI_TransmitReceive+0x442>
  {
    errorcode = HAL_ERROR;
 8007d82:	2301      	movs	r3, #1
 8007d84:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	2220      	movs	r2, #32
 8007d8c:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8007d8e:	e01a      	b.n	8007dc6 <HAL_SPI_TransmitReceive+0x478>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	689b      	ldr	r3, [r3, #8]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d10a      	bne.n	8007dae <HAL_SPI_TransmitReceive+0x460>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007d98:	2300      	movs	r3, #0
 8007d9a:	613b      	str	r3, [r7, #16]
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	68db      	ldr	r3, [r3, #12]
 8007da2:	613b      	str	r3, [r7, #16]
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	689b      	ldr	r3, [r3, #8]
 8007daa:	613b      	str	r3, [r7, #16]
 8007dac:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d003      	beq.n	8007dbe <HAL_SPI_TransmitReceive+0x470>
  {
    errorcode = HAL_ERROR;
 8007db6:	2301      	movs	r3, #1
 8007db8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007dbc:	e003      	b.n	8007dc6 <HAL_SPI_TransmitReceive+0x478>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	2201      	movs	r2, #1
 8007dc2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	2200      	movs	r2, #0
 8007dca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8007dce:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	3730      	adds	r7, #48	@ 0x30
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}

08007dda <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8007dda:	b480      	push	{r7}
 8007ddc:	b083      	sub	sp, #12
 8007dde:	af00      	add	r7, sp, #0
 8007de0:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007de8:	b2db      	uxtb	r3, r3
}
 8007dea:	4618      	mov	r0, r3
 8007dec:	370c      	adds	r7, #12
 8007dee:	46bd      	mov	sp, r7
 8007df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df4:	4770      	bx	lr
	...

08007df8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b088      	sub	sp, #32
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	60f8      	str	r0, [r7, #12]
 8007e00:	60b9      	str	r1, [r7, #8]
 8007e02:	603b      	str	r3, [r7, #0]
 8007e04:	4613      	mov	r3, r2
 8007e06:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007e08:	f7fb ffb8 	bl	8003d7c <HAL_GetTick>
 8007e0c:	4602      	mov	r2, r0
 8007e0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e10:	1a9b      	subs	r3, r3, r2
 8007e12:	683a      	ldr	r2, [r7, #0]
 8007e14:	4413      	add	r3, r2
 8007e16:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007e18:	f7fb ffb0 	bl	8003d7c <HAL_GetTick>
 8007e1c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007e1e:	4b39      	ldr	r3, [pc, #228]	@ (8007f04 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	015b      	lsls	r3, r3, #5
 8007e24:	0d1b      	lsrs	r3, r3, #20
 8007e26:	69fa      	ldr	r2, [r7, #28]
 8007e28:	fb02 f303 	mul.w	r3, r2, r3
 8007e2c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007e2e:	e054      	b.n	8007eda <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007e36:	d050      	beq.n	8007eda <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007e38:	f7fb ffa0 	bl	8003d7c <HAL_GetTick>
 8007e3c:	4602      	mov	r2, r0
 8007e3e:	69bb      	ldr	r3, [r7, #24]
 8007e40:	1ad3      	subs	r3, r2, r3
 8007e42:	69fa      	ldr	r2, [r7, #28]
 8007e44:	429a      	cmp	r2, r3
 8007e46:	d902      	bls.n	8007e4e <SPI_WaitFlagStateUntilTimeout+0x56>
 8007e48:	69fb      	ldr	r3, [r7, #28]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d13d      	bne.n	8007eca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	685a      	ldr	r2, [r3, #4]
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007e5c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	685b      	ldr	r3, [r3, #4]
 8007e62:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007e66:	d111      	bne.n	8007e8c <SPI_WaitFlagStateUntilTimeout+0x94>
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	689b      	ldr	r3, [r3, #8]
 8007e6c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007e70:	d004      	beq.n	8007e7c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	689b      	ldr	r3, [r3, #8]
 8007e76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007e7a:	d107      	bne.n	8007e8c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	681a      	ldr	r2, [r3, #0]
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007e8a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e90:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007e94:	d10f      	bne.n	8007eb6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	681a      	ldr	r2, [r3, #0]
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007ea4:	601a      	str	r2, [r3, #0]
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	681a      	ldr	r2, [r3, #0]
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007eb4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	2201      	movs	r2, #1
 8007eba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8007ec6:	2303      	movs	r3, #3
 8007ec8:	e017      	b.n	8007efa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d101      	bne.n	8007ed4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007ed4:	697b      	ldr	r3, [r7, #20]
 8007ed6:	3b01      	subs	r3, #1
 8007ed8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	689a      	ldr	r2, [r3, #8]
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	4013      	ands	r3, r2
 8007ee4:	68ba      	ldr	r2, [r7, #8]
 8007ee6:	429a      	cmp	r2, r3
 8007ee8:	bf0c      	ite	eq
 8007eea:	2301      	moveq	r3, #1
 8007eec:	2300      	movne	r3, #0
 8007eee:	b2db      	uxtb	r3, r3
 8007ef0:	461a      	mov	r2, r3
 8007ef2:	79fb      	ldrb	r3, [r7, #7]
 8007ef4:	429a      	cmp	r2, r3
 8007ef6:	d19b      	bne.n	8007e30 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007ef8:	2300      	movs	r3, #0
}
 8007efa:	4618      	mov	r0, r3
 8007efc:	3720      	adds	r7, #32
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}
 8007f02:	bf00      	nop
 8007f04:	200000d4 	.word	0x200000d4

08007f08 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b086      	sub	sp, #24
 8007f0c:	af02      	add	r7, sp, #8
 8007f0e:	60f8      	str	r0, [r7, #12]
 8007f10:	60b9      	str	r1, [r7, #8]
 8007f12:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	685b      	ldr	r3, [r3, #4]
 8007f18:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007f1c:	d111      	bne.n	8007f42 <SPI_EndRxTransaction+0x3a>
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	689b      	ldr	r3, [r3, #8]
 8007f22:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007f26:	d004      	beq.n	8007f32 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	689b      	ldr	r3, [r3, #8]
 8007f2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f30:	d107      	bne.n	8007f42 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	681a      	ldr	r2, [r3, #0]
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007f40:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	685b      	ldr	r3, [r3, #4]
 8007f46:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007f4a:	d12a      	bne.n	8007fa2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	689b      	ldr	r3, [r3, #8]
 8007f50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f54:	d012      	beq.n	8007f7c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	9300      	str	r3, [sp, #0]
 8007f5a:	68bb      	ldr	r3, [r7, #8]
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	2180      	movs	r1, #128	@ 0x80
 8007f60:	68f8      	ldr	r0, [r7, #12]
 8007f62:	f7ff ff49 	bl	8007df8 <SPI_WaitFlagStateUntilTimeout>
 8007f66:	4603      	mov	r3, r0
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d02d      	beq.n	8007fc8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f70:	f043 0220 	orr.w	r2, r3, #32
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8007f78:	2303      	movs	r3, #3
 8007f7a:	e026      	b.n	8007fca <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	9300      	str	r3, [sp, #0]
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	2200      	movs	r2, #0
 8007f84:	2101      	movs	r1, #1
 8007f86:	68f8      	ldr	r0, [r7, #12]
 8007f88:	f7ff ff36 	bl	8007df8 <SPI_WaitFlagStateUntilTimeout>
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d01a      	beq.n	8007fc8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f96:	f043 0220 	orr.w	r2, r3, #32
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8007f9e:	2303      	movs	r3, #3
 8007fa0:	e013      	b.n	8007fca <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	9300      	str	r3, [sp, #0]
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	2101      	movs	r1, #1
 8007fac:	68f8      	ldr	r0, [r7, #12]
 8007fae:	f7ff ff23 	bl	8007df8 <SPI_WaitFlagStateUntilTimeout>
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d007      	beq.n	8007fc8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fbc:	f043 0220 	orr.w	r2, r3, #32
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007fc4:	2303      	movs	r3, #3
 8007fc6:	e000      	b.n	8007fca <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007fc8:	2300      	movs	r3, #0
}
 8007fca:	4618      	mov	r0, r3
 8007fcc:	3710      	adds	r7, #16
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	bd80      	pop	{r7, pc}
	...

08007fd4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b088      	sub	sp, #32
 8007fd8:	af02      	add	r7, sp, #8
 8007fda:	60f8      	str	r0, [r7, #12]
 8007fdc:	60b9      	str	r1, [r7, #8]
 8007fde:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	9300      	str	r3, [sp, #0]
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	2201      	movs	r2, #1
 8007fe8:	2102      	movs	r1, #2
 8007fea:	68f8      	ldr	r0, [r7, #12]
 8007fec:	f7ff ff04 	bl	8007df8 <SPI_WaitFlagStateUntilTimeout>
 8007ff0:	4603      	mov	r3, r0
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d007      	beq.n	8008006 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ffa:	f043 0220 	orr.w	r2, r3, #32
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8008002:	2303      	movs	r3, #3
 8008004:	e032      	b.n	800806c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008006:	4b1b      	ldr	r3, [pc, #108]	@ (8008074 <SPI_EndRxTxTransaction+0xa0>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	4a1b      	ldr	r2, [pc, #108]	@ (8008078 <SPI_EndRxTxTransaction+0xa4>)
 800800c:	fba2 2303 	umull	r2, r3, r2, r3
 8008010:	0d5b      	lsrs	r3, r3, #21
 8008012:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008016:	fb02 f303 	mul.w	r3, r2, r3
 800801a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	685b      	ldr	r3, [r3, #4]
 8008020:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008024:	d112      	bne.n	800804c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	9300      	str	r3, [sp, #0]
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	2200      	movs	r2, #0
 800802e:	2180      	movs	r1, #128	@ 0x80
 8008030:	68f8      	ldr	r0, [r7, #12]
 8008032:	f7ff fee1 	bl	8007df8 <SPI_WaitFlagStateUntilTimeout>
 8008036:	4603      	mov	r3, r0
 8008038:	2b00      	cmp	r3, #0
 800803a:	d016      	beq.n	800806a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008040:	f043 0220 	orr.w	r2, r3, #32
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8008048:	2303      	movs	r3, #3
 800804a:	e00f      	b.n	800806c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800804c:	697b      	ldr	r3, [r7, #20]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d00a      	beq.n	8008068 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8008052:	697b      	ldr	r3, [r7, #20]
 8008054:	3b01      	subs	r3, #1
 8008056:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	689b      	ldr	r3, [r3, #8]
 800805e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008062:	2b80      	cmp	r3, #128	@ 0x80
 8008064:	d0f2      	beq.n	800804c <SPI_EndRxTxTransaction+0x78>
 8008066:	e000      	b.n	800806a <SPI_EndRxTxTransaction+0x96>
        break;
 8008068:	bf00      	nop
  }

  return HAL_OK;
 800806a:	2300      	movs	r3, #0
}
 800806c:	4618      	mov	r0, r3
 800806e:	3718      	adds	r7, #24
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}
 8008074:	200000d4 	.word	0x200000d4
 8008078:	165e9f81 	.word	0x165e9f81

0800807c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800807c:	b480      	push	{r7}
 800807e:	b083      	sub	sp, #12
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
 8008084:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d123      	bne.n	80080d6 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8008096:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800809a:	683a      	ldr	r2, [r7, #0]
 800809c:	6851      	ldr	r1, [r2, #4]
 800809e:	683a      	ldr	r2, [r7, #0]
 80080a0:	6892      	ldr	r2, [r2, #8]
 80080a2:	4311      	orrs	r1, r2
 80080a4:	683a      	ldr	r2, [r7, #0]
 80080a6:	68d2      	ldr	r2, [r2, #12]
 80080a8:	4311      	orrs	r1, r2
 80080aa:	683a      	ldr	r2, [r7, #0]
 80080ac:	6912      	ldr	r2, [r2, #16]
 80080ae:	4311      	orrs	r1, r2
 80080b0:	683a      	ldr	r2, [r7, #0]
 80080b2:	6952      	ldr	r2, [r2, #20]
 80080b4:	4311      	orrs	r1, r2
 80080b6:	683a      	ldr	r2, [r7, #0]
 80080b8:	6992      	ldr	r2, [r2, #24]
 80080ba:	4311      	orrs	r1, r2
 80080bc:	683a      	ldr	r2, [r7, #0]
 80080be:	69d2      	ldr	r2, [r2, #28]
 80080c0:	4311      	orrs	r1, r2
 80080c2:	683a      	ldr	r2, [r7, #0]
 80080c4:	6a12      	ldr	r2, [r2, #32]
 80080c6:	4311      	orrs	r1, r2
 80080c8:	683a      	ldr	r2, [r7, #0]
 80080ca:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80080cc:	430a      	orrs	r2, r1
 80080ce:	431a      	orrs	r2, r3
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	601a      	str	r2, [r3, #0]
 80080d4:	e028      	b.n	8008128 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	69d9      	ldr	r1, [r3, #28]
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	6a1b      	ldr	r3, [r3, #32]
 80080e6:	4319      	orrs	r1, r3
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080ec:	430b      	orrs	r3, r1
 80080ee:	431a      	orrs	r2, r3
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	685b      	ldr	r3, [r3, #4]
 80080f8:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80080fc:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008100:	683a      	ldr	r2, [r7, #0]
 8008102:	6851      	ldr	r1, [r2, #4]
 8008104:	683a      	ldr	r2, [r7, #0]
 8008106:	6892      	ldr	r2, [r2, #8]
 8008108:	4311      	orrs	r1, r2
 800810a:	683a      	ldr	r2, [r7, #0]
 800810c:	68d2      	ldr	r2, [r2, #12]
 800810e:	4311      	orrs	r1, r2
 8008110:	683a      	ldr	r2, [r7, #0]
 8008112:	6912      	ldr	r2, [r2, #16]
 8008114:	4311      	orrs	r1, r2
 8008116:	683a      	ldr	r2, [r7, #0]
 8008118:	6952      	ldr	r2, [r2, #20]
 800811a:	4311      	orrs	r1, r2
 800811c:	683a      	ldr	r2, [r7, #0]
 800811e:	6992      	ldr	r2, [r2, #24]
 8008120:	430a      	orrs	r2, r1
 8008122:	431a      	orrs	r2, r3
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8008128:	2300      	movs	r3, #0
}
 800812a:	4618      	mov	r0, r3
 800812c:	370c      	adds	r7, #12
 800812e:	46bd      	mov	sp, r7
 8008130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008134:	4770      	bx	lr

08008136 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008136:	b480      	push	{r7}
 8008138:	b085      	sub	sp, #20
 800813a:	af00      	add	r7, sp, #0
 800813c:	60f8      	str	r0, [r7, #12]
 800813e:	60b9      	str	r1, [r7, #8]
 8008140:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d128      	bne.n	800819a <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	689b      	ldr	r3, [r3, #8]
 800814c:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8008150:	68bb      	ldr	r3, [r7, #8]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	1e59      	subs	r1, r3, #1
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	685b      	ldr	r3, [r3, #4]
 800815a:	3b01      	subs	r3, #1
 800815c:	011b      	lsls	r3, r3, #4
 800815e:	4319      	orrs	r1, r3
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	689b      	ldr	r3, [r3, #8]
 8008164:	3b01      	subs	r3, #1
 8008166:	021b      	lsls	r3, r3, #8
 8008168:	4319      	orrs	r1, r3
 800816a:	68bb      	ldr	r3, [r7, #8]
 800816c:	68db      	ldr	r3, [r3, #12]
 800816e:	3b01      	subs	r3, #1
 8008170:	031b      	lsls	r3, r3, #12
 8008172:	4319      	orrs	r1, r3
 8008174:	68bb      	ldr	r3, [r7, #8]
 8008176:	691b      	ldr	r3, [r3, #16]
 8008178:	3b01      	subs	r3, #1
 800817a:	041b      	lsls	r3, r3, #16
 800817c:	4319      	orrs	r1, r3
 800817e:	68bb      	ldr	r3, [r7, #8]
 8008180:	695b      	ldr	r3, [r3, #20]
 8008182:	3b01      	subs	r3, #1
 8008184:	051b      	lsls	r3, r3, #20
 8008186:	4319      	orrs	r1, r3
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	699b      	ldr	r3, [r3, #24]
 800818c:	3b01      	subs	r3, #1
 800818e:	061b      	lsls	r3, r3, #24
 8008190:	430b      	orrs	r3, r1
 8008192:	431a      	orrs	r2, r3
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	609a      	str	r2, [r3, #8]
 8008198:	e02f      	b.n	80081fa <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	689b      	ldr	r3, [r3, #8]
 800819e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80081a2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80081a6:	68ba      	ldr	r2, [r7, #8]
 80081a8:	68d2      	ldr	r2, [r2, #12]
 80081aa:	3a01      	subs	r2, #1
 80081ac:	0311      	lsls	r1, r2, #12
 80081ae:	68ba      	ldr	r2, [r7, #8]
 80081b0:	6952      	ldr	r2, [r2, #20]
 80081b2:	3a01      	subs	r2, #1
 80081b4:	0512      	lsls	r2, r2, #20
 80081b6:	430a      	orrs	r2, r1
 80081b8:	431a      	orrs	r2, r3
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	68db      	ldr	r3, [r3, #12]
 80081c2:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	1e59      	subs	r1, r3, #1
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	685b      	ldr	r3, [r3, #4]
 80081d0:	3b01      	subs	r3, #1
 80081d2:	011b      	lsls	r3, r3, #4
 80081d4:	4319      	orrs	r1, r3
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	689b      	ldr	r3, [r3, #8]
 80081da:	3b01      	subs	r3, #1
 80081dc:	021b      	lsls	r3, r3, #8
 80081de:	4319      	orrs	r1, r3
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	691b      	ldr	r3, [r3, #16]
 80081e4:	3b01      	subs	r3, #1
 80081e6:	041b      	lsls	r3, r3, #16
 80081e8:	4319      	orrs	r1, r3
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	699b      	ldr	r3, [r3, #24]
 80081ee:	3b01      	subs	r3, #1
 80081f0:	061b      	lsls	r3, r3, #24
 80081f2:	430b      	orrs	r3, r1
 80081f4:	431a      	orrs	r2, r3
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 80081fa:	2300      	movs	r3, #0
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	3714      	adds	r7, #20
 8008200:	46bd      	mov	sp, r7
 8008202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008206:	4770      	bx	lr

08008208 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b086      	sub	sp, #24
 800820c:	af00      	add	r7, sp, #0
 800820e:	60f8      	str	r0, [r7, #12]
 8008210:	60b9      	str	r1, [r7, #8]
 8008212:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8008214:	2300      	movs	r3, #0
 8008216:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	691b      	ldr	r3, [r3, #16]
 800821c:	0d9b      	lsrs	r3, r3, #22
 800821e:	059b      	lsls	r3, r3, #22
 8008220:	68ba      	ldr	r2, [r7, #8]
 8008222:	6811      	ldr	r1, [r2, #0]
 8008224:	68ba      	ldr	r2, [r7, #8]
 8008226:	6852      	ldr	r2, [r2, #4]
 8008228:	4311      	orrs	r1, r2
 800822a:	68ba      	ldr	r2, [r7, #8]
 800822c:	6892      	ldr	r2, [r2, #8]
 800822e:	3a01      	subs	r2, #1
 8008230:	0152      	lsls	r2, r2, #5
 8008232:	4311      	orrs	r1, r2
 8008234:	68ba      	ldr	r2, [r7, #8]
 8008236:	68d2      	ldr	r2, [r2, #12]
 8008238:	0252      	lsls	r2, r2, #9
 800823a:	430a      	orrs	r2, r1
 800823c:	431a      	orrs	r2, r3
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 8008242:	f7fb fd9b 	bl	8003d7c <HAL_GetTick>
 8008246:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8008248:	e010      	b.n	800826c <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008250:	d00c      	beq.n	800826c <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d007      	beq.n	8008268 <FMC_SDRAM_SendCommand+0x60>
 8008258:	f7fb fd90 	bl	8003d7c <HAL_GetTick>
 800825c:	4602      	mov	r2, r0
 800825e:	697b      	ldr	r3, [r7, #20]
 8008260:	1ad3      	subs	r3, r2, r3
 8008262:	687a      	ldr	r2, [r7, #4]
 8008264:	429a      	cmp	r2, r3
 8008266:	d201      	bcs.n	800826c <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 8008268:	2303      	movs	r3, #3
 800826a:	e006      	b.n	800827a <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	699b      	ldr	r3, [r3, #24]
 8008270:	f003 0320 	and.w	r3, r3, #32
 8008274:	2b20      	cmp	r3, #32
 8008276:	d0e8      	beq.n	800824a <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 8008278:	2300      	movs	r3, #0
}
 800827a:	4618      	mov	r0, r3
 800827c:	3718      	adds	r7, #24
 800827e:	46bd      	mov	sp, r7
 8008280:	bd80      	pop	{r7, pc}

08008282 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8008282:	b480      	push	{r7}
 8008284:	b083      	sub	sp, #12
 8008286:	af00      	add	r7, sp, #0
 8008288:	6078      	str	r0, [r7, #4]
 800828a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	695b      	ldr	r3, [r3, #20]
 8008290:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8008294:	f023 033e 	bic.w	r3, r3, #62	@ 0x3e
 8008298:	683a      	ldr	r2, [r7, #0]
 800829a:	0052      	lsls	r2, r2, #1
 800829c:	431a      	orrs	r2, r3
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80082a2:	2300      	movs	r3, #0
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	370c      	adds	r7, #12
 80082a8:	46bd      	mov	sp, r7
 80082aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ae:	4770      	bx	lr

080082b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80082b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80082e8 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80082b4:	480d      	ldr	r0, [pc, #52]	@ (80082ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80082b6:	490e      	ldr	r1, [pc, #56]	@ (80082f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80082b8:	4a0e      	ldr	r2, [pc, #56]	@ (80082f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80082ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80082bc:	e002      	b.n	80082c4 <LoopCopyDataInit>

080082be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80082be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80082c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80082c2:	3304      	adds	r3, #4

080082c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80082c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80082c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80082c8:	d3f9      	bcc.n	80082be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80082ca:	4a0b      	ldr	r2, [pc, #44]	@ (80082f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80082cc:	4c0b      	ldr	r4, [pc, #44]	@ (80082fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80082ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80082d0:	e001      	b.n	80082d6 <LoopFillZerobss>

080082d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80082d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80082d4:	3204      	adds	r2, #4

080082d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80082d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80082d8:	d3fb      	bcc.n	80082d2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80082da:	f7fb fcab 	bl	8003c34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80082de:	f002 f9b9 	bl	800a654 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80082e2:	f000 fa8b 	bl	80087fc <main>
  bx  lr    
 80082e6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80082e8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80082ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80082f0:	2000022c 	.word	0x2000022c
  ldr r2, =_sidata
 80082f4:	08011aa4 	.word	0x08011aa4
  ldr r2, =_sbss
 80082f8:	2000022c 	.word	0x2000022c
  ldr r4, =_ebss
 80082fc:	20004310 	.word	0x20004310

08008300 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008300:	e7fe      	b.n	8008300 <ADC_IRQHandler>
	...

08008304 <LCD_demo>:
  * @brief  LCD demo
  * @param  None
  * @retval None
  */
void LCD_demo(void)
{ 
 8008304:	b580      	push	{r7, lr}
 8008306:	af00      	add	r7, sp, #0
  LCD_SetHint();
 8008308:	f000 f824 	bl	8008354 <LCD_SetHint>
  LCD_Feature = 0;
 800830c:	4b10      	ldr	r3, [pc, #64]	@ (8008350 <LCD_demo+0x4c>)
 800830e:	2200      	movs	r2, #0
 8008310:	701a      	strb	r2, [r3, #0]
  LCD_Show_Feature (LCD_Feature); 
 8008312:	4b0f      	ldr	r3, [pc, #60]	@ (8008350 <LCD_demo+0x4c>)
 8008314:	781b      	ldrb	r3, [r3, #0]
 8008316:	4618      	mov	r0, r3
 8008318:	f000 f888 	bl	800842c <LCD_Show_Feature>
  
  while (1)
  { 
    if(CheckForUserInput() > 0)
 800831c:	f000 fba6 	bl	8008a6c <CheckForUserInput>
 8008320:	4603      	mov	r3, r0
 8008322:	2b00      	cmp	r3, #0
 8008324:	d00e      	beq.n	8008344 <LCD_demo+0x40>
    {
      if(++LCD_Feature < LCD_FEATURES_NUM)
 8008326:	4b0a      	ldr	r3, [pc, #40]	@ (8008350 <LCD_demo+0x4c>)
 8008328:	781b      	ldrb	r3, [r3, #0]
 800832a:	3301      	adds	r3, #1
 800832c:	b2da      	uxtb	r2, r3
 800832e:	4b08      	ldr	r3, [pc, #32]	@ (8008350 <LCD_demo+0x4c>)
 8008330:	701a      	strb	r2, [r3, #0]
 8008332:	4b07      	ldr	r3, [pc, #28]	@ (8008350 <LCD_demo+0x4c>)
 8008334:	781b      	ldrb	r3, [r3, #0]
 8008336:	2b02      	cmp	r3, #2
 8008338:	d808      	bhi.n	800834c <LCD_demo+0x48>
      {
        LCD_Show_Feature (LCD_Feature); 
 800833a:	4b05      	ldr	r3, [pc, #20]	@ (8008350 <LCD_demo+0x4c>)
 800833c:	781b      	ldrb	r3, [r3, #0]
 800833e:	4618      	mov	r0, r3
 8008340:	f000 f874 	bl	800842c <LCD_Show_Feature>
      else
      {
        return;
      }
    }
    HAL_Delay(100);
 8008344:	2064      	movs	r0, #100	@ 0x64
 8008346:	f7fb fd25 	bl	8003d94 <HAL_Delay>
    if(CheckForUserInput() > 0)
 800834a:	e7e7      	b.n	800831c <LCD_demo+0x18>
        return;
 800834c:	bf00      	nop
  }
}
 800834e:	bd80      	pop	{r7, pc}
 8008350:	2000050c 	.word	0x2000050c

08008354 <LCD_SetHint>:
  * @brief  Display LCD demo hint
  * @param  None
  * @retval None
  */
static void LCD_SetHint(void)
{
 8008354:	b598      	push	{r3, r4, r7, lr}
 8008356:	af00      	add	r7, sp, #0
  /* Clear the LCD */ 
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8008358:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800835c:	f7f9 fe2e 	bl	8001fbc <BSP_LCD_Clear>
  
  /* Set LCD Demo description */
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8008360:	482b      	ldr	r0, [pc, #172]	@ (8008410 <LCD_SetHint+0xbc>)
 8008362:	f7f9 fdc9 	bl	8001ef8 <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, 0, BSP_LCD_GetXSize(), 80);
 8008366:	f7f9 fd3b 	bl	8001de0 <BSP_LCD_GetXSize>
 800836a:	4603      	mov	r3, r0
 800836c:	b29a      	uxth	r2, r3
 800836e:	2350      	movs	r3, #80	@ 0x50
 8008370:	2100      	movs	r1, #0
 8008372:	2000      	movs	r0, #0
 8008374:	f7fa fc22 	bl	8002bbc <BSP_LCD_FillRect>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8008378:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800837c:	f7f9 fdbc 	bl	8001ef8 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_BLUE); 
 8008380:	4823      	ldr	r0, [pc, #140]	@ (8008410 <LCD_SetHint+0xbc>)
 8008382:	f7f9 fdd1 	bl	8001f28 <BSP_LCD_SetBackColor>
  BSP_LCD_SetFont(&Font24);
 8008386:	4823      	ldr	r0, [pc, #140]	@ (8008414 <LCD_SetHint+0xc0>)
 8008388:	f7f9 fde8 	bl	8001f5c <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 0, (uint8_t*)"LCD", CENTER_MODE);
 800838c:	2301      	movs	r3, #1
 800838e:	4a22      	ldr	r2, [pc, #136]	@ (8008418 <LCD_SetHint+0xc4>)
 8008390:	2100      	movs	r1, #0
 8008392:	2000      	movs	r0, #0
 8008394:	f7f9 fee2 	bl	800215c <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetFont(&Font12);
 8008398:	4820      	ldr	r0, [pc, #128]	@ (800841c <LCD_SetHint+0xc8>)
 800839a:	f7f9 fddf 	bl	8001f5c <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 30, (uint8_t*)"This example shows the different", CENTER_MODE);
 800839e:	2301      	movs	r3, #1
 80083a0:	4a1f      	ldr	r2, [pc, #124]	@ (8008420 <LCD_SetHint+0xcc>)
 80083a2:	211e      	movs	r1, #30
 80083a4:	2000      	movs	r0, #0
 80083a6:	f7f9 fed9 	bl	800215c <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, 45, (uint8_t*)"LCD Features, use BUTTON", CENTER_MODE);
 80083aa:	2301      	movs	r3, #1
 80083ac:	4a1d      	ldr	r2, [pc, #116]	@ (8008424 <LCD_SetHint+0xd0>)
 80083ae:	212d      	movs	r1, #45	@ 0x2d
 80083b0:	2000      	movs	r0, #0
 80083b2:	f7f9 fed3 	bl	800215c <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, 60, (uint8_t*)"to display next page", CENTER_MODE);
 80083b6:	2301      	movs	r3, #1
 80083b8:	4a1b      	ldr	r2, [pc, #108]	@ (8008428 <LCD_SetHint+0xd4>)
 80083ba:	213c      	movs	r1, #60	@ 0x3c
 80083bc:	2000      	movs	r0, #0
 80083be:	f7f9 fecd 	bl	800215c <BSP_LCD_DisplayStringAt>
  
  /* Set the LCD Text Color */
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);  
 80083c2:	4813      	ldr	r0, [pc, #76]	@ (8008410 <LCD_SetHint+0xbc>)
 80083c4:	f7f9 fd98 	bl	8001ef8 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawRect(10, 90, BSP_LCD_GetXSize() - 20, BSP_LCD_GetYSize()- 100);
 80083c8:	f7f9 fd0a 	bl	8001de0 <BSP_LCD_GetXSize>
 80083cc:	4603      	mov	r3, r0
 80083ce:	b29b      	uxth	r3, r3
 80083d0:	3b14      	subs	r3, #20
 80083d2:	b29c      	uxth	r4, r3
 80083d4:	f7f9 fd10 	bl	8001df8 <BSP_LCD_GetYSize>
 80083d8:	4603      	mov	r3, r0
 80083da:	b29b      	uxth	r3, r3
 80083dc:	3b64      	subs	r3, #100	@ 0x64
 80083de:	b29b      	uxth	r3, r3
 80083e0:	4622      	mov	r2, r4
 80083e2:	215a      	movs	r1, #90	@ 0x5a
 80083e4:	200a      	movs	r0, #10
 80083e6:	f7fa f8d9 	bl	800259c <BSP_LCD_DrawRect>
  BSP_LCD_DrawRect(11, 91, BSP_LCD_GetXSize() - 22, BSP_LCD_GetYSize()- 102);
 80083ea:	f7f9 fcf9 	bl	8001de0 <BSP_LCD_GetXSize>
 80083ee:	4603      	mov	r3, r0
 80083f0:	b29b      	uxth	r3, r3
 80083f2:	3b16      	subs	r3, #22
 80083f4:	b29c      	uxth	r4, r3
 80083f6:	f7f9 fcff 	bl	8001df8 <BSP_LCD_GetYSize>
 80083fa:	4603      	mov	r3, r0
 80083fc:	b29b      	uxth	r3, r3
 80083fe:	3b66      	subs	r3, #102	@ 0x66
 8008400:	b29b      	uxth	r3, r3
 8008402:	4622      	mov	r2, r4
 8008404:	215b      	movs	r1, #91	@ 0x5b
 8008406:	200b      	movs	r0, #11
 8008408:	f7fa f8c8 	bl	800259c <BSP_LCD_DrawRect>
}
 800840c:	bf00      	nop
 800840e:	bd98      	pop	{r3, r4, r7, pc}
 8008410:	ff0000ff 	.word	0xff0000ff
 8008414:	200000a8 	.word	0x200000a8
 8008418:	0800b670 	.word	0x0800b670
 800841c:	200000c0 	.word	0x200000c0
 8008420:	0800b674 	.word	0x0800b674
 8008424:	0800b698 	.word	0x0800b698
 8008428:	0800b6b4 	.word	0x0800b6b4

0800842c <LCD_Show_Feature>:
  * @brief  Show LCD Features
  * @param  feature: feature index
  * @retval None
  */
static void LCD_Show_Feature(uint8_t feature)
{
 800842c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800842e:	b089      	sub	sp, #36	@ 0x24
 8008430:	af00      	add	r7, sp, #0
 8008432:	4603      	mov	r3, r0
 8008434:	71fb      	strb	r3, [r7, #7]
  Point Points[]= {{100, 100}, {160, 100}, {160, 140}};
 8008436:	4ab6      	ldr	r2, [pc, #728]	@ (8008710 <LCD_Show_Feature+0x2e4>)
 8008438:	f107 0314 	add.w	r3, r7, #20
 800843c:	ca07      	ldmia	r2, {r0, r1, r2}
 800843e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  Point Points2[]= {{100, 150}, {160, 150}, {160, 200}};
 8008442:	4ab4      	ldr	r2, [pc, #720]	@ (8008714 <LCD_Show_Feature+0x2e8>)
 8008444:	f107 0308 	add.w	r3, r7, #8
 8008448:	ca07      	ldmia	r2, {r0, r1, r2}
 800844a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);  
 800844e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008452:	f7f9 fd69 	bl	8001f28 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);    
 8008456:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800845a:	f7f9 fd4d 	bl	8001ef8 <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(12, 92, BSP_LCD_GetXSize() - 24, BSP_LCD_GetYSize()- 104);
 800845e:	f7f9 fcbf 	bl	8001de0 <BSP_LCD_GetXSize>
 8008462:	4603      	mov	r3, r0
 8008464:	b29b      	uxth	r3, r3
 8008466:	3b18      	subs	r3, #24
 8008468:	b29c      	uxth	r4, r3
 800846a:	f7f9 fcc5 	bl	8001df8 <BSP_LCD_GetYSize>
 800846e:	4603      	mov	r3, r0
 8008470:	b29b      	uxth	r3, r3
 8008472:	3b68      	subs	r3, #104	@ 0x68
 8008474:	b29b      	uxth	r3, r3
 8008476:	4622      	mov	r2, r4
 8008478:	215c      	movs	r1, #92	@ 0x5c
 800847a:	200c      	movs	r0, #12
 800847c:	f7fa fb9e 	bl	8002bbc <BSP_LCD_FillRect>
  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8008480:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8008484:	f7f9 fd38 	bl	8001ef8 <BSP_LCD_SetTextColor>
  
  switch (feature)
 8008488:	79fb      	ldrb	r3, [r7, #7]
 800848a:	2b02      	cmp	r3, #2
 800848c:	f000 80e2 	beq.w	8008654 <LCD_Show_Feature+0x228>
 8008490:	2b02      	cmp	r3, #2
 8008492:	f300 8138 	bgt.w	8008706 <LCD_Show_Feature+0x2da>
 8008496:	2b00      	cmp	r3, #0
 8008498:	d002      	beq.n	80084a0 <LCD_Show_Feature+0x74>
 800849a:	2b01      	cmp	r3, #1
 800849c:	d044      	beq.n	8008528 <LCD_Show_Feature+0xfc>
    
    BSP_LCD_DrawBitmap(BSP_LCD_GetXSize()-100, BSP_LCD_GetYSize()- 80, (uint8_t *)stlogo);
    HAL_Delay(500);    
    break;
  }
}
 800849e:	e132      	b.n	8008706 <LCD_Show_Feature+0x2da>
    BSP_LCD_DisplayStringAt(14, 100, (uint8_t*)"Left aligned Text", LEFT_MODE);
 80084a0:	2303      	movs	r3, #3
 80084a2:	4a9d      	ldr	r2, [pc, #628]	@ (8008718 <LCD_Show_Feature+0x2ec>)
 80084a4:	2164      	movs	r1, #100	@ 0x64
 80084a6:	200e      	movs	r0, #14
 80084a8:	f7f9 fe58 	bl	800215c <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(0, 115, (uint8_t*)"Center aligned Text", CENTER_MODE);
 80084ac:	2301      	movs	r3, #1
 80084ae:	4a9b      	ldr	r2, [pc, #620]	@ (800871c <LCD_Show_Feature+0x2f0>)
 80084b0:	2173      	movs	r1, #115	@ 0x73
 80084b2:	2000      	movs	r0, #0
 80084b4:	f7f9 fe52 	bl	800215c <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt((uint16_t)(-14), 130, (uint8_t*)"Right aligned Text", RIGHT_MODE);
 80084b8:	2302      	movs	r3, #2
 80084ba:	4a99      	ldr	r2, [pc, #612]	@ (8008720 <LCD_Show_Feature+0x2f4>)
 80084bc:	2182      	movs	r1, #130	@ 0x82
 80084be:	f64f 70f2 	movw	r0, #65522	@ 0xfff2
 80084c2:	f7f9 fe4b 	bl	800215c <BSP_LCD_DisplayStringAt>
    BSP_LCD_SetFont(&Font24);
 80084c6:	4897      	ldr	r0, [pc, #604]	@ (8008724 <LCD_Show_Feature+0x2f8>)
 80084c8:	f7f9 fd48 	bl	8001f5c <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(14, 180, (uint8_t*)"Font24", LEFT_MODE);
 80084cc:	2303      	movs	r3, #3
 80084ce:	4a96      	ldr	r2, [pc, #600]	@ (8008728 <LCD_Show_Feature+0x2fc>)
 80084d0:	21b4      	movs	r1, #180	@ 0xb4
 80084d2:	200e      	movs	r0, #14
 80084d4:	f7f9 fe42 	bl	800215c <BSP_LCD_DisplayStringAt>
    BSP_LCD_SetFont(&Font20);
 80084d8:	4894      	ldr	r0, [pc, #592]	@ (800872c <LCD_Show_Feature+0x300>)
 80084da:	f7f9 fd3f 	bl	8001f5c <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(BSP_LCD_GetXSize()/2 -20, 180 + Font20.Height, (uint8_t*)"Font20", LEFT_MODE);
 80084de:	f7f9 fc7f 	bl	8001de0 <BSP_LCD_GetXSize>
 80084e2:	4603      	mov	r3, r0
 80084e4:	085b      	lsrs	r3, r3, #1
 80084e6:	b29b      	uxth	r3, r3
 80084e8:	3b14      	subs	r3, #20
 80084ea:	b298      	uxth	r0, r3
 80084ec:	4b8f      	ldr	r3, [pc, #572]	@ (800872c <LCD_Show_Feature+0x300>)
 80084ee:	88db      	ldrh	r3, [r3, #6]
 80084f0:	33b4      	adds	r3, #180	@ 0xb4
 80084f2:	b299      	uxth	r1, r3
 80084f4:	2303      	movs	r3, #3
 80084f6:	4a8e      	ldr	r2, [pc, #568]	@ (8008730 <LCD_Show_Feature+0x304>)
 80084f8:	f7f9 fe30 	bl	800215c <BSP_LCD_DisplayStringAt>
    BSP_LCD_SetFont(&Font16);
 80084fc:	488d      	ldr	r0, [pc, #564]	@ (8008734 <LCD_Show_Feature+0x308>)
 80084fe:	f7f9 fd2d 	bl	8001f5c <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(BSP_LCD_GetXSize() - 80, 180 + Font20.Height + Font16.Height, (uint8_t*)"Font16", LEFT_MODE);
 8008502:	f7f9 fc6d 	bl	8001de0 <BSP_LCD_GetXSize>
 8008506:	4603      	mov	r3, r0
 8008508:	b29b      	uxth	r3, r3
 800850a:	3b50      	subs	r3, #80	@ 0x50
 800850c:	b298      	uxth	r0, r3
 800850e:	4b87      	ldr	r3, [pc, #540]	@ (800872c <LCD_Show_Feature+0x300>)
 8008510:	88da      	ldrh	r2, [r3, #6]
 8008512:	4b88      	ldr	r3, [pc, #544]	@ (8008734 <LCD_Show_Feature+0x308>)
 8008514:	88db      	ldrh	r3, [r3, #6]
 8008516:	4413      	add	r3, r2
 8008518:	b29b      	uxth	r3, r3
 800851a:	33b4      	adds	r3, #180	@ 0xb4
 800851c:	b299      	uxth	r1, r3
 800851e:	2303      	movs	r3, #3
 8008520:	4a85      	ldr	r2, [pc, #532]	@ (8008738 <LCD_Show_Feature+0x30c>)
 8008522:	f7f9 fe1b 	bl	800215c <BSP_LCD_DisplayStringAt>
    break;
 8008526:	e0ee      	b.n	8008706 <LCD_Show_Feature+0x2da>
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK); 
 8008528:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 800852c:	f7f9 fce4 	bl	8001ef8 <BSP_LCD_SetTextColor>
    BSP_LCD_DrawRect(20, 100, 60 , 40);
 8008530:	2328      	movs	r3, #40	@ 0x28
 8008532:	223c      	movs	r2, #60	@ 0x3c
 8008534:	2164      	movs	r1, #100	@ 0x64
 8008536:	2014      	movs	r0, #20
 8008538:	f7fa f830 	bl	800259c <BSP_LCD_DrawRect>
    BSP_LCD_FillRect(20, 150, 60 , 40); 
 800853c:	2328      	movs	r3, #40	@ 0x28
 800853e:	223c      	movs	r2, #60	@ 0x3c
 8008540:	2196      	movs	r1, #150	@ 0x96
 8008542:	2014      	movs	r0, #20
 8008544:	f7fa fb3a 	bl	8002bbc <BSP_LCD_FillRect>
    BSP_LCD_SetTextColor(LCD_COLOR_GRAY); 
 8008548:	487c      	ldr	r0, [pc, #496]	@ (800873c <LCD_Show_Feature+0x310>)
 800854a:	f7f9 fcd5 	bl	8001ef8 <BSP_LCD_SetTextColor>
    BSP_LCD_DrawCircle(50, 220, 20);
 800854e:	2214      	movs	r2, #20
 8008550:	21dc      	movs	r1, #220	@ 0xdc
 8008552:	2032      	movs	r0, #50	@ 0x32
 8008554:	f7fa f854 	bl	8002600 <BSP_LCD_DrawCircle>
    BSP_LCD_FillCircle(120, 220, 20);
 8008558:	2214      	movs	r2, #20
 800855a:	21dc      	movs	r1, #220	@ 0xdc
 800855c:	2078      	movs	r0, #120	@ 0x78
 800855e:	f7fa fb87 	bl	8002c70 <BSP_LCD_FillCircle>
    BSP_LCD_SetTextColor(LCD_COLOR_GREEN); 
 8008562:	f04f 20ff 	mov.w	r0, #4278255360	@ 0xff00ff00
 8008566:	f7f9 fcc7 	bl	8001ef8 <BSP_LCD_SetTextColor>
    BSP_LCD_DrawPolygon(Points, 3);
 800856a:	f107 0314 	add.w	r3, r7, #20
 800856e:	2103      	movs	r1, #3
 8008570:	4618      	mov	r0, r3
 8008572:	f7fa f92f 	bl	80027d4 <BSP_LCD_DrawPolygon>
    BSP_LCD_FillPolygon(Points2, 3);
 8008576:	f107 0308 	add.w	r3, r7, #8
 800857a:	2103      	movs	r1, #3
 800857c:	4618      	mov	r0, r3
 800857e:	f7fa fcd5 	bl	8002f2c <BSP_LCD_FillPolygon>
    BSP_LCD_SetTextColor(LCD_COLOR_RED); 
 8008582:	486f      	ldr	r0, [pc, #444]	@ (8008740 <LCD_Show_Feature+0x314>)
 8008584:	f7f9 fcb8 	bl	8001ef8 <BSP_LCD_SetTextColor>
    BSP_LCD_DrawEllipse(BSP_LCD_GetXSize() - 45, 120, 30, 20);
 8008588:	f7f9 fc2a 	bl	8001de0 <BSP_LCD_GetXSize>
 800858c:	4603      	mov	r3, r0
 800858e:	3b2d      	subs	r3, #45	@ 0x2d
 8008590:	4618      	mov	r0, r3
 8008592:	2314      	movs	r3, #20
 8008594:	221e      	movs	r2, #30
 8008596:	2178      	movs	r1, #120	@ 0x78
 8008598:	f7fa f96a 	bl	8002870 <BSP_LCD_DrawEllipse>
    BSP_LCD_FillEllipse(BSP_LCD_GetXSize() - 45, 170, 30, 20);
 800859c:	f7f9 fc20 	bl	8001de0 <BSP_LCD_GetXSize>
 80085a0:	4603      	mov	r3, r0
 80085a2:	3b2d      	subs	r3, #45	@ 0x2d
 80085a4:	4618      	mov	r0, r3
 80085a6:	2314      	movs	r3, #20
 80085a8:	221e      	movs	r2, #30
 80085aa:	21aa      	movs	r1, #170	@ 0xaa
 80085ac:	f7fa fda0 	bl	80030f0 <BSP_LCD_FillEllipse>
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK); 
 80085b0:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 80085b4:	f7f9 fca0 	bl	8001ef8 <BSP_LCD_SetTextColor>
    BSP_LCD_DrawHLine(20, BSP_LCD_GetYSize() - 30, BSP_LCD_GetXSize() / 5);
 80085b8:	f7f9 fc1e 	bl	8001df8 <BSP_LCD_GetYSize>
 80085bc:	4603      	mov	r3, r0
 80085be:	b29b      	uxth	r3, r3
 80085c0:	3b1e      	subs	r3, #30
 80085c2:	b29c      	uxth	r4, r3
 80085c4:	f7f9 fc0c 	bl	8001de0 <BSP_LCD_GetXSize>
 80085c8:	4603      	mov	r3, r0
 80085ca:	4a5e      	ldr	r2, [pc, #376]	@ (8008744 <LCD_Show_Feature+0x318>)
 80085cc:	fba2 2303 	umull	r2, r3, r2, r3
 80085d0:	089b      	lsrs	r3, r3, #2
 80085d2:	b29b      	uxth	r3, r3
 80085d4:	461a      	mov	r2, r3
 80085d6:	4621      	mov	r1, r4
 80085d8:	2014      	movs	r0, #20
 80085da:	f7f9 fe95 	bl	8002308 <BSP_LCD_DrawHLine>
    BSP_LCD_DrawLine (BSP_LCD_GetXSize() - 150, BSP_LCD_GetYSize()- 20, BSP_LCD_GetXSize()- 20, BSP_LCD_GetYSize()- 50);
 80085de:	f7f9 fbff 	bl	8001de0 <BSP_LCD_GetXSize>
 80085e2:	4603      	mov	r3, r0
 80085e4:	b29b      	uxth	r3, r3
 80085e6:	3b96      	subs	r3, #150	@ 0x96
 80085e8:	b29c      	uxth	r4, r3
 80085ea:	f7f9 fc05 	bl	8001df8 <BSP_LCD_GetYSize>
 80085ee:	4603      	mov	r3, r0
 80085f0:	b29b      	uxth	r3, r3
 80085f2:	3b14      	subs	r3, #20
 80085f4:	b29d      	uxth	r5, r3
 80085f6:	f7f9 fbf3 	bl	8001de0 <BSP_LCD_GetXSize>
 80085fa:	4603      	mov	r3, r0
 80085fc:	b29b      	uxth	r3, r3
 80085fe:	3b14      	subs	r3, #20
 8008600:	b29e      	uxth	r6, r3
 8008602:	f7f9 fbf9 	bl	8001df8 <BSP_LCD_GetYSize>
 8008606:	4603      	mov	r3, r0
 8008608:	b29b      	uxth	r3, r3
 800860a:	3b32      	subs	r3, #50	@ 0x32
 800860c:	b29b      	uxth	r3, r3
 800860e:	4632      	mov	r2, r6
 8008610:	4629      	mov	r1, r5
 8008612:	4620      	mov	r0, r4
 8008614:	f7f9 fef8 	bl	8002408 <BSP_LCD_DrawLine>
    BSP_LCD_DrawLine (BSP_LCD_GetXSize() - 150, BSP_LCD_GetYSize()- 50, BSP_LCD_GetXSize()- 20, BSP_LCD_GetYSize()- 20);
 8008618:	f7f9 fbe2 	bl	8001de0 <BSP_LCD_GetXSize>
 800861c:	4603      	mov	r3, r0
 800861e:	b29b      	uxth	r3, r3
 8008620:	3b96      	subs	r3, #150	@ 0x96
 8008622:	b29c      	uxth	r4, r3
 8008624:	f7f9 fbe8 	bl	8001df8 <BSP_LCD_GetYSize>
 8008628:	4603      	mov	r3, r0
 800862a:	b29b      	uxth	r3, r3
 800862c:	3b32      	subs	r3, #50	@ 0x32
 800862e:	b29d      	uxth	r5, r3
 8008630:	f7f9 fbd6 	bl	8001de0 <BSP_LCD_GetXSize>
 8008634:	4603      	mov	r3, r0
 8008636:	b29b      	uxth	r3, r3
 8008638:	3b14      	subs	r3, #20
 800863a:	b29e      	uxth	r6, r3
 800863c:	f7f9 fbdc 	bl	8001df8 <BSP_LCD_GetYSize>
 8008640:	4603      	mov	r3, r0
 8008642:	b29b      	uxth	r3, r3
 8008644:	3b14      	subs	r3, #20
 8008646:	b29b      	uxth	r3, r3
 8008648:	4632      	mov	r2, r6
 800864a:	4629      	mov	r1, r5
 800864c:	4620      	mov	r0, r4
 800864e:	f7f9 fedb 	bl	8002408 <BSP_LCD_DrawLine>
    break;
 8008652:	e058      	b.n	8008706 <LCD_Show_Feature+0x2da>
    BSP_LCD_DrawBitmap(20, 100, (uint8_t *)stlogo);
 8008654:	4a3c      	ldr	r2, [pc, #240]	@ (8008748 <LCD_Show_Feature+0x31c>)
 8008656:	2164      	movs	r1, #100	@ 0x64
 8008658:	2014      	movs	r0, #20
 800865a:	f7fa f9fd 	bl	8002a58 <BSP_LCD_DrawBitmap>
    HAL_Delay(500);
 800865e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8008662:	f7fb fb97 	bl	8003d94 <HAL_Delay>
    BSP_LCD_DrawBitmap(BSP_LCD_GetXSize()-100, 100, (uint8_t *)stlogo);
 8008666:	f7f9 fbbb 	bl	8001de0 <BSP_LCD_GetXSize>
 800866a:	4603      	mov	r3, r0
 800866c:	3b64      	subs	r3, #100	@ 0x64
 800866e:	4a36      	ldr	r2, [pc, #216]	@ (8008748 <LCD_Show_Feature+0x31c>)
 8008670:	2164      	movs	r1, #100	@ 0x64
 8008672:	4618      	mov	r0, r3
 8008674:	f7fa f9f0 	bl	8002a58 <BSP_LCD_DrawBitmap>
    HAL_Delay(500);
 8008678:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800867c:	f7fb fb8a 	bl	8003d94 <HAL_Delay>
    BSP_LCD_DrawBitmap(20, (BSP_LCD_GetYSize()-104-92)/2+100, (uint8_t *)stlogo);
 8008680:	f7f9 fbba 	bl	8001df8 <BSP_LCD_GetYSize>
 8008684:	4603      	mov	r3, r0
 8008686:	3bc4      	subs	r3, #196	@ 0xc4
 8008688:	085b      	lsrs	r3, r3, #1
 800868a:	3364      	adds	r3, #100	@ 0x64
 800868c:	4a2e      	ldr	r2, [pc, #184]	@ (8008748 <LCD_Show_Feature+0x31c>)
 800868e:	4619      	mov	r1, r3
 8008690:	2014      	movs	r0, #20
 8008692:	f7fa f9e1 	bl	8002a58 <BSP_LCD_DrawBitmap>
    HAL_Delay(500);    
 8008696:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800869a:	f7fb fb7b 	bl	8003d94 <HAL_Delay>
    BSP_LCD_DrawBitmap(BSP_LCD_GetXSize()-100, (BSP_LCD_GetYSize()-104-92)/2+100, (uint8_t *)stlogo);
 800869e:	f7f9 fb9f 	bl	8001de0 <BSP_LCD_GetXSize>
 80086a2:	4603      	mov	r3, r0
 80086a4:	f1a3 0464 	sub.w	r4, r3, #100	@ 0x64
 80086a8:	f7f9 fba6 	bl	8001df8 <BSP_LCD_GetYSize>
 80086ac:	4603      	mov	r3, r0
 80086ae:	3bc4      	subs	r3, #196	@ 0xc4
 80086b0:	085b      	lsrs	r3, r3, #1
 80086b2:	3364      	adds	r3, #100	@ 0x64
 80086b4:	4a24      	ldr	r2, [pc, #144]	@ (8008748 <LCD_Show_Feature+0x31c>)
 80086b6:	4619      	mov	r1, r3
 80086b8:	4620      	mov	r0, r4
 80086ba:	f7fa f9cd 	bl	8002a58 <BSP_LCD_DrawBitmap>
    HAL_Delay(500);     
 80086be:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80086c2:	f7fb fb67 	bl	8003d94 <HAL_Delay>
    BSP_LCD_DrawBitmap(20, BSP_LCD_GetYSize()- 80, (uint8_t *)stlogo);
 80086c6:	f7f9 fb97 	bl	8001df8 <BSP_LCD_GetYSize>
 80086ca:	4603      	mov	r3, r0
 80086cc:	3b50      	subs	r3, #80	@ 0x50
 80086ce:	4a1e      	ldr	r2, [pc, #120]	@ (8008748 <LCD_Show_Feature+0x31c>)
 80086d0:	4619      	mov	r1, r3
 80086d2:	2014      	movs	r0, #20
 80086d4:	f7fa f9c0 	bl	8002a58 <BSP_LCD_DrawBitmap>
    HAL_Delay(500);
 80086d8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80086dc:	f7fb fb5a 	bl	8003d94 <HAL_Delay>
    BSP_LCD_DrawBitmap(BSP_LCD_GetXSize()-100, BSP_LCD_GetYSize()- 80, (uint8_t *)stlogo);
 80086e0:	f7f9 fb7e 	bl	8001de0 <BSP_LCD_GetXSize>
 80086e4:	4603      	mov	r3, r0
 80086e6:	f1a3 0464 	sub.w	r4, r3, #100	@ 0x64
 80086ea:	f7f9 fb85 	bl	8001df8 <BSP_LCD_GetYSize>
 80086ee:	4603      	mov	r3, r0
 80086f0:	3b50      	subs	r3, #80	@ 0x50
 80086f2:	4a15      	ldr	r2, [pc, #84]	@ (8008748 <LCD_Show_Feature+0x31c>)
 80086f4:	4619      	mov	r1, r3
 80086f6:	4620      	mov	r0, r4
 80086f8:	f7fa f9ae 	bl	8002a58 <BSP_LCD_DrawBitmap>
    HAL_Delay(500);    
 80086fc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8008700:	f7fb fb48 	bl	8003d94 <HAL_Delay>
    break;
 8008704:	bf00      	nop
}
 8008706:	bf00      	nop
 8008708:	3724      	adds	r7, #36	@ 0x24
 800870a:	46bd      	mov	sp, r7
 800870c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800870e:	bf00      	nop
 8008710:	0800b720 	.word	0x0800b720
 8008714:	0800b72c 	.word	0x0800b72c
 8008718:	0800b6cc 	.word	0x0800b6cc
 800871c:	0800b6e0 	.word	0x0800b6e0
 8008720:	0800b6f4 	.word	0x0800b6f4
 8008724:	200000a8 	.word	0x200000a8
 8008728:	0800b708 	.word	0x0800b708
 800872c:	200000b0 	.word	0x200000b0
 8008730:	0800b710 	.word	0x0800b710
 8008734:	200000b8 	.word	0x200000b8
 8008738:	0800b718 	.word	0x0800b718
 800873c:	ff808080 	.word	0xff808080
 8008740:	ffff0000 	.word	0xffff0000
 8008744:	cccccccd 	.word	0xcccccccd
 8008748:	0800f688 	.word	0x0800f688

0800874c <Log_demo>:
  * @brief  LCD Log demo 
  * @param  None
  * @retval None
  */
void Log_demo(void)
{ 
 800874c:	b580      	push	{r7, lr}
 800874e:	b082      	sub	sp, #8
 8008750:	af00      	add	r7, sp, #0
  uint8_t i = 0;
 8008752:	2300      	movs	r3, #0
 8008754:	71fb      	strb	r3, [r7, #7]

  /* Initialize LCD Log module */
  LCD_LOG_Init();
 8008756:	f001 fc2b 	bl	8009fb0 <LCD_LOG_Init>
  
  /* Show Header and Footer texts */
  LCD_LOG_SetHeader((uint8_t*)"This is the header");
 800875a:	4823      	ldr	r0, [pc, #140]	@ (80087e8 <Log_demo+0x9c>)
 800875c:	f001 fc72 	bl	800a044 <LCD_LOG_SetHeader>
  LCD_LOG_SetFooter((uint8_t*)"This is the footer");
 8008760:	4822      	ldr	r0, [pc, #136]	@ (80087ec <Log_demo+0xa0>)
 8008762:	f001 fcab 	bl	800a0bc <LCD_LOG_SetFooter>
  
  /* Wait For User inputs */
  while(CheckForUserInput() == 0);
 8008766:	bf00      	nop
 8008768:	f000 f980 	bl	8008a6c <CheckForUserInput>
 800876c:	4603      	mov	r3, r0
 800876e:	2b00      	cmp	r3, #0
 8008770:	d0fa      	beq.n	8008768 <Log_demo+0x1c>
  
  /* Output User logs */
  for (i = 0; i < 10; i++)
 8008772:	2300      	movs	r3, #0
 8008774:	71fb      	strb	r3, [r7, #7]
 8008776:	e00d      	b.n	8008794 <Log_demo+0x48>
  {
    LCD_UsrLog ("This is Line %d \n", i);
 8008778:	4b1d      	ldr	r3, [pc, #116]	@ (80087f0 <Log_demo+0xa4>)
 800877a:	4a1e      	ldr	r2, [pc, #120]	@ (80087f4 <Log_demo+0xa8>)
 800877c:	601a      	str	r2, [r3, #0]
 800877e:	79fb      	ldrb	r3, [r7, #7]
 8008780:	4619      	mov	r1, r3
 8008782:	481d      	ldr	r0, [pc, #116]	@ (80087f8 <Log_demo+0xac>)
 8008784:	f001 ff46 	bl	800a614 <iprintf>
    HAL_Delay(100);
 8008788:	2064      	movs	r0, #100	@ 0x64
 800878a:	f7fb fb03 	bl	8003d94 <HAL_Delay>
  for (i = 0; i < 10; i++)
 800878e:	79fb      	ldrb	r3, [r7, #7]
 8008790:	3301      	adds	r3, #1
 8008792:	71fb      	strb	r3, [r7, #7]
 8008794:	79fb      	ldrb	r3, [r7, #7]
 8008796:	2b09      	cmp	r3, #9
 8008798:	d9ee      	bls.n	8008778 <Log_demo+0x2c>
  }
  
  HAL_Delay(1500);
 800879a:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 800879e:	f7fb faf9 	bl	8003d94 <HAL_Delay>
  
   /* Clear Old logs */
  LCD_LOG_ClearTextZone();
 80087a2:	f001 fcd3 	bl	800a14c <LCD_LOG_ClearTextZone>
  
   /* Output new user logs */
  for (i = 0; i < 30; i++)
 80087a6:	2300      	movs	r3, #0
 80087a8:	71fb      	strb	r3, [r7, #7]
 80087aa:	e00d      	b.n	80087c8 <Log_demo+0x7c>
  {
    LCD_UsrLog ("This is Line %d \n", i);
 80087ac:	4b10      	ldr	r3, [pc, #64]	@ (80087f0 <Log_demo+0xa4>)
 80087ae:	4a11      	ldr	r2, [pc, #68]	@ (80087f4 <Log_demo+0xa8>)
 80087b0:	601a      	str	r2, [r3, #0]
 80087b2:	79fb      	ldrb	r3, [r7, #7]
 80087b4:	4619      	mov	r1, r3
 80087b6:	4810      	ldr	r0, [pc, #64]	@ (80087f8 <Log_demo+0xac>)
 80087b8:	f001 ff2c 	bl	800a614 <iprintf>
    HAL_Delay(100);
 80087bc:	2064      	movs	r0, #100	@ 0x64
 80087be:	f7fb fae9 	bl	8003d94 <HAL_Delay>
  for (i = 0; i < 30; i++)
 80087c2:	79fb      	ldrb	r3, [r7, #7]
 80087c4:	3301      	adds	r3, #1
 80087c6:	71fb      	strb	r3, [r7, #7]
 80087c8:	79fb      	ldrb	r3, [r7, #7]
 80087ca:	2b1d      	cmp	r3, #29
 80087cc:	d9ee      	bls.n	80087ac <Log_demo+0x60>
  }
  
  /* Check for joystick user input for scroll (back and forward) */
  while (1)
  {
    if(CheckForUserInput() > 0)
 80087ce:	f000 f94d 	bl	8008a6c <CheckForUserInput>
 80087d2:	4603      	mov	r3, r0
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d103      	bne.n	80087e0 <Log_demo+0x94>
    {
      return;
    }    
    HAL_Delay (10);
 80087d8:	200a      	movs	r0, #10
 80087da:	f7fb fadb 	bl	8003d94 <HAL_Delay>
    if(CheckForUserInput() > 0)
 80087de:	e7f6      	b.n	80087ce <Log_demo+0x82>
      return;
 80087e0:	bf00      	nop
  }
}
 80087e2:	3708      	adds	r7, #8
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bd80      	pop	{r7, pc}
 80087e8:	0800b738 	.word	0x0800b738
 80087ec:	0800b74c 	.word	0x0800b74c
 80087f0:	200041b0 	.word	0x200041b0
 80087f4:	ff000080 	.word	0xff000080
 80087f8:	0800b760 	.word	0x0800b760

080087fc <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{ 
 80087fc:	b580      	push	{r7, lr}
 80087fe:	af00      	add	r7, sp, #0
       - Configure the Flash prefetch, instruction and Data caches
       - Configure the Systick to generate an interrupt each 1 msec
       - Set NVIC Group Priority to 4
       - Global MSP (MCU Support Package) initialization
     */
  HAL_Init();
 8008800:	f7fb fa4e 	bl	8003ca0 <HAL_Init>
  
  /* Configure LED3 and LED4 */
  BSP_LED_Init(LED3);
 8008804:	2000      	movs	r0, #0
 8008806:	f7f8 fcd3 	bl	80011b0 <BSP_LED_Init>
  BSP_LED_Init(LED4); 
 800880a:	2001      	movs	r0, #1
 800880c:	f7f8 fcd0 	bl	80011b0 <BSP_LED_Init>
  
  /* Configure the system clock to 180 MHz */
  SystemClock_Config();
 8008810:	f000 f838 	bl	8008884 <SystemClock_Config>
  
  /* Configure USER Button */
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 8008814:	2101      	movs	r1, #1
 8008816:	2000      	movs	r0, #0
 8008818:	f7f8 fd38 	bl	800128c <BSP_PB_Init>
  
  /*##-1- Initialize the LCD #################################################*/
  /* Initialize the LCD */
  BSP_LCD_Init();
 800881c:	f7f9 fa76 	bl	8001d0c <BSP_LCD_Init>
  
  /* Initialize the LCD Layers */
  BSP_LCD_LayerDefaultInit(1, LCD_FRAME_BUFFER);
 8008820:	f04f 4150 	mov.w	r1, #3489660928	@ 0xd0000000
 8008824:	2001      	movs	r0, #1
 8008826:	f7f9 faf3 	bl	8001e10 <BSP_LCD_LayerDefaultInit>
  
  Display_DemoDescription();
 800882a:	f000 f87f 	bl	800892c <Display_DemoDescription>
  
  /* Wait For User inputs */
  while (1)
  {
    if(BSP_PB_GetState(BUTTON_KEY) == RESET)
 800882e:	2000      	movs	r0, #0
 8008830:	f7f8 fd82 	bl	8001338 <BSP_PB_GetState>
 8008834:	4603      	mov	r3, r0
 8008836:	2b00      	cmp	r3, #0
 8008838:	d1f9      	bne.n	800882e <main+0x32>
    {
      while (BSP_PB_GetState(BUTTON_KEY) == RESET);
 800883a:	bf00      	nop
 800883c:	2000      	movs	r0, #0
 800883e:	f7f8 fd7b 	bl	8001338 <BSP_PB_GetState>
 8008842:	4603      	mov	r3, r0
 8008844:	2b00      	cmp	r3, #0
 8008846:	d0f9      	beq.n	800883c <main+0x40>
      
      BSP_examples[DemoIndex++].DemoFunc();
 8008848:	4b0c      	ldr	r3, [pc, #48]	@ (800887c <main+0x80>)
 800884a:	781b      	ldrb	r3, [r3, #0]
 800884c:	1c5a      	adds	r2, r3, #1
 800884e:	b2d1      	uxtb	r1, r2
 8008850:	4a0a      	ldr	r2, [pc, #40]	@ (800887c <main+0x80>)
 8008852:	7011      	strb	r1, [r2, #0]
 8008854:	4619      	mov	r1, r3
 8008856:	4a0a      	ldr	r2, [pc, #40]	@ (8008880 <main+0x84>)
 8008858:	460b      	mov	r3, r1
 800885a:	011b      	lsls	r3, r3, #4
 800885c:	1a5b      	subs	r3, r3, r1
 800885e:	009b      	lsls	r3, r3, #2
 8008860:	4413      	add	r3, r2
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	4798      	blx	r3
      
      if(DemoIndex >= COUNT_OF_EXAMPLE(BSP_examples))
 8008866:	4b05      	ldr	r3, [pc, #20]	@ (800887c <main+0x80>)
 8008868:	781b      	ldrb	r3, [r3, #0]
 800886a:	2b03      	cmp	r3, #3
 800886c:	d902      	bls.n	8008874 <main+0x78>
      {
#ifdef EE_M24LR64
        /* Increment number of loops which be used by EEPROM example */
        NbLoop++;
#endif /* EE_M24LR64 */
        DemoIndex = 0;
 800886e:	4b03      	ldr	r3, [pc, #12]	@ (800887c <main+0x80>)
 8008870:	2200      	movs	r2, #0
 8008872:	701a      	strb	r2, [r3, #0]
      }
      Display_DemoDescription();
 8008874:	f000 f85a 	bl	800892c <Display_DemoDescription>
    if(BSP_PB_GetState(BUTTON_KEY) == RESET)
 8008878:	e7d9      	b.n	800882e <main+0x32>
 800887a:	bf00      	nop
 800887c:	2000050d 	.word	0x2000050d
 8008880:	200000e0 	.word	0x200000e0

08008884 <SystemClock_Config>:
  *            Flash Latency(WS)              = 5
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b094      	sub	sp, #80	@ 0x50
 8008888:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 800888a:	2300      	movs	r3, #0
 800888c:	60bb      	str	r3, [r7, #8]
 800888e:	4b25      	ldr	r3, [pc, #148]	@ (8008924 <SystemClock_Config+0xa0>)
 8008890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008892:	4a24      	ldr	r2, [pc, #144]	@ (8008924 <SystemClock_Config+0xa0>)
 8008894:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008898:	6413      	str	r3, [r2, #64]	@ 0x40
 800889a:	4b22      	ldr	r3, [pc, #136]	@ (8008924 <SystemClock_Config+0xa0>)
 800889c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800889e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80088a2:	60bb      	str	r3, [r7, #8]
 80088a4:	68bb      	ldr	r3, [r7, #8]
  
  /* The voltage scaling allows optimizing the power consumption when the device is 
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80088a6:	2300      	movs	r3, #0
 80088a8:	607b      	str	r3, [r7, #4]
 80088aa:	4b1f      	ldr	r3, [pc, #124]	@ (8008928 <SystemClock_Config+0xa4>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	4a1e      	ldr	r2, [pc, #120]	@ (8008928 <SystemClock_Config+0xa4>)
 80088b0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80088b4:	6013      	str	r3, [r2, #0]
 80088b6:	4b1c      	ldr	r3, [pc, #112]	@ (8008928 <SystemClock_Config+0xa4>)
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80088be:	607b      	str	r3, [r7, #4]
 80088c0:	687b      	ldr	r3, [r7, #4]
  
  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80088c2:	2301      	movs	r3, #1
 80088c4:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80088c6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80088ca:	613b      	str	r3, [r7, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80088cc:	2302      	movs	r3, #2
 80088ce:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80088d0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80088d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLM = 8;
 80088d6:	2308      	movs	r3, #8
 80088d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLN = 360;
 80088da:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 80088de:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80088e0:	2302      	movs	r3, #2
 80088e2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80088e4:	2307      	movs	r3, #7
 80088e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80088e8:	f107 030c 	add.w	r3, r7, #12
 80088ec:	4618      	mov	r0, r3
 80088ee:	f7fd fd8b 	bl	8006408 <HAL_RCC_OscConfig>

  /* Activate the Over-Drive mode */
  HAL_PWREx_EnableOverDrive();
 80088f2:	f7fd fd39 	bl	8006368 <HAL_PWREx_EnableOverDrive>
    
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80088f6:	230f      	movs	r3, #15
 80088f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80088fa:	2302      	movs	r3, #2
 80088fc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80088fe:	2300      	movs	r3, #0
 8008900:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;  
 8008902:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8008906:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
 8008908:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800890c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 800890e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8008912:	2105      	movs	r1, #5
 8008914:	4618      	mov	r0, r3
 8008916:	f7fd ffef 	bl	80068f8 <HAL_RCC_ClockConfig>
}
 800891a:	bf00      	nop
 800891c:	3750      	adds	r7, #80	@ 0x50
 800891e:	46bd      	mov	sp, r7
 8008920:	bd80      	pop	{r7, pc}
 8008922:	bf00      	nop
 8008924:	40023800 	.word	0x40023800
 8008928:	40007000 	.word	0x40007000

0800892c <Display_DemoDescription>:
  * @brief  Display main demo messages
  * @param  None
  * @retval None
  */
static void Display_DemoDescription(void)
{
 800892c:	b590      	push	{r4, r7, lr}
 800892e:	b091      	sub	sp, #68	@ 0x44
 8008930:	af00      	add	r7, sp, #0
  uint8_t desc[58];
  
  /* Set LCD Foreground Layer  */
  BSP_LCD_SelectLayer(1);
 8008932:	2001      	movs	r0, #1
 8008934:	f7f9 fad0 	bl	8001ed8 <BSP_LCD_SelectLayer>
  
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8008938:	483e      	ldr	r0, [pc, #248]	@ (8008a34 <Display_DemoDescription+0x108>)
 800893a:	f7f9 fb0f 	bl	8001f5c <BSP_LCD_SetFont>
  
  /* Clear the LCD */ 
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE); 
 800893e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008942:	f7f9 faf1 	bl	8001f28 <BSP_LCD_SetBackColor>
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8008946:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800894a:	f7f9 fb37 	bl	8001fbc <BSP_LCD_Clear>
  
  /* Set the LCD Text Color */
  BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);  
 800894e:	483a      	ldr	r0, [pc, #232]	@ (8008a38 <Display_DemoDescription+0x10c>)
 8008950:	f7f9 fad2 	bl	8001ef8 <BSP_LCD_SetTextColor>
  
  /* Display LCD messages */
  BSP_LCD_DisplayStringAt(0, 10, (uint8_t*)"STM32F429I BSP", CENTER_MODE);
 8008954:	2301      	movs	r3, #1
 8008956:	4a39      	ldr	r2, [pc, #228]	@ (8008a3c <Display_DemoDescription+0x110>)
 8008958:	210a      	movs	r1, #10
 800895a:	2000      	movs	r0, #0
 800895c:	f7f9 fbfe 	bl	800215c <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetFont(&Font16);
 8008960:	4837      	ldr	r0, [pc, #220]	@ (8008a40 <Display_DemoDescription+0x114>)
 8008962:	f7f9 fafb 	bl	8001f5c <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 35, (uint8_t*)"Drivers examples", CENTER_MODE);
 8008966:	2301      	movs	r3, #1
 8008968:	4a36      	ldr	r2, [pc, #216]	@ (8008a44 <Display_DemoDescription+0x118>)
 800896a:	2123      	movs	r1, #35	@ 0x23
 800896c:	2000      	movs	r0, #0
 800896e:	f7f9 fbf5 	bl	800215c <BSP_LCD_DisplayStringAt>
  
  /* Draw Bitmap */
  BSP_LCD_DrawBitmap((BSP_LCD_GetXSize() - 80)/2, 65, (uint8_t *)stlogo);
 8008972:	f7f9 fa35 	bl	8001de0 <BSP_LCD_GetXSize>
 8008976:	4603      	mov	r3, r0
 8008978:	3b50      	subs	r3, #80	@ 0x50
 800897a:	085b      	lsrs	r3, r3, #1
 800897c:	4a32      	ldr	r2, [pc, #200]	@ (8008a48 <Display_DemoDescription+0x11c>)
 800897e:	2141      	movs	r1, #65	@ 0x41
 8008980:	4618      	mov	r0, r3
 8008982:	f7fa f869 	bl	8002a58 <BSP_LCD_DrawBitmap>
  
  BSP_LCD_SetFont(&Font8);
 8008986:	4831      	ldr	r0, [pc, #196]	@ (8008a4c <Display_DemoDescription+0x120>)
 8008988:	f7f9 fae8 	bl	8001f5c <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()- 20, (uint8_t*)"Copyright (c) STMicroelectronics 2017", CENTER_MODE);
 800898c:	f7f9 fa34 	bl	8001df8 <BSP_LCD_GetYSize>
 8008990:	4603      	mov	r3, r0
 8008992:	b29b      	uxth	r3, r3
 8008994:	3b14      	subs	r3, #20
 8008996:	b299      	uxth	r1, r3
 8008998:	2301      	movs	r3, #1
 800899a:	4a2d      	ldr	r2, [pc, #180]	@ (8008a50 <Display_DemoDescription+0x124>)
 800899c:	2000      	movs	r0, #0
 800899e:	f7f9 fbdd 	bl	800215c <BSP_LCD_DisplayStringAt>
  
  BSP_LCD_SetFont(&Font12);
 80089a2:	482c      	ldr	r0, [pc, #176]	@ (8008a54 <Display_DemoDescription+0x128>)
 80089a4:	f7f9 fada 	bl	8001f5c <BSP_LCD_SetFont>
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 80089a8:	482b      	ldr	r0, [pc, #172]	@ (8008a58 <Display_DemoDescription+0x12c>)
 80089aa:	f7f9 faa5 	bl	8001ef8 <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, BSP_LCD_GetYSize()/2 + 15, BSP_LCD_GetXSize(), 60);
 80089ae:	f7f9 fa23 	bl	8001df8 <BSP_LCD_GetYSize>
 80089b2:	4603      	mov	r3, r0
 80089b4:	085b      	lsrs	r3, r3, #1
 80089b6:	b29b      	uxth	r3, r3
 80089b8:	330f      	adds	r3, #15
 80089ba:	b29c      	uxth	r4, r3
 80089bc:	f7f9 fa10 	bl	8001de0 <BSP_LCD_GetXSize>
 80089c0:	4603      	mov	r3, r0
 80089c2:	b29a      	uxth	r2, r3
 80089c4:	233c      	movs	r3, #60	@ 0x3c
 80089c6:	4621      	mov	r1, r4
 80089c8:	2000      	movs	r0, #0
 80089ca:	f7fa f8f7 	bl	8002bbc <BSP_LCD_FillRect>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80089ce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80089d2:	f7f9 fa91 	bl	8001ef8 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_BLUE); 
 80089d6:	4820      	ldr	r0, [pc, #128]	@ (8008a58 <Display_DemoDescription+0x12c>)
 80089d8:	f7f9 faa6 	bl	8001f28 <BSP_LCD_SetBackColor>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 + 30, (uint8_t*)"Press USER Button to start:", CENTER_MODE);
 80089dc:	f7f9 fa0c 	bl	8001df8 <BSP_LCD_GetYSize>
 80089e0:	4603      	mov	r3, r0
 80089e2:	085b      	lsrs	r3, r3, #1
 80089e4:	b29b      	uxth	r3, r3
 80089e6:	331e      	adds	r3, #30
 80089e8:	b299      	uxth	r1, r3
 80089ea:	2301      	movs	r3, #1
 80089ec:	4a1b      	ldr	r2, [pc, #108]	@ (8008a5c <Display_DemoDescription+0x130>)
 80089ee:	2000      	movs	r0, #0
 80089f0:	f7f9 fbb4 	bl	800215c <BSP_LCD_DisplayStringAt>
  sprintf((char *)desc,"%s example", BSP_examples[DemoIndex].DemoName);
 80089f4:	4b1a      	ldr	r3, [pc, #104]	@ (8008a60 <Display_DemoDescription+0x134>)
 80089f6:	781b      	ldrb	r3, [r3, #0]
 80089f8:	461a      	mov	r2, r3
 80089fa:	4613      	mov	r3, r2
 80089fc:	011b      	lsls	r3, r3, #4
 80089fe:	1a9b      	subs	r3, r3, r2
 8008a00:	009b      	lsls	r3, r3, #2
 8008a02:	4a18      	ldr	r2, [pc, #96]	@ (8008a64 <Display_DemoDescription+0x138>)
 8008a04:	4413      	add	r3, r2
 8008a06:	1d1a      	adds	r2, r3, #4
 8008a08:	1d3b      	adds	r3, r7, #4
 8008a0a:	4917      	ldr	r1, [pc, #92]	@ (8008a68 <Display_DemoDescription+0x13c>)
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	f001 fd1f 	bl	800a450 <siprintf>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 + 45, (uint8_t *)desc, CENTER_MODE);   
 8008a12:	f7f9 f9f1 	bl	8001df8 <BSP_LCD_GetYSize>
 8008a16:	4603      	mov	r3, r0
 8008a18:	085b      	lsrs	r3, r3, #1
 8008a1a:	b29b      	uxth	r3, r3
 8008a1c:	332d      	adds	r3, #45	@ 0x2d
 8008a1e:	b299      	uxth	r1, r3
 8008a20:	1d3a      	adds	r2, r7, #4
 8008a22:	2301      	movs	r3, #1
 8008a24:	2000      	movs	r0, #0
 8008a26:	f7f9 fb99 	bl	800215c <BSP_LCD_DisplayStringAt>
}
 8008a2a:	bf00      	nop
 8008a2c:	3744      	adds	r7, #68	@ 0x44
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	bd90      	pop	{r4, r7, pc}
 8008a32:	bf00      	nop
 8008a34:	200000a8 	.word	0x200000a8
 8008a38:	ff000080 	.word	0xff000080
 8008a3c:	0800b774 	.word	0x0800b774
 8008a40:	200000b8 	.word	0x200000b8
 8008a44:	0800b784 	.word	0x0800b784
 8008a48:	0800f688 	.word	0x0800f688
 8008a4c:	200000c8 	.word	0x200000c8
 8008a50:	0800b798 	.word	0x0800b798
 8008a54:	200000c0 	.word	0x200000c0
 8008a58:	ff0000ff 	.word	0xff0000ff
 8008a5c:	0800b7c0 	.word	0x0800b7c0
 8008a60:	2000050d 	.word	0x2000050d
 8008a64:	200000e0 	.word	0x200000e0
 8008a68:	0800b7dc 	.word	0x0800b7dc

08008a6c <CheckForUserInput>:
  * @brief  Check for user input
  * @param  None
  * @retval Input state (1 : active / 0 : Inactive)
  */
uint8_t CheckForUserInput(void)
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	af00      	add	r7, sp, #0
  if(BSP_PB_GetState(BUTTON_KEY) == RESET)
 8008a70:	2000      	movs	r0, #0
 8008a72:	f7f8 fc61 	bl	8001338 <BSP_PB_GetState>
 8008a76:	4603      	mov	r3, r0
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d108      	bne.n	8008a8e <CheckForUserInput+0x22>
  {
    while (BSP_PB_GetState(BUTTON_KEY) == RESET);
 8008a7c:	bf00      	nop
 8008a7e:	2000      	movs	r0, #0
 8008a80:	f7f8 fc5a 	bl	8001338 <BSP_PB_GetState>
 8008a84:	4603      	mov	r3, r0
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d0f9      	beq.n	8008a7e <CheckForUserInput+0x12>
    return 1;
 8008a8a:	2301      	movs	r3, #1
 8008a8c:	e000      	b.n	8008a90 <CheckForUserInput+0x24>
  }
  return 0;
 8008a8e:	2300      	movs	r3, #0
}
 8008a90:	4618      	mov	r0, r3
 8008a92:	bd80      	pop	{r7, pc}

08008a94 <Toggle_Leds>:
  * @brief  Toggle LEDs
  * @param  None
  * @retval None
  */
void Toggle_Leds(void)
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	af00      	add	r7, sp, #0
  static uint8_t ticks = 0;
  
  if(ticks++ > 100)
 8008a98:	4b09      	ldr	r3, [pc, #36]	@ (8008ac0 <Toggle_Leds+0x2c>)
 8008a9a:	781b      	ldrb	r3, [r3, #0]
 8008a9c:	1c5a      	adds	r2, r3, #1
 8008a9e:	b2d1      	uxtb	r1, r2
 8008aa0:	4a07      	ldr	r2, [pc, #28]	@ (8008ac0 <Toggle_Leds+0x2c>)
 8008aa2:	7011      	strb	r1, [r2, #0]
 8008aa4:	2b64      	cmp	r3, #100	@ 0x64
 8008aa6:	d908      	bls.n	8008aba <Toggle_Leds+0x26>
  {
    BSP_LED_Toggle(LED3);
 8008aa8:	2000      	movs	r0, #0
 8008aaa:	f7f8 fbd5 	bl	8001258 <BSP_LED_Toggle>
    BSP_LED_Toggle(LED4);
 8008aae:	2001      	movs	r0, #1
 8008ab0:	f7f8 fbd2 	bl	8001258 <BSP_LED_Toggle>
    ticks = 0;
 8008ab4:	4b02      	ldr	r3, [pc, #8]	@ (8008ac0 <Toggle_Leds+0x2c>)
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	701a      	strb	r2, [r3, #0]
  }
}
 8008aba:	bf00      	nop
 8008abc:	bd80      	pop	{r7, pc}
 8008abe:	bf00      	nop
 8008ac0:	2000050f 	.word	0x2000050f

08008ac4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8008ac4:	b480      	push	{r7}
 8008ac6:	b083      	sub	sp, #12
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	4603      	mov	r3, r0
 8008acc:	80fb      	strh	r3, [r7, #6]
 if (GPIO_Pin == KEY_BUTTON_PIN)
 8008ace:	88fb      	ldrh	r3, [r7, #6]
 8008ad0:	2b01      	cmp	r3, #1
 8008ad2:	d102      	bne.n	8008ada <HAL_GPIO_EXTI_Callback+0x16>
 {
   ubKeyPressed = SET;
 8008ad4:	4b04      	ldr	r3, [pc, #16]	@ (8008ae8 <HAL_GPIO_EXTI_Callback+0x24>)
 8008ad6:	2201      	movs	r2, #1
 8008ad8:	701a      	strb	r2, [r3, #0]
 }
}
 8008ada:	bf00      	nop
 8008adc:	370c      	adds	r7, #12
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae4:	4770      	bx	lr
 8008ae6:	bf00      	nop
 8008ae8:	2000050e 	.word	0x2000050e

08008aec <MEMS_demo>:
  * @brief  MEMS demo
  * @param  None
  * @retval None
  */
void MEMS_demo(void)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	af00      	add	r7, sp, #0
  MEMS_SetHint();
 8008af0:	f000 f992 	bl	8008e18 <MEMS_SetHint>
  
  if (BSP_GYRO_Init() != GYRO_OK)
 8008af4:	f7f9 f880 	bl	8001bf8 <BSP_GYRO_Init>
 8008af8:	4603      	mov	r3, r0
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d01d      	beq.n	8008b3a <MEMS_demo+0x4e>
  {
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE); 
 8008afe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008b02:	f7f9 fa11 	bl	8001f28 <BSP_LCD_SetBackColor>
    BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8008b06:	48ba      	ldr	r0, [pc, #744]	@ (8008df0 <MEMS_demo+0x304>)
 8008b08:	f7f9 f9f6 	bl	8001ef8 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()- 95, (uint8_t*)"ERROR", CENTER_MODE);
 8008b0c:	f7f9 f974 	bl	8001df8 <BSP_LCD_GetYSize>
 8008b10:	4603      	mov	r3, r0
 8008b12:	b29b      	uxth	r3, r3
 8008b14:	3b5f      	subs	r3, #95	@ 0x5f
 8008b16:	b299      	uxth	r1, r3
 8008b18:	2301      	movs	r3, #1
 8008b1a:	4ab6      	ldr	r2, [pc, #728]	@ (8008df4 <MEMS_demo+0x308>)
 8008b1c:	2000      	movs	r0, #0
 8008b1e:	f7f9 fb1d 	bl	800215c <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()- 80, (uint8_t*)"MEMS cannot be initialized", CENTER_MODE);
 8008b22:	f7f9 f969 	bl	8001df8 <BSP_LCD_GetYSize>
 8008b26:	4603      	mov	r3, r0
 8008b28:	b29b      	uxth	r3, r3
 8008b2a:	3b50      	subs	r3, #80	@ 0x50
 8008b2c:	b299      	uxth	r1, r3
 8008b2e:	2301      	movs	r3, #1
 8008b30:	4ab1      	ldr	r2, [pc, #708]	@ (8008df8 <MEMS_demo+0x30c>)
 8008b32:	2000      	movs	r0, #0
 8008b34:	f7f9 fb12 	bl	800215c <BSP_LCD_DisplayStringAt>
 8008b38:	e004      	b.n	8008b44 <MEMS_demo+0x58>
  }
  else
  {
    Gyroscope_DrawBackground(state);
 8008b3a:	4bb0      	ldr	r3, [pc, #704]	@ (8008dfc <MEMS_demo+0x310>)
 8008b3c:	781b      	ldrb	r3, [r3, #0]
 8008b3e:	4618      	mov	r0, r3
 8008b40:	f000 f9d6 	bl	8008ef0 <Gyroscope_DrawBackground>
  }
  
  BSP_GYRO_Reset();
 8008b44:	f7f9 f8be 	bl	8001cc4 <BSP_GYRO_Reset>
  
  while (1)
  {	
    /* Read Gyro Angular data */
    BSP_GYRO_GetXYZ(Buffer);
 8008b48:	48ad      	ldr	r0, [pc, #692]	@ (8008e00 <MEMS_demo+0x314>)
 8008b4a:	f7f9 f8cb 	bl	8001ce4 <BSP_GYRO_GetXYZ>
    
    /* Update autoreload and capture compare registers value */
    Xval = ABS((Buffer[0]));
 8008b4e:	4bac      	ldr	r3, [pc, #688]	@ (8008e00 <MEMS_demo+0x314>)
 8008b50:	edd3 7a00 	vldr	s15, [r3]
 8008b54:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008b58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b5c:	d505      	bpl.n	8008b6a <MEMS_demo+0x7e>
 8008b5e:	4ba8      	ldr	r3, [pc, #672]	@ (8008e00 <MEMS_demo+0x314>)
 8008b60:	edd3 7a00 	vldr	s15, [r3]
 8008b64:	eef1 7a67 	vneg.f32	s15, s15
 8008b68:	e002      	b.n	8008b70 <MEMS_demo+0x84>
 8008b6a:	4ba5      	ldr	r3, [pc, #660]	@ (8008e00 <MEMS_demo+0x314>)
 8008b6c:	edd3 7a00 	vldr	s15, [r3]
 8008b70:	4ba4      	ldr	r3, [pc, #656]	@ (8008e04 <MEMS_demo+0x318>)
 8008b72:	edc3 7a00 	vstr	s15, [r3]
    Yval = ABS((Buffer[1])); 
 8008b76:	4ba2      	ldr	r3, [pc, #648]	@ (8008e00 <MEMS_demo+0x314>)
 8008b78:	edd3 7a01 	vldr	s15, [r3, #4]
 8008b7c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008b80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b84:	d505      	bpl.n	8008b92 <MEMS_demo+0xa6>
 8008b86:	4b9e      	ldr	r3, [pc, #632]	@ (8008e00 <MEMS_demo+0x314>)
 8008b88:	edd3 7a01 	vldr	s15, [r3, #4]
 8008b8c:	eef1 7a67 	vneg.f32	s15, s15
 8008b90:	e002      	b.n	8008b98 <MEMS_demo+0xac>
 8008b92:	4b9b      	ldr	r3, [pc, #620]	@ (8008e00 <MEMS_demo+0x314>)
 8008b94:	edd3 7a01 	vldr	s15, [r3, #4]
 8008b98:	4b9b      	ldr	r3, [pc, #620]	@ (8008e08 <MEMS_demo+0x31c>)
 8008b9a:	edc3 7a00 	vstr	s15, [r3]
    Zval = ABS((Buffer[2])); 
 8008b9e:	4b98      	ldr	r3, [pc, #608]	@ (8008e00 <MEMS_demo+0x314>)
 8008ba0:	edd3 7a02 	vldr	s15, [r3, #8]
 8008ba4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008ba8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bac:	d505      	bpl.n	8008bba <MEMS_demo+0xce>
 8008bae:	4b94      	ldr	r3, [pc, #592]	@ (8008e00 <MEMS_demo+0x314>)
 8008bb0:	edd3 7a02 	vldr	s15, [r3, #8]
 8008bb4:	eef1 7a67 	vneg.f32	s15, s15
 8008bb8:	e002      	b.n	8008bc0 <MEMS_demo+0xd4>
 8008bba:	4b91      	ldr	r3, [pc, #580]	@ (8008e00 <MEMS_demo+0x314>)
 8008bbc:	edd3 7a02 	vldr	s15, [r3, #8]
 8008bc0:	4b92      	ldr	r3, [pc, #584]	@ (8008e0c <MEMS_demo+0x320>)
 8008bc2:	edc3 7a00 	vstr	s15, [r3]
    
    if((Xval>Yval) && (Xval>Zval))
 8008bc6:	4b8f      	ldr	r3, [pc, #572]	@ (8008e04 <MEMS_demo+0x318>)
 8008bc8:	ed93 7a00 	vldr	s14, [r3]
 8008bcc:	4b8e      	ldr	r3, [pc, #568]	@ (8008e08 <MEMS_demo+0x31c>)
 8008bce:	edd3 7a00 	vldr	s15, [r3]
 8008bd2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008bd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bda:	dd4b      	ble.n	8008c74 <MEMS_demo+0x188>
 8008bdc:	4b89      	ldr	r3, [pc, #548]	@ (8008e04 <MEMS_demo+0x318>)
 8008bde:	ed93 7a00 	vldr	s14, [r3]
 8008be2:	4b8a      	ldr	r3, [pc, #552]	@ (8008e0c <MEMS_demo+0x320>)
 8008be4:	edd3 7a00 	vldr	s15, [r3]
 8008be8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008bec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bf0:	dd40      	ble.n	8008c74 <MEMS_demo+0x188>
    {
      if(Buffer[0] > 10000.0f)
 8008bf2:	4b83      	ldr	r3, [pc, #524]	@ (8008e00 <MEMS_demo+0x314>)
 8008bf4:	edd3 7a00 	vldr	s15, [r3]
 8008bf8:	ed9f 7a85 	vldr	s14, [pc, #532]	@ 8008e10 <MEMS_demo+0x324>
 8008bfc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008c00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c04:	dd15      	ble.n	8008c32 <MEMS_demo+0x146>
      { 
        if((state & 1) == 0)
 8008c06:	4b7d      	ldr	r3, [pc, #500]	@ (8008dfc <MEMS_demo+0x310>)
 8008c08:	781b      	ldrb	r3, [r3, #0]
 8008c0a:	f003 0301 	and.w	r3, r3, #1
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	f040 80da 	bne.w	8008dc8 <MEMS_demo+0x2dc>
        {
          Gyroscope_DrawBackground(1);			
 8008c14:	2001      	movs	r0, #1
 8008c16:	f000 f96b 	bl	8008ef0 <Gyroscope_DrawBackground>
          state |= 1;
 8008c1a:	4b78      	ldr	r3, [pc, #480]	@ (8008dfc <MEMS_demo+0x310>)
 8008c1c:	781b      	ldrb	r3, [r3, #0]
 8008c1e:	f043 0301 	orr.w	r3, r3, #1
 8008c22:	b2da      	uxtb	r2, r3
 8008c24:	4b75      	ldr	r3, [pc, #468]	@ (8008dfc <MEMS_demo+0x310>)
 8008c26:	701a      	strb	r2, [r3, #0]
          HAL_Delay(1000);
 8008c28:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8008c2c:	f7fb f8b2 	bl	8003d94 <HAL_Delay>
      if(Buffer[0] > 10000.0f)
 8008c30:	e0ca      	b.n	8008dc8 <MEMS_demo+0x2dc>
        }        
      }
      else if(Buffer[0] < -10000.0f)
 8008c32:	4b73      	ldr	r3, [pc, #460]	@ (8008e00 <MEMS_demo+0x314>)
 8008c34:	edd3 7a00 	vldr	s15, [r3]
 8008c38:	ed9f 7a76 	vldr	s14, [pc, #472]	@ 8008e14 <MEMS_demo+0x328>
 8008c3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008c40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c44:	d400      	bmi.n	8008c48 <MEMS_demo+0x15c>
      if(Buffer[0] > 10000.0f)
 8008c46:	e0bf      	b.n	8008dc8 <MEMS_demo+0x2dc>
      { 
        if((state & 2) == 0)
 8008c48:	4b6c      	ldr	r3, [pc, #432]	@ (8008dfc <MEMS_demo+0x310>)
 8008c4a:	781b      	ldrb	r3, [r3, #0]
 8008c4c:	f003 0302 	and.w	r3, r3, #2
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	f040 80b9 	bne.w	8008dc8 <MEMS_demo+0x2dc>
        {          
          Gyroscope_DrawBackground(2);            
 8008c56:	2002      	movs	r0, #2
 8008c58:	f000 f94a 	bl	8008ef0 <Gyroscope_DrawBackground>
          state |= 2;
 8008c5c:	4b67      	ldr	r3, [pc, #412]	@ (8008dfc <MEMS_demo+0x310>)
 8008c5e:	781b      	ldrb	r3, [r3, #0]
 8008c60:	f043 0302 	orr.w	r3, r3, #2
 8008c64:	b2da      	uxtb	r2, r3
 8008c66:	4b65      	ldr	r3, [pc, #404]	@ (8008dfc <MEMS_demo+0x310>)
 8008c68:	701a      	strb	r2, [r3, #0]
          HAL_Delay(1000);
 8008c6a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8008c6e:	f7fb f891 	bl	8003d94 <HAL_Delay>
      if(Buffer[0] > 10000.0f)
 8008c72:	e0a9      	b.n	8008dc8 <MEMS_demo+0x2dc>
        }           
      }      
    }
    else if ((Yval>Xval) && (Yval>Zval))
 8008c74:	4b64      	ldr	r3, [pc, #400]	@ (8008e08 <MEMS_demo+0x31c>)
 8008c76:	ed93 7a00 	vldr	s14, [r3]
 8008c7a:	4b62      	ldr	r3, [pc, #392]	@ (8008e04 <MEMS_demo+0x318>)
 8008c7c:	edd3 7a00 	vldr	s15, [r3]
 8008c80:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008c84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c88:	dd4a      	ble.n	8008d20 <MEMS_demo+0x234>
 8008c8a:	4b5f      	ldr	r3, [pc, #380]	@ (8008e08 <MEMS_demo+0x31c>)
 8008c8c:	ed93 7a00 	vldr	s14, [r3]
 8008c90:	4b5e      	ldr	r3, [pc, #376]	@ (8008e0c <MEMS_demo+0x320>)
 8008c92:	edd3 7a00 	vldr	s15, [r3]
 8008c96:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008c9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c9e:	dd3f      	ble.n	8008d20 <MEMS_demo+0x234>
    {
      if(Buffer[1] < -10000.0f)
 8008ca0:	4b57      	ldr	r3, [pc, #348]	@ (8008e00 <MEMS_demo+0x314>)
 8008ca2:	edd3 7a01 	vldr	s15, [r3, #4]
 8008ca6:	ed9f 7a5b 	vldr	s14, [pc, #364]	@ 8008e14 <MEMS_demo+0x328>
 8008caa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008cae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cb2:	d515      	bpl.n	8008ce0 <MEMS_demo+0x1f4>
      {
        if((state & 4) == 0)
 8008cb4:	4b51      	ldr	r3, [pc, #324]	@ (8008dfc <MEMS_demo+0x310>)
 8008cb6:	781b      	ldrb	r3, [r3, #0]
 8008cb8:	f003 0304 	and.w	r3, r3, #4
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	f040 8085 	bne.w	8008dcc <MEMS_demo+0x2e0>
        {                     
          Gyroscope_DrawBackground(4);            
 8008cc2:	2004      	movs	r0, #4
 8008cc4:	f000 f914 	bl	8008ef0 <Gyroscope_DrawBackground>
          state |= 4;
 8008cc8:	4b4c      	ldr	r3, [pc, #304]	@ (8008dfc <MEMS_demo+0x310>)
 8008cca:	781b      	ldrb	r3, [r3, #0]
 8008ccc:	f043 0304 	orr.w	r3, r3, #4
 8008cd0:	b2da      	uxtb	r2, r3
 8008cd2:	4b4a      	ldr	r3, [pc, #296]	@ (8008dfc <MEMS_demo+0x310>)
 8008cd4:	701a      	strb	r2, [r3, #0]
          HAL_Delay(1000);
 8008cd6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8008cda:	f7fb f85b 	bl	8003d94 <HAL_Delay>
      if(Buffer[1] < -10000.0f)
 8008cde:	e075      	b.n	8008dcc <MEMS_demo+0x2e0>
        }   
      }
      else if(Buffer[1] > 10000.0f)
 8008ce0:	4b47      	ldr	r3, [pc, #284]	@ (8008e00 <MEMS_demo+0x314>)
 8008ce2:	edd3 7a01 	vldr	s15, [r3, #4]
 8008ce6:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8008e10 <MEMS_demo+0x324>
 8008cea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008cee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cf2:	dc00      	bgt.n	8008cf6 <MEMS_demo+0x20a>
      if(Buffer[1] < -10000.0f)
 8008cf4:	e06a      	b.n	8008dcc <MEMS_demo+0x2e0>
      {
        if((state & 8) == 0)
 8008cf6:	4b41      	ldr	r3, [pc, #260]	@ (8008dfc <MEMS_demo+0x310>)
 8008cf8:	781b      	ldrb	r3, [r3, #0]
 8008cfa:	f003 0308 	and.w	r3, r3, #8
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d164      	bne.n	8008dcc <MEMS_demo+0x2e0>
        {          
          Gyroscope_DrawBackground(8);            
 8008d02:	2008      	movs	r0, #8
 8008d04:	f000 f8f4 	bl	8008ef0 <Gyroscope_DrawBackground>
          state |= 8;
 8008d08:	4b3c      	ldr	r3, [pc, #240]	@ (8008dfc <MEMS_demo+0x310>)
 8008d0a:	781b      	ldrb	r3, [r3, #0]
 8008d0c:	f043 0308 	orr.w	r3, r3, #8
 8008d10:	b2da      	uxtb	r2, r3
 8008d12:	4b3a      	ldr	r3, [pc, #232]	@ (8008dfc <MEMS_demo+0x310>)
 8008d14:	701a      	strb	r2, [r3, #0]
          HAL_Delay(1000);
 8008d16:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8008d1a:	f7fb f83b 	bl	8003d94 <HAL_Delay>
      if(Buffer[1] < -10000.0f)
 8008d1e:	e055      	b.n	8008dcc <MEMS_demo+0x2e0>
        }
      }     
    } 
    else if ((Zval>Xval) && (Zval>Yval))
 8008d20:	4b3a      	ldr	r3, [pc, #232]	@ (8008e0c <MEMS_demo+0x320>)
 8008d22:	ed93 7a00 	vldr	s14, [r3]
 8008d26:	4b37      	ldr	r3, [pc, #220]	@ (8008e04 <MEMS_demo+0x318>)
 8008d28:	edd3 7a00 	vldr	s15, [r3]
 8008d2c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008d30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d34:	dd4b      	ble.n	8008dce <MEMS_demo+0x2e2>
 8008d36:	4b35      	ldr	r3, [pc, #212]	@ (8008e0c <MEMS_demo+0x320>)
 8008d38:	ed93 7a00 	vldr	s14, [r3]
 8008d3c:	4b32      	ldr	r3, [pc, #200]	@ (8008e08 <MEMS_demo+0x31c>)
 8008d3e:	edd3 7a00 	vldr	s15, [r3]
 8008d42:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008d46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d4a:	dd40      	ble.n	8008dce <MEMS_demo+0x2e2>
    {
      if(Buffer[2] < -10000.0f)
 8008d4c:	4b2c      	ldr	r3, [pc, #176]	@ (8008e00 <MEMS_demo+0x314>)
 8008d4e:	edd3 7a02 	vldr	s15, [r3, #8]
 8008d52:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8008e14 <MEMS_demo+0x328>
 8008d56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008d5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d5e:	d514      	bpl.n	8008d8a <MEMS_demo+0x29e>
      {
        if((state & 16) == 0)
 8008d60:	4b26      	ldr	r3, [pc, #152]	@ (8008dfc <MEMS_demo+0x310>)
 8008d62:	781b      	ldrb	r3, [r3, #0]
 8008d64:	f003 0310 	and.w	r3, r3, #16
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d130      	bne.n	8008dce <MEMS_demo+0x2e2>
        {                     
          Gyroscope_DrawBackground(16);            
 8008d6c:	2010      	movs	r0, #16
 8008d6e:	f000 f8bf 	bl	8008ef0 <Gyroscope_DrawBackground>
          state |= 16;
 8008d72:	4b22      	ldr	r3, [pc, #136]	@ (8008dfc <MEMS_demo+0x310>)
 8008d74:	781b      	ldrb	r3, [r3, #0]
 8008d76:	f043 0310 	orr.w	r3, r3, #16
 8008d7a:	b2da      	uxtb	r2, r3
 8008d7c:	4b1f      	ldr	r3, [pc, #124]	@ (8008dfc <MEMS_demo+0x310>)
 8008d7e:	701a      	strb	r2, [r3, #0]
          HAL_Delay(1000);
 8008d80:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8008d84:	f7fb f806 	bl	8003d94 <HAL_Delay>
 8008d88:	e021      	b.n	8008dce <MEMS_demo+0x2e2>
        }   
      }		 
      else if(Buffer[2] > 10000.0f)
 8008d8a:	4b1d      	ldr	r3, [pc, #116]	@ (8008e00 <MEMS_demo+0x314>)
 8008d8c:	edd3 7a02 	vldr	s15, [r3, #8]
 8008d90:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8008e10 <MEMS_demo+0x324>
 8008d94:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008d98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d9c:	dd17      	ble.n	8008dce <MEMS_demo+0x2e2>
      {
        if((state & 32) == 0)
 8008d9e:	4b17      	ldr	r3, [pc, #92]	@ (8008dfc <MEMS_demo+0x310>)
 8008da0:	781b      	ldrb	r3, [r3, #0]
 8008da2:	f003 0320 	and.w	r3, r3, #32
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d111      	bne.n	8008dce <MEMS_demo+0x2e2>
        {          
          Gyroscope_DrawBackground(32);            
 8008daa:	2020      	movs	r0, #32
 8008dac:	f000 f8a0 	bl	8008ef0 <Gyroscope_DrawBackground>
          state |= 32;
 8008db0:	4b12      	ldr	r3, [pc, #72]	@ (8008dfc <MEMS_demo+0x310>)
 8008db2:	781b      	ldrb	r3, [r3, #0]
 8008db4:	f043 0320 	orr.w	r3, r3, #32
 8008db8:	b2da      	uxtb	r2, r3
 8008dba:	4b10      	ldr	r3, [pc, #64]	@ (8008dfc <MEMS_demo+0x310>)
 8008dbc:	701a      	strb	r2, [r3, #0]
          HAL_Delay(1000);			
 8008dbe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8008dc2:	f7fa ffe7 	bl	8003d94 <HAL_Delay>
 8008dc6:	e002      	b.n	8008dce <MEMS_demo+0x2e2>
      if(Buffer[0] > 10000.0f)
 8008dc8:	bf00      	nop
 8008dca:	e000      	b.n	8008dce <MEMS_demo+0x2e2>
      if(Buffer[1] < -10000.0f)
 8008dcc:	bf00      	nop
        }
      }  	
    } 
    if (state != 0x3F)	
 8008dce:	4b0b      	ldr	r3, [pc, #44]	@ (8008dfc <MEMS_demo+0x310>)
 8008dd0:	781b      	ldrb	r3, [r3, #0]
 8008dd2:	2b3f      	cmp	r3, #63	@ 0x3f
 8008dd4:	f47f aeb8 	bne.w	8008b48 <MEMS_demo+0x5c>
    {
    }
    else if (CheckForUserInput() > 0)
 8008dd8:	f7ff fe48 	bl	8008a6c <CheckForUserInput>
 8008ddc:	4603      	mov	r3, r0
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	f43f aeb2 	beq.w	8008b48 <MEMS_demo+0x5c>
    { 
      state = 0;    
 8008de4:	4b05      	ldr	r3, [pc, #20]	@ (8008dfc <MEMS_demo+0x310>)
 8008de6:	2200      	movs	r2, #0
 8008de8:	701a      	strb	r2, [r3, #0]
      return;
 8008dea:	bf00      	nop
    }
  }
}
 8008dec:	bd80      	pop	{r7, pc}
 8008dee:	bf00      	nop
 8008df0:	ffff0000 	.word	0xffff0000
 8008df4:	0800b7e8 	.word	0x0800b7e8
 8008df8:	0800b7f0 	.word	0x0800b7f0
 8008dfc:	20000528 	.word	0x20000528
 8008e00:	20000510 	.word	0x20000510
 8008e04:	2000051c 	.word	0x2000051c
 8008e08:	20000520 	.word	0x20000520
 8008e0c:	20000524 	.word	0x20000524
 8008e10:	461c4000 	.word	0x461c4000
 8008e14:	c61c4000 	.word	0xc61c4000

08008e18 <MEMS_SetHint>:
  * @brief  Display MEMS demo hint
  * @param  None
  * @retval None
  */
static void MEMS_SetHint(void)
{
 8008e18:	b598      	push	{r3, r4, r7, lr}
 8008e1a:	af00      	add	r7, sp, #0
  /* Clear the LCD */
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8008e1c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008e20:	f7f9 f8cc 	bl	8001fbc <BSP_LCD_Clear>
  
  /* Set LCD Demo description */
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8008e24:	482b      	ldr	r0, [pc, #172]	@ (8008ed4 <MEMS_SetHint+0xbc>)
 8008e26:	f7f9 f867 	bl	8001ef8 <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, 0, BSP_LCD_GetXSize(), 80);
 8008e2a:	f7f8 ffd9 	bl	8001de0 <BSP_LCD_GetXSize>
 8008e2e:	4603      	mov	r3, r0
 8008e30:	b29a      	uxth	r2, r3
 8008e32:	2350      	movs	r3, #80	@ 0x50
 8008e34:	2100      	movs	r1, #0
 8008e36:	2000      	movs	r0, #0
 8008e38:	f7f9 fec0 	bl	8002bbc <BSP_LCD_FillRect>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8008e3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008e40:	f7f9 f85a 	bl	8001ef8 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_BLUE); 
 8008e44:	4823      	ldr	r0, [pc, #140]	@ (8008ed4 <MEMS_SetHint+0xbc>)
 8008e46:	f7f9 f86f 	bl	8001f28 <BSP_LCD_SetBackColor>
  BSP_LCD_SetFont(&Font24);
 8008e4a:	4823      	ldr	r0, [pc, #140]	@ (8008ed8 <MEMS_SetHint+0xc0>)
 8008e4c:	f7f9 f886 	bl	8001f5c <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 0, (uint8_t*)"MEMS", CENTER_MODE);
 8008e50:	2301      	movs	r3, #1
 8008e52:	4a22      	ldr	r2, [pc, #136]	@ (8008edc <MEMS_SetHint+0xc4>)
 8008e54:	2100      	movs	r1, #0
 8008e56:	2000      	movs	r0, #0
 8008e58:	f7f9 f980 	bl	800215c <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetFont(&Font12);
 8008e5c:	4820      	ldr	r0, [pc, #128]	@ (8008ee0 <MEMS_SetHint+0xc8>)
 8008e5e:	f7f9 f87d 	bl	8001f5c <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 30, (uint8_t*)"This example shows MEMS Features", CENTER_MODE);
 8008e62:	2301      	movs	r3, #1
 8008e64:	4a1f      	ldr	r2, [pc, #124]	@ (8008ee4 <MEMS_SetHint+0xcc>)
 8008e66:	211e      	movs	r1, #30
 8008e68:	2000      	movs	r0, #0
 8008e6a:	f7f9 f977 	bl	800215c <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, 45, (uint8_t*)"move board around axis", CENTER_MODE);
 8008e6e:	2301      	movs	r3, #1
 8008e70:	4a1d      	ldr	r2, [pc, #116]	@ (8008ee8 <MEMS_SetHint+0xd0>)
 8008e72:	212d      	movs	r1, #45	@ 0x2d
 8008e74:	2000      	movs	r0, #0
 8008e76:	f7f9 f971 	bl	800215c <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, 60, (uint8_t*)"to start test", CENTER_MODE);
 8008e7a:	2301      	movs	r3, #1
 8008e7c:	4a1b      	ldr	r2, [pc, #108]	@ (8008eec <MEMS_SetHint+0xd4>)
 8008e7e:	213c      	movs	r1, #60	@ 0x3c
 8008e80:	2000      	movs	r0, #0
 8008e82:	f7f9 f96b 	bl	800215c <BSP_LCD_DisplayStringAt>
  
  /* Set the LCD Text Color */
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);  
 8008e86:	4813      	ldr	r0, [pc, #76]	@ (8008ed4 <MEMS_SetHint+0xbc>)
 8008e88:	f7f9 f836 	bl	8001ef8 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawRect(10, 90, BSP_LCD_GetXSize() - 20, BSP_LCD_GetYSize()- 100);
 8008e8c:	f7f8 ffa8 	bl	8001de0 <BSP_LCD_GetXSize>
 8008e90:	4603      	mov	r3, r0
 8008e92:	b29b      	uxth	r3, r3
 8008e94:	3b14      	subs	r3, #20
 8008e96:	b29c      	uxth	r4, r3
 8008e98:	f7f8 ffae 	bl	8001df8 <BSP_LCD_GetYSize>
 8008e9c:	4603      	mov	r3, r0
 8008e9e:	b29b      	uxth	r3, r3
 8008ea0:	3b64      	subs	r3, #100	@ 0x64
 8008ea2:	b29b      	uxth	r3, r3
 8008ea4:	4622      	mov	r2, r4
 8008ea6:	215a      	movs	r1, #90	@ 0x5a
 8008ea8:	200a      	movs	r0, #10
 8008eaa:	f7f9 fb77 	bl	800259c <BSP_LCD_DrawRect>
  BSP_LCD_DrawRect(11, 91, BSP_LCD_GetXSize() - 22, BSP_LCD_GetYSize()- 102);
 8008eae:	f7f8 ff97 	bl	8001de0 <BSP_LCD_GetXSize>
 8008eb2:	4603      	mov	r3, r0
 8008eb4:	b29b      	uxth	r3, r3
 8008eb6:	3b16      	subs	r3, #22
 8008eb8:	b29c      	uxth	r4, r3
 8008eba:	f7f8 ff9d 	bl	8001df8 <BSP_LCD_GetYSize>
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	b29b      	uxth	r3, r3
 8008ec2:	3b66      	subs	r3, #102	@ 0x66
 8008ec4:	b29b      	uxth	r3, r3
 8008ec6:	4622      	mov	r2, r4
 8008ec8:	215b      	movs	r1, #91	@ 0x5b
 8008eca:	200b      	movs	r0, #11
 8008ecc:	f7f9 fb66 	bl	800259c <BSP_LCD_DrawRect>
}
 8008ed0:	bf00      	nop
 8008ed2:	bd98      	pop	{r3, r4, r7, pc}
 8008ed4:	ff0000ff 	.word	0xff0000ff
 8008ed8:	200000a8 	.word	0x200000a8
 8008edc:	0800b80c 	.word	0x0800b80c
 8008ee0:	200000c0 	.word	0x200000c0
 8008ee4:	0800b814 	.word	0x0800b814
 8008ee8:	0800b838 	.word	0x0800b838
 8008eec:	0800b850 	.word	0x0800b850

08008ef0 <Gyroscope_DrawBackground>:
  * @brief  Draw Touchscreen Background
  * @param  Localstate: Touch zone state
  * @retval None
  */
static void Gyroscope_DrawBackground (uint8_t Localstate)
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b082      	sub	sp, #8
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	71fb      	strb	r3, [r7, #7]
  switch(Localstate)
 8008efa:	79fb      	ldrb	r3, [r7, #7]
 8008efc:	2b20      	cmp	r3, #32
 8008efe:	f200 81c8 	bhi.w	8009292 <Gyroscope_DrawBackground+0x3a2>
 8008f02:	a201      	add	r2, pc, #4	@ (adr r2, 8008f08 <Gyroscope_DrawBackground+0x18>)
 8008f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f08:	08008f8d 	.word	0x08008f8d
 8008f0c:	080090a5 	.word	0x080090a5
 8008f10:	080090ef 	.word	0x080090ef
 8008f14:	08009293 	.word	0x08009293
 8008f18:	0800913b 	.word	0x0800913b
 8008f1c:	08009293 	.word	0x08009293
 8008f20:	08009293 	.word	0x08009293
 8008f24:	08009293 	.word	0x08009293
 8008f28:	0800918f 	.word	0x0800918f
 8008f2c:	08009293 	.word	0x08009293
 8008f30:	08009293 	.word	0x08009293
 8008f34:	08009293 	.word	0x08009293
 8008f38:	08009293 	.word	0x08009293
 8008f3c:	08009293 	.word	0x08009293
 8008f40:	08009293 	.word	0x08009293
 8008f44:	08009293 	.word	0x08009293
 8008f48:	080091ef 	.word	0x080091ef
 8008f4c:	08009293 	.word	0x08009293
 8008f50:	08009293 	.word	0x08009293
 8008f54:	08009293 	.word	0x08009293
 8008f58:	08009293 	.word	0x08009293
 8008f5c:	08009293 	.word	0x08009293
 8008f60:	08009293 	.word	0x08009293
 8008f64:	08009293 	.word	0x08009293
 8008f68:	08009293 	.word	0x08009293
 8008f6c:	08009293 	.word	0x08009293
 8008f70:	08009293 	.word	0x08009293
 8008f74:	08009293 	.word	0x08009293
 8008f78:	08009293 	.word	0x08009293
 8008f7c:	08009293 	.word	0x08009293
 8008f80:	08009293 	.word	0x08009293
 8008f84:	08009293 	.word	0x08009293
 8008f88:	08009243 	.word	0x08009243
  {
  case 0:
    /* Circle for Y Positive Log */
    BSP_LCD_SetTextColor(LCD_COLOR_BLUE); 
 8008f8c:	48c3      	ldr	r0, [pc, #780]	@ (800929c <Gyroscope_DrawBackground+0x3ac>)
 8008f8e:	f7f8 ffb3 	bl	8001ef8 <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle(CIRCLE_LEFT_X_POS, CIRCLE_LEFT_Y_POS, CIRCLE_RADIUS);
 8008f92:	f7f8 ff25 	bl	8001de0 <BSP_LCD_GetXSize>
 8008f96:	4603      	mov	r3, r0
 8008f98:	4ac1      	ldr	r2, [pc, #772]	@ (80092a0 <Gyroscope_DrawBackground+0x3b0>)
 8008f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8008f9e:	089b      	lsrs	r3, r3, #2
 8008fa0:	b29b      	uxth	r3, r3
 8008fa2:	221e      	movs	r2, #30
 8008fa4:	21c8      	movs	r1, #200	@ 0xc8
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	f7f9 fe62 	bl	8002c70 <BSP_LCD_FillCircle>
    
    /* Circle for Y Positive Log */
    BSP_LCD_SetTextColor(LCD_COLOR_GREEN); 
 8008fac:	f04f 20ff 	mov.w	r0, #4278255360	@ 0xff00ff00
 8008fb0:	f7f8 ffa2 	bl	8001ef8 <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle(CIRCLE_RIGHT_X_POS, CIRCLE_RIGHT_Y_POS, CIRCLE_RADIUS);
 8008fb4:	f7f8 ff14 	bl	8001de0 <BSP_LCD_GetXSize>
 8008fb8:	4603      	mov	r3, r0
 8008fba:	4ab9      	ldr	r2, [pc, #740]	@ (80092a0 <Gyroscope_DrawBackground+0x3b0>)
 8008fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8008fc0:	089b      	lsrs	r3, r3, #2
 8008fc2:	b29b      	uxth	r3, r3
 8008fc4:	009b      	lsls	r3, r3, #2
 8008fc6:	b29b      	uxth	r3, r3
 8008fc8:	221e      	movs	r2, #30
 8008fca:	21c8      	movs	r1, #200	@ 0xc8
 8008fcc:	4618      	mov	r0, r3
 8008fce:	f7f9 fe4f 	bl	8002c70 <BSP_LCD_FillCircle>
    
    /* Circle for X Negative Log */
    BSP_LCD_SetTextColor(LCD_COLOR_YELLOW); 
 8008fd2:	f06f 00ff 	mvn.w	r0, #255	@ 0xff
 8008fd6:	f7f8 ff8f 	bl	8001ef8 <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle(CIRCLE_UP_X_POS, CIRCLE_UP_Y_POS, CIRCLE_RADIUS);
 8008fda:	f7f8 ff01 	bl	8001de0 <BSP_LCD_GetXSize>
 8008fde:	4603      	mov	r3, r0
 8008fe0:	085b      	lsrs	r3, r3, #1
 8008fe2:	b29b      	uxth	r3, r3
 8008fe4:	221e      	movs	r2, #30
 8008fe6:	2182      	movs	r1, #130	@ 0x82
 8008fe8:	4618      	mov	r0, r3
 8008fea:	f7f9 fe41 	bl	8002c70 <BSP_LCD_FillCircle>
    
    /* Circle for X Negative Log */
    BSP_LCD_SetTextColor(LCD_COLOR_RED); 
 8008fee:	48ad      	ldr	r0, [pc, #692]	@ (80092a4 <Gyroscope_DrawBackground+0x3b4>)
 8008ff0:	f7f8 ff82 	bl	8001ef8 <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle(CIRCLE_DOWN_X_POS, CIRCLE_DOWN_Y_POS, CIRCLE_RADIUS);
 8008ff4:	f7f8 fef4 	bl	8001de0 <BSP_LCD_GetXSize>
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	085b      	lsrs	r3, r3, #1
 8008ffc:	b29b      	uxth	r3, r3
 8008ffe:	221e      	movs	r2, #30
 8009000:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8009004:	4618      	mov	r0, r3
 8009006:	f7f9 fe33 	bl	8002c70 <BSP_LCD_FillCircle>
    
    /* Circle for Z Negative Log */
    BSP_LCD_SetTextColor(LCD_COLOR_ORANGE); 
 800900a:	48a7      	ldr	r0, [pc, #668]	@ (80092a8 <Gyroscope_DrawBackground+0x3b8>)
 800900c:	f7f8 ff74 	bl	8001ef8 <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle(CIRCLE_CENTRAL_X_POS, CIRCLE_CENTRAL_Y_POS, CIRCLE_RADIUS);
 8009010:	f7f8 fee6 	bl	8001de0 <BSP_LCD_GetXSize>
 8009014:	4603      	mov	r3, r0
 8009016:	085b      	lsrs	r3, r3, #1
 8009018:	b29b      	uxth	r3, r3
 800901a:	221e      	movs	r2, #30
 800901c:	21c8      	movs	r1, #200	@ 0xc8
 800901e:	4618      	mov	r0, r3
 8009020:	f7f9 fe26 	bl	8002c70 <BSP_LCD_FillCircle>
    BSP_LCD_SetTextColor(LCD_COLOR_WHITE); 
 8009024:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009028:	f7f8 ff66 	bl	8001ef8 <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle(CIRCLE_LEFT_X_POS, CIRCLE_LEFT_Y_POS, CIRCLE_RADIUS - 2);        
 800902c:	f7f8 fed8 	bl	8001de0 <BSP_LCD_GetXSize>
 8009030:	4603      	mov	r3, r0
 8009032:	4a9b      	ldr	r2, [pc, #620]	@ (80092a0 <Gyroscope_DrawBackground+0x3b0>)
 8009034:	fba2 2303 	umull	r2, r3, r2, r3
 8009038:	089b      	lsrs	r3, r3, #2
 800903a:	b29b      	uxth	r3, r3
 800903c:	221c      	movs	r2, #28
 800903e:	21c8      	movs	r1, #200	@ 0xc8
 8009040:	4618      	mov	r0, r3
 8009042:	f7f9 fe15 	bl	8002c70 <BSP_LCD_FillCircle>
    BSP_LCD_FillCircle(CIRCLE_RIGHT_X_POS, CIRCLE_RIGHT_Y_POS,  CIRCLE_RADIUS - 2); 
 8009046:	f7f8 fecb 	bl	8001de0 <BSP_LCD_GetXSize>
 800904a:	4603      	mov	r3, r0
 800904c:	4a94      	ldr	r2, [pc, #592]	@ (80092a0 <Gyroscope_DrawBackground+0x3b0>)
 800904e:	fba2 2303 	umull	r2, r3, r2, r3
 8009052:	089b      	lsrs	r3, r3, #2
 8009054:	b29b      	uxth	r3, r3
 8009056:	009b      	lsls	r3, r3, #2
 8009058:	b29b      	uxth	r3, r3
 800905a:	221c      	movs	r2, #28
 800905c:	21c8      	movs	r1, #200	@ 0xc8
 800905e:	4618      	mov	r0, r3
 8009060:	f7f9 fe06 	bl	8002c70 <BSP_LCD_FillCircle>
    BSP_LCD_FillCircle(CIRCLE_UP_X_POS, CIRCLE_UP_Y_POS, CIRCLE_RADIUS - 2);
 8009064:	f7f8 febc 	bl	8001de0 <BSP_LCD_GetXSize>
 8009068:	4603      	mov	r3, r0
 800906a:	085b      	lsrs	r3, r3, #1
 800906c:	b29b      	uxth	r3, r3
 800906e:	221c      	movs	r2, #28
 8009070:	2182      	movs	r1, #130	@ 0x82
 8009072:	4618      	mov	r0, r3
 8009074:	f7f9 fdfc 	bl	8002c70 <BSP_LCD_FillCircle>
    BSP_LCD_FillCircle(CIRCLE_DOWN_X_POS, CIRCLE_DOWN_Y_POS, CIRCLE_RADIUS - 2);
 8009078:	f7f8 feb2 	bl	8001de0 <BSP_LCD_GetXSize>
 800907c:	4603      	mov	r3, r0
 800907e:	085b      	lsrs	r3, r3, #1
 8009080:	b29b      	uxth	r3, r3
 8009082:	221c      	movs	r2, #28
 8009084:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8009088:	4618      	mov	r0, r3
 800908a:	f7f9 fdf1 	bl	8002c70 <BSP_LCD_FillCircle>
    BSP_LCD_FillCircle(CIRCLE_CENTRAL_X_POS, CIRCLE_CENTRAL_Y_POS, CIRCLE_RADIUS - 2);
 800908e:	f7f8 fea7 	bl	8001de0 <BSP_LCD_GetXSize>
 8009092:	4603      	mov	r3, r0
 8009094:	085b      	lsrs	r3, r3, #1
 8009096:	b29b      	uxth	r3, r3
 8009098:	221c      	movs	r2, #28
 800909a:	21c8      	movs	r1, #200	@ 0xc8
 800909c:	4618      	mov	r0, r3
 800909e:	f7f9 fde7 	bl	8002c70 <BSP_LCD_FillCircle>
    break;
 80090a2:	e0f6      	b.n	8009292 <Gyroscope_DrawBackground+0x3a2>
    
    /* X positive Log */
  case 1:
    BSP_LCD_SetTextColor(LCD_COLOR_RED); 
 80090a4:	487f      	ldr	r0, [pc, #508]	@ (80092a4 <Gyroscope_DrawBackground+0x3b4>)
 80090a6:	f7f8 ff27 	bl	8001ef8 <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle(CIRCLE_DOWN_X_POS, CIRCLE_DOWN_Y_POS, CIRCLE_RADIUS);
 80090aa:	f7f8 fe99 	bl	8001de0 <BSP_LCD_GetXSize>
 80090ae:	4603      	mov	r3, r0
 80090b0:	085b      	lsrs	r3, r3, #1
 80090b2:	b29b      	uxth	r3, r3
 80090b4:	221e      	movs	r2, #30
 80090b6:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 80090ba:	4618      	mov	r0, r3
 80090bc:	f7f9 fdd8 	bl	8002c70 <BSP_LCD_FillCircle>
    BSP_LCD_SetFont(&Font24);
 80090c0:	487a      	ldr	r0, [pc, #488]	@ (80092ac <Gyroscope_DrawBackground+0x3bc>)
 80090c2:	f7f8 ff4b 	bl	8001f5c <BSP_LCD_SetFont>
    BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80090c6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80090ca:	f7f8 ff15 	bl	8001ef8 <BSP_LCD_SetTextColor>
    BSP_LCD_SetBackColor(LCD_COLOR_RED);
 80090ce:	4875      	ldr	r0, [pc, #468]	@ (80092a4 <Gyroscope_DrawBackground+0x3b4>)
 80090d0:	f7f8 ff2a 	bl	8001f28 <BSP_LCD_SetBackColor>
    BSP_LCD_DisplayStringAt(CIRCLE_DOWN_X_POS-(CIRCLE_RADIUS/2), CIRCLE_DOWN_Y_POS-(CIRCLE_RADIUS/2), (uint8_t*)"X+",LEFT_MODE);
 80090d4:	f7f8 fe84 	bl	8001de0 <BSP_LCD_GetXSize>
 80090d8:	4603      	mov	r3, r0
 80090da:	085b      	lsrs	r3, r3, #1
 80090dc:	b29b      	uxth	r3, r3
 80090de:	3b0f      	subs	r3, #15
 80090e0:	b298      	uxth	r0, r3
 80090e2:	2303      	movs	r3, #3
 80090e4:	4a72      	ldr	r2, [pc, #456]	@ (80092b0 <Gyroscope_DrawBackground+0x3c0>)
 80090e6:	21ff      	movs	r1, #255	@ 0xff
 80090e8:	f7f9 f838 	bl	800215c <BSP_LCD_DisplayStringAt>
    break;
 80090ec:	e0d1      	b.n	8009292 <Gyroscope_DrawBackground+0x3a2>
    
    /* X Negative Log */
  case 2:
    BSP_LCD_SetTextColor(LCD_COLOR_YELLOW); 
 80090ee:	f06f 00ff 	mvn.w	r0, #255	@ 0xff
 80090f2:	f7f8 ff01 	bl	8001ef8 <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle(CIRCLE_UP_X_POS, CIRCLE_UP_Y_POS, CIRCLE_RADIUS);
 80090f6:	f7f8 fe73 	bl	8001de0 <BSP_LCD_GetXSize>
 80090fa:	4603      	mov	r3, r0
 80090fc:	085b      	lsrs	r3, r3, #1
 80090fe:	b29b      	uxth	r3, r3
 8009100:	221e      	movs	r2, #30
 8009102:	2182      	movs	r1, #130	@ 0x82
 8009104:	4618      	mov	r0, r3
 8009106:	f7f9 fdb3 	bl	8002c70 <BSP_LCD_FillCircle>
    BSP_LCD_SetFont(&Font24);
 800910a:	4868      	ldr	r0, [pc, #416]	@ (80092ac <Gyroscope_DrawBackground+0x3bc>)
 800910c:	f7f8 ff26 	bl	8001f5c <BSP_LCD_SetFont>
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8009110:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8009114:	f7f8 fef0 	bl	8001ef8 <BSP_LCD_SetTextColor>
    BSP_LCD_SetBackColor(LCD_COLOR_YELLOW);
 8009118:	f06f 00ff 	mvn.w	r0, #255	@ 0xff
 800911c:	f7f8 ff04 	bl	8001f28 <BSP_LCD_SetBackColor>
    BSP_LCD_DisplayStringAt(CIRCLE_UP_X_POS-(CIRCLE_RADIUS/2), CIRCLE_UP_Y_POS-(CIRCLE_RADIUS/2), (uint8_t*)"X-", LEFT_MODE);
 8009120:	f7f8 fe5e 	bl	8001de0 <BSP_LCD_GetXSize>
 8009124:	4603      	mov	r3, r0
 8009126:	085b      	lsrs	r3, r3, #1
 8009128:	b29b      	uxth	r3, r3
 800912a:	3b0f      	subs	r3, #15
 800912c:	b298      	uxth	r0, r3
 800912e:	2303      	movs	r3, #3
 8009130:	4a60      	ldr	r2, [pc, #384]	@ (80092b4 <Gyroscope_DrawBackground+0x3c4>)
 8009132:	2173      	movs	r1, #115	@ 0x73
 8009134:	f7f9 f812 	bl	800215c <BSP_LCD_DisplayStringAt>
    break;
 8009138:	e0ab      	b.n	8009292 <Gyroscope_DrawBackground+0x3a2>
    
    /* Y Negative Log */
  case 4:
    BSP_LCD_SetTextColor(LCD_COLOR_BLUE); 
 800913a:	4858      	ldr	r0, [pc, #352]	@ (800929c <Gyroscope_DrawBackground+0x3ac>)
 800913c:	f7f8 fedc 	bl	8001ef8 <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle(CIRCLE_LEFT_X_POS, CIRCLE_LEFT_Y_POS, CIRCLE_RADIUS);
 8009140:	f7f8 fe4e 	bl	8001de0 <BSP_LCD_GetXSize>
 8009144:	4603      	mov	r3, r0
 8009146:	4a56      	ldr	r2, [pc, #344]	@ (80092a0 <Gyroscope_DrawBackground+0x3b0>)
 8009148:	fba2 2303 	umull	r2, r3, r2, r3
 800914c:	089b      	lsrs	r3, r3, #2
 800914e:	b29b      	uxth	r3, r3
 8009150:	221e      	movs	r2, #30
 8009152:	21c8      	movs	r1, #200	@ 0xc8
 8009154:	4618      	mov	r0, r3
 8009156:	f7f9 fd8b 	bl	8002c70 <BSP_LCD_FillCircle>
    BSP_LCD_SetFont(&Font24);
 800915a:	4854      	ldr	r0, [pc, #336]	@ (80092ac <Gyroscope_DrawBackground+0x3bc>)
 800915c:	f7f8 fefe 	bl	8001f5c <BSP_LCD_SetFont>
    BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8009160:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009164:	f7f8 fec8 	bl	8001ef8 <BSP_LCD_SetTextColor>
    BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 8009168:	484c      	ldr	r0, [pc, #304]	@ (800929c <Gyroscope_DrawBackground+0x3ac>)
 800916a:	f7f8 fedd 	bl	8001f28 <BSP_LCD_SetBackColor>
    BSP_LCD_DisplayStringAt(CIRCLE_LEFT_X_POS-(CIRCLE_RADIUS/2), CIRCLE_LEFT_Y_POS-(CIRCLE_RADIUS/2), (uint8_t*)"Y-", LEFT_MODE);
 800916e:	f7f8 fe37 	bl	8001de0 <BSP_LCD_GetXSize>
 8009172:	4603      	mov	r3, r0
 8009174:	4a4a      	ldr	r2, [pc, #296]	@ (80092a0 <Gyroscope_DrawBackground+0x3b0>)
 8009176:	fba2 2303 	umull	r2, r3, r2, r3
 800917a:	089b      	lsrs	r3, r3, #2
 800917c:	b29b      	uxth	r3, r3
 800917e:	3b0f      	subs	r3, #15
 8009180:	b298      	uxth	r0, r3
 8009182:	2303      	movs	r3, #3
 8009184:	4a4c      	ldr	r2, [pc, #304]	@ (80092b8 <Gyroscope_DrawBackground+0x3c8>)
 8009186:	21b9      	movs	r1, #185	@ 0xb9
 8009188:	f7f8 ffe8 	bl	800215c <BSP_LCD_DisplayStringAt>
    break;
 800918c:	e081      	b.n	8009292 <Gyroscope_DrawBackground+0x3a2>
    
    /* Y Positive Log */
  case 8:
    BSP_LCD_SetTextColor(LCD_COLOR_GREEN); 
 800918e:	f04f 20ff 	mov.w	r0, #4278255360	@ 0xff00ff00
 8009192:	f7f8 feb1 	bl	8001ef8 <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle(CIRCLE_RIGHT_X_POS, CIRCLE_RIGHT_Y_POS, CIRCLE_RADIUS);
 8009196:	f7f8 fe23 	bl	8001de0 <BSP_LCD_GetXSize>
 800919a:	4603      	mov	r3, r0
 800919c:	4a40      	ldr	r2, [pc, #256]	@ (80092a0 <Gyroscope_DrawBackground+0x3b0>)
 800919e:	fba2 2303 	umull	r2, r3, r2, r3
 80091a2:	089b      	lsrs	r3, r3, #2
 80091a4:	b29b      	uxth	r3, r3
 80091a6:	009b      	lsls	r3, r3, #2
 80091a8:	b29b      	uxth	r3, r3
 80091aa:	221e      	movs	r2, #30
 80091ac:	21c8      	movs	r1, #200	@ 0xc8
 80091ae:	4618      	mov	r0, r3
 80091b0:	f7f9 fd5e 	bl	8002c70 <BSP_LCD_FillCircle>
    BSP_LCD_SetFont(&Font24);
 80091b4:	483d      	ldr	r0, [pc, #244]	@ (80092ac <Gyroscope_DrawBackground+0x3bc>)
 80091b6:	f7f8 fed1 	bl	8001f5c <BSP_LCD_SetFont>
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80091ba:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 80091be:	f7f8 fe9b 	bl	8001ef8 <BSP_LCD_SetTextColor>
    BSP_LCD_SetBackColor(LCD_COLOR_GREEN);
 80091c2:	f04f 20ff 	mov.w	r0, #4278255360	@ 0xff00ff00
 80091c6:	f7f8 feaf 	bl	8001f28 <BSP_LCD_SetBackColor>
    BSP_LCD_DisplayStringAt(CIRCLE_RIGHT_X_POS-(CIRCLE_RADIUS/2), CIRCLE_RIGHT_Y_POS-(CIRCLE_RADIUS/2), (uint8_t*)"Y+", LEFT_MODE);
 80091ca:	f7f8 fe09 	bl	8001de0 <BSP_LCD_GetXSize>
 80091ce:	4603      	mov	r3, r0
 80091d0:	4a33      	ldr	r2, [pc, #204]	@ (80092a0 <Gyroscope_DrawBackground+0x3b0>)
 80091d2:	fba2 2303 	umull	r2, r3, r2, r3
 80091d6:	089b      	lsrs	r3, r3, #2
 80091d8:	b29b      	uxth	r3, r3
 80091da:	009b      	lsls	r3, r3, #2
 80091dc:	b29b      	uxth	r3, r3
 80091de:	3b0f      	subs	r3, #15
 80091e0:	b298      	uxth	r0, r3
 80091e2:	2303      	movs	r3, #3
 80091e4:	4a35      	ldr	r2, [pc, #212]	@ (80092bc <Gyroscope_DrawBackground+0x3cc>)
 80091e6:	21b9      	movs	r1, #185	@ 0xb9
 80091e8:	f7f8 ffb8 	bl	800215c <BSP_LCD_DisplayStringAt>
    break;
 80091ec:	e051      	b.n	8009292 <Gyroscope_DrawBackground+0x3a2>
    
    /* Z Negative Log */
  case 16:	 
    if((state & 32) == 0)
 80091ee:	4b34      	ldr	r3, [pc, #208]	@ (80092c0 <Gyroscope_DrawBackground+0x3d0>)
 80091f0:	781b      	ldrb	r3, [r3, #0]
 80091f2:	f003 0320 	and.w	r3, r3, #32
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d10c      	bne.n	8009214 <Gyroscope_DrawBackground+0x324>
    {    
      BSP_LCD_SetTextColor(LCD_COLOR_ORANGE);
 80091fa:	482b      	ldr	r0, [pc, #172]	@ (80092a8 <Gyroscope_DrawBackground+0x3b8>)
 80091fc:	f7f8 fe7c 	bl	8001ef8 <BSP_LCD_SetTextColor>
      BSP_LCD_FillCircle(CIRCLE_CENTRAL_X_POS, CIRCLE_CENTRAL_Y_POS, CIRCLE_RADIUS);
 8009200:	f7f8 fdee 	bl	8001de0 <BSP_LCD_GetXSize>
 8009204:	4603      	mov	r3, r0
 8009206:	085b      	lsrs	r3, r3, #1
 8009208:	b29b      	uxth	r3, r3
 800920a:	221e      	movs	r2, #30
 800920c:	21c8      	movs	r1, #200	@ 0xc8
 800920e:	4618      	mov	r0, r3
 8009210:	f7f9 fd2e 	bl	8002c70 <BSP_LCD_FillCircle>
    }
    BSP_LCD_SetFont(&Font16);
 8009214:	482b      	ldr	r0, [pc, #172]	@ (80092c4 <Gyroscope_DrawBackground+0x3d4>)
 8009216:	f7f8 fea1 	bl	8001f5c <BSP_LCD_SetFont>
    BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800921a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800921e:	f7f8 fe6b 	bl	8001ef8 <BSP_LCD_SetTextColor>
    BSP_LCD_SetBackColor(LCD_COLOR_ORANGE);
 8009222:	4821      	ldr	r0, [pc, #132]	@ (80092a8 <Gyroscope_DrawBackground+0x3b8>)
 8009224:	f7f8 fe80 	bl	8001f28 <BSP_LCD_SetBackColor>
    BSP_LCD_DisplayStringAt(CIRCLE_CENTRAL_X_POS-(CIRCLE_RADIUS/2), CIRCLE_CENTRAL_Y_POS-(CIRCLE_RADIUS/2), (uint8_t*)"Z-", LEFT_MODE);
 8009228:	f7f8 fdda 	bl	8001de0 <BSP_LCD_GetXSize>
 800922c:	4603      	mov	r3, r0
 800922e:	085b      	lsrs	r3, r3, #1
 8009230:	b29b      	uxth	r3, r3
 8009232:	3b0f      	subs	r3, #15
 8009234:	b298      	uxth	r0, r3
 8009236:	2303      	movs	r3, #3
 8009238:	4a23      	ldr	r2, [pc, #140]	@ (80092c8 <Gyroscope_DrawBackground+0x3d8>)
 800923a:	21b9      	movs	r1, #185	@ 0xb9
 800923c:	f7f8 ff8e 	bl	800215c <BSP_LCD_DisplayStringAt>
    break;
 8009240:	e027      	b.n	8009292 <Gyroscope_DrawBackground+0x3a2>
    
    /* Z Positive Log */
  case 32:
    if((state & 16) == 0)
 8009242:	4b1f      	ldr	r3, [pc, #124]	@ (80092c0 <Gyroscope_DrawBackground+0x3d0>)
 8009244:	781b      	ldrb	r3, [r3, #0]
 8009246:	f003 0310 	and.w	r3, r3, #16
 800924a:	2b00      	cmp	r3, #0
 800924c:	d10c      	bne.n	8009268 <Gyroscope_DrawBackground+0x378>
    {	 
      BSP_LCD_SetTextColor(LCD_COLOR_ORANGE); 
 800924e:	4816      	ldr	r0, [pc, #88]	@ (80092a8 <Gyroscope_DrawBackground+0x3b8>)
 8009250:	f7f8 fe52 	bl	8001ef8 <BSP_LCD_SetTextColor>
      BSP_LCD_FillCircle(CIRCLE_CENTRAL_X_POS, CIRCLE_CENTRAL_Y_POS, CIRCLE_RADIUS);
 8009254:	f7f8 fdc4 	bl	8001de0 <BSP_LCD_GetXSize>
 8009258:	4603      	mov	r3, r0
 800925a:	085b      	lsrs	r3, r3, #1
 800925c:	b29b      	uxth	r3, r3
 800925e:	221e      	movs	r2, #30
 8009260:	21c8      	movs	r1, #200	@ 0xc8
 8009262:	4618      	mov	r0, r3
 8009264:	f7f9 fd04 	bl	8002c70 <BSP_LCD_FillCircle>
    }		
    BSP_LCD_SetFont(&Font16);
 8009268:	4816      	ldr	r0, [pc, #88]	@ (80092c4 <Gyroscope_DrawBackground+0x3d4>)
 800926a:	f7f8 fe77 	bl	8001f5c <BSP_LCD_SetFont>
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800926e:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8009272:	f7f8 fe41 	bl	8001ef8 <BSP_LCD_SetTextColor>
    BSP_LCD_SetBackColor(LCD_COLOR_ORANGE);
 8009276:	480c      	ldr	r0, [pc, #48]	@ (80092a8 <Gyroscope_DrawBackground+0x3b8>)
 8009278:	f7f8 fe56 	bl	8001f28 <BSP_LCD_SetBackColor>
    BSP_LCD_DisplayStringAt(CIRCLE_CENTRAL_X_POS, CIRCLE_CENTRAL_Y_POS, (uint8_t*)"Z+", LEFT_MODE);
 800927c:	f7f8 fdb0 	bl	8001de0 <BSP_LCD_GetXSize>
 8009280:	4603      	mov	r3, r0
 8009282:	085b      	lsrs	r3, r3, #1
 8009284:	b298      	uxth	r0, r3
 8009286:	2303      	movs	r3, #3
 8009288:	4a10      	ldr	r2, [pc, #64]	@ (80092cc <Gyroscope_DrawBackground+0x3dc>)
 800928a:	21c8      	movs	r1, #200	@ 0xc8
 800928c:	f7f8 ff66 	bl	800215c <BSP_LCD_DisplayStringAt>
    break;
 8009290:	bf00      	nop
  }
}
 8009292:	bf00      	nop
 8009294:	3708      	adds	r7, #8
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}
 800929a:	bf00      	nop
 800929c:	ff0000ff 	.word	0xff0000ff
 80092a0:	cccccccd 	.word	0xcccccccd
 80092a4:	ffff0000 	.word	0xffff0000
 80092a8:	ffffa500 	.word	0xffffa500
 80092ac:	200000a8 	.word	0x200000a8
 80092b0:	0800b860 	.word	0x0800b860
 80092b4:	0800b864 	.word	0x0800b864
 80092b8:	0800b868 	.word	0x0800b868
 80092bc:	0800b86c 	.word	0x0800b86c
 80092c0:	20000528 	.word	0x20000528
 80092c4:	200000b8 	.word	0x200000b8
 80092c8:	0800b870 	.word	0x0800b870
 80092cc:	0800b874 	.word	0x0800b874

080092d0 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80092d0:	b480      	push	{r7}
 80092d2:	af00      	add	r7, sp, #0
}
 80092d4:	bf00      	nop
 80092d6:	46bd      	mov	sp, r7
 80092d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092dc:	4770      	bx	lr

080092de <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80092de:	b480      	push	{r7}
 80092e0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80092e2:	bf00      	nop
 80092e4:	e7fd      	b.n	80092e2 <HardFault_Handler+0x4>

080092e6 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80092e6:	b480      	push	{r7}
 80092e8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80092ea:	bf00      	nop
 80092ec:	e7fd      	b.n	80092ea <MemManage_Handler+0x4>

080092ee <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80092ee:	b480      	push	{r7}
 80092f0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80092f2:	bf00      	nop
 80092f4:	e7fd      	b.n	80092f2 <BusFault_Handler+0x4>

080092f6 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80092f6:	b480      	push	{r7}
 80092f8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80092fa:	bf00      	nop
 80092fc:	e7fd      	b.n	80092fa <UsageFault_Handler+0x4>

080092fe <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80092fe:	b480      	push	{r7}
 8009300:	af00      	add	r7, sp, #0
}
 8009302:	bf00      	nop
 8009304:	46bd      	mov	sp, r7
 8009306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930a:	4770      	bx	lr

0800930c <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800930c:	b480      	push	{r7}
 800930e:	af00      	add	r7, sp, #0
}
 8009310:	bf00      	nop
 8009312:	46bd      	mov	sp, r7
 8009314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009318:	4770      	bx	lr

0800931a <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800931a:	b480      	push	{r7}
 800931c:	af00      	add	r7, sp, #0
}
 800931e:	bf00      	nop
 8009320:	46bd      	mov	sp, r7
 8009322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009326:	4770      	bx	lr

08009328 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8009328:	b580      	push	{r7, lr}
 800932a:	af00      	add	r7, sp, #0
  HAL_IncTick();
 800932c:	f7fa fd12 	bl	8003d54 <HAL_IncTick>
  Toggle_Leds();
 8009330:	f7ff fbb0 	bl	8008a94 <Toggle_Leds>
}
 8009334:	bf00      	nop
 8009336:	bd80      	pop	{r7, pc}

08009338 <EXTI0_IRQHandler>:
  * @brief  This function handles External line 0 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI0_IRQHandler(void)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(KEY_BUTTON_PIN);
 800933c:	2001      	movs	r0, #1
 800933e:	f7fb fcab 	bl	8004c98 <HAL_GPIO_EXTI_IRQHandler>
}
 8009342:	bf00      	nop
 8009344:	bd80      	pop	{r7, pc}

08009346 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8009346:	b580      	push	{r7, lr}
 8009348:	b086      	sub	sp, #24
 800934a:	af00      	add	r7, sp, #0
 800934c:	60f8      	str	r0, [r7, #12]
 800934e:	60b9      	str	r1, [r7, #8]
 8009350:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009352:	2300      	movs	r3, #0
 8009354:	617b      	str	r3, [r7, #20]
 8009356:	e00a      	b.n	800936e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8009358:	f3af 8000 	nop.w
 800935c:	4601      	mov	r1, r0
 800935e:	68bb      	ldr	r3, [r7, #8]
 8009360:	1c5a      	adds	r2, r3, #1
 8009362:	60ba      	str	r2, [r7, #8]
 8009364:	b2ca      	uxtb	r2, r1
 8009366:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009368:	697b      	ldr	r3, [r7, #20]
 800936a:	3301      	adds	r3, #1
 800936c:	617b      	str	r3, [r7, #20]
 800936e:	697a      	ldr	r2, [r7, #20]
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	429a      	cmp	r2, r3
 8009374:	dbf0      	blt.n	8009358 <_read+0x12>
  }

  return len;
 8009376:	687b      	ldr	r3, [r7, #4]
}
 8009378:	4618      	mov	r0, r3
 800937a:	3718      	adds	r7, #24
 800937c:	46bd      	mov	sp, r7
 800937e:	bd80      	pop	{r7, pc}

08009380 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b086      	sub	sp, #24
 8009384:	af00      	add	r7, sp, #0
 8009386:	60f8      	str	r0, [r7, #12]
 8009388:	60b9      	str	r1, [r7, #8]
 800938a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800938c:	2300      	movs	r3, #0
 800938e:	617b      	str	r3, [r7, #20]
 8009390:	e009      	b.n	80093a6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8009392:	68bb      	ldr	r3, [r7, #8]
 8009394:	1c5a      	adds	r2, r3, #1
 8009396:	60ba      	str	r2, [r7, #8]
 8009398:	781b      	ldrb	r3, [r3, #0]
 800939a:	4618      	mov	r0, r3
 800939c:	f000 fef0 	bl	800a180 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80093a0:	697b      	ldr	r3, [r7, #20]
 80093a2:	3301      	adds	r3, #1
 80093a4:	617b      	str	r3, [r7, #20]
 80093a6:	697a      	ldr	r2, [r7, #20]
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	429a      	cmp	r2, r3
 80093ac:	dbf1      	blt.n	8009392 <_write+0x12>
  }
  return len;
 80093ae:	687b      	ldr	r3, [r7, #4]
}
 80093b0:	4618      	mov	r0, r3
 80093b2:	3718      	adds	r7, #24
 80093b4:	46bd      	mov	sp, r7
 80093b6:	bd80      	pop	{r7, pc}

080093b8 <_close>:

int _close(int file)
{
 80093b8:	b480      	push	{r7}
 80093ba:	b083      	sub	sp, #12
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80093c0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80093c4:	4618      	mov	r0, r3
 80093c6:	370c      	adds	r7, #12
 80093c8:	46bd      	mov	sp, r7
 80093ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ce:	4770      	bx	lr

080093d0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80093d0:	b480      	push	{r7}
 80093d2:	b083      	sub	sp, #12
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
 80093d8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80093e0:	605a      	str	r2, [r3, #4]
  return 0;
 80093e2:	2300      	movs	r3, #0
}
 80093e4:	4618      	mov	r0, r3
 80093e6:	370c      	adds	r7, #12
 80093e8:	46bd      	mov	sp, r7
 80093ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ee:	4770      	bx	lr

080093f0 <_isatty>:

int _isatty(int file)
{
 80093f0:	b480      	push	{r7}
 80093f2:	b083      	sub	sp, #12
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80093f8:	2301      	movs	r3, #1
}
 80093fa:	4618      	mov	r0, r3
 80093fc:	370c      	adds	r7, #12
 80093fe:	46bd      	mov	sp, r7
 8009400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009404:	4770      	bx	lr

08009406 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8009406:	b480      	push	{r7}
 8009408:	b085      	sub	sp, #20
 800940a:	af00      	add	r7, sp, #0
 800940c:	60f8      	str	r0, [r7, #12]
 800940e:	60b9      	str	r1, [r7, #8]
 8009410:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8009412:	2300      	movs	r3, #0
}
 8009414:	4618      	mov	r0, r3
 8009416:	3714      	adds	r7, #20
 8009418:	46bd      	mov	sp, r7
 800941a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941e:	4770      	bx	lr

08009420 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b086      	sub	sp, #24
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8009428:	4a14      	ldr	r2, [pc, #80]	@ (800947c <_sbrk+0x5c>)
 800942a:	4b15      	ldr	r3, [pc, #84]	@ (8009480 <_sbrk+0x60>)
 800942c:	1ad3      	subs	r3, r2, r3
 800942e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8009430:	697b      	ldr	r3, [r7, #20]
 8009432:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8009434:	4b13      	ldr	r3, [pc, #76]	@ (8009484 <_sbrk+0x64>)
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d102      	bne.n	8009442 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800943c:	4b11      	ldr	r3, [pc, #68]	@ (8009484 <_sbrk+0x64>)
 800943e:	4a12      	ldr	r2, [pc, #72]	@ (8009488 <_sbrk+0x68>)
 8009440:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8009442:	4b10      	ldr	r3, [pc, #64]	@ (8009484 <_sbrk+0x64>)
 8009444:	681a      	ldr	r2, [r3, #0]
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	4413      	add	r3, r2
 800944a:	693a      	ldr	r2, [r7, #16]
 800944c:	429a      	cmp	r2, r3
 800944e:	d207      	bcs.n	8009460 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8009450:	f001 f8fa 	bl	800a648 <__errno>
 8009454:	4603      	mov	r3, r0
 8009456:	220c      	movs	r2, #12
 8009458:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800945a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800945e:	e009      	b.n	8009474 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8009460:	4b08      	ldr	r3, [pc, #32]	@ (8009484 <_sbrk+0x64>)
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8009466:	4b07      	ldr	r3, [pc, #28]	@ (8009484 <_sbrk+0x64>)
 8009468:	681a      	ldr	r2, [r3, #0]
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	4413      	add	r3, r2
 800946e:	4a05      	ldr	r2, [pc, #20]	@ (8009484 <_sbrk+0x64>)
 8009470:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8009472:	68fb      	ldr	r3, [r7, #12]
}
 8009474:	4618      	mov	r0, r3
 8009476:	3718      	adds	r7, #24
 8009478:	46bd      	mov	sp, r7
 800947a:	bd80      	pop	{r7, pc}
 800947c:	20030000 	.word	0x20030000
 8009480:	00000400 	.word	0x00000400
 8009484:	2000052c 	.word	0x2000052c
 8009488:	20004310 	.word	0x20004310

0800948c <Touchscreen_demo>:
  * @brief  Touchscreen Demo
  * @param  None
  * @retval None
  */
void Touchscreen_demo(void)
{ 
 800948c:	b590      	push	{r4, r7, lr}
 800948e:	b083      	sub	sp, #12
 8009490:	af00      	add	r7, sp, #0
  uint8_t status = 0;
 8009492:	2300      	movs	r3, #0
 8009494:	71bb      	strb	r3, [r7, #6]
  uint16_t x,y;
  uint8_t state = 0;
 8009496:	2300      	movs	r3, #0
 8009498:	71fb      	strb	r3, [r7, #7]
  
  if(IsCalibrationDone() == 0)
 800949a:	f000 fd7d 	bl	8009f98 <IsCalibrationDone>
 800949e:	4603      	mov	r3, r0
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d101      	bne.n	80094a8 <Touchscreen_demo+0x1c>
  {
    Touchscreen_Calibration();
 80094a4:	f000 fb84 	bl	8009bb0 <Touchscreen_Calibration>
  }
  
  Touchscreen_SetHint();
 80094a8:	f000 f974 	bl	8009794 <Touchscreen_SetHint>
  
  status = BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 80094ac:	f7f8 fc98 	bl	8001de0 <BSP_LCD_GetXSize>
 80094b0:	4603      	mov	r3, r0
 80094b2:	b29c      	uxth	r4, r3
 80094b4:	f7f8 fca0 	bl	8001df8 <BSP_LCD_GetYSize>
 80094b8:	4603      	mov	r3, r0
 80094ba:	b29b      	uxth	r3, r3
 80094bc:	4619      	mov	r1, r3
 80094be:	4620      	mov	r0, r4
 80094c0:	f7fa facc 	bl	8003a5c <BSP_TS_Init>
 80094c4:	4603      	mov	r3, r0
 80094c6:	71bb      	strb	r3, [r7, #6]
  
  if (status != TS_OK)
 80094c8:	79bb      	ldrb	r3, [r7, #6]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d01d      	beq.n	800950a <Touchscreen_demo+0x7e>
  {
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE); 
 80094ce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80094d2:	f7f8 fd29 	bl	8001f28 <BSP_LCD_SetBackColor>
    BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80094d6:	48a9      	ldr	r0, [pc, #676]	@ (800977c <Touchscreen_demo+0x2f0>)
 80094d8:	f7f8 fd0e 	bl	8001ef8 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()- 95, (uint8_t*)"ERROR", CENTER_MODE);
 80094dc:	f7f8 fc8c 	bl	8001df8 <BSP_LCD_GetYSize>
 80094e0:	4603      	mov	r3, r0
 80094e2:	b29b      	uxth	r3, r3
 80094e4:	3b5f      	subs	r3, #95	@ 0x5f
 80094e6:	b299      	uxth	r1, r3
 80094e8:	2301      	movs	r3, #1
 80094ea:	4aa5      	ldr	r2, [pc, #660]	@ (8009780 <Touchscreen_demo+0x2f4>)
 80094ec:	2000      	movs	r0, #0
 80094ee:	f7f8 fe35 	bl	800215c <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()- 80, (uint8_t*)"Touchscreen cannot be initialized", CENTER_MODE);
 80094f2:	f7f8 fc81 	bl	8001df8 <BSP_LCD_GetYSize>
 80094f6:	4603      	mov	r3, r0
 80094f8:	b29b      	uxth	r3, r3
 80094fa:	3b50      	subs	r3, #80	@ 0x50
 80094fc:	b299      	uxth	r1, r3
 80094fe:	2301      	movs	r3, #1
 8009500:	4aa0      	ldr	r2, [pc, #640]	@ (8009784 <Touchscreen_demo+0x2f8>)
 8009502:	2000      	movs	r0, #0
 8009504:	f7f8 fe2a 	bl	800215c <BSP_LCD_DisplayStringAt>
 8009508:	e003      	b.n	8009512 <Touchscreen_demo+0x86>
  }
  else
  {
    Touchscreen_DrawBackground(state);
 800950a:	79fb      	ldrb	r3, [r7, #7]
 800950c:	4618      	mov	r0, r3
 800950e:	f000 f9ad 	bl	800986c <Touchscreen_DrawBackground>
  }
  
  while (1)
  {
    if (status == TS_OK)
 8009512:	79bb      	ldrb	r3, [r7, #6]
 8009514:	2b00      	cmp	r3, #0
 8009516:	f040 8128 	bne.w	800976a <Touchscreen_demo+0x2de>
    {
      BSP_TS_GetState(&TS_State);
 800951a:	489b      	ldr	r0, [pc, #620]	@ (8009788 <Touchscreen_demo+0x2fc>)
 800951c:	f7fa fad8 	bl	8003ad0 <BSP_TS_GetState>
      
      if (TS_State.TouchDetected) {
 8009520:	4b99      	ldr	r3, [pc, #612]	@ (8009788 <Touchscreen_demo+0x2fc>)
 8009522:	881b      	ldrh	r3, [r3, #0]
 8009524:	2b00      	cmp	r3, #0
 8009526:	f000 8120 	beq.w	800976a <Touchscreen_demo+0x2de>
        x = Calibration_GetX(TS_State.X);
 800952a:	4b97      	ldr	r3, [pc, #604]	@ (8009788 <Touchscreen_demo+0x2fc>)
 800952c:	885b      	ldrh	r3, [r3, #2]
 800952e:	4618      	mov	r0, r3
 8009530:	f000 fcea 	bl	8009f08 <Calibration_GetX>
 8009534:	4603      	mov	r3, r0
 8009536:	80bb      	strh	r3, [r7, #4]
        y = Calibration_GetY(TS_State.Y);
 8009538:	4b93      	ldr	r3, [pc, #588]	@ (8009788 <Touchscreen_demo+0x2fc>)
 800953a:	889b      	ldrh	r3, [r3, #4]
 800953c:	4618      	mov	r0, r3
 800953e:	f000 fd07 	bl	8009f50 <Calibration_GetY>
 8009542:	4603      	mov	r3, r0
 8009544:	807b      	strh	r3, [r7, #2]
        
        if((TS_State.TouchDetected) && 
 8009546:	4b90      	ldr	r3, [pc, #576]	@ (8009788 <Touchscreen_demo+0x2fc>)
 8009548:	881b      	ldrh	r3, [r3, #0]
 800954a:	2b00      	cmp	r3, #0
 800954c:	f000 810d 	beq.w	800976a <Touchscreen_demo+0x2de>
           (y > (CIRCLE_YPOS(1) - CIRCLE_RADIUS))&&
 8009550:	887c      	ldrh	r4, [r7, #2]
 8009552:	f7f8 fc51 	bl	8001df8 <BSP_LCD_GetYSize>
 8009556:	4603      	mov	r3, r0
 8009558:	3b78      	subs	r3, #120	@ 0x78
        if((TS_State.TouchDetected) && 
 800955a:	429c      	cmp	r4, r3
 800955c:	f240 8105 	bls.w	800976a <Touchscreen_demo+0x2de>
             (y < (CIRCLE_YPOS(1) + CIRCLE_RADIUS)))
 8009560:	887c      	ldrh	r4, [r7, #2]
 8009562:	f7f8 fc49 	bl	8001df8 <BSP_LCD_GetYSize>
 8009566:	4603      	mov	r3, r0
 8009568:	3b3c      	subs	r3, #60	@ 0x3c
           (y > (CIRCLE_YPOS(1) - CIRCLE_RADIUS))&&
 800956a:	429c      	cmp	r4, r3
 800956c:	f080 80fd 	bcs.w	800976a <Touchscreen_demo+0x2de>
        {
          
          if((x > (CIRCLE_XPOS(1) - CIRCLE_RADIUS))&&
 8009570:	88bc      	ldrh	r4, [r7, #4]
 8009572:	f7f8 fc35 	bl	8001de0 <BSP_LCD_GetXSize>
 8009576:	4603      	mov	r3, r0
 8009578:	4a84      	ldr	r2, [pc, #528]	@ (800978c <Touchscreen_demo+0x300>)
 800957a:	fba2 2303 	umull	r2, r3, r2, r3
 800957e:	089b      	lsrs	r3, r3, #2
 8009580:	3b1e      	subs	r3, #30
 8009582:	429c      	cmp	r4, r3
 8009584:	d92c      	bls.n	80095e0 <Touchscreen_demo+0x154>
             (x < (CIRCLE_XPOS(1) + CIRCLE_RADIUS)))
 8009586:	88bc      	ldrh	r4, [r7, #4]
 8009588:	f7f8 fc2a 	bl	8001de0 <BSP_LCD_GetXSize>
 800958c:	4603      	mov	r3, r0
 800958e:	4a7f      	ldr	r2, [pc, #508]	@ (800978c <Touchscreen_demo+0x300>)
 8009590:	fba2 2303 	umull	r2, r3, r2, r3
 8009594:	089b      	lsrs	r3, r3, #2
 8009596:	331e      	adds	r3, #30
          if((x > (CIRCLE_XPOS(1) - CIRCLE_RADIUS))&&
 8009598:	429c      	cmp	r4, r3
 800959a:	d221      	bcs.n	80095e0 <Touchscreen_demo+0x154>
          {
            if((state & 1) == 0)
 800959c:	79fb      	ldrb	r3, [r7, #7]
 800959e:	f003 0301 	and.w	r3, r3, #1
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d11c      	bne.n	80095e0 <Touchscreen_demo+0x154>
            {
              Touchscreen_DrawBackground(1);
 80095a6:	2001      	movs	r0, #1
 80095a8:	f000 f960 	bl	800986c <Touchscreen_DrawBackground>
              BSP_LCD_SetTextColor(LCD_COLOR_BLUE); 
 80095ac:	4878      	ldr	r0, [pc, #480]	@ (8009790 <Touchscreen_demo+0x304>)
 80095ae:	f7f8 fca3 	bl	8001ef8 <BSP_LCD_SetTextColor>
              BSP_LCD_FillCircle(CIRCLE_XPOS(1), CIRCLE_YPOS(1), CIRCLE_RADIUS);
 80095b2:	f7f8 fc15 	bl	8001de0 <BSP_LCD_GetXSize>
 80095b6:	4603      	mov	r3, r0
 80095b8:	4a74      	ldr	r2, [pc, #464]	@ (800978c <Touchscreen_demo+0x300>)
 80095ba:	fba2 2303 	umull	r2, r3, r2, r3
 80095be:	089b      	lsrs	r3, r3, #2
 80095c0:	b29c      	uxth	r4, r3
 80095c2:	f7f8 fc19 	bl	8001df8 <BSP_LCD_GetYSize>
 80095c6:	4603      	mov	r3, r0
 80095c8:	b29b      	uxth	r3, r3
 80095ca:	3b5a      	subs	r3, #90	@ 0x5a
 80095cc:	b29b      	uxth	r3, r3
 80095ce:	221e      	movs	r2, #30
 80095d0:	4619      	mov	r1, r3
 80095d2:	4620      	mov	r0, r4
 80095d4:	f7f9 fb4c 	bl	8002c70 <BSP_LCD_FillCircle>
              state |= 1;
 80095d8:	79fb      	ldrb	r3, [r7, #7]
 80095da:	f043 0301 	orr.w	r3, r3, #1
 80095de:	71fb      	strb	r3, [r7, #7]
            }
          }
          if((x > (CIRCLE_XPOS(2) - CIRCLE_RADIUS))&&
 80095e0:	88bc      	ldrh	r4, [r7, #4]
 80095e2:	f7f8 fbfd 	bl	8001de0 <BSP_LCD_GetXSize>
 80095e6:	4603      	mov	r3, r0
 80095e8:	005b      	lsls	r3, r3, #1
 80095ea:	4a68      	ldr	r2, [pc, #416]	@ (800978c <Touchscreen_demo+0x300>)
 80095ec:	fba2 2303 	umull	r2, r3, r2, r3
 80095f0:	089b      	lsrs	r3, r3, #2
 80095f2:	3b1e      	subs	r3, #30
 80095f4:	429c      	cmp	r4, r3
 80095f6:	d92e      	bls.n	8009656 <Touchscreen_demo+0x1ca>
             (x < (CIRCLE_XPOS(2) + CIRCLE_RADIUS)))
 80095f8:	88bc      	ldrh	r4, [r7, #4]
 80095fa:	f7f8 fbf1 	bl	8001de0 <BSP_LCD_GetXSize>
 80095fe:	4603      	mov	r3, r0
 8009600:	005b      	lsls	r3, r3, #1
 8009602:	4a62      	ldr	r2, [pc, #392]	@ (800978c <Touchscreen_demo+0x300>)
 8009604:	fba2 2303 	umull	r2, r3, r2, r3
 8009608:	089b      	lsrs	r3, r3, #2
 800960a:	331e      	adds	r3, #30
          if((x > (CIRCLE_XPOS(2) - CIRCLE_RADIUS))&&
 800960c:	429c      	cmp	r4, r3
 800960e:	d222      	bcs.n	8009656 <Touchscreen_demo+0x1ca>
          {
            if((state & 2) == 0)
 8009610:	79fb      	ldrb	r3, [r7, #7]
 8009612:	f003 0302 	and.w	r3, r3, #2
 8009616:	2b00      	cmp	r3, #0
 8009618:	d11d      	bne.n	8009656 <Touchscreen_demo+0x1ca>
            {          
              Touchscreen_DrawBackground(2);
 800961a:	2002      	movs	r0, #2
 800961c:	f000 f926 	bl	800986c <Touchscreen_DrawBackground>
              BSP_LCD_SetTextColor(LCD_COLOR_RED); 
 8009620:	4856      	ldr	r0, [pc, #344]	@ (800977c <Touchscreen_demo+0x2f0>)
 8009622:	f7f8 fc69 	bl	8001ef8 <BSP_LCD_SetTextColor>
              BSP_LCD_FillCircle(CIRCLE_XPOS(2), CIRCLE_YPOS(2), CIRCLE_RADIUS);
 8009626:	f7f8 fbdb 	bl	8001de0 <BSP_LCD_GetXSize>
 800962a:	4603      	mov	r3, r0
 800962c:	005b      	lsls	r3, r3, #1
 800962e:	4a57      	ldr	r2, [pc, #348]	@ (800978c <Touchscreen_demo+0x300>)
 8009630:	fba2 2303 	umull	r2, r3, r2, r3
 8009634:	089b      	lsrs	r3, r3, #2
 8009636:	b29c      	uxth	r4, r3
 8009638:	f7f8 fbde 	bl	8001df8 <BSP_LCD_GetYSize>
 800963c:	4603      	mov	r3, r0
 800963e:	b29b      	uxth	r3, r3
 8009640:	3b5a      	subs	r3, #90	@ 0x5a
 8009642:	b29b      	uxth	r3, r3
 8009644:	221e      	movs	r2, #30
 8009646:	4619      	mov	r1, r3
 8009648:	4620      	mov	r0, r4
 800964a:	f7f9 fb11 	bl	8002c70 <BSP_LCD_FillCircle>
              state |= 2;
 800964e:	79fb      	ldrb	r3, [r7, #7]
 8009650:	f043 0302 	orr.w	r3, r3, #2
 8009654:	71fb      	strb	r3, [r7, #7]
            }          
          }
          
          if((x > (CIRCLE_XPOS(3) - CIRCLE_RADIUS))&&
 8009656:	88bc      	ldrh	r4, [r7, #4]
 8009658:	f7f8 fbc2 	bl	8001de0 <BSP_LCD_GetXSize>
 800965c:	4602      	mov	r2, r0
 800965e:	4613      	mov	r3, r2
 8009660:	005b      	lsls	r3, r3, #1
 8009662:	4413      	add	r3, r2
 8009664:	4a49      	ldr	r2, [pc, #292]	@ (800978c <Touchscreen_demo+0x300>)
 8009666:	fba2 2303 	umull	r2, r3, r2, r3
 800966a:	089b      	lsrs	r3, r3, #2
 800966c:	3b1e      	subs	r3, #30
 800966e:	429c      	cmp	r4, r3
 8009670:	d933      	bls.n	80096da <Touchscreen_demo+0x24e>
             (x < (CIRCLE_XPOS(3) + CIRCLE_RADIUS)))
 8009672:	88bc      	ldrh	r4, [r7, #4]
 8009674:	f7f8 fbb4 	bl	8001de0 <BSP_LCD_GetXSize>
 8009678:	4602      	mov	r2, r0
 800967a:	4613      	mov	r3, r2
 800967c:	005b      	lsls	r3, r3, #1
 800967e:	4413      	add	r3, r2
 8009680:	4a42      	ldr	r2, [pc, #264]	@ (800978c <Touchscreen_demo+0x300>)
 8009682:	fba2 2303 	umull	r2, r3, r2, r3
 8009686:	089b      	lsrs	r3, r3, #2
 8009688:	331e      	adds	r3, #30
          if((x > (CIRCLE_XPOS(3) - CIRCLE_RADIUS))&&
 800968a:	429c      	cmp	r4, r3
 800968c:	d225      	bcs.n	80096da <Touchscreen_demo+0x24e>
          {
            if((state & 4) == 0)
 800968e:	79fb      	ldrb	r3, [r7, #7]
 8009690:	f003 0304 	and.w	r3, r3, #4
 8009694:	2b00      	cmp	r3, #0
 8009696:	d120      	bne.n	80096da <Touchscreen_demo+0x24e>
            {           
              Touchscreen_DrawBackground(4);
 8009698:	2004      	movs	r0, #4
 800969a:	f000 f8e7 	bl	800986c <Touchscreen_DrawBackground>
              BSP_LCD_SetTextColor(LCD_COLOR_YELLOW); 
 800969e:	f06f 00ff 	mvn.w	r0, #255	@ 0xff
 80096a2:	f7f8 fc29 	bl	8001ef8 <BSP_LCD_SetTextColor>
              BSP_LCD_FillCircle(CIRCLE_XPOS(3), CIRCLE_YPOS(3), CIRCLE_RADIUS);
 80096a6:	f7f8 fb9b 	bl	8001de0 <BSP_LCD_GetXSize>
 80096aa:	4602      	mov	r2, r0
 80096ac:	4613      	mov	r3, r2
 80096ae:	005b      	lsls	r3, r3, #1
 80096b0:	4413      	add	r3, r2
 80096b2:	4a36      	ldr	r2, [pc, #216]	@ (800978c <Touchscreen_demo+0x300>)
 80096b4:	fba2 2303 	umull	r2, r3, r2, r3
 80096b8:	089b      	lsrs	r3, r3, #2
 80096ba:	b29c      	uxth	r4, r3
 80096bc:	f7f8 fb9c 	bl	8001df8 <BSP_LCD_GetYSize>
 80096c0:	4603      	mov	r3, r0
 80096c2:	b29b      	uxth	r3, r3
 80096c4:	3b5a      	subs	r3, #90	@ 0x5a
 80096c6:	b29b      	uxth	r3, r3
 80096c8:	221e      	movs	r2, #30
 80096ca:	4619      	mov	r1, r3
 80096cc:	4620      	mov	r0, r4
 80096ce:	f7f9 facf 	bl	8002c70 <BSP_LCD_FillCircle>
              state |= 4;
 80096d2:	79fb      	ldrb	r3, [r7, #7]
 80096d4:	f043 0304 	orr.w	r3, r3, #4
 80096d8:	71fb      	strb	r3, [r7, #7]
            }            
          }
          
          if((x > (CIRCLE_XPOS(4) - CIRCLE_RADIUS))&&
 80096da:	88bc      	ldrh	r4, [r7, #4]
 80096dc:	f7f8 fb80 	bl	8001de0 <BSP_LCD_GetXSize>
 80096e0:	4603      	mov	r3, r0
 80096e2:	009b      	lsls	r3, r3, #2
 80096e4:	4a29      	ldr	r2, [pc, #164]	@ (800978c <Touchscreen_demo+0x300>)
 80096e6:	fba2 2303 	umull	r2, r3, r2, r3
 80096ea:	089b      	lsrs	r3, r3, #2
 80096ec:	3b1e      	subs	r3, #30
 80096ee:	429c      	cmp	r4, r3
 80096f0:	d92f      	bls.n	8009752 <Touchscreen_demo+0x2c6>
             (x < (CIRCLE_XPOS(4) + CIRCLE_RADIUS)))
 80096f2:	88bc      	ldrh	r4, [r7, #4]
 80096f4:	f7f8 fb74 	bl	8001de0 <BSP_LCD_GetXSize>
 80096f8:	4603      	mov	r3, r0
 80096fa:	009b      	lsls	r3, r3, #2
 80096fc:	4a23      	ldr	r2, [pc, #140]	@ (800978c <Touchscreen_demo+0x300>)
 80096fe:	fba2 2303 	umull	r2, r3, r2, r3
 8009702:	089b      	lsrs	r3, r3, #2
 8009704:	331e      	adds	r3, #30
          if((x > (CIRCLE_XPOS(4) - CIRCLE_RADIUS))&&
 8009706:	429c      	cmp	r4, r3
 8009708:	d223      	bcs.n	8009752 <Touchscreen_demo+0x2c6>
          {
            if((state & 8) == 0)
 800970a:	79fb      	ldrb	r3, [r7, #7]
 800970c:	f003 0308 	and.w	r3, r3, #8
 8009710:	2b00      	cmp	r3, #0
 8009712:	d11e      	bne.n	8009752 <Touchscreen_demo+0x2c6>
            {           
              Touchscreen_DrawBackground(8);
 8009714:	2008      	movs	r0, #8
 8009716:	f000 f8a9 	bl	800986c <Touchscreen_DrawBackground>
              BSP_LCD_SetTextColor(LCD_COLOR_GREEN); 
 800971a:	f04f 20ff 	mov.w	r0, #4278255360	@ 0xff00ff00
 800971e:	f7f8 fbeb 	bl	8001ef8 <BSP_LCD_SetTextColor>
              BSP_LCD_FillCircle(CIRCLE_XPOS(4), CIRCLE_YPOS(3), CIRCLE_RADIUS);
 8009722:	f7f8 fb5d 	bl	8001de0 <BSP_LCD_GetXSize>
 8009726:	4603      	mov	r3, r0
 8009728:	009b      	lsls	r3, r3, #2
 800972a:	4a18      	ldr	r2, [pc, #96]	@ (800978c <Touchscreen_demo+0x300>)
 800972c:	fba2 2303 	umull	r2, r3, r2, r3
 8009730:	089b      	lsrs	r3, r3, #2
 8009732:	b29c      	uxth	r4, r3
 8009734:	f7f8 fb60 	bl	8001df8 <BSP_LCD_GetYSize>
 8009738:	4603      	mov	r3, r0
 800973a:	b29b      	uxth	r3, r3
 800973c:	3b5a      	subs	r3, #90	@ 0x5a
 800973e:	b29b      	uxth	r3, r3
 8009740:	221e      	movs	r2, #30
 8009742:	4619      	mov	r1, r3
 8009744:	4620      	mov	r0, r4
 8009746:	f7f9 fa93 	bl	8002c70 <BSP_LCD_FillCircle>
              state |= 8;
 800974a:	79fb      	ldrb	r3, [r7, #7]
 800974c:	f043 0308 	orr.w	r3, r3, #8
 8009750:	71fb      	strb	r3, [r7, #7]
            }           
          }  
          if (state != 0x0F)
 8009752:	79fb      	ldrb	r3, [r7, #7]
 8009754:	2b0f      	cmp	r3, #15
 8009756:	d003      	beq.n	8009760 <Touchscreen_demo+0x2d4>
          {
            TS_State.TouchDetected = 0;
 8009758:	4b0b      	ldr	r3, [pc, #44]	@ (8009788 <Touchscreen_demo+0x2fc>)
 800975a:	2200      	movs	r2, #0
 800975c:	801a      	strh	r2, [r3, #0]
 800975e:	e004      	b.n	800976a <Touchscreen_demo+0x2de>
          }
          else {
            if(CheckForUserInput() > 0)
 8009760:	f7ff f984 	bl	8008a6c <CheckForUserInput>
 8009764:	4603      	mov	r3, r0
 8009766:	2b00      	cmp	r3, #0
 8009768:	d103      	bne.n	8009772 <Touchscreen_demo+0x2e6>
          }
        }   
      }
    }
    
    HAL_Delay(100);
 800976a:	2064      	movs	r0, #100	@ 0x64
 800976c:	f7fa fb12 	bl	8003d94 <HAL_Delay>
    if (status == TS_OK)
 8009770:	e6cf      	b.n	8009512 <Touchscreen_demo+0x86>
              return;
 8009772:	bf00      	nop
  }
}
 8009774:	370c      	adds	r7, #12
 8009776:	46bd      	mov	sp, r7
 8009778:	bd90      	pop	{r4, r7, pc}
 800977a:	bf00      	nop
 800977c:	ffff0000 	.word	0xffff0000
 8009780:	0800b878 	.word	0x0800b878
 8009784:	0800b880 	.word	0x0800b880
 8009788:	20000530 	.word	0x20000530
 800978c:	cccccccd 	.word	0xcccccccd
 8009790:	ff0000ff 	.word	0xff0000ff

08009794 <Touchscreen_SetHint>:
  * @brief  Display TS Demo Hint
  * @param  None
  * @retval None
  */
static void Touchscreen_SetHint(void)
{
 8009794:	b598      	push	{r3, r4, r7, lr}
 8009796:	af00      	add	r7, sp, #0
  /* Clear the LCD */ 
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8009798:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800979c:	f7f8 fc0e 	bl	8001fbc <BSP_LCD_Clear>
  
  /* Set Touchscreen Demo description */
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 80097a0:	482b      	ldr	r0, [pc, #172]	@ (8009850 <Touchscreen_SetHint+0xbc>)
 80097a2:	f7f8 fba9 	bl	8001ef8 <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, 0, BSP_LCD_GetXSize(), 80);
 80097a6:	f7f8 fb1b 	bl	8001de0 <BSP_LCD_GetXSize>
 80097aa:	4603      	mov	r3, r0
 80097ac:	b29a      	uxth	r2, r3
 80097ae:	2350      	movs	r3, #80	@ 0x50
 80097b0:	2100      	movs	r1, #0
 80097b2:	2000      	movs	r0, #0
 80097b4:	f7f9 fa02 	bl	8002bbc <BSP_LCD_FillRect>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80097b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80097bc:	f7f8 fb9c 	bl	8001ef8 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_BLUE); 
 80097c0:	4823      	ldr	r0, [pc, #140]	@ (8009850 <Touchscreen_SetHint+0xbc>)
 80097c2:	f7f8 fbb1 	bl	8001f28 <BSP_LCD_SetBackColor>
  BSP_LCD_SetFont(&Font24);
 80097c6:	4823      	ldr	r0, [pc, #140]	@ (8009854 <Touchscreen_SetHint+0xc0>)
 80097c8:	f7f8 fbc8 	bl	8001f5c <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 0, (uint8_t*)"Touchscreen", CENTER_MODE);
 80097cc:	2301      	movs	r3, #1
 80097ce:	4a22      	ldr	r2, [pc, #136]	@ (8009858 <Touchscreen_SetHint+0xc4>)
 80097d0:	2100      	movs	r1, #0
 80097d2:	2000      	movs	r0, #0
 80097d4:	f7f8 fcc2 	bl	800215c <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetFont(&Font12);
 80097d8:	4820      	ldr	r0, [pc, #128]	@ (800985c <Touchscreen_SetHint+0xc8>)
 80097da:	f7f8 fbbf 	bl	8001f5c <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 30, (uint8_t*)"Please use the Touchscreen to", CENTER_MODE);
 80097de:	2301      	movs	r3, #1
 80097e0:	4a1f      	ldr	r2, [pc, #124]	@ (8009860 <Touchscreen_SetHint+0xcc>)
 80097e2:	211e      	movs	r1, #30
 80097e4:	2000      	movs	r0, #0
 80097e6:	f7f8 fcb9 	bl	800215c <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, 45, (uint8_t*)"activate the colored circle", CENTER_MODE);
 80097ea:	2301      	movs	r3, #1
 80097ec:	4a1d      	ldr	r2, [pc, #116]	@ (8009864 <Touchscreen_SetHint+0xd0>)
 80097ee:	212d      	movs	r1, #45	@ 0x2d
 80097f0:	2000      	movs	r0, #0
 80097f2:	f7f8 fcb3 	bl	800215c <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, 60, (uint8_t*)"inside the rectangle", CENTER_MODE);
 80097f6:	2301      	movs	r3, #1
 80097f8:	4a1b      	ldr	r2, [pc, #108]	@ (8009868 <Touchscreen_SetHint+0xd4>)
 80097fa:	213c      	movs	r1, #60	@ 0x3c
 80097fc:	2000      	movs	r0, #0
 80097fe:	f7f8 fcad 	bl	800215c <BSP_LCD_DisplayStringAt>
  
  /* Set the LCD Text Color */
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);  
 8009802:	4813      	ldr	r0, [pc, #76]	@ (8009850 <Touchscreen_SetHint+0xbc>)
 8009804:	f7f8 fb78 	bl	8001ef8 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawRect(10, 90, BSP_LCD_GetXSize() - 20, BSP_LCD_GetYSize()- 100);
 8009808:	f7f8 faea 	bl	8001de0 <BSP_LCD_GetXSize>
 800980c:	4603      	mov	r3, r0
 800980e:	b29b      	uxth	r3, r3
 8009810:	3b14      	subs	r3, #20
 8009812:	b29c      	uxth	r4, r3
 8009814:	f7f8 faf0 	bl	8001df8 <BSP_LCD_GetYSize>
 8009818:	4603      	mov	r3, r0
 800981a:	b29b      	uxth	r3, r3
 800981c:	3b64      	subs	r3, #100	@ 0x64
 800981e:	b29b      	uxth	r3, r3
 8009820:	4622      	mov	r2, r4
 8009822:	215a      	movs	r1, #90	@ 0x5a
 8009824:	200a      	movs	r0, #10
 8009826:	f7f8 feb9 	bl	800259c <BSP_LCD_DrawRect>
  BSP_LCD_DrawRect(11, 91, BSP_LCD_GetXSize() - 22, BSP_LCD_GetYSize()- 102); 
 800982a:	f7f8 fad9 	bl	8001de0 <BSP_LCD_GetXSize>
 800982e:	4603      	mov	r3, r0
 8009830:	b29b      	uxth	r3, r3
 8009832:	3b16      	subs	r3, #22
 8009834:	b29c      	uxth	r4, r3
 8009836:	f7f8 fadf 	bl	8001df8 <BSP_LCD_GetYSize>
 800983a:	4603      	mov	r3, r0
 800983c:	b29b      	uxth	r3, r3
 800983e:	3b66      	subs	r3, #102	@ 0x66
 8009840:	b29b      	uxth	r3, r3
 8009842:	4622      	mov	r2, r4
 8009844:	215b      	movs	r1, #91	@ 0x5b
 8009846:	200b      	movs	r0, #11
 8009848:	f7f8 fea8 	bl	800259c <BSP_LCD_DrawRect>
}
 800984c:	bf00      	nop
 800984e:	bd98      	pop	{r3, r4, r7, pc}
 8009850:	ff0000ff 	.word	0xff0000ff
 8009854:	200000a8 	.word	0x200000a8
 8009858:	0800b8a4 	.word	0x0800b8a4
 800985c:	200000c0 	.word	0x200000c0
 8009860:	0800b8b0 	.word	0x0800b8b0
 8009864:	0800b8d0 	.word	0x0800b8d0
 8009868:	0800b8ec 	.word	0x0800b8ec

0800986c <Touchscreen_DrawBackground>:
  * @brief  Draw Touchscreen Background
  * @param  state: touch zone state
  * @retval None
  */
static void Touchscreen_DrawBackground (uint8_t state)
{
 800986c:	b590      	push	{r4, r7, lr}
 800986e:	b083      	sub	sp, #12
 8009870:	af00      	add	r7, sp, #0
 8009872:	4603      	mov	r3, r0
 8009874:	71fb      	strb	r3, [r7, #7]
  switch(state)
 8009876:	79fb      	ldrb	r3, [r7, #7]
 8009878:	2b08      	cmp	r3, #8
 800987a:	f200 818e 	bhi.w	8009b9a <Touchscreen_DrawBackground+0x32e>
 800987e:	a201      	add	r2, pc, #4	@ (adr r2, 8009884 <Touchscreen_DrawBackground+0x18>)
 8009880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009884:	080098a9 	.word	0x080098a9
 8009888:	08009a13 	.word	0x08009a13
 800988c:	08009a6f 	.word	0x08009a6f
 8009890:	08009b9b 	.word	0x08009b9b
 8009894:	08009acf 	.word	0x08009acf
 8009898:	08009b9b 	.word	0x08009b9b
 800989c:	08009b9b 	.word	0x08009b9b
 80098a0:	08009b9b 	.word	0x08009b9b
 80098a4:	08009b39 	.word	0x08009b39
  {
  case 0:
    BSP_LCD_SetTextColor(LCD_COLOR_BLUE); 
 80098a8:	48be      	ldr	r0, [pc, #760]	@ (8009ba4 <Touchscreen_DrawBackground+0x338>)
 80098aa:	f7f8 fb25 	bl	8001ef8 <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle(CIRCLE_XPOS(1), CIRCLE_YPOS(1), CIRCLE_RADIUS);
 80098ae:	f7f8 fa97 	bl	8001de0 <BSP_LCD_GetXSize>
 80098b2:	4603      	mov	r3, r0
 80098b4:	4abc      	ldr	r2, [pc, #752]	@ (8009ba8 <Touchscreen_DrawBackground+0x33c>)
 80098b6:	fba2 2303 	umull	r2, r3, r2, r3
 80098ba:	089b      	lsrs	r3, r3, #2
 80098bc:	b29c      	uxth	r4, r3
 80098be:	f7f8 fa9b 	bl	8001df8 <BSP_LCD_GetYSize>
 80098c2:	4603      	mov	r3, r0
 80098c4:	b29b      	uxth	r3, r3
 80098c6:	3b5a      	subs	r3, #90	@ 0x5a
 80098c8:	b29b      	uxth	r3, r3
 80098ca:	221e      	movs	r2, #30
 80098cc:	4619      	mov	r1, r3
 80098ce:	4620      	mov	r0, r4
 80098d0:	f7f9 f9ce 	bl	8002c70 <BSP_LCD_FillCircle>
    
    BSP_LCD_SetTextColor(LCD_COLOR_RED); 
 80098d4:	48b5      	ldr	r0, [pc, #724]	@ (8009bac <Touchscreen_DrawBackground+0x340>)
 80098d6:	f7f8 fb0f 	bl	8001ef8 <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle(CIRCLE_XPOS(2), CIRCLE_YPOS(2), CIRCLE_RADIUS);
 80098da:	f7f8 fa81 	bl	8001de0 <BSP_LCD_GetXSize>
 80098de:	4603      	mov	r3, r0
 80098e0:	005b      	lsls	r3, r3, #1
 80098e2:	4ab1      	ldr	r2, [pc, #708]	@ (8009ba8 <Touchscreen_DrawBackground+0x33c>)
 80098e4:	fba2 2303 	umull	r2, r3, r2, r3
 80098e8:	089b      	lsrs	r3, r3, #2
 80098ea:	b29c      	uxth	r4, r3
 80098ec:	f7f8 fa84 	bl	8001df8 <BSP_LCD_GetYSize>
 80098f0:	4603      	mov	r3, r0
 80098f2:	b29b      	uxth	r3, r3
 80098f4:	3b5a      	subs	r3, #90	@ 0x5a
 80098f6:	b29b      	uxth	r3, r3
 80098f8:	221e      	movs	r2, #30
 80098fa:	4619      	mov	r1, r3
 80098fc:	4620      	mov	r0, r4
 80098fe:	f7f9 f9b7 	bl	8002c70 <BSP_LCD_FillCircle>

    BSP_LCD_SetTextColor(LCD_COLOR_YELLOW); 
 8009902:	f06f 00ff 	mvn.w	r0, #255	@ 0xff
 8009906:	f7f8 faf7 	bl	8001ef8 <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle(CIRCLE_XPOS(3), CIRCLE_YPOS(3), CIRCLE_RADIUS);
 800990a:	f7f8 fa69 	bl	8001de0 <BSP_LCD_GetXSize>
 800990e:	4602      	mov	r2, r0
 8009910:	4613      	mov	r3, r2
 8009912:	005b      	lsls	r3, r3, #1
 8009914:	4413      	add	r3, r2
 8009916:	4aa4      	ldr	r2, [pc, #656]	@ (8009ba8 <Touchscreen_DrawBackground+0x33c>)
 8009918:	fba2 2303 	umull	r2, r3, r2, r3
 800991c:	089b      	lsrs	r3, r3, #2
 800991e:	b29c      	uxth	r4, r3
 8009920:	f7f8 fa6a 	bl	8001df8 <BSP_LCD_GetYSize>
 8009924:	4603      	mov	r3, r0
 8009926:	b29b      	uxth	r3, r3
 8009928:	3b5a      	subs	r3, #90	@ 0x5a
 800992a:	b29b      	uxth	r3, r3
 800992c:	221e      	movs	r2, #30
 800992e:	4619      	mov	r1, r3
 8009930:	4620      	mov	r0, r4
 8009932:	f7f9 f99d 	bl	8002c70 <BSP_LCD_FillCircle>

    BSP_LCD_SetTextColor(LCD_COLOR_GREEN); 
 8009936:	f04f 20ff 	mov.w	r0, #4278255360	@ 0xff00ff00
 800993a:	f7f8 fadd 	bl	8001ef8 <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle(CIRCLE_XPOS(4), CIRCLE_YPOS(3), CIRCLE_RADIUS);
 800993e:	f7f8 fa4f 	bl	8001de0 <BSP_LCD_GetXSize>
 8009942:	4603      	mov	r3, r0
 8009944:	009b      	lsls	r3, r3, #2
 8009946:	4a98      	ldr	r2, [pc, #608]	@ (8009ba8 <Touchscreen_DrawBackground+0x33c>)
 8009948:	fba2 2303 	umull	r2, r3, r2, r3
 800994c:	089b      	lsrs	r3, r3, #2
 800994e:	b29c      	uxth	r4, r3
 8009950:	f7f8 fa52 	bl	8001df8 <BSP_LCD_GetYSize>
 8009954:	4603      	mov	r3, r0
 8009956:	b29b      	uxth	r3, r3
 8009958:	3b5a      	subs	r3, #90	@ 0x5a
 800995a:	b29b      	uxth	r3, r3
 800995c:	221e      	movs	r2, #30
 800995e:	4619      	mov	r1, r3
 8009960:	4620      	mov	r0, r4
 8009962:	f7f9 f985 	bl	8002c70 <BSP_LCD_FillCircle>
    
    BSP_LCD_SetTextColor(LCD_COLOR_WHITE); 
 8009966:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800996a:	f7f8 fac5 	bl	8001ef8 <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle(CIRCLE_XPOS(1), CIRCLE_YPOS(1), CIRCLE_RADIUS - 2);        
 800996e:	f7f8 fa37 	bl	8001de0 <BSP_LCD_GetXSize>
 8009972:	4603      	mov	r3, r0
 8009974:	4a8c      	ldr	r2, [pc, #560]	@ (8009ba8 <Touchscreen_DrawBackground+0x33c>)
 8009976:	fba2 2303 	umull	r2, r3, r2, r3
 800997a:	089b      	lsrs	r3, r3, #2
 800997c:	b29c      	uxth	r4, r3
 800997e:	f7f8 fa3b 	bl	8001df8 <BSP_LCD_GetYSize>
 8009982:	4603      	mov	r3, r0
 8009984:	b29b      	uxth	r3, r3
 8009986:	3b5a      	subs	r3, #90	@ 0x5a
 8009988:	b29b      	uxth	r3, r3
 800998a:	221c      	movs	r2, #28
 800998c:	4619      	mov	r1, r3
 800998e:	4620      	mov	r0, r4
 8009990:	f7f9 f96e 	bl	8002c70 <BSP_LCD_FillCircle>
    BSP_LCD_FillCircle(CIRCLE_XPOS(2), CIRCLE_YPOS(2), CIRCLE_RADIUS - 2);
 8009994:	f7f8 fa24 	bl	8001de0 <BSP_LCD_GetXSize>
 8009998:	4603      	mov	r3, r0
 800999a:	005b      	lsls	r3, r3, #1
 800999c:	4a82      	ldr	r2, [pc, #520]	@ (8009ba8 <Touchscreen_DrawBackground+0x33c>)
 800999e:	fba2 2303 	umull	r2, r3, r2, r3
 80099a2:	089b      	lsrs	r3, r3, #2
 80099a4:	b29c      	uxth	r4, r3
 80099a6:	f7f8 fa27 	bl	8001df8 <BSP_LCD_GetYSize>
 80099aa:	4603      	mov	r3, r0
 80099ac:	b29b      	uxth	r3, r3
 80099ae:	3b5a      	subs	r3, #90	@ 0x5a
 80099b0:	b29b      	uxth	r3, r3
 80099b2:	221c      	movs	r2, #28
 80099b4:	4619      	mov	r1, r3
 80099b6:	4620      	mov	r0, r4
 80099b8:	f7f9 f95a 	bl	8002c70 <BSP_LCD_FillCircle>
    BSP_LCD_FillCircle(CIRCLE_XPOS(3), CIRCLE_YPOS(3), CIRCLE_RADIUS - 2);
 80099bc:	f7f8 fa10 	bl	8001de0 <BSP_LCD_GetXSize>
 80099c0:	4602      	mov	r2, r0
 80099c2:	4613      	mov	r3, r2
 80099c4:	005b      	lsls	r3, r3, #1
 80099c6:	4413      	add	r3, r2
 80099c8:	4a77      	ldr	r2, [pc, #476]	@ (8009ba8 <Touchscreen_DrawBackground+0x33c>)
 80099ca:	fba2 2303 	umull	r2, r3, r2, r3
 80099ce:	089b      	lsrs	r3, r3, #2
 80099d0:	b29c      	uxth	r4, r3
 80099d2:	f7f8 fa11 	bl	8001df8 <BSP_LCD_GetYSize>
 80099d6:	4603      	mov	r3, r0
 80099d8:	b29b      	uxth	r3, r3
 80099da:	3b5a      	subs	r3, #90	@ 0x5a
 80099dc:	b29b      	uxth	r3, r3
 80099de:	221c      	movs	r2, #28
 80099e0:	4619      	mov	r1, r3
 80099e2:	4620      	mov	r0, r4
 80099e4:	f7f9 f944 	bl	8002c70 <BSP_LCD_FillCircle>
    BSP_LCD_FillCircle(CIRCLE_XPOS(4), CIRCLE_YPOS(3), CIRCLE_RADIUS - 2); 
 80099e8:	f7f8 f9fa 	bl	8001de0 <BSP_LCD_GetXSize>
 80099ec:	4603      	mov	r3, r0
 80099ee:	009b      	lsls	r3, r3, #2
 80099f0:	4a6d      	ldr	r2, [pc, #436]	@ (8009ba8 <Touchscreen_DrawBackground+0x33c>)
 80099f2:	fba2 2303 	umull	r2, r3, r2, r3
 80099f6:	089b      	lsrs	r3, r3, #2
 80099f8:	b29c      	uxth	r4, r3
 80099fa:	f7f8 f9fd 	bl	8001df8 <BSP_LCD_GetYSize>
 80099fe:	4603      	mov	r3, r0
 8009a00:	b29b      	uxth	r3, r3
 8009a02:	3b5a      	subs	r3, #90	@ 0x5a
 8009a04:	b29b      	uxth	r3, r3
 8009a06:	221c      	movs	r2, #28
 8009a08:	4619      	mov	r1, r3
 8009a0a:	4620      	mov	r0, r4
 8009a0c:	f7f9 f930 	bl	8002c70 <BSP_LCD_FillCircle>
    break;
 8009a10:	e0c3      	b.n	8009b9a <Touchscreen_DrawBackground+0x32e>
    
  case 1:
    BSP_LCD_SetTextColor(LCD_COLOR_BLUE); 
 8009a12:	4864      	ldr	r0, [pc, #400]	@ (8009ba4 <Touchscreen_DrawBackground+0x338>)
 8009a14:	f7f8 fa70 	bl	8001ef8 <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle(CIRCLE_XPOS(1), CIRCLE_YPOS(1), CIRCLE_RADIUS);
 8009a18:	f7f8 f9e2 	bl	8001de0 <BSP_LCD_GetXSize>
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	4a62      	ldr	r2, [pc, #392]	@ (8009ba8 <Touchscreen_DrawBackground+0x33c>)
 8009a20:	fba2 2303 	umull	r2, r3, r2, r3
 8009a24:	089b      	lsrs	r3, r3, #2
 8009a26:	b29c      	uxth	r4, r3
 8009a28:	f7f8 f9e6 	bl	8001df8 <BSP_LCD_GetYSize>
 8009a2c:	4603      	mov	r3, r0
 8009a2e:	b29b      	uxth	r3, r3
 8009a30:	3b5a      	subs	r3, #90	@ 0x5a
 8009a32:	b29b      	uxth	r3, r3
 8009a34:	221e      	movs	r2, #30
 8009a36:	4619      	mov	r1, r3
 8009a38:	4620      	mov	r0, r4
 8009a3a:	f7f9 f919 	bl	8002c70 <BSP_LCD_FillCircle>
    BSP_LCD_SetTextColor(LCD_COLOR_WHITE); 
 8009a3e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009a42:	f7f8 fa59 	bl	8001ef8 <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle(CIRCLE_XPOS(1), CIRCLE_YPOS(1), CIRCLE_RADIUS - 2);        
 8009a46:	f7f8 f9cb 	bl	8001de0 <BSP_LCD_GetXSize>
 8009a4a:	4603      	mov	r3, r0
 8009a4c:	4a56      	ldr	r2, [pc, #344]	@ (8009ba8 <Touchscreen_DrawBackground+0x33c>)
 8009a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8009a52:	089b      	lsrs	r3, r3, #2
 8009a54:	b29c      	uxth	r4, r3
 8009a56:	f7f8 f9cf 	bl	8001df8 <BSP_LCD_GetYSize>
 8009a5a:	4603      	mov	r3, r0
 8009a5c:	b29b      	uxth	r3, r3
 8009a5e:	3b5a      	subs	r3, #90	@ 0x5a
 8009a60:	b29b      	uxth	r3, r3
 8009a62:	221c      	movs	r2, #28
 8009a64:	4619      	mov	r1, r3
 8009a66:	4620      	mov	r0, r4
 8009a68:	f7f9 f902 	bl	8002c70 <BSP_LCD_FillCircle>
    break;
 8009a6c:	e095      	b.n	8009b9a <Touchscreen_DrawBackground+0x32e>
    
  case 2:
    BSP_LCD_SetTextColor(LCD_COLOR_RED); 
 8009a6e:	484f      	ldr	r0, [pc, #316]	@ (8009bac <Touchscreen_DrawBackground+0x340>)
 8009a70:	f7f8 fa42 	bl	8001ef8 <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle(CIRCLE_XPOS(2), CIRCLE_YPOS(2), CIRCLE_RADIUS);
 8009a74:	f7f8 f9b4 	bl	8001de0 <BSP_LCD_GetXSize>
 8009a78:	4603      	mov	r3, r0
 8009a7a:	005b      	lsls	r3, r3, #1
 8009a7c:	4a4a      	ldr	r2, [pc, #296]	@ (8009ba8 <Touchscreen_DrawBackground+0x33c>)
 8009a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8009a82:	089b      	lsrs	r3, r3, #2
 8009a84:	b29c      	uxth	r4, r3
 8009a86:	f7f8 f9b7 	bl	8001df8 <BSP_LCD_GetYSize>
 8009a8a:	4603      	mov	r3, r0
 8009a8c:	b29b      	uxth	r3, r3
 8009a8e:	3b5a      	subs	r3, #90	@ 0x5a
 8009a90:	b29b      	uxth	r3, r3
 8009a92:	221e      	movs	r2, #30
 8009a94:	4619      	mov	r1, r3
 8009a96:	4620      	mov	r0, r4
 8009a98:	f7f9 f8ea 	bl	8002c70 <BSP_LCD_FillCircle>
    BSP_LCD_SetTextColor(LCD_COLOR_WHITE); 
 8009a9c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009aa0:	f7f8 fa2a 	bl	8001ef8 <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle(CIRCLE_XPOS(2), CIRCLE_YPOS(2), CIRCLE_RADIUS - 2); 
 8009aa4:	f7f8 f99c 	bl	8001de0 <BSP_LCD_GetXSize>
 8009aa8:	4603      	mov	r3, r0
 8009aaa:	005b      	lsls	r3, r3, #1
 8009aac:	4a3e      	ldr	r2, [pc, #248]	@ (8009ba8 <Touchscreen_DrawBackground+0x33c>)
 8009aae:	fba2 2303 	umull	r2, r3, r2, r3
 8009ab2:	089b      	lsrs	r3, r3, #2
 8009ab4:	b29c      	uxth	r4, r3
 8009ab6:	f7f8 f99f 	bl	8001df8 <BSP_LCD_GetYSize>
 8009aba:	4603      	mov	r3, r0
 8009abc:	b29b      	uxth	r3, r3
 8009abe:	3b5a      	subs	r3, #90	@ 0x5a
 8009ac0:	b29b      	uxth	r3, r3
 8009ac2:	221c      	movs	r2, #28
 8009ac4:	4619      	mov	r1, r3
 8009ac6:	4620      	mov	r0, r4
 8009ac8:	f7f9 f8d2 	bl	8002c70 <BSP_LCD_FillCircle>
    break;
 8009acc:	e065      	b.n	8009b9a <Touchscreen_DrawBackground+0x32e>
    
  case 4:
    BSP_LCD_SetTextColor(LCD_COLOR_YELLOW); 
 8009ace:	f06f 00ff 	mvn.w	r0, #255	@ 0xff
 8009ad2:	f7f8 fa11 	bl	8001ef8 <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle(CIRCLE_XPOS(3), CIRCLE_YPOS(3), CIRCLE_RADIUS);
 8009ad6:	f7f8 f983 	bl	8001de0 <BSP_LCD_GetXSize>
 8009ada:	4602      	mov	r2, r0
 8009adc:	4613      	mov	r3, r2
 8009ade:	005b      	lsls	r3, r3, #1
 8009ae0:	4413      	add	r3, r2
 8009ae2:	4a31      	ldr	r2, [pc, #196]	@ (8009ba8 <Touchscreen_DrawBackground+0x33c>)
 8009ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8009ae8:	089b      	lsrs	r3, r3, #2
 8009aea:	b29c      	uxth	r4, r3
 8009aec:	f7f8 f984 	bl	8001df8 <BSP_LCD_GetYSize>
 8009af0:	4603      	mov	r3, r0
 8009af2:	b29b      	uxth	r3, r3
 8009af4:	3b5a      	subs	r3, #90	@ 0x5a
 8009af6:	b29b      	uxth	r3, r3
 8009af8:	221e      	movs	r2, #30
 8009afa:	4619      	mov	r1, r3
 8009afc:	4620      	mov	r0, r4
 8009afe:	f7f9 f8b7 	bl	8002c70 <BSP_LCD_FillCircle>
    BSP_LCD_SetTextColor(LCD_COLOR_WHITE); 
 8009b02:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009b06:	f7f8 f9f7 	bl	8001ef8 <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle(CIRCLE_XPOS(3), CIRCLE_YPOS(3), CIRCLE_RADIUS - 2); 
 8009b0a:	f7f8 f969 	bl	8001de0 <BSP_LCD_GetXSize>
 8009b0e:	4602      	mov	r2, r0
 8009b10:	4613      	mov	r3, r2
 8009b12:	005b      	lsls	r3, r3, #1
 8009b14:	4413      	add	r3, r2
 8009b16:	4a24      	ldr	r2, [pc, #144]	@ (8009ba8 <Touchscreen_DrawBackground+0x33c>)
 8009b18:	fba2 2303 	umull	r2, r3, r2, r3
 8009b1c:	089b      	lsrs	r3, r3, #2
 8009b1e:	b29c      	uxth	r4, r3
 8009b20:	f7f8 f96a 	bl	8001df8 <BSP_LCD_GetYSize>
 8009b24:	4603      	mov	r3, r0
 8009b26:	b29b      	uxth	r3, r3
 8009b28:	3b5a      	subs	r3, #90	@ 0x5a
 8009b2a:	b29b      	uxth	r3, r3
 8009b2c:	221c      	movs	r2, #28
 8009b2e:	4619      	mov	r1, r3
 8009b30:	4620      	mov	r0, r4
 8009b32:	f7f9 f89d 	bl	8002c70 <BSP_LCD_FillCircle>
    break;
 8009b36:	e030      	b.n	8009b9a <Touchscreen_DrawBackground+0x32e>
    
  case 8:
    BSP_LCD_SetTextColor(LCD_COLOR_GREEN); 
 8009b38:	f04f 20ff 	mov.w	r0, #4278255360	@ 0xff00ff00
 8009b3c:	f7f8 f9dc 	bl	8001ef8 <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle(CIRCLE_XPOS(4), CIRCLE_YPOS(4), CIRCLE_RADIUS);
 8009b40:	f7f8 f94e 	bl	8001de0 <BSP_LCD_GetXSize>
 8009b44:	4603      	mov	r3, r0
 8009b46:	009b      	lsls	r3, r3, #2
 8009b48:	4a17      	ldr	r2, [pc, #92]	@ (8009ba8 <Touchscreen_DrawBackground+0x33c>)
 8009b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8009b4e:	089b      	lsrs	r3, r3, #2
 8009b50:	b29c      	uxth	r4, r3
 8009b52:	f7f8 f951 	bl	8001df8 <BSP_LCD_GetYSize>
 8009b56:	4603      	mov	r3, r0
 8009b58:	b29b      	uxth	r3, r3
 8009b5a:	3b5a      	subs	r3, #90	@ 0x5a
 8009b5c:	b29b      	uxth	r3, r3
 8009b5e:	221e      	movs	r2, #30
 8009b60:	4619      	mov	r1, r3
 8009b62:	4620      	mov	r0, r4
 8009b64:	f7f9 f884 	bl	8002c70 <BSP_LCD_FillCircle>
    BSP_LCD_SetTextColor(LCD_COLOR_WHITE); 
 8009b68:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009b6c:	f7f8 f9c4 	bl	8001ef8 <BSP_LCD_SetTextColor>
    BSP_LCD_FillCircle(CIRCLE_XPOS(4), CIRCLE_YPOS(4), CIRCLE_RADIUS - 2); 
 8009b70:	f7f8 f936 	bl	8001de0 <BSP_LCD_GetXSize>
 8009b74:	4603      	mov	r3, r0
 8009b76:	009b      	lsls	r3, r3, #2
 8009b78:	4a0b      	ldr	r2, [pc, #44]	@ (8009ba8 <Touchscreen_DrawBackground+0x33c>)
 8009b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8009b7e:	089b      	lsrs	r3, r3, #2
 8009b80:	b29c      	uxth	r4, r3
 8009b82:	f7f8 f939 	bl	8001df8 <BSP_LCD_GetYSize>
 8009b86:	4603      	mov	r3, r0
 8009b88:	b29b      	uxth	r3, r3
 8009b8a:	3b5a      	subs	r3, #90	@ 0x5a
 8009b8c:	b29b      	uxth	r3, r3
 8009b8e:	221c      	movs	r2, #28
 8009b90:	4619      	mov	r1, r3
 8009b92:	4620      	mov	r0, r4
 8009b94:	f7f9 f86c 	bl	8002c70 <BSP_LCD_FillCircle>
    break; 
 8009b98:	bf00      	nop
  }
}
 8009b9a:	bf00      	nop
 8009b9c:	370c      	adds	r7, #12
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	bd90      	pop	{r4, r7, pc}
 8009ba2:	bf00      	nop
 8009ba4:	ff0000ff 	.word	0xff0000ff
 8009ba8:	cccccccd 	.word	0xcccccccd
 8009bac:	ffff0000 	.word	0xffff0000

08009bb0 <Touchscreen_Calibration>:
  * @brief  Performs the TS calibration
  * @param  None
  * @retval None
  */
void Touchscreen_Calibration(void)
{ 
 8009bb0:	b590      	push	{r4, r7, lr}
 8009bb2:	b083      	sub	sp, #12
 8009bb4:	af00      	add	r7, sp, #0
  uint8_t status = 0;
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	71bb      	strb	r3, [r7, #6]
  uint8_t i = 0;
 8009bba:	2300      	movs	r3, #0
 8009bbc:	71fb      	strb	r3, [r7, #7]
  
  TouchscreenCalibration_SetHint();
 8009bbe:	f000 f8f1 	bl	8009da4 <TouchscreenCalibration_SetHint>
  
  status = BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8009bc2:	f7f8 f90d 	bl	8001de0 <BSP_LCD_GetXSize>
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	b29c      	uxth	r4, r3
 8009bca:	f7f8 f915 	bl	8001df8 <BSP_LCD_GetYSize>
 8009bce:	4603      	mov	r3, r0
 8009bd0:	b29b      	uxth	r3, r3
 8009bd2:	4619      	mov	r1, r3
 8009bd4:	4620      	mov	r0, r4
 8009bd6:	f7f9 ff41 	bl	8003a5c <BSP_TS_Init>
 8009bda:	4603      	mov	r3, r0
 8009bdc:	71bb      	strb	r3, [r7, #6]
  
  if (status != TS_OK)
 8009bde:	79bb      	ldrb	r3, [r7, #6]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d01c      	beq.n	8009c1e <Touchscreen_Calibration+0x6e>
  {
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE); 
 8009be4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009be8:	f7f8 f99e 	bl	8001f28 <BSP_LCD_SetBackColor>
    BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8009bec:	4861      	ldr	r0, [pc, #388]	@ (8009d74 <Touchscreen_Calibration+0x1c4>)
 8009bee:	f7f8 f983 	bl	8001ef8 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()- 95, (uint8_t*)"ERROR", CENTER_MODE);
 8009bf2:	f7f8 f901 	bl	8001df8 <BSP_LCD_GetYSize>
 8009bf6:	4603      	mov	r3, r0
 8009bf8:	b29b      	uxth	r3, r3
 8009bfa:	3b5f      	subs	r3, #95	@ 0x5f
 8009bfc:	b299      	uxth	r1, r3
 8009bfe:	2301      	movs	r3, #1
 8009c00:	4a5d      	ldr	r2, [pc, #372]	@ (8009d78 <Touchscreen_Calibration+0x1c8>)
 8009c02:	2000      	movs	r0, #0
 8009c04:	f7f8 faaa 	bl	800215c <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()- 80, (uint8_t*)"Touchscreen cannot be initialized", CENTER_MODE);
 8009c08:	f7f8 f8f6 	bl	8001df8 <BSP_LCD_GetYSize>
 8009c0c:	4603      	mov	r3, r0
 8009c0e:	b29b      	uxth	r3, r3
 8009c10:	3b50      	subs	r3, #80	@ 0x50
 8009c12:	b299      	uxth	r1, r3
 8009c14:	2301      	movs	r3, #1
 8009c16:	4a59      	ldr	r2, [pc, #356]	@ (8009d7c <Touchscreen_Calibration+0x1cc>)
 8009c18:	2000      	movs	r0, #0
 8009c1a:	f7f8 fa9f 	bl	800215c <BSP_LCD_DisplayStringAt>
  }
  
  while (1)
  {
    if (status == TS_OK)
 8009c1e:	79bb      	ldrb	r3, [r7, #6]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	f040 809f 	bne.w	8009d64 <Touchscreen_Calibration+0x1b4>
    {
      aLogX[0] = 15;
 8009c26:	4b56      	ldr	r3, [pc, #344]	@ (8009d80 <Touchscreen_Calibration+0x1d0>)
 8009c28:	220f      	movs	r2, #15
 8009c2a:	801a      	strh	r2, [r3, #0]
      aLogY[0] = 15;
 8009c2c:	4b55      	ldr	r3, [pc, #340]	@ (8009d84 <Touchscreen_Calibration+0x1d4>)
 8009c2e:	220f      	movs	r2, #15
 8009c30:	801a      	strh	r2, [r3, #0]
      aLogX[1] = BSP_LCD_GetXSize() - 15;
 8009c32:	f7f8 f8d5 	bl	8001de0 <BSP_LCD_GetXSize>
 8009c36:	4603      	mov	r3, r0
 8009c38:	b29b      	uxth	r3, r3
 8009c3a:	3b0f      	subs	r3, #15
 8009c3c:	b29b      	uxth	r3, r3
 8009c3e:	b21a      	sxth	r2, r3
 8009c40:	4b4f      	ldr	r3, [pc, #316]	@ (8009d80 <Touchscreen_Calibration+0x1d0>)
 8009c42:	805a      	strh	r2, [r3, #2]
      aLogY[1] = BSP_LCD_GetYSize() - 15;
 8009c44:	f7f8 f8d8 	bl	8001df8 <BSP_LCD_GetYSize>
 8009c48:	4603      	mov	r3, r0
 8009c4a:	b29b      	uxth	r3, r3
 8009c4c:	3b0f      	subs	r3, #15
 8009c4e:	b29b      	uxth	r3, r3
 8009c50:	b21a      	sxth	r2, r3
 8009c52:	4b4c      	ldr	r3, [pc, #304]	@ (8009d84 <Touchscreen_Calibration+0x1d4>)
 8009c54:	805a      	strh	r2, [r3, #2]
      
      for (i = 0; i < 2; i++) 
 8009c56:	2300      	movs	r3, #0
 8009c58:	71fb      	strb	r3, [r7, #7]
 8009c5a:	e014      	b.n	8009c86 <Touchscreen_Calibration+0xd6>
      {
        GetPhysValues(aLogX[i], aLogY[i], &aPhysX[i], &aPhysY[i]);
 8009c5c:	79fb      	ldrb	r3, [r7, #7]
 8009c5e:	4a48      	ldr	r2, [pc, #288]	@ (8009d80 <Touchscreen_Calibration+0x1d0>)
 8009c60:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8009c64:	79fb      	ldrb	r3, [r7, #7]
 8009c66:	4a47      	ldr	r2, [pc, #284]	@ (8009d84 <Touchscreen_Calibration+0x1d4>)
 8009c68:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 8009c6c:	79fb      	ldrb	r3, [r7, #7]
 8009c6e:	005b      	lsls	r3, r3, #1
 8009c70:	4a45      	ldr	r2, [pc, #276]	@ (8009d88 <Touchscreen_Calibration+0x1d8>)
 8009c72:	441a      	add	r2, r3
 8009c74:	79fb      	ldrb	r3, [r7, #7]
 8009c76:	005b      	lsls	r3, r3, #1
 8009c78:	4c44      	ldr	r4, [pc, #272]	@ (8009d8c <Touchscreen_Calibration+0x1dc>)
 8009c7a:	4423      	add	r3, r4
 8009c7c:	f000 f8d2 	bl	8009e24 <GetPhysValues>
      for (i = 0; i < 2; i++) 
 8009c80:	79fb      	ldrb	r3, [r7, #7]
 8009c82:	3301      	adds	r3, #1
 8009c84:	71fb      	strb	r3, [r7, #7]
 8009c86:	79fb      	ldrb	r3, [r7, #7]
 8009c88:	2b01      	cmp	r3, #1
 8009c8a:	d9e7      	bls.n	8009c5c <Touchscreen_Calibration+0xac>
      }
      A1 = (1000 * ( aLogX[1] - aLogX[0]))/ ( aPhysX[1] - aPhysX[0]); 
 8009c8c:	4b3c      	ldr	r3, [pc, #240]	@ (8009d80 <Touchscreen_Calibration+0x1d0>)
 8009c8e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8009c92:	461a      	mov	r2, r3
 8009c94:	4b3a      	ldr	r3, [pc, #232]	@ (8009d80 <Touchscreen_Calibration+0x1d0>)
 8009c96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009c9a:	1ad3      	subs	r3, r2, r3
 8009c9c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009ca0:	fb03 f202 	mul.w	r2, r3, r2
 8009ca4:	4b38      	ldr	r3, [pc, #224]	@ (8009d88 <Touchscreen_Calibration+0x1d8>)
 8009ca6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8009caa:	4619      	mov	r1, r3
 8009cac:	4b36      	ldr	r3, [pc, #216]	@ (8009d88 <Touchscreen_Calibration+0x1d8>)
 8009cae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009cb2:	1acb      	subs	r3, r1, r3
 8009cb4:	fb92 f3f3 	sdiv	r3, r2, r3
 8009cb8:	b21a      	sxth	r2, r3
 8009cba:	4b35      	ldr	r3, [pc, #212]	@ (8009d90 <Touchscreen_Calibration+0x1e0>)
 8009cbc:	801a      	strh	r2, [r3, #0]
      B1 = (1000 * aLogX[0]) - A1 * aPhysX[0]; 
 8009cbe:	4b30      	ldr	r3, [pc, #192]	@ (8009d80 <Touchscreen_Calibration+0x1d0>)
 8009cc0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009cc4:	b29b      	uxth	r3, r3
 8009cc6:	461a      	mov	r2, r3
 8009cc8:	0152      	lsls	r2, r2, #5
 8009cca:	1ad2      	subs	r2, r2, r3
 8009ccc:	0092      	lsls	r2, r2, #2
 8009cce:	4413      	add	r3, r2
 8009cd0:	00db      	lsls	r3, r3, #3
 8009cd2:	b29a      	uxth	r2, r3
 8009cd4:	4b2c      	ldr	r3, [pc, #176]	@ (8009d88 <Touchscreen_Calibration+0x1d8>)
 8009cd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009cda:	b299      	uxth	r1, r3
 8009cdc:	4b2c      	ldr	r3, [pc, #176]	@ (8009d90 <Touchscreen_Calibration+0x1e0>)
 8009cde:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009ce2:	b29b      	uxth	r3, r3
 8009ce4:	fb11 f303 	smulbb	r3, r1, r3
 8009ce8:	b29b      	uxth	r3, r3
 8009cea:	1ad3      	subs	r3, r2, r3
 8009cec:	b29b      	uxth	r3, r3
 8009cee:	b21a      	sxth	r2, r3
 8009cf0:	4b28      	ldr	r3, [pc, #160]	@ (8009d94 <Touchscreen_Calibration+0x1e4>)
 8009cf2:	801a      	strh	r2, [r3, #0]
      
      A2 = (1000 * ( aLogY[1] - aLogY[0]))/ ( aPhysY[1] - aPhysY[0]); 
 8009cf4:	4b23      	ldr	r3, [pc, #140]	@ (8009d84 <Touchscreen_Calibration+0x1d4>)
 8009cf6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8009cfa:	461a      	mov	r2, r3
 8009cfc:	4b21      	ldr	r3, [pc, #132]	@ (8009d84 <Touchscreen_Calibration+0x1d4>)
 8009cfe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009d02:	1ad3      	subs	r3, r2, r3
 8009d04:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009d08:	fb03 f202 	mul.w	r2, r3, r2
 8009d0c:	4b1f      	ldr	r3, [pc, #124]	@ (8009d8c <Touchscreen_Calibration+0x1dc>)
 8009d0e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8009d12:	4619      	mov	r1, r3
 8009d14:	4b1d      	ldr	r3, [pc, #116]	@ (8009d8c <Touchscreen_Calibration+0x1dc>)
 8009d16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009d1a:	1acb      	subs	r3, r1, r3
 8009d1c:	fb92 f3f3 	sdiv	r3, r2, r3
 8009d20:	b21a      	sxth	r2, r3
 8009d22:	4b1d      	ldr	r3, [pc, #116]	@ (8009d98 <Touchscreen_Calibration+0x1e8>)
 8009d24:	801a      	strh	r2, [r3, #0]
      B2 = (1000 * aLogY[0]) - A2 * aPhysY[0]; 
 8009d26:	4b17      	ldr	r3, [pc, #92]	@ (8009d84 <Touchscreen_Calibration+0x1d4>)
 8009d28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009d2c:	b29b      	uxth	r3, r3
 8009d2e:	461a      	mov	r2, r3
 8009d30:	0152      	lsls	r2, r2, #5
 8009d32:	1ad2      	subs	r2, r2, r3
 8009d34:	0092      	lsls	r2, r2, #2
 8009d36:	4413      	add	r3, r2
 8009d38:	00db      	lsls	r3, r3, #3
 8009d3a:	b29a      	uxth	r2, r3
 8009d3c:	4b13      	ldr	r3, [pc, #76]	@ (8009d8c <Touchscreen_Calibration+0x1dc>)
 8009d3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009d42:	b299      	uxth	r1, r3
 8009d44:	4b14      	ldr	r3, [pc, #80]	@ (8009d98 <Touchscreen_Calibration+0x1e8>)
 8009d46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009d4a:	b29b      	uxth	r3, r3
 8009d4c:	fb11 f303 	smulbb	r3, r1, r3
 8009d50:	b29b      	uxth	r3, r3
 8009d52:	1ad3      	subs	r3, r2, r3
 8009d54:	b29b      	uxth	r3, r3
 8009d56:	b21a      	sxth	r2, r3
 8009d58:	4b10      	ldr	r3, [pc, #64]	@ (8009d9c <Touchscreen_Calibration+0x1ec>)
 8009d5a:	801a      	strh	r2, [r3, #0]
      
      Calibration_Done = 1;
 8009d5c:	4b10      	ldr	r3, [pc, #64]	@ (8009da0 <Touchscreen_Calibration+0x1f0>)
 8009d5e:	2201      	movs	r2, #1
 8009d60:	701a      	strb	r2, [r3, #0]
      return;
 8009d62:	e003      	b.n	8009d6c <Touchscreen_Calibration+0x1bc>
    }
    
    HAL_Delay(5);
 8009d64:	2005      	movs	r0, #5
 8009d66:	f7fa f815 	bl	8003d94 <HAL_Delay>
    if (status == TS_OK)
 8009d6a:	e758      	b.n	8009c1e <Touchscreen_Calibration+0x6e>
  }
}
 8009d6c:	370c      	adds	r7, #12
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	bd90      	pop	{r4, r7, pc}
 8009d72:	bf00      	nop
 8009d74:	ffff0000 	.word	0xffff0000
 8009d78:	0800b904 	.word	0x0800b904
 8009d7c:	0800b90c 	.word	0x0800b90c
 8009d80:	20000554 	.word	0x20000554
 8009d84:	20000558 	.word	0x20000558
 8009d88:	2000054c 	.word	0x2000054c
 8009d8c:	20000550 	.word	0x20000550
 8009d90:	20000542 	.word	0x20000542
 8009d94:	20000546 	.word	0x20000546
 8009d98:	20000544 	.word	0x20000544
 8009d9c:	20000548 	.word	0x20000548
 8009da0:	20000540 	.word	0x20000540

08009da4 <TouchscreenCalibration_SetHint>:
  * @brief  Display calibration hint
  * @param  None
  * @retval None
  */
static void TouchscreenCalibration_SetHint(void)
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	af00      	add	r7, sp, #0
  /* Clear the LCD */ 
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8009da8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009dac:	f7f8 f906 	bl	8001fbc <BSP_LCD_Clear>
  
  /* Set Touchscreen Demo description */
  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8009db0:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8009db4:	f7f8 f8a0 	bl	8001ef8 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8009db8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009dbc:	f7f8 f8b4 	bl	8001f28 <BSP_LCD_SetBackColor>

  BSP_LCD_SetFont(&Font12);
 8009dc0:	4814      	ldr	r0, [pc, #80]	@ (8009e14 <TouchscreenCalibration_SetHint+0x70>)
 8009dc2:	f7f8 f8cb 	bl	8001f5c <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 - 27, (uint8_t*)"Before using the Touchscreen", CENTER_MODE);
 8009dc6:	f7f8 f817 	bl	8001df8 <BSP_LCD_GetYSize>
 8009dca:	4603      	mov	r3, r0
 8009dcc:	085b      	lsrs	r3, r3, #1
 8009dce:	b29b      	uxth	r3, r3
 8009dd0:	3b1b      	subs	r3, #27
 8009dd2:	b299      	uxth	r1, r3
 8009dd4:	2301      	movs	r3, #1
 8009dd6:	4a10      	ldr	r2, [pc, #64]	@ (8009e18 <TouchscreenCalibration_SetHint+0x74>)
 8009dd8:	2000      	movs	r0, #0
 8009dda:	f7f8 f9bf 	bl	800215c <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 - 12, (uint8_t*)"you need to calibrate it.", CENTER_MODE);
 8009dde:	f7f8 f80b 	bl	8001df8 <BSP_LCD_GetYSize>
 8009de2:	4603      	mov	r3, r0
 8009de4:	085b      	lsrs	r3, r3, #1
 8009de6:	b29b      	uxth	r3, r3
 8009de8:	3b0c      	subs	r3, #12
 8009dea:	b299      	uxth	r1, r3
 8009dec:	2301      	movs	r3, #1
 8009dee:	4a0b      	ldr	r2, [pc, #44]	@ (8009e1c <TouchscreenCalibration_SetHint+0x78>)
 8009df0:	2000      	movs	r0, #0
 8009df2:	f7f8 f9b3 	bl	800215c <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 + 3, (uint8_t*)"Press on the black circles", CENTER_MODE);
 8009df6:	f7f7 ffff 	bl	8001df8 <BSP_LCD_GetYSize>
 8009dfa:	4603      	mov	r3, r0
 8009dfc:	085b      	lsrs	r3, r3, #1
 8009dfe:	b29b      	uxth	r3, r3
 8009e00:	3303      	adds	r3, #3
 8009e02:	b299      	uxth	r1, r3
 8009e04:	2301      	movs	r3, #1
 8009e06:	4a06      	ldr	r2, [pc, #24]	@ (8009e20 <TouchscreenCalibration_SetHint+0x7c>)
 8009e08:	2000      	movs	r0, #0
 8009e0a:	f7f8 f9a7 	bl	800215c <BSP_LCD_DisplayStringAt>
}
 8009e0e:	bf00      	nop
 8009e10:	bd80      	pop	{r7, pc}
 8009e12:	bf00      	nop
 8009e14:	200000c0 	.word	0x200000c0
 8009e18:	0800b930 	.word	0x0800b930
 8009e1c:	0800b950 	.word	0x0800b950
 8009e20:	0800b96c 	.word	0x0800b96c

08009e24 <GetPhysValues>:
  * @param  pPhysX : Physical X position
  * @param  pPhysY : Physical Y position
  * @retval None
  */
static void GetPhysValues(int16_t LogX, int16_t LogY, int16_t * pPhysX, int16_t * pPhysY) 
{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b084      	sub	sp, #16
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	60ba      	str	r2, [r7, #8]
 8009e2c:	607b      	str	r3, [r7, #4]
 8009e2e:	4603      	mov	r3, r0
 8009e30:	81fb      	strh	r3, [r7, #14]
 8009e32:	460b      	mov	r3, r1
 8009e34:	81bb      	strh	r3, [r7, #12]
  /* Draw the ring */
  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8009e36:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8009e3a:	f7f8 f85d 	bl	8001ef8 <BSP_LCD_SetTextColor>
  BSP_LCD_FillCircle(LogX, LogY, 5);
 8009e3e:	89fb      	ldrh	r3, [r7, #14]
 8009e40:	89b9      	ldrh	r1, [r7, #12]
 8009e42:	2205      	movs	r2, #5
 8009e44:	4618      	mov	r0, r3
 8009e46:	f7f8 ff13 	bl	8002c70 <BSP_LCD_FillCircle>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8009e4a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009e4e:	f7f8 f853 	bl	8001ef8 <BSP_LCD_SetTextColor>
  BSP_LCD_FillCircle(LogX, LogY, 2);
 8009e52:	89fb      	ldrh	r3, [r7, #14]
 8009e54:	89b9      	ldrh	r1, [r7, #12]
 8009e56:	2202      	movs	r2, #2
 8009e58:	4618      	mov	r0, r3
 8009e5a:	f7f8 ff09 	bl	8002c70 <BSP_LCD_FillCircle>
  
  /* Wait until touch is pressed */
  WaitForPressedState(1);
 8009e5e:	2001      	movs	r0, #1
 8009e60:	f000 f820 	bl	8009ea4 <WaitForPressedState>
  
  BSP_TS_GetState(&TS_State);
 8009e64:	480e      	ldr	r0, [pc, #56]	@ (8009ea0 <GetPhysValues+0x7c>)
 8009e66:	f7f9 fe33 	bl	8003ad0 <BSP_TS_GetState>
  *pPhysX = TS_State.X;
 8009e6a:	4b0d      	ldr	r3, [pc, #52]	@ (8009ea0 <GetPhysValues+0x7c>)
 8009e6c:	885b      	ldrh	r3, [r3, #2]
 8009e6e:	b21a      	sxth	r2, r3
 8009e70:	68bb      	ldr	r3, [r7, #8]
 8009e72:	801a      	strh	r2, [r3, #0]
  *pPhysY = TS_State.Y; 
 8009e74:	4b0a      	ldr	r3, [pc, #40]	@ (8009ea0 <GetPhysValues+0x7c>)
 8009e76:	889b      	ldrh	r3, [r3, #4]
 8009e78:	b21a      	sxth	r2, r3
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	801a      	strh	r2, [r3, #0]
  
  /* Wait until touch is released */
  WaitForPressedState(0);
 8009e7e:	2000      	movs	r0, #0
 8009e80:	f000 f810 	bl	8009ea4 <WaitForPressedState>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8009e84:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009e88:	f7f8 f836 	bl	8001ef8 <BSP_LCD_SetTextColor>
  BSP_LCD_FillCircle(LogX, LogY, 5);
 8009e8c:	89fb      	ldrh	r3, [r7, #14]
 8009e8e:	89b9      	ldrh	r1, [r7, #12]
 8009e90:	2205      	movs	r2, #5
 8009e92:	4618      	mov	r0, r3
 8009e94:	f7f8 feec 	bl	8002c70 <BSP_LCD_FillCircle>
}
 8009e98:	bf00      	nop
 8009e9a:	3710      	adds	r7, #16
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	bd80      	pop	{r7, pc}
 8009ea0:	20000538 	.word	0x20000538

08009ea4 <WaitForPressedState>:
  * @brief  Wait For Pressed State.
  * @param  None
  * @retval None
  */
static void WaitForPressedState(uint8_t Pressed) 
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b086      	sub	sp, #24
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	4603      	mov	r3, r0
 8009eac:	71fb      	strb	r3, [r7, #7]
  TS_StateTypeDef  State;
  
  do 
  {
    BSP_TS_GetState(&State);
 8009eae:	f107 030c 	add.w	r3, r7, #12
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	f7f9 fe0c 	bl	8003ad0 <BSP_TS_GetState>
    HAL_Delay(10);
 8009eb8:	200a      	movs	r0, #10
 8009eba:	f7f9 ff6b 	bl	8003d94 <HAL_Delay>
    if (State.TouchDetected == Pressed) 
 8009ebe:	89ba      	ldrh	r2, [r7, #12]
 8009ec0:	79fb      	ldrb	r3, [r7, #7]
 8009ec2:	b29b      	uxth	r3, r3
 8009ec4:	429a      	cmp	r2, r3
 8009ec6:	d1f2      	bne.n	8009eae <WaitForPressedState+0xa>
    {
      uint16_t TimeStart = HAL_GetTick();
 8009ec8:	f7f9 ff58 	bl	8003d7c <HAL_GetTick>
 8009ecc:	4603      	mov	r3, r0
 8009ece:	82fb      	strh	r3, [r7, #22]
      do {
        BSP_TS_GetState(&State);
 8009ed0:	f107 030c 	add.w	r3, r7, #12
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	f7f9 fdfb 	bl	8003ad0 <BSP_TS_GetState>
        HAL_Delay(10);
 8009eda:	200a      	movs	r0, #10
 8009edc:	f7f9 ff5a 	bl	8003d94 <HAL_Delay>
        if (State.TouchDetected != Pressed) 
 8009ee0:	89ba      	ldrh	r2, [r7, #12]
 8009ee2:	79fb      	ldrb	r3, [r7, #7]
 8009ee4:	b29b      	uxth	r3, r3
 8009ee6:	429a      	cmp	r2, r3
 8009ee8:	d108      	bne.n	8009efc <WaitForPressedState+0x58>
        {
          break;
        } else if ((HAL_GetTick() - 100) > TimeStart) 
 8009eea:	f7f9 ff47 	bl	8003d7c <HAL_GetTick>
 8009eee:	4603      	mov	r3, r0
 8009ef0:	f1a3 0264 	sub.w	r2, r3, #100	@ 0x64
 8009ef4:	8afb      	ldrh	r3, [r7, #22]
 8009ef6:	429a      	cmp	r2, r3
 8009ef8:	d802      	bhi.n	8009f00 <WaitForPressedState+0x5c>
        BSP_TS_GetState(&State);
 8009efa:	e7e9      	b.n	8009ed0 <WaitForPressedState+0x2c>
          break;
 8009efc:	bf00      	nop
    BSP_TS_GetState(&State);
 8009efe:	e7d6      	b.n	8009eae <WaitForPressedState+0xa>
        {
          return;
 8009f00:	bf00      	nop
        }
      } while (1);
    }
  } while (1);
}
 8009f02:	3718      	adds	r7, #24
 8009f04:	46bd      	mov	sp, r7
 8009f06:	bd80      	pop	{r7, pc}

08009f08 <Calibration_GetX>:
  * @brief  Calibrate X position
  * @param  x : X position
  * @retval Calibrated x
  */
uint16_t Calibration_GetX(uint16_t x)
{
 8009f08:	b480      	push	{r7}
 8009f0a:	b083      	sub	sp, #12
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	4603      	mov	r3, r0
 8009f10:	80fb      	strh	r3, [r7, #6]
  return (((A1 * x) + B1)/1000);
 8009f12:	4b0c      	ldr	r3, [pc, #48]	@ (8009f44 <Calibration_GetX+0x3c>)
 8009f14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009f18:	461a      	mov	r2, r3
 8009f1a:	88fb      	ldrh	r3, [r7, #6]
 8009f1c:	fb02 f303 	mul.w	r3, r2, r3
 8009f20:	4a09      	ldr	r2, [pc, #36]	@ (8009f48 <Calibration_GetX+0x40>)
 8009f22:	f9b2 2000 	ldrsh.w	r2, [r2]
 8009f26:	4413      	add	r3, r2
 8009f28:	4a08      	ldr	r2, [pc, #32]	@ (8009f4c <Calibration_GetX+0x44>)
 8009f2a:	fb82 1203 	smull	r1, r2, r2, r3
 8009f2e:	1192      	asrs	r2, r2, #6
 8009f30:	17db      	asrs	r3, r3, #31
 8009f32:	1ad3      	subs	r3, r2, r3
 8009f34:	b29b      	uxth	r3, r3
}
 8009f36:	4618      	mov	r0, r3
 8009f38:	370c      	adds	r7, #12
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f40:	4770      	bx	lr
 8009f42:	bf00      	nop
 8009f44:	20000542 	.word	0x20000542
 8009f48:	20000546 	.word	0x20000546
 8009f4c:	10624dd3 	.word	0x10624dd3

08009f50 <Calibration_GetY>:
  * @brief  Calibrate Y position
  * @param  y : Y position
  * @retval Calibrated y
  */
uint16_t Calibration_GetY(uint16_t y)
{
 8009f50:	b480      	push	{r7}
 8009f52:	b083      	sub	sp, #12
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	4603      	mov	r3, r0
 8009f58:	80fb      	strh	r3, [r7, #6]
  return (((A2 * y) + B2)/1000);
 8009f5a:	4b0c      	ldr	r3, [pc, #48]	@ (8009f8c <Calibration_GetY+0x3c>)
 8009f5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009f60:	461a      	mov	r2, r3
 8009f62:	88fb      	ldrh	r3, [r7, #6]
 8009f64:	fb02 f303 	mul.w	r3, r2, r3
 8009f68:	4a09      	ldr	r2, [pc, #36]	@ (8009f90 <Calibration_GetY+0x40>)
 8009f6a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8009f6e:	4413      	add	r3, r2
 8009f70:	4a08      	ldr	r2, [pc, #32]	@ (8009f94 <Calibration_GetY+0x44>)
 8009f72:	fb82 1203 	smull	r1, r2, r2, r3
 8009f76:	1192      	asrs	r2, r2, #6
 8009f78:	17db      	asrs	r3, r3, #31
 8009f7a:	1ad3      	subs	r3, r2, r3
 8009f7c:	b29b      	uxth	r3, r3
}
 8009f7e:	4618      	mov	r0, r3
 8009f80:	370c      	adds	r7, #12
 8009f82:	46bd      	mov	sp, r7
 8009f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f88:	4770      	bx	lr
 8009f8a:	bf00      	nop
 8009f8c:	20000544 	.word	0x20000544
 8009f90:	20000548 	.word	0x20000548
 8009f94:	10624dd3 	.word	0x10624dd3

08009f98 <IsCalibrationDone>:
  * @brief  check if the TS is calibrated
  * @param  None
  * @retval Calibration state (1 : calibrated / 0: no)
  */ 
uint8_t IsCalibrationDone(void)
{
 8009f98:	b480      	push	{r7}
 8009f9a:	af00      	add	r7, sp, #0
  return (Calibration_Done);
 8009f9c:	4b03      	ldr	r3, [pc, #12]	@ (8009fac <IsCalibrationDone+0x14>)
 8009f9e:	781b      	ldrb	r3, [r3, #0]
}
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa8:	4770      	bx	lr
 8009faa:	bf00      	nop
 8009fac:	20000540 	.word	0x20000540

08009fb0 <LCD_LOG_Init>:
  * @param  None
  * @retval None
  */

void LCD_LOG_Init ( void)
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	af00      	add	r7, sp, #0
  /* Deinit LCD cache */
  LCD_LOG_DeInit();
 8009fb4:	f000 f806 	bl	8009fc4 <LCD_LOG_DeInit>
  
  /* Clear the LCD */
  BSP_LCD_Clear(LCD_LOG_BACKGROUND_COLOR);  
 8009fb8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009fbc:	f7f7 fffe 	bl	8001fbc <BSP_LCD_Clear>
}
 8009fc0:	bf00      	nop
 8009fc2:	bd80      	pop	{r7, pc}

08009fc4 <LCD_LOG_DeInit>:
  * @brief DeInitializes the LCD Log module. 
  * @param  None
  * @retval None
  */
void LCD_LOG_DeInit(void)
{
 8009fc4:	b480      	push	{r7}
 8009fc6:	af00      	add	r7, sp, #0
  LCD_LineColor = LCD_LOG_TEXT_COLOR;
 8009fc8:	4b12      	ldr	r3, [pc, #72]	@ (800a014 <LCD_LOG_DeInit+0x50>)
 8009fca:	4a13      	ldr	r2, [pc, #76]	@ (800a018 <LCD_LOG_DeInit+0x54>)
 8009fcc:	601a      	str	r2, [r3, #0]
  LCD_CacheBuffer_xptr = 0;
 8009fce:	4b13      	ldr	r3, [pc, #76]	@ (800a01c <LCD_LOG_DeInit+0x58>)
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	801a      	strh	r2, [r3, #0]
  LCD_CacheBuffer_yptr_top = 0;
 8009fd4:	4b12      	ldr	r3, [pc, #72]	@ (800a020 <LCD_LOG_DeInit+0x5c>)
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	801a      	strh	r2, [r3, #0]
  LCD_CacheBuffer_yptr_bottom = 0;
 8009fda:	4b12      	ldr	r3, [pc, #72]	@ (800a024 <LCD_LOG_DeInit+0x60>)
 8009fdc:	2200      	movs	r2, #0
 8009fde:	801a      	strh	r2, [r3, #0]
  
  LCD_CacheBuffer_yptr_top_bak = 0;
 8009fe0:	4b11      	ldr	r3, [pc, #68]	@ (800a028 <LCD_LOG_DeInit+0x64>)
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	801a      	strh	r2, [r3, #0]
  LCD_CacheBuffer_yptr_bottom_bak = 0;
 8009fe6:	4b11      	ldr	r3, [pc, #68]	@ (800a02c <LCD_LOG_DeInit+0x68>)
 8009fe8:	2200      	movs	r2, #0
 8009fea:	801a      	strh	r2, [r3, #0]
  
  LCD_CacheBuffer_yptr_invert= ENABLE;
 8009fec:	4b10      	ldr	r3, [pc, #64]	@ (800a030 <LCD_LOG_DeInit+0x6c>)
 8009fee:	2201      	movs	r2, #1
 8009ff0:	701a      	strb	r2, [r3, #0]
  LCD_ScrollActive = DISABLE;
 8009ff2:	4b10      	ldr	r3, [pc, #64]	@ (800a034 <LCD_LOG_DeInit+0x70>)
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	701a      	strb	r2, [r3, #0]
  LCD_Lock = DISABLE;
 8009ff8:	4b0f      	ldr	r3, [pc, #60]	@ (800a038 <LCD_LOG_DeInit+0x74>)
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	701a      	strb	r2, [r3, #0]
  LCD_Scrolled = DISABLE;
 8009ffe:	4b0f      	ldr	r3, [pc, #60]	@ (800a03c <LCD_LOG_DeInit+0x78>)
 800a000:	2200      	movs	r2, #0
 800a002:	701a      	strb	r2, [r3, #0]
  LCD_ScrollBackStep = 0;
 800a004:	4b0e      	ldr	r3, [pc, #56]	@ (800a040 <LCD_LOG_DeInit+0x7c>)
 800a006:	2200      	movs	r2, #0
 800a008:	801a      	strh	r2, [r3, #0]
}
 800a00a:	bf00      	nop
 800a00c:	46bd      	mov	sp, r7
 800a00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a012:	4770      	bx	lr
 800a014:	200041b0 	.word	0x200041b0
 800a018:	ff000080 	.word	0xff000080
 800a01c:	200041b4 	.word	0x200041b4
 800a020:	200041b6 	.word	0x200041b6
 800a024:	200041b8 	.word	0x200041b8
 800a028:	200041ba 	.word	0x200041ba
 800a02c:	200041bc 	.word	0x200041bc
 800a030:	200041be 	.word	0x200041be
 800a034:	200041bf 	.word	0x200041bf
 800a038:	200041c0 	.word	0x200041c0
 800a03c:	200041c1 	.word	0x200041c1
 800a040:	200041c2 	.word	0x200041c2

0800a044 <LCD_LOG_SetHeader>:
  * @brief  Display the application header on the LCD screen 
  * @param  header: pointer to the string to be displayed
  * @retval None
  */
void LCD_LOG_SetHeader (uint8_t *header)
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b082      	sub	sp, #8
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
  /* Set the LCD Font */
  BSP_LCD_SetFont (&LCD_LOG_HEADER_FONT);
 800a04c:	4817      	ldr	r0, [pc, #92]	@ (800a0ac <LCD_LOG_SetHeader+0x68>)
 800a04e:	f7f7 ff85 	bl	8001f5c <BSP_LCD_SetFont>

  BSP_LCD_SetTextColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
 800a052:	4817      	ldr	r0, [pc, #92]	@ (800a0b0 <LCD_LOG_SetHeader+0x6c>)
 800a054:	f7f7 ff50 	bl	8001ef8 <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, 0, BSP_LCD_GetXSize(), LCD_LOG_HEADER_FONT.Height * 3);
 800a058:	f7f7 fec2 	bl	8001de0 <BSP_LCD_GetXSize>
 800a05c:	4603      	mov	r3, r0
 800a05e:	b29a      	uxth	r2, r3
 800a060:	4b12      	ldr	r3, [pc, #72]	@ (800a0ac <LCD_LOG_SetHeader+0x68>)
 800a062:	88db      	ldrh	r3, [r3, #6]
 800a064:	4619      	mov	r1, r3
 800a066:	0049      	lsls	r1, r1, #1
 800a068:	440b      	add	r3, r1
 800a06a:	b29b      	uxth	r3, r3
 800a06c:	2100      	movs	r1, #0
 800a06e:	2000      	movs	r0, #0
 800a070:	f7f8 fda4 	bl	8002bbc <BSP_LCD_FillRect>
  
  /* Set the LCD Text Color */
  BSP_LCD_SetTextColor(LCD_LOG_SOLID_TEXT_COLOR);
 800a074:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a078:	f7f7 ff3e 	bl	8001ef8 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
 800a07c:	480c      	ldr	r0, [pc, #48]	@ (800a0b0 <LCD_LOG_SetHeader+0x6c>)
 800a07e:	f7f7 ff53 	bl	8001f28 <BSP_LCD_SetBackColor>

  BSP_LCD_DisplayStringAt(0, LCD_LOG_HEADER_FONT.Height, header, CENTER_MODE);
 800a082:	4b0a      	ldr	r3, [pc, #40]	@ (800a0ac <LCD_LOG_SetHeader+0x68>)
 800a084:	88d9      	ldrh	r1, [r3, #6]
 800a086:	2301      	movs	r3, #1
 800a088:	687a      	ldr	r2, [r7, #4]
 800a08a:	2000      	movs	r0, #0
 800a08c:	f7f8 f866 	bl	800215c <BSP_LCD_DisplayStringAt>

  BSP_LCD_SetBackColor(LCD_LOG_BACKGROUND_COLOR);
 800a090:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a094:	f7f7 ff48 	bl	8001f28 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_LOG_TEXT_COLOR);
 800a098:	4806      	ldr	r0, [pc, #24]	@ (800a0b4 <LCD_LOG_SetHeader+0x70>)
 800a09a:	f7f7 ff2d 	bl	8001ef8 <BSP_LCD_SetTextColor>
  BSP_LCD_SetFont (&LCD_LOG_TEXT_FONT);
 800a09e:	4806      	ldr	r0, [pc, #24]	@ (800a0b8 <LCD_LOG_SetHeader+0x74>)
 800a0a0:	f7f7 ff5c 	bl	8001f5c <BSP_LCD_SetFont>
}
 800a0a4:	bf00      	nop
 800a0a6:	3708      	adds	r7, #8
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	bd80      	pop	{r7, pc}
 800a0ac:	200000b8 	.word	0x200000b8
 800a0b0:	ff0000ff 	.word	0xff0000ff
 800a0b4:	ff000080 	.word	0xff000080
 800a0b8:	200000c0 	.word	0x200000c0

0800a0bc <LCD_LOG_SetFooter>:
  * @brief  Display the application footer on the LCD screen 
  * @param  footer: pointer to the string to be displayed
  * @retval None
  */
void LCD_LOG_SetFooter(uint8_t *footer)
{
 800a0bc:	b590      	push	{r4, r7, lr}
 800a0be:	b083      	sub	sp, #12
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
  /* Set the LCD Font */
  BSP_LCD_SetFont (&LCD_LOG_FOOTER_FONT);
 800a0c4:	481e      	ldr	r0, [pc, #120]	@ (800a140 <LCD_LOG_SetFooter+0x84>)
 800a0c6:	f7f7 ff49 	bl	8001f5c <BSP_LCD_SetFont>

  BSP_LCD_SetTextColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
 800a0ca:	481e      	ldr	r0, [pc, #120]	@ (800a144 <LCD_LOG_SetFooter+0x88>)
 800a0cc:	f7f7 ff14 	bl	8001ef8 <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, BSP_LCD_GetYSize() - LCD_LOG_FOOTER_FONT.Height - 4, BSP_LCD_GetXSize(), LCD_LOG_FOOTER_FONT.Height + 4);
 800a0d0:	f7f7 fe92 	bl	8001df8 <BSP_LCD_GetYSize>
 800a0d4:	4603      	mov	r3, r0
 800a0d6:	b29a      	uxth	r2, r3
 800a0d8:	4b19      	ldr	r3, [pc, #100]	@ (800a140 <LCD_LOG_SetFooter+0x84>)
 800a0da:	88db      	ldrh	r3, [r3, #6]
 800a0dc:	1ad3      	subs	r3, r2, r3
 800a0de:	b29b      	uxth	r3, r3
 800a0e0:	3b04      	subs	r3, #4
 800a0e2:	b29c      	uxth	r4, r3
 800a0e4:	f7f7 fe7c 	bl	8001de0 <BSP_LCD_GetXSize>
 800a0e8:	4603      	mov	r3, r0
 800a0ea:	b29a      	uxth	r2, r3
 800a0ec:	4b14      	ldr	r3, [pc, #80]	@ (800a140 <LCD_LOG_SetFooter+0x84>)
 800a0ee:	88db      	ldrh	r3, [r3, #6]
 800a0f0:	3304      	adds	r3, #4
 800a0f2:	b29b      	uxth	r3, r3
 800a0f4:	4621      	mov	r1, r4
 800a0f6:	2000      	movs	r0, #0
 800a0f8:	f7f8 fd60 	bl	8002bbc <BSP_LCD_FillRect>
  
  /* Set the LCD Text Color */
  BSP_LCD_SetTextColor(LCD_LOG_SOLID_TEXT_COLOR);
 800a0fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a100:	f7f7 fefa 	bl	8001ef8 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
 800a104:	480f      	ldr	r0, [pc, #60]	@ (800a144 <LCD_LOG_SetFooter+0x88>)
 800a106:	f7f7 ff0f 	bl	8001f28 <BSP_LCD_SetBackColor>

  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - LCD_LOG_FOOTER_FONT.Height, footer, CENTER_MODE);
 800a10a:	f7f7 fe75 	bl	8001df8 <BSP_LCD_GetYSize>
 800a10e:	4603      	mov	r3, r0
 800a110:	b29a      	uxth	r2, r3
 800a112:	4b0b      	ldr	r3, [pc, #44]	@ (800a140 <LCD_LOG_SetFooter+0x84>)
 800a114:	88db      	ldrh	r3, [r3, #6]
 800a116:	1ad3      	subs	r3, r2, r3
 800a118:	b299      	uxth	r1, r3
 800a11a:	2301      	movs	r3, #1
 800a11c:	687a      	ldr	r2, [r7, #4]
 800a11e:	2000      	movs	r0, #0
 800a120:	f7f8 f81c 	bl	800215c <BSP_LCD_DisplayStringAt>

  BSP_LCD_SetBackColor(LCD_LOG_BACKGROUND_COLOR);
 800a124:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a128:	f7f7 fefe 	bl	8001f28 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_LOG_TEXT_COLOR);
 800a12c:	4806      	ldr	r0, [pc, #24]	@ (800a148 <LCD_LOG_SetFooter+0x8c>)
 800a12e:	f7f7 fee3 	bl	8001ef8 <BSP_LCD_SetTextColor>
  BSP_LCD_SetFont (&LCD_LOG_TEXT_FONT);
 800a132:	4803      	ldr	r0, [pc, #12]	@ (800a140 <LCD_LOG_SetFooter+0x84>)
 800a134:	f7f7 ff12 	bl	8001f5c <BSP_LCD_SetFont>
}
 800a138:	bf00      	nop
 800a13a:	370c      	adds	r7, #12
 800a13c:	46bd      	mov	sp, r7
 800a13e:	bd90      	pop	{r4, r7, pc}
 800a140:	200000c0 	.word	0x200000c0
 800a144:	ff0000ff 	.word	0xff0000ff
 800a148:	ff000080 	.word	0xff000080

0800a14c <LCD_LOG_ClearTextZone>:
  * @brief  Clear the Text Zone 
  * @param  None 
  * @retval None
  */
void LCD_LOG_ClearTextZone(void)
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b082      	sub	sp, #8
 800a150:	af00      	add	r7, sp, #0
  uint8_t i=0;
 800a152:	2300      	movs	r3, #0
 800a154:	71fb      	strb	r3, [r7, #7]
  
  for (i= 0 ; i < YWINDOW_SIZE; i++)
 800a156:	2300      	movs	r3, #0
 800a158:	71fb      	strb	r3, [r7, #7]
 800a15a:	e007      	b.n	800a16c <LCD_LOG_ClearTextZone+0x20>
  {
    BSP_LCD_ClearStringLine(i + YWINDOW_MIN);
 800a15c:	79fb      	ldrb	r3, [r7, #7]
 800a15e:	3304      	adds	r3, #4
 800a160:	4618      	mov	r0, r3
 800a162:	f7f7 ff53 	bl	800200c <BSP_LCD_ClearStringLine>
  for (i= 0 ; i < YWINDOW_SIZE; i++)
 800a166:	79fb      	ldrb	r3, [r7, #7]
 800a168:	3301      	adds	r3, #1
 800a16a:	71fb      	strb	r3, [r7, #7]
 800a16c:	79fb      	ldrb	r3, [r7, #7]
 800a16e:	2b10      	cmp	r3, #16
 800a170:	d9f4      	bls.n	800a15c <LCD_LOG_ClearTextZone+0x10>
  }
  
  LCD_LOG_DeInit();
 800a172:	f7ff ff27 	bl	8009fc4 <LCD_LOG_DeInit>
}
 800a176:	bf00      	nop
 800a178:	3708      	adds	r7, #8
 800a17a:	46bd      	mov	sp, r7
 800a17c:	bd80      	pop	{r7, pc}
	...

0800a180 <__io_putchar>:
  * @param  c: character to be displayed
  * @param  f: output file pointer
  * @retval None
 */
LCD_LOG_PUTCHAR
{
 800a180:	b590      	push	{r4, r7, lr}
 800a182:	b085      	sub	sp, #20
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
  
  sFONT *cFont = BSP_LCD_GetFont();
 800a188:	f7f7 ff02 	bl	8001f90 <BSP_LCD_GetFont>
 800a18c:	60b8      	str	r0, [r7, #8]
  uint32_t idx;
  
  if(LCD_Lock == DISABLE)
 800a18e:	4b60      	ldr	r3, [pc, #384]	@ (800a310 <__io_putchar+0x190>)
 800a190:	781b      	ldrb	r3, [r3, #0]
 800a192:	2b00      	cmp	r3, #0
 800a194:	f040 80b6 	bne.w	800a304 <__io_putchar+0x184>
  {
    if(LCD_ScrollActive == ENABLE)
 800a198:	4b5e      	ldr	r3, [pc, #376]	@ (800a314 <__io_putchar+0x194>)
 800a19a:	781b      	ldrb	r3, [r3, #0]
 800a19c:	2b01      	cmp	r3, #1
 800a19e:	d110      	bne.n	800a1c2 <__io_putchar+0x42>
    {
      LCD_CacheBuffer_yptr_bottom = LCD_CacheBuffer_yptr_bottom_bak;
 800a1a0:	4b5d      	ldr	r3, [pc, #372]	@ (800a318 <__io_putchar+0x198>)
 800a1a2:	881a      	ldrh	r2, [r3, #0]
 800a1a4:	4b5d      	ldr	r3, [pc, #372]	@ (800a31c <__io_putchar+0x19c>)
 800a1a6:	801a      	strh	r2, [r3, #0]
      LCD_CacheBuffer_yptr_top    = LCD_CacheBuffer_yptr_top_bak;
 800a1a8:	4b5d      	ldr	r3, [pc, #372]	@ (800a320 <__io_putchar+0x1a0>)
 800a1aa:	881a      	ldrh	r2, [r3, #0]
 800a1ac:	4b5d      	ldr	r3, [pc, #372]	@ (800a324 <__io_putchar+0x1a4>)
 800a1ae:	801a      	strh	r2, [r3, #0]
      LCD_ScrollActive = DISABLE;
 800a1b0:	4b58      	ldr	r3, [pc, #352]	@ (800a314 <__io_putchar+0x194>)
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	701a      	strb	r2, [r3, #0]
      LCD_Scrolled = DISABLE;
 800a1b6:	4b5c      	ldr	r3, [pc, #368]	@ (800a328 <__io_putchar+0x1a8>)
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	701a      	strb	r2, [r3, #0]
      LCD_ScrollBackStep = 0;
 800a1bc:	4b5b      	ldr	r3, [pc, #364]	@ (800a32c <__io_putchar+0x1ac>)
 800a1be:	2200      	movs	r2, #0
 800a1c0:	801a      	strh	r2, [r3, #0]
      
    }
    
    if(( LCD_CacheBuffer_xptr < (BSP_LCD_GetXSize()) /cFont->Width ) &&  ( ch != '\n'))
 800a1c2:	4b5b      	ldr	r3, [pc, #364]	@ (800a330 <__io_putchar+0x1b0>)
 800a1c4:	881b      	ldrh	r3, [r3, #0]
 800a1c6:	461c      	mov	r4, r3
 800a1c8:	f7f7 fe0a 	bl	8001de0 <BSP_LCD_GetXSize>
 800a1cc:	4602      	mov	r2, r0
 800a1ce:	68bb      	ldr	r3, [r7, #8]
 800a1d0:	889b      	ldrh	r3, [r3, #4]
 800a1d2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1d6:	429c      	cmp	r4, r3
 800a1d8:	d218      	bcs.n	800a20c <__io_putchar+0x8c>
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	2b0a      	cmp	r3, #10
 800a1de:	d015      	beq.n	800a20c <__io_putchar+0x8c>
    {
      LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = (uint16_t)ch;
 800a1e0:	4b4e      	ldr	r3, [pc, #312]	@ (800a31c <__io_putchar+0x19c>)
 800a1e2:	881b      	ldrh	r3, [r3, #0]
 800a1e4:	4619      	mov	r1, r3
 800a1e6:	4b52      	ldr	r3, [pc, #328]	@ (800a330 <__io_putchar+0x1b0>)
 800a1e8:	881b      	ldrh	r3, [r3, #0]
 800a1ea:	1c5a      	adds	r2, r3, #1
 800a1ec:	b290      	uxth	r0, r2
 800a1ee:	4a50      	ldr	r2, [pc, #320]	@ (800a330 <__io_putchar+0x1b0>)
 800a1f0:	8010      	strh	r0, [r2, #0]
 800a1f2:	461c      	mov	r4, r3
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	b2d8      	uxtb	r0, r3
 800a1f8:	4a4e      	ldr	r2, [pc, #312]	@ (800a334 <__io_putchar+0x1b4>)
 800a1fa:	460b      	mov	r3, r1
 800a1fc:	015b      	lsls	r3, r3, #5
 800a1fe:	440b      	add	r3, r1
 800a200:	009b      	lsls	r3, r3, #2
 800a202:	4413      	add	r3, r2
 800a204:	4423      	add	r3, r4
 800a206:	4602      	mov	r2, r0
 800a208:	701a      	strb	r2, [r3, #0]
 800a20a:	e07b      	b.n	800a304 <__io_putchar+0x184>
    }   
    else 
    {
      if(LCD_CacheBuffer_yptr_top >= LCD_CacheBuffer_yptr_bottom)
 800a20c:	4b45      	ldr	r3, [pc, #276]	@ (800a324 <__io_putchar+0x1a4>)
 800a20e:	881a      	ldrh	r2, [r3, #0]
 800a210:	4b42      	ldr	r3, [pc, #264]	@ (800a31c <__io_putchar+0x19c>)
 800a212:	881b      	ldrh	r3, [r3, #0]
 800a214:	429a      	cmp	r2, r3
 800a216:	d314      	bcc.n	800a242 <__io_putchar+0xc2>
      {
        
        if(LCD_CacheBuffer_yptr_invert == DISABLE)
 800a218:	4b47      	ldr	r3, [pc, #284]	@ (800a338 <__io_putchar+0x1b8>)
 800a21a:	781b      	ldrb	r3, [r3, #0]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d10d      	bne.n	800a23c <__io_putchar+0xbc>
        {
          LCD_CacheBuffer_yptr_top++;
 800a220:	4b40      	ldr	r3, [pc, #256]	@ (800a324 <__io_putchar+0x1a4>)
 800a222:	881b      	ldrh	r3, [r3, #0]
 800a224:	3301      	adds	r3, #1
 800a226:	b29a      	uxth	r2, r3
 800a228:	4b3e      	ldr	r3, [pc, #248]	@ (800a324 <__io_putchar+0x1a4>)
 800a22a:	801a      	strh	r2, [r3, #0]
          
          if(LCD_CacheBuffer_yptr_top == LCD_CACHE_DEPTH)
 800a22c:	4b3d      	ldr	r3, [pc, #244]	@ (800a324 <__io_putchar+0x1a4>)
 800a22e:	881b      	ldrh	r3, [r3, #0]
 800a230:	2b75      	cmp	r3, #117	@ 0x75
 800a232:	d106      	bne.n	800a242 <__io_putchar+0xc2>
          {
            LCD_CacheBuffer_yptr_top = 0;  
 800a234:	4b3b      	ldr	r3, [pc, #236]	@ (800a324 <__io_putchar+0x1a4>)
 800a236:	2200      	movs	r2, #0
 800a238:	801a      	strh	r2, [r3, #0]
 800a23a:	e002      	b.n	800a242 <__io_putchar+0xc2>
          }
        }
        else
        {
          LCD_CacheBuffer_yptr_invert= DISABLE;
 800a23c:	4b3e      	ldr	r3, [pc, #248]	@ (800a338 <__io_putchar+0x1b8>)
 800a23e:	2200      	movs	r2, #0
 800a240:	701a      	strb	r2, [r3, #0]
        }
      }
      
      for(idx = LCD_CacheBuffer_xptr ; idx < (BSP_LCD_GetXSize()) /cFont->Width; idx++)
 800a242:	4b3b      	ldr	r3, [pc, #236]	@ (800a330 <__io_putchar+0x1b0>)
 800a244:	881b      	ldrh	r3, [r3, #0]
 800a246:	60fb      	str	r3, [r7, #12]
 800a248:	e015      	b.n	800a276 <__io_putchar+0xf6>
      {
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = ' ';
 800a24a:	4b34      	ldr	r3, [pc, #208]	@ (800a31c <__io_putchar+0x19c>)
 800a24c:	881b      	ldrh	r3, [r3, #0]
 800a24e:	4619      	mov	r1, r3
 800a250:	4b37      	ldr	r3, [pc, #220]	@ (800a330 <__io_putchar+0x1b0>)
 800a252:	881b      	ldrh	r3, [r3, #0]
 800a254:	1c5a      	adds	r2, r3, #1
 800a256:	b290      	uxth	r0, r2
 800a258:	4a35      	ldr	r2, [pc, #212]	@ (800a330 <__io_putchar+0x1b0>)
 800a25a:	8010      	strh	r0, [r2, #0]
 800a25c:	4618      	mov	r0, r3
 800a25e:	4a35      	ldr	r2, [pc, #212]	@ (800a334 <__io_putchar+0x1b4>)
 800a260:	460b      	mov	r3, r1
 800a262:	015b      	lsls	r3, r3, #5
 800a264:	440b      	add	r3, r1
 800a266:	009b      	lsls	r3, r3, #2
 800a268:	4413      	add	r3, r2
 800a26a:	4403      	add	r3, r0
 800a26c:	2220      	movs	r2, #32
 800a26e:	701a      	strb	r2, [r3, #0]
      for(idx = LCD_CacheBuffer_xptr ; idx < (BSP_LCD_GetXSize()) /cFont->Width; idx++)
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	3301      	adds	r3, #1
 800a274:	60fb      	str	r3, [r7, #12]
 800a276:	f7f7 fdb3 	bl	8001de0 <BSP_LCD_GetXSize>
 800a27a:	4602      	mov	r2, r0
 800a27c:	68bb      	ldr	r3, [r7, #8]
 800a27e:	889b      	ldrh	r3, [r3, #4]
 800a280:	fbb2 f3f3 	udiv	r3, r2, r3
 800a284:	68fa      	ldr	r2, [r7, #12]
 800a286:	429a      	cmp	r2, r3
 800a288:	d3df      	bcc.n	800a24a <__io_putchar+0xca>
      }   
      LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].color = LCD_LineColor;  
 800a28a:	4b24      	ldr	r3, [pc, #144]	@ (800a31c <__io_putchar+0x19c>)
 800a28c:	881b      	ldrh	r3, [r3, #0]
 800a28e:	4618      	mov	r0, r3
 800a290:	4b2a      	ldr	r3, [pc, #168]	@ (800a33c <__io_putchar+0x1bc>)
 800a292:	681a      	ldr	r2, [r3, #0]
 800a294:	4927      	ldr	r1, [pc, #156]	@ (800a334 <__io_putchar+0x1b4>)
 800a296:	4603      	mov	r3, r0
 800a298:	015b      	lsls	r3, r3, #5
 800a29a:	4403      	add	r3, r0
 800a29c:	009b      	lsls	r3, r3, #2
 800a29e:	440b      	add	r3, r1
 800a2a0:	3380      	adds	r3, #128	@ 0x80
 800a2a2:	601a      	str	r2, [r3, #0]
      
      LCD_CacheBuffer_xptr = 0;
 800a2a4:	4b22      	ldr	r3, [pc, #136]	@ (800a330 <__io_putchar+0x1b0>)
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	801a      	strh	r2, [r3, #0]
      
      LCD_LOG_UpdateDisplay (); 
 800a2aa:	f000 f849 	bl	800a340 <LCD_LOG_UpdateDisplay>
      
      LCD_CacheBuffer_yptr_bottom ++; 
 800a2ae:	4b1b      	ldr	r3, [pc, #108]	@ (800a31c <__io_putchar+0x19c>)
 800a2b0:	881b      	ldrh	r3, [r3, #0]
 800a2b2:	3301      	adds	r3, #1
 800a2b4:	b29a      	uxth	r2, r3
 800a2b6:	4b19      	ldr	r3, [pc, #100]	@ (800a31c <__io_putchar+0x19c>)
 800a2b8:	801a      	strh	r2, [r3, #0]
      
      if (LCD_CacheBuffer_yptr_bottom == LCD_CACHE_DEPTH) 
 800a2ba:	4b18      	ldr	r3, [pc, #96]	@ (800a31c <__io_putchar+0x19c>)
 800a2bc:	881b      	ldrh	r3, [r3, #0]
 800a2be:	2b75      	cmp	r3, #117	@ 0x75
 800a2c0:	d108      	bne.n	800a2d4 <__io_putchar+0x154>
      {
        LCD_CacheBuffer_yptr_bottom = 0;
 800a2c2:	4b16      	ldr	r3, [pc, #88]	@ (800a31c <__io_putchar+0x19c>)
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	801a      	strh	r2, [r3, #0]
        LCD_CacheBuffer_yptr_top = 1;    
 800a2c8:	4b16      	ldr	r3, [pc, #88]	@ (800a324 <__io_putchar+0x1a4>)
 800a2ca:	2201      	movs	r2, #1
 800a2cc:	801a      	strh	r2, [r3, #0]
        LCD_CacheBuffer_yptr_invert = ENABLE;
 800a2ce:	4b1a      	ldr	r3, [pc, #104]	@ (800a338 <__io_putchar+0x1b8>)
 800a2d0:	2201      	movs	r2, #1
 800a2d2:	701a      	strb	r2, [r3, #0]
      }
      
      if( ch != '\n')
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	2b0a      	cmp	r3, #10
 800a2d8:	d014      	beq.n	800a304 <__io_putchar+0x184>
      {
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = (uint16_t)ch;
 800a2da:	4b10      	ldr	r3, [pc, #64]	@ (800a31c <__io_putchar+0x19c>)
 800a2dc:	881b      	ldrh	r3, [r3, #0]
 800a2de:	4619      	mov	r1, r3
 800a2e0:	4b13      	ldr	r3, [pc, #76]	@ (800a330 <__io_putchar+0x1b0>)
 800a2e2:	881b      	ldrh	r3, [r3, #0]
 800a2e4:	1c5a      	adds	r2, r3, #1
 800a2e6:	b290      	uxth	r0, r2
 800a2e8:	4a11      	ldr	r2, [pc, #68]	@ (800a330 <__io_putchar+0x1b0>)
 800a2ea:	8010      	strh	r0, [r2, #0]
 800a2ec:	461c      	mov	r4, r3
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	b2d8      	uxtb	r0, r3
 800a2f2:	4a10      	ldr	r2, [pc, #64]	@ (800a334 <__io_putchar+0x1b4>)
 800a2f4:	460b      	mov	r3, r1
 800a2f6:	015b      	lsls	r3, r3, #5
 800a2f8:	440b      	add	r3, r1
 800a2fa:	009b      	lsls	r3, r3, #2
 800a2fc:	4413      	add	r3, r2
 800a2fe:	4423      	add	r3, r4
 800a300:	4602      	mov	r2, r0
 800a302:	701a      	strb	r2, [r3, #0]
      }
      
    }
  }
  return ch;
 800a304:	687b      	ldr	r3, [r7, #4]
}
 800a306:	4618      	mov	r0, r3
 800a308:	3714      	adds	r7, #20
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bd90      	pop	{r4, r7, pc}
 800a30e:	bf00      	nop
 800a310:	200041c0 	.word	0x200041c0
 800a314:	200041bf 	.word	0x200041bf
 800a318:	200041bc 	.word	0x200041bc
 800a31c:	200041b8 	.word	0x200041b8
 800a320:	200041ba 	.word	0x200041ba
 800a324:	200041b6 	.word	0x200041b6
 800a328:	200041c1 	.word	0x200041c1
 800a32c:	200041c2 	.word	0x200041c2
 800a330:	200041b4 	.word	0x200041b4
 800a334:	2000055c 	.word	0x2000055c
 800a338:	200041be 	.word	0x200041be
 800a33c:	200041b0 	.word	0x200041b0

0800a340 <LCD_LOG_UpdateDisplay>:
  * @brief  Update the text area display
  * @param  None
  * @retval None
  */
void LCD_LOG_UpdateDisplay (void)
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b082      	sub	sp, #8
 800a344:	af00      	add	r7, sp, #0
  uint8_t cnt = 0 ;
 800a346:	2300      	movs	r3, #0
 800a348:	71fb      	strb	r3, [r7, #7]
  uint16_t length = 0 ;
 800a34a:	2300      	movs	r3, #0
 800a34c:	80bb      	strh	r3, [r7, #4]
  uint16_t ptr = 0, index = 0;
 800a34e:	2300      	movs	r3, #0
 800a350:	807b      	strh	r3, [r7, #2]
 800a352:	2300      	movs	r3, #0
 800a354:	803b      	strh	r3, [r7, #0]
  
  if((LCD_CacheBuffer_yptr_bottom  < (YWINDOW_SIZE -1)) && 
 800a356:	4b3a      	ldr	r3, [pc, #232]	@ (800a440 <LCD_LOG_UpdateDisplay+0x100>)
 800a358:	881b      	ldrh	r3, [r3, #0]
 800a35a:	2b0f      	cmp	r3, #15
 800a35c:	d826      	bhi.n	800a3ac <LCD_LOG_UpdateDisplay+0x6c>
     (LCD_CacheBuffer_yptr_bottom  >= LCD_CacheBuffer_yptr_top))
 800a35e:	4b38      	ldr	r3, [pc, #224]	@ (800a440 <LCD_LOG_UpdateDisplay+0x100>)
 800a360:	881a      	ldrh	r2, [r3, #0]
 800a362:	4b38      	ldr	r3, [pc, #224]	@ (800a444 <LCD_LOG_UpdateDisplay+0x104>)
 800a364:	881b      	ldrh	r3, [r3, #0]
  if((LCD_CacheBuffer_yptr_bottom  < (YWINDOW_SIZE -1)) && 
 800a366:	429a      	cmp	r2, r3
 800a368:	d320      	bcc.n	800a3ac <LCD_LOG_UpdateDisplay+0x6c>
  {
    BSP_LCD_SetTextColor(LCD_CacheBuffer[cnt + LCD_CacheBuffer_yptr_bottom].color);
 800a36a:	79fb      	ldrb	r3, [r7, #7]
 800a36c:	4a34      	ldr	r2, [pc, #208]	@ (800a440 <LCD_LOG_UpdateDisplay+0x100>)
 800a36e:	8812      	ldrh	r2, [r2, #0]
 800a370:	441a      	add	r2, r3
 800a372:	4935      	ldr	r1, [pc, #212]	@ (800a448 <LCD_LOG_UpdateDisplay+0x108>)
 800a374:	4613      	mov	r3, r2
 800a376:	015b      	lsls	r3, r3, #5
 800a378:	4413      	add	r3, r2
 800a37a:	009b      	lsls	r3, r3, #2
 800a37c:	440b      	add	r3, r1
 800a37e:	3380      	adds	r3, #128	@ 0x80
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	4618      	mov	r0, r3
 800a384:	f7f7 fdb8 	bl	8001ef8 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAtLine ((YWINDOW_MIN + LCD_CacheBuffer_yptr_bottom),
 800a388:	4b2d      	ldr	r3, [pc, #180]	@ (800a440 <LCD_LOG_UpdateDisplay+0x100>)
 800a38a:	881b      	ldrh	r3, [r3, #0]
 800a38c:	3304      	adds	r3, #4
 800a38e:	b298      	uxth	r0, r3
                           (uint8_t *)(LCD_CacheBuffer[cnt + LCD_CacheBuffer_yptr_bottom].line));
 800a390:	79fb      	ldrb	r3, [r7, #7]
 800a392:	4a2b      	ldr	r2, [pc, #172]	@ (800a440 <LCD_LOG_UpdateDisplay+0x100>)
 800a394:	8812      	ldrh	r2, [r2, #0]
 800a396:	441a      	add	r2, r3
 800a398:	4613      	mov	r3, r2
 800a39a:	015b      	lsls	r3, r3, #5
 800a39c:	4413      	add	r3, r2
 800a39e:	009b      	lsls	r3, r3, #2
 800a3a0:	4a29      	ldr	r2, [pc, #164]	@ (800a448 <LCD_LOG_UpdateDisplay+0x108>)
 800a3a2:	4413      	add	r3, r2
    BSP_LCD_DisplayStringAtLine ((YWINDOW_MIN + LCD_CacheBuffer_yptr_bottom),
 800a3a4:	4619      	mov	r1, r3
 800a3a6:	f7f7 ff97 	bl	80022d8 <BSP_LCD_DisplayStringAtLine>
 800a3aa:	e044      	b.n	800a436 <LCD_LOG_UpdateDisplay+0xf6>
  }
  else
  {
    
    if(LCD_CacheBuffer_yptr_bottom < LCD_CacheBuffer_yptr_top)
 800a3ac:	4b24      	ldr	r3, [pc, #144]	@ (800a440 <LCD_LOG_UpdateDisplay+0x100>)
 800a3ae:	881a      	ldrh	r2, [r3, #0]
 800a3b0:	4b24      	ldr	r3, [pc, #144]	@ (800a444 <LCD_LOG_UpdateDisplay+0x104>)
 800a3b2:	881b      	ldrh	r3, [r3, #0]
 800a3b4:	429a      	cmp	r2, r3
 800a3b6:	d204      	bcs.n	800a3c2 <LCD_LOG_UpdateDisplay+0x82>
    {
      /* Virtual length for rolling */
      length = LCD_CACHE_DEPTH + LCD_CacheBuffer_yptr_bottom ;
 800a3b8:	4b21      	ldr	r3, [pc, #132]	@ (800a440 <LCD_LOG_UpdateDisplay+0x100>)
 800a3ba:	881b      	ldrh	r3, [r3, #0]
 800a3bc:	3375      	adds	r3, #117	@ 0x75
 800a3be:	80bb      	strh	r3, [r7, #4]
 800a3c0:	e002      	b.n	800a3c8 <LCD_LOG_UpdateDisplay+0x88>
    }
    else
    {
      length = LCD_CacheBuffer_yptr_bottom;
 800a3c2:	4b1f      	ldr	r3, [pc, #124]	@ (800a440 <LCD_LOG_UpdateDisplay+0x100>)
 800a3c4:	881b      	ldrh	r3, [r3, #0]
 800a3c6:	80bb      	strh	r3, [r7, #4]
    }
    
    ptr = length - YWINDOW_SIZE + 1;
 800a3c8:	88bb      	ldrh	r3, [r7, #4]
 800a3ca:	3b10      	subs	r3, #16
 800a3cc:	807b      	strh	r3, [r7, #2]
    
    for  (cnt = 0 ; cnt < YWINDOW_SIZE ; cnt ++)
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	71fb      	strb	r3, [r7, #7]
 800a3d2:	e02c      	b.n	800a42e <LCD_LOG_UpdateDisplay+0xee>
    {
      
      index = (cnt + ptr )% LCD_CACHE_DEPTH ;
 800a3d4:	79fa      	ldrb	r2, [r7, #7]
 800a3d6:	887b      	ldrh	r3, [r7, #2]
 800a3d8:	4413      	add	r3, r2
 800a3da:	4a1c      	ldr	r2, [pc, #112]	@ (800a44c <LCD_LOG_UpdateDisplay+0x10c>)
 800a3dc:	fb82 1203 	smull	r1, r2, r2, r3
 800a3e0:	441a      	add	r2, r3
 800a3e2:	1191      	asrs	r1, r2, #6
 800a3e4:	17da      	asrs	r2, r3, #31
 800a3e6:	1a8a      	subs	r2, r1, r2
 800a3e8:	2175      	movs	r1, #117	@ 0x75
 800a3ea:	fb01 f202 	mul.w	r2, r1, r2
 800a3ee:	1a9a      	subs	r2, r3, r2
 800a3f0:	4613      	mov	r3, r2
 800a3f2:	803b      	strh	r3, [r7, #0]
      
      BSP_LCD_SetTextColor(LCD_CacheBuffer[index].color);
 800a3f4:	883a      	ldrh	r2, [r7, #0]
 800a3f6:	4914      	ldr	r1, [pc, #80]	@ (800a448 <LCD_LOG_UpdateDisplay+0x108>)
 800a3f8:	4613      	mov	r3, r2
 800a3fa:	015b      	lsls	r3, r3, #5
 800a3fc:	4413      	add	r3, r2
 800a3fe:	009b      	lsls	r3, r3, #2
 800a400:	440b      	add	r3, r1
 800a402:	3380      	adds	r3, #128	@ 0x80
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	4618      	mov	r0, r3
 800a408:	f7f7 fd76 	bl	8001ef8 <BSP_LCD_SetTextColor>
      BSP_LCD_DisplayStringAtLine ((cnt + YWINDOW_MIN), 
 800a40c:	79fb      	ldrb	r3, [r7, #7]
 800a40e:	b29b      	uxth	r3, r3
 800a410:	3304      	adds	r3, #4
 800a412:	b298      	uxth	r0, r3
                             (uint8_t *)(LCD_CacheBuffer[index].line));
 800a414:	883a      	ldrh	r2, [r7, #0]
 800a416:	4613      	mov	r3, r2
 800a418:	015b      	lsls	r3, r3, #5
 800a41a:	4413      	add	r3, r2
 800a41c:	009b      	lsls	r3, r3, #2
 800a41e:	4a0a      	ldr	r2, [pc, #40]	@ (800a448 <LCD_LOG_UpdateDisplay+0x108>)
 800a420:	4413      	add	r3, r2
      BSP_LCD_DisplayStringAtLine ((cnt + YWINDOW_MIN), 
 800a422:	4619      	mov	r1, r3
 800a424:	f7f7 ff58 	bl	80022d8 <BSP_LCD_DisplayStringAtLine>
    for  (cnt = 0 ; cnt < YWINDOW_SIZE ; cnt ++)
 800a428:	79fb      	ldrb	r3, [r7, #7]
 800a42a:	3301      	adds	r3, #1
 800a42c:	71fb      	strb	r3, [r7, #7]
 800a42e:	79fb      	ldrb	r3, [r7, #7]
 800a430:	2b10      	cmp	r3, #16
 800a432:	d9cf      	bls.n	800a3d4 <LCD_LOG_UpdateDisplay+0x94>
      
    }
  }
  
}
 800a434:	bf00      	nop
 800a436:	bf00      	nop
 800a438:	3708      	adds	r7, #8
 800a43a:	46bd      	mov	sp, r7
 800a43c:	bd80      	pop	{r7, pc}
 800a43e:	bf00      	nop
 800a440:	200041b8 	.word	0x200041b8
 800a444:	200041b6 	.word	0x200041b6
 800a448:	2000055c 	.word	0x2000055c
 800a44c:	8c08c08d 	.word	0x8c08c08d

0800a450 <siprintf>:
 800a450:	b40e      	push	{r1, r2, r3}
 800a452:	b500      	push	{lr}
 800a454:	b09c      	sub	sp, #112	@ 0x70
 800a456:	ab1d      	add	r3, sp, #116	@ 0x74
 800a458:	9002      	str	r0, [sp, #8]
 800a45a:	9006      	str	r0, [sp, #24]
 800a45c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a460:	4809      	ldr	r0, [pc, #36]	@ (800a488 <siprintf+0x38>)
 800a462:	9107      	str	r1, [sp, #28]
 800a464:	9104      	str	r1, [sp, #16]
 800a466:	4909      	ldr	r1, [pc, #36]	@ (800a48c <siprintf+0x3c>)
 800a468:	f853 2b04 	ldr.w	r2, [r3], #4
 800a46c:	9105      	str	r1, [sp, #20]
 800a46e:	6800      	ldr	r0, [r0, #0]
 800a470:	9301      	str	r3, [sp, #4]
 800a472:	a902      	add	r1, sp, #8
 800a474:	f000 f970 	bl	800a758 <_svfiprintf_r>
 800a478:	9b02      	ldr	r3, [sp, #8]
 800a47a:	2200      	movs	r2, #0
 800a47c:	701a      	strb	r2, [r3, #0]
 800a47e:	b01c      	add	sp, #112	@ 0x70
 800a480:	f85d eb04 	ldr.w	lr, [sp], #4
 800a484:	b003      	add	sp, #12
 800a486:	4770      	bx	lr
 800a488:	200001dc 	.word	0x200001dc
 800a48c:	ffff0208 	.word	0xffff0208

0800a490 <std>:
 800a490:	2300      	movs	r3, #0
 800a492:	b510      	push	{r4, lr}
 800a494:	4604      	mov	r4, r0
 800a496:	e9c0 3300 	strd	r3, r3, [r0]
 800a49a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a49e:	6083      	str	r3, [r0, #8]
 800a4a0:	8181      	strh	r1, [r0, #12]
 800a4a2:	6643      	str	r3, [r0, #100]	@ 0x64
 800a4a4:	81c2      	strh	r2, [r0, #14]
 800a4a6:	6183      	str	r3, [r0, #24]
 800a4a8:	4619      	mov	r1, r3
 800a4aa:	2208      	movs	r2, #8
 800a4ac:	305c      	adds	r0, #92	@ 0x5c
 800a4ae:	f000 f8c3 	bl	800a638 <memset>
 800a4b2:	4b0d      	ldr	r3, [pc, #52]	@ (800a4e8 <std+0x58>)
 800a4b4:	6263      	str	r3, [r4, #36]	@ 0x24
 800a4b6:	4b0d      	ldr	r3, [pc, #52]	@ (800a4ec <std+0x5c>)
 800a4b8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a4ba:	4b0d      	ldr	r3, [pc, #52]	@ (800a4f0 <std+0x60>)
 800a4bc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a4be:	4b0d      	ldr	r3, [pc, #52]	@ (800a4f4 <std+0x64>)
 800a4c0:	6323      	str	r3, [r4, #48]	@ 0x30
 800a4c2:	4b0d      	ldr	r3, [pc, #52]	@ (800a4f8 <std+0x68>)
 800a4c4:	6224      	str	r4, [r4, #32]
 800a4c6:	429c      	cmp	r4, r3
 800a4c8:	d006      	beq.n	800a4d8 <std+0x48>
 800a4ca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a4ce:	4294      	cmp	r4, r2
 800a4d0:	d002      	beq.n	800a4d8 <std+0x48>
 800a4d2:	33d0      	adds	r3, #208	@ 0xd0
 800a4d4:	429c      	cmp	r4, r3
 800a4d6:	d105      	bne.n	800a4e4 <std+0x54>
 800a4d8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a4dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a4e0:	f000 b8dc 	b.w	800a69c <__retarget_lock_init_recursive>
 800a4e4:	bd10      	pop	{r4, pc}
 800a4e6:	bf00      	nop
 800a4e8:	0800b1a5 	.word	0x0800b1a5
 800a4ec:	0800b1c7 	.word	0x0800b1c7
 800a4f0:	0800b1ff 	.word	0x0800b1ff
 800a4f4:	0800b223 	.word	0x0800b223
 800a4f8:	200041c4 	.word	0x200041c4

0800a4fc <stdio_exit_handler>:
 800a4fc:	4a02      	ldr	r2, [pc, #8]	@ (800a508 <stdio_exit_handler+0xc>)
 800a4fe:	4903      	ldr	r1, [pc, #12]	@ (800a50c <stdio_exit_handler+0x10>)
 800a500:	4803      	ldr	r0, [pc, #12]	@ (800a510 <stdio_exit_handler+0x14>)
 800a502:	f000 b869 	b.w	800a5d8 <_fwalk_sglue>
 800a506:	bf00      	nop
 800a508:	200001d0 	.word	0x200001d0
 800a50c:	0800b13d 	.word	0x0800b13d
 800a510:	200001e0 	.word	0x200001e0

0800a514 <cleanup_stdio>:
 800a514:	6841      	ldr	r1, [r0, #4]
 800a516:	4b0c      	ldr	r3, [pc, #48]	@ (800a548 <cleanup_stdio+0x34>)
 800a518:	4299      	cmp	r1, r3
 800a51a:	b510      	push	{r4, lr}
 800a51c:	4604      	mov	r4, r0
 800a51e:	d001      	beq.n	800a524 <cleanup_stdio+0x10>
 800a520:	f000 fe0c 	bl	800b13c <_fflush_r>
 800a524:	68a1      	ldr	r1, [r4, #8]
 800a526:	4b09      	ldr	r3, [pc, #36]	@ (800a54c <cleanup_stdio+0x38>)
 800a528:	4299      	cmp	r1, r3
 800a52a:	d002      	beq.n	800a532 <cleanup_stdio+0x1e>
 800a52c:	4620      	mov	r0, r4
 800a52e:	f000 fe05 	bl	800b13c <_fflush_r>
 800a532:	68e1      	ldr	r1, [r4, #12]
 800a534:	4b06      	ldr	r3, [pc, #24]	@ (800a550 <cleanup_stdio+0x3c>)
 800a536:	4299      	cmp	r1, r3
 800a538:	d004      	beq.n	800a544 <cleanup_stdio+0x30>
 800a53a:	4620      	mov	r0, r4
 800a53c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a540:	f000 bdfc 	b.w	800b13c <_fflush_r>
 800a544:	bd10      	pop	{r4, pc}
 800a546:	bf00      	nop
 800a548:	200041c4 	.word	0x200041c4
 800a54c:	2000422c 	.word	0x2000422c
 800a550:	20004294 	.word	0x20004294

0800a554 <global_stdio_init.part.0>:
 800a554:	b510      	push	{r4, lr}
 800a556:	4b0b      	ldr	r3, [pc, #44]	@ (800a584 <global_stdio_init.part.0+0x30>)
 800a558:	4c0b      	ldr	r4, [pc, #44]	@ (800a588 <global_stdio_init.part.0+0x34>)
 800a55a:	4a0c      	ldr	r2, [pc, #48]	@ (800a58c <global_stdio_init.part.0+0x38>)
 800a55c:	601a      	str	r2, [r3, #0]
 800a55e:	4620      	mov	r0, r4
 800a560:	2200      	movs	r2, #0
 800a562:	2104      	movs	r1, #4
 800a564:	f7ff ff94 	bl	800a490 <std>
 800a568:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a56c:	2201      	movs	r2, #1
 800a56e:	2109      	movs	r1, #9
 800a570:	f7ff ff8e 	bl	800a490 <std>
 800a574:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a578:	2202      	movs	r2, #2
 800a57a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a57e:	2112      	movs	r1, #18
 800a580:	f7ff bf86 	b.w	800a490 <std>
 800a584:	200042fc 	.word	0x200042fc
 800a588:	200041c4 	.word	0x200041c4
 800a58c:	0800a4fd 	.word	0x0800a4fd

0800a590 <__sfp_lock_acquire>:
 800a590:	4801      	ldr	r0, [pc, #4]	@ (800a598 <__sfp_lock_acquire+0x8>)
 800a592:	f000 b884 	b.w	800a69e <__retarget_lock_acquire_recursive>
 800a596:	bf00      	nop
 800a598:	20004301 	.word	0x20004301

0800a59c <__sfp_lock_release>:
 800a59c:	4801      	ldr	r0, [pc, #4]	@ (800a5a4 <__sfp_lock_release+0x8>)
 800a59e:	f000 b87f 	b.w	800a6a0 <__retarget_lock_release_recursive>
 800a5a2:	bf00      	nop
 800a5a4:	20004301 	.word	0x20004301

0800a5a8 <__sinit>:
 800a5a8:	b510      	push	{r4, lr}
 800a5aa:	4604      	mov	r4, r0
 800a5ac:	f7ff fff0 	bl	800a590 <__sfp_lock_acquire>
 800a5b0:	6a23      	ldr	r3, [r4, #32]
 800a5b2:	b11b      	cbz	r3, 800a5bc <__sinit+0x14>
 800a5b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a5b8:	f7ff bff0 	b.w	800a59c <__sfp_lock_release>
 800a5bc:	4b04      	ldr	r3, [pc, #16]	@ (800a5d0 <__sinit+0x28>)
 800a5be:	6223      	str	r3, [r4, #32]
 800a5c0:	4b04      	ldr	r3, [pc, #16]	@ (800a5d4 <__sinit+0x2c>)
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d1f5      	bne.n	800a5b4 <__sinit+0xc>
 800a5c8:	f7ff ffc4 	bl	800a554 <global_stdio_init.part.0>
 800a5cc:	e7f2      	b.n	800a5b4 <__sinit+0xc>
 800a5ce:	bf00      	nop
 800a5d0:	0800a515 	.word	0x0800a515
 800a5d4:	200042fc 	.word	0x200042fc

0800a5d8 <_fwalk_sglue>:
 800a5d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5dc:	4607      	mov	r7, r0
 800a5de:	4688      	mov	r8, r1
 800a5e0:	4614      	mov	r4, r2
 800a5e2:	2600      	movs	r6, #0
 800a5e4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a5e8:	f1b9 0901 	subs.w	r9, r9, #1
 800a5ec:	d505      	bpl.n	800a5fa <_fwalk_sglue+0x22>
 800a5ee:	6824      	ldr	r4, [r4, #0]
 800a5f0:	2c00      	cmp	r4, #0
 800a5f2:	d1f7      	bne.n	800a5e4 <_fwalk_sglue+0xc>
 800a5f4:	4630      	mov	r0, r6
 800a5f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5fa:	89ab      	ldrh	r3, [r5, #12]
 800a5fc:	2b01      	cmp	r3, #1
 800a5fe:	d907      	bls.n	800a610 <_fwalk_sglue+0x38>
 800a600:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a604:	3301      	adds	r3, #1
 800a606:	d003      	beq.n	800a610 <_fwalk_sglue+0x38>
 800a608:	4629      	mov	r1, r5
 800a60a:	4638      	mov	r0, r7
 800a60c:	47c0      	blx	r8
 800a60e:	4306      	orrs	r6, r0
 800a610:	3568      	adds	r5, #104	@ 0x68
 800a612:	e7e9      	b.n	800a5e8 <_fwalk_sglue+0x10>

0800a614 <iprintf>:
 800a614:	b40f      	push	{r0, r1, r2, r3}
 800a616:	b507      	push	{r0, r1, r2, lr}
 800a618:	4906      	ldr	r1, [pc, #24]	@ (800a634 <iprintf+0x20>)
 800a61a:	ab04      	add	r3, sp, #16
 800a61c:	6808      	ldr	r0, [r1, #0]
 800a61e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a622:	6881      	ldr	r1, [r0, #8]
 800a624:	9301      	str	r3, [sp, #4]
 800a626:	f000 f9bd 	bl	800a9a4 <_vfiprintf_r>
 800a62a:	b003      	add	sp, #12
 800a62c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a630:	b004      	add	sp, #16
 800a632:	4770      	bx	lr
 800a634:	200001dc 	.word	0x200001dc

0800a638 <memset>:
 800a638:	4402      	add	r2, r0
 800a63a:	4603      	mov	r3, r0
 800a63c:	4293      	cmp	r3, r2
 800a63e:	d100      	bne.n	800a642 <memset+0xa>
 800a640:	4770      	bx	lr
 800a642:	f803 1b01 	strb.w	r1, [r3], #1
 800a646:	e7f9      	b.n	800a63c <memset+0x4>

0800a648 <__errno>:
 800a648:	4b01      	ldr	r3, [pc, #4]	@ (800a650 <__errno+0x8>)
 800a64a:	6818      	ldr	r0, [r3, #0]
 800a64c:	4770      	bx	lr
 800a64e:	bf00      	nop
 800a650:	200001dc 	.word	0x200001dc

0800a654 <__libc_init_array>:
 800a654:	b570      	push	{r4, r5, r6, lr}
 800a656:	4d0d      	ldr	r5, [pc, #52]	@ (800a68c <__libc_init_array+0x38>)
 800a658:	4c0d      	ldr	r4, [pc, #52]	@ (800a690 <__libc_init_array+0x3c>)
 800a65a:	1b64      	subs	r4, r4, r5
 800a65c:	10a4      	asrs	r4, r4, #2
 800a65e:	2600      	movs	r6, #0
 800a660:	42a6      	cmp	r6, r4
 800a662:	d109      	bne.n	800a678 <__libc_init_array+0x24>
 800a664:	4d0b      	ldr	r5, [pc, #44]	@ (800a694 <__libc_init_array+0x40>)
 800a666:	4c0c      	ldr	r4, [pc, #48]	@ (800a698 <__libc_init_array+0x44>)
 800a668:	f000 fff6 	bl	800b658 <_init>
 800a66c:	1b64      	subs	r4, r4, r5
 800a66e:	10a4      	asrs	r4, r4, #2
 800a670:	2600      	movs	r6, #0
 800a672:	42a6      	cmp	r6, r4
 800a674:	d105      	bne.n	800a682 <__libc_init_array+0x2e>
 800a676:	bd70      	pop	{r4, r5, r6, pc}
 800a678:	f855 3b04 	ldr.w	r3, [r5], #4
 800a67c:	4798      	blx	r3
 800a67e:	3601      	adds	r6, #1
 800a680:	e7ee      	b.n	800a660 <__libc_init_array+0xc>
 800a682:	f855 3b04 	ldr.w	r3, [r5], #4
 800a686:	4798      	blx	r3
 800a688:	3601      	adds	r6, #1
 800a68a:	e7f2      	b.n	800a672 <__libc_init_array+0x1e>
 800a68c:	08011a9c 	.word	0x08011a9c
 800a690:	08011a9c 	.word	0x08011a9c
 800a694:	08011a9c 	.word	0x08011a9c
 800a698:	08011aa0 	.word	0x08011aa0

0800a69c <__retarget_lock_init_recursive>:
 800a69c:	4770      	bx	lr

0800a69e <__retarget_lock_acquire_recursive>:
 800a69e:	4770      	bx	lr

0800a6a0 <__retarget_lock_release_recursive>:
 800a6a0:	4770      	bx	lr

0800a6a2 <__ssputs_r>:
 800a6a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6a6:	688e      	ldr	r6, [r1, #8]
 800a6a8:	461f      	mov	r7, r3
 800a6aa:	42be      	cmp	r6, r7
 800a6ac:	680b      	ldr	r3, [r1, #0]
 800a6ae:	4682      	mov	sl, r0
 800a6b0:	460c      	mov	r4, r1
 800a6b2:	4690      	mov	r8, r2
 800a6b4:	d82d      	bhi.n	800a712 <__ssputs_r+0x70>
 800a6b6:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a6ba:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a6be:	d026      	beq.n	800a70e <__ssputs_r+0x6c>
 800a6c0:	6965      	ldr	r5, [r4, #20]
 800a6c2:	6909      	ldr	r1, [r1, #16]
 800a6c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a6c8:	eba3 0901 	sub.w	r9, r3, r1
 800a6cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a6d0:	1c7b      	adds	r3, r7, #1
 800a6d2:	444b      	add	r3, r9
 800a6d4:	106d      	asrs	r5, r5, #1
 800a6d6:	429d      	cmp	r5, r3
 800a6d8:	bf38      	it	cc
 800a6da:	461d      	movcc	r5, r3
 800a6dc:	0553      	lsls	r3, r2, #21
 800a6de:	d527      	bpl.n	800a730 <__ssputs_r+0x8e>
 800a6e0:	4629      	mov	r1, r5
 800a6e2:	f000 fa99 	bl	800ac18 <_malloc_r>
 800a6e6:	4606      	mov	r6, r0
 800a6e8:	b360      	cbz	r0, 800a744 <__ssputs_r+0xa2>
 800a6ea:	6921      	ldr	r1, [r4, #16]
 800a6ec:	464a      	mov	r2, r9
 800a6ee:	f000 ff53 	bl	800b598 <memcpy>
 800a6f2:	89a3      	ldrh	r3, [r4, #12]
 800a6f4:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a6f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a6fc:	81a3      	strh	r3, [r4, #12]
 800a6fe:	6126      	str	r6, [r4, #16]
 800a700:	6165      	str	r5, [r4, #20]
 800a702:	444e      	add	r6, r9
 800a704:	eba5 0509 	sub.w	r5, r5, r9
 800a708:	6026      	str	r6, [r4, #0]
 800a70a:	60a5      	str	r5, [r4, #8]
 800a70c:	463e      	mov	r6, r7
 800a70e:	42be      	cmp	r6, r7
 800a710:	d900      	bls.n	800a714 <__ssputs_r+0x72>
 800a712:	463e      	mov	r6, r7
 800a714:	6820      	ldr	r0, [r4, #0]
 800a716:	4632      	mov	r2, r6
 800a718:	4641      	mov	r1, r8
 800a71a:	f000 feab 	bl	800b474 <memmove>
 800a71e:	68a3      	ldr	r3, [r4, #8]
 800a720:	1b9b      	subs	r3, r3, r6
 800a722:	60a3      	str	r3, [r4, #8]
 800a724:	6823      	ldr	r3, [r4, #0]
 800a726:	4433      	add	r3, r6
 800a728:	6023      	str	r3, [r4, #0]
 800a72a:	2000      	movs	r0, #0
 800a72c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a730:	462a      	mov	r2, r5
 800a732:	f000 fd7a 	bl	800b22a <_realloc_r>
 800a736:	4606      	mov	r6, r0
 800a738:	2800      	cmp	r0, #0
 800a73a:	d1e0      	bne.n	800a6fe <__ssputs_r+0x5c>
 800a73c:	6921      	ldr	r1, [r4, #16]
 800a73e:	4650      	mov	r0, sl
 800a740:	f000 ff38 	bl	800b5b4 <_free_r>
 800a744:	230c      	movs	r3, #12
 800a746:	f8ca 3000 	str.w	r3, [sl]
 800a74a:	89a3      	ldrh	r3, [r4, #12]
 800a74c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a750:	81a3      	strh	r3, [r4, #12]
 800a752:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a756:	e7e9      	b.n	800a72c <__ssputs_r+0x8a>

0800a758 <_svfiprintf_r>:
 800a758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a75c:	4698      	mov	r8, r3
 800a75e:	898b      	ldrh	r3, [r1, #12]
 800a760:	061b      	lsls	r3, r3, #24
 800a762:	b09d      	sub	sp, #116	@ 0x74
 800a764:	4607      	mov	r7, r0
 800a766:	460d      	mov	r5, r1
 800a768:	4614      	mov	r4, r2
 800a76a:	d510      	bpl.n	800a78e <_svfiprintf_r+0x36>
 800a76c:	690b      	ldr	r3, [r1, #16]
 800a76e:	b973      	cbnz	r3, 800a78e <_svfiprintf_r+0x36>
 800a770:	2140      	movs	r1, #64	@ 0x40
 800a772:	f000 fa51 	bl	800ac18 <_malloc_r>
 800a776:	6028      	str	r0, [r5, #0]
 800a778:	6128      	str	r0, [r5, #16]
 800a77a:	b930      	cbnz	r0, 800a78a <_svfiprintf_r+0x32>
 800a77c:	230c      	movs	r3, #12
 800a77e:	603b      	str	r3, [r7, #0]
 800a780:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a784:	b01d      	add	sp, #116	@ 0x74
 800a786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a78a:	2340      	movs	r3, #64	@ 0x40
 800a78c:	616b      	str	r3, [r5, #20]
 800a78e:	2300      	movs	r3, #0
 800a790:	9309      	str	r3, [sp, #36]	@ 0x24
 800a792:	2320      	movs	r3, #32
 800a794:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a798:	f8cd 800c 	str.w	r8, [sp, #12]
 800a79c:	2330      	movs	r3, #48	@ 0x30
 800a79e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a93c <_svfiprintf_r+0x1e4>
 800a7a2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a7a6:	f04f 0901 	mov.w	r9, #1
 800a7aa:	4623      	mov	r3, r4
 800a7ac:	469a      	mov	sl, r3
 800a7ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a7b2:	b10a      	cbz	r2, 800a7b8 <_svfiprintf_r+0x60>
 800a7b4:	2a25      	cmp	r2, #37	@ 0x25
 800a7b6:	d1f9      	bne.n	800a7ac <_svfiprintf_r+0x54>
 800a7b8:	ebba 0b04 	subs.w	fp, sl, r4
 800a7bc:	d00b      	beq.n	800a7d6 <_svfiprintf_r+0x7e>
 800a7be:	465b      	mov	r3, fp
 800a7c0:	4622      	mov	r2, r4
 800a7c2:	4629      	mov	r1, r5
 800a7c4:	4638      	mov	r0, r7
 800a7c6:	f7ff ff6c 	bl	800a6a2 <__ssputs_r>
 800a7ca:	3001      	adds	r0, #1
 800a7cc:	f000 80a7 	beq.w	800a91e <_svfiprintf_r+0x1c6>
 800a7d0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a7d2:	445a      	add	r2, fp
 800a7d4:	9209      	str	r2, [sp, #36]	@ 0x24
 800a7d6:	f89a 3000 	ldrb.w	r3, [sl]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	f000 809f 	beq.w	800a91e <_svfiprintf_r+0x1c6>
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a7e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a7ea:	f10a 0a01 	add.w	sl, sl, #1
 800a7ee:	9304      	str	r3, [sp, #16]
 800a7f0:	9307      	str	r3, [sp, #28]
 800a7f2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a7f6:	931a      	str	r3, [sp, #104]	@ 0x68
 800a7f8:	4654      	mov	r4, sl
 800a7fa:	2205      	movs	r2, #5
 800a7fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a800:	484e      	ldr	r0, [pc, #312]	@ (800a93c <_svfiprintf_r+0x1e4>)
 800a802:	f7f5 fcf5 	bl	80001f0 <memchr>
 800a806:	9a04      	ldr	r2, [sp, #16]
 800a808:	b9d8      	cbnz	r0, 800a842 <_svfiprintf_r+0xea>
 800a80a:	06d0      	lsls	r0, r2, #27
 800a80c:	bf44      	itt	mi
 800a80e:	2320      	movmi	r3, #32
 800a810:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a814:	0711      	lsls	r1, r2, #28
 800a816:	bf44      	itt	mi
 800a818:	232b      	movmi	r3, #43	@ 0x2b
 800a81a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a81e:	f89a 3000 	ldrb.w	r3, [sl]
 800a822:	2b2a      	cmp	r3, #42	@ 0x2a
 800a824:	d015      	beq.n	800a852 <_svfiprintf_r+0xfa>
 800a826:	9a07      	ldr	r2, [sp, #28]
 800a828:	4654      	mov	r4, sl
 800a82a:	2000      	movs	r0, #0
 800a82c:	f04f 0c0a 	mov.w	ip, #10
 800a830:	4621      	mov	r1, r4
 800a832:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a836:	3b30      	subs	r3, #48	@ 0x30
 800a838:	2b09      	cmp	r3, #9
 800a83a:	d94b      	bls.n	800a8d4 <_svfiprintf_r+0x17c>
 800a83c:	b1b0      	cbz	r0, 800a86c <_svfiprintf_r+0x114>
 800a83e:	9207      	str	r2, [sp, #28]
 800a840:	e014      	b.n	800a86c <_svfiprintf_r+0x114>
 800a842:	eba0 0308 	sub.w	r3, r0, r8
 800a846:	fa09 f303 	lsl.w	r3, r9, r3
 800a84a:	4313      	orrs	r3, r2
 800a84c:	9304      	str	r3, [sp, #16]
 800a84e:	46a2      	mov	sl, r4
 800a850:	e7d2      	b.n	800a7f8 <_svfiprintf_r+0xa0>
 800a852:	9b03      	ldr	r3, [sp, #12]
 800a854:	1d19      	adds	r1, r3, #4
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	9103      	str	r1, [sp, #12]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	bfbb      	ittet	lt
 800a85e:	425b      	neglt	r3, r3
 800a860:	f042 0202 	orrlt.w	r2, r2, #2
 800a864:	9307      	strge	r3, [sp, #28]
 800a866:	9307      	strlt	r3, [sp, #28]
 800a868:	bfb8      	it	lt
 800a86a:	9204      	strlt	r2, [sp, #16]
 800a86c:	7823      	ldrb	r3, [r4, #0]
 800a86e:	2b2e      	cmp	r3, #46	@ 0x2e
 800a870:	d10a      	bne.n	800a888 <_svfiprintf_r+0x130>
 800a872:	7863      	ldrb	r3, [r4, #1]
 800a874:	2b2a      	cmp	r3, #42	@ 0x2a
 800a876:	d132      	bne.n	800a8de <_svfiprintf_r+0x186>
 800a878:	9b03      	ldr	r3, [sp, #12]
 800a87a:	1d1a      	adds	r2, r3, #4
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	9203      	str	r2, [sp, #12]
 800a880:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a884:	3402      	adds	r4, #2
 800a886:	9305      	str	r3, [sp, #20]
 800a888:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a94c <_svfiprintf_r+0x1f4>
 800a88c:	7821      	ldrb	r1, [r4, #0]
 800a88e:	2203      	movs	r2, #3
 800a890:	4650      	mov	r0, sl
 800a892:	f7f5 fcad 	bl	80001f0 <memchr>
 800a896:	b138      	cbz	r0, 800a8a8 <_svfiprintf_r+0x150>
 800a898:	9b04      	ldr	r3, [sp, #16]
 800a89a:	eba0 000a 	sub.w	r0, r0, sl
 800a89e:	2240      	movs	r2, #64	@ 0x40
 800a8a0:	4082      	lsls	r2, r0
 800a8a2:	4313      	orrs	r3, r2
 800a8a4:	3401      	adds	r4, #1
 800a8a6:	9304      	str	r3, [sp, #16]
 800a8a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8ac:	4824      	ldr	r0, [pc, #144]	@ (800a940 <_svfiprintf_r+0x1e8>)
 800a8ae:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a8b2:	2206      	movs	r2, #6
 800a8b4:	f7f5 fc9c 	bl	80001f0 <memchr>
 800a8b8:	2800      	cmp	r0, #0
 800a8ba:	d036      	beq.n	800a92a <_svfiprintf_r+0x1d2>
 800a8bc:	4b21      	ldr	r3, [pc, #132]	@ (800a944 <_svfiprintf_r+0x1ec>)
 800a8be:	bb1b      	cbnz	r3, 800a908 <_svfiprintf_r+0x1b0>
 800a8c0:	9b03      	ldr	r3, [sp, #12]
 800a8c2:	3307      	adds	r3, #7
 800a8c4:	f023 0307 	bic.w	r3, r3, #7
 800a8c8:	3308      	adds	r3, #8
 800a8ca:	9303      	str	r3, [sp, #12]
 800a8cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8ce:	4433      	add	r3, r6
 800a8d0:	9309      	str	r3, [sp, #36]	@ 0x24
 800a8d2:	e76a      	b.n	800a7aa <_svfiprintf_r+0x52>
 800a8d4:	fb0c 3202 	mla	r2, ip, r2, r3
 800a8d8:	460c      	mov	r4, r1
 800a8da:	2001      	movs	r0, #1
 800a8dc:	e7a8      	b.n	800a830 <_svfiprintf_r+0xd8>
 800a8de:	2300      	movs	r3, #0
 800a8e0:	3401      	adds	r4, #1
 800a8e2:	9305      	str	r3, [sp, #20]
 800a8e4:	4619      	mov	r1, r3
 800a8e6:	f04f 0c0a 	mov.w	ip, #10
 800a8ea:	4620      	mov	r0, r4
 800a8ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a8f0:	3a30      	subs	r2, #48	@ 0x30
 800a8f2:	2a09      	cmp	r2, #9
 800a8f4:	d903      	bls.n	800a8fe <_svfiprintf_r+0x1a6>
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d0c6      	beq.n	800a888 <_svfiprintf_r+0x130>
 800a8fa:	9105      	str	r1, [sp, #20]
 800a8fc:	e7c4      	b.n	800a888 <_svfiprintf_r+0x130>
 800a8fe:	fb0c 2101 	mla	r1, ip, r1, r2
 800a902:	4604      	mov	r4, r0
 800a904:	2301      	movs	r3, #1
 800a906:	e7f0      	b.n	800a8ea <_svfiprintf_r+0x192>
 800a908:	ab03      	add	r3, sp, #12
 800a90a:	9300      	str	r3, [sp, #0]
 800a90c:	462a      	mov	r2, r5
 800a90e:	4b0e      	ldr	r3, [pc, #56]	@ (800a948 <_svfiprintf_r+0x1f0>)
 800a910:	a904      	add	r1, sp, #16
 800a912:	4638      	mov	r0, r7
 800a914:	f3af 8000 	nop.w
 800a918:	1c42      	adds	r2, r0, #1
 800a91a:	4606      	mov	r6, r0
 800a91c:	d1d6      	bne.n	800a8cc <_svfiprintf_r+0x174>
 800a91e:	89ab      	ldrh	r3, [r5, #12]
 800a920:	065b      	lsls	r3, r3, #25
 800a922:	f53f af2d 	bmi.w	800a780 <_svfiprintf_r+0x28>
 800a926:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a928:	e72c      	b.n	800a784 <_svfiprintf_r+0x2c>
 800a92a:	ab03      	add	r3, sp, #12
 800a92c:	9300      	str	r3, [sp, #0]
 800a92e:	462a      	mov	r2, r5
 800a930:	4b05      	ldr	r3, [pc, #20]	@ (800a948 <_svfiprintf_r+0x1f0>)
 800a932:	a904      	add	r1, sp, #16
 800a934:	4638      	mov	r0, r7
 800a936:	f000 fa5d 	bl	800adf4 <_printf_i>
 800a93a:	e7ed      	b.n	800a918 <_svfiprintf_r+0x1c0>
 800a93c:	08011a5e 	.word	0x08011a5e
 800a940:	08011a68 	.word	0x08011a68
 800a944:	00000000 	.word	0x00000000
 800a948:	0800a6a3 	.word	0x0800a6a3
 800a94c:	08011a64 	.word	0x08011a64

0800a950 <__sfputc_r>:
 800a950:	6893      	ldr	r3, [r2, #8]
 800a952:	3b01      	subs	r3, #1
 800a954:	2b00      	cmp	r3, #0
 800a956:	b410      	push	{r4}
 800a958:	6093      	str	r3, [r2, #8]
 800a95a:	da08      	bge.n	800a96e <__sfputc_r+0x1e>
 800a95c:	6994      	ldr	r4, [r2, #24]
 800a95e:	42a3      	cmp	r3, r4
 800a960:	db01      	blt.n	800a966 <__sfputc_r+0x16>
 800a962:	290a      	cmp	r1, #10
 800a964:	d103      	bne.n	800a96e <__sfputc_r+0x1e>
 800a966:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a96a:	f000 bc8c 	b.w	800b286 <__swbuf_r>
 800a96e:	6813      	ldr	r3, [r2, #0]
 800a970:	1c58      	adds	r0, r3, #1
 800a972:	6010      	str	r0, [r2, #0]
 800a974:	7019      	strb	r1, [r3, #0]
 800a976:	4608      	mov	r0, r1
 800a978:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a97c:	4770      	bx	lr

0800a97e <__sfputs_r>:
 800a97e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a980:	4606      	mov	r6, r0
 800a982:	460f      	mov	r7, r1
 800a984:	4614      	mov	r4, r2
 800a986:	18d5      	adds	r5, r2, r3
 800a988:	42ac      	cmp	r4, r5
 800a98a:	d101      	bne.n	800a990 <__sfputs_r+0x12>
 800a98c:	2000      	movs	r0, #0
 800a98e:	e007      	b.n	800a9a0 <__sfputs_r+0x22>
 800a990:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a994:	463a      	mov	r2, r7
 800a996:	4630      	mov	r0, r6
 800a998:	f7ff ffda 	bl	800a950 <__sfputc_r>
 800a99c:	1c43      	adds	r3, r0, #1
 800a99e:	d1f3      	bne.n	800a988 <__sfputs_r+0xa>
 800a9a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a9a4 <_vfiprintf_r>:
 800a9a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9a8:	460d      	mov	r5, r1
 800a9aa:	b09d      	sub	sp, #116	@ 0x74
 800a9ac:	4614      	mov	r4, r2
 800a9ae:	4698      	mov	r8, r3
 800a9b0:	4606      	mov	r6, r0
 800a9b2:	b118      	cbz	r0, 800a9bc <_vfiprintf_r+0x18>
 800a9b4:	6a03      	ldr	r3, [r0, #32]
 800a9b6:	b90b      	cbnz	r3, 800a9bc <_vfiprintf_r+0x18>
 800a9b8:	f7ff fdf6 	bl	800a5a8 <__sinit>
 800a9bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a9be:	07d9      	lsls	r1, r3, #31
 800a9c0:	d405      	bmi.n	800a9ce <_vfiprintf_r+0x2a>
 800a9c2:	89ab      	ldrh	r3, [r5, #12]
 800a9c4:	059a      	lsls	r2, r3, #22
 800a9c6:	d402      	bmi.n	800a9ce <_vfiprintf_r+0x2a>
 800a9c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a9ca:	f7ff fe68 	bl	800a69e <__retarget_lock_acquire_recursive>
 800a9ce:	89ab      	ldrh	r3, [r5, #12]
 800a9d0:	071b      	lsls	r3, r3, #28
 800a9d2:	d501      	bpl.n	800a9d8 <_vfiprintf_r+0x34>
 800a9d4:	692b      	ldr	r3, [r5, #16]
 800a9d6:	b99b      	cbnz	r3, 800aa00 <_vfiprintf_r+0x5c>
 800a9d8:	4629      	mov	r1, r5
 800a9da:	4630      	mov	r0, r6
 800a9dc:	f000 fc92 	bl	800b304 <__swsetup_r>
 800a9e0:	b170      	cbz	r0, 800aa00 <_vfiprintf_r+0x5c>
 800a9e2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a9e4:	07dc      	lsls	r4, r3, #31
 800a9e6:	d504      	bpl.n	800a9f2 <_vfiprintf_r+0x4e>
 800a9e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a9ec:	b01d      	add	sp, #116	@ 0x74
 800a9ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9f2:	89ab      	ldrh	r3, [r5, #12]
 800a9f4:	0598      	lsls	r0, r3, #22
 800a9f6:	d4f7      	bmi.n	800a9e8 <_vfiprintf_r+0x44>
 800a9f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a9fa:	f7ff fe51 	bl	800a6a0 <__retarget_lock_release_recursive>
 800a9fe:	e7f3      	b.n	800a9e8 <_vfiprintf_r+0x44>
 800aa00:	2300      	movs	r3, #0
 800aa02:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa04:	2320      	movs	r3, #32
 800aa06:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800aa0a:	f8cd 800c 	str.w	r8, [sp, #12]
 800aa0e:	2330      	movs	r3, #48	@ 0x30
 800aa10:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800abc0 <_vfiprintf_r+0x21c>
 800aa14:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800aa18:	f04f 0901 	mov.w	r9, #1
 800aa1c:	4623      	mov	r3, r4
 800aa1e:	469a      	mov	sl, r3
 800aa20:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa24:	b10a      	cbz	r2, 800aa2a <_vfiprintf_r+0x86>
 800aa26:	2a25      	cmp	r2, #37	@ 0x25
 800aa28:	d1f9      	bne.n	800aa1e <_vfiprintf_r+0x7a>
 800aa2a:	ebba 0b04 	subs.w	fp, sl, r4
 800aa2e:	d00b      	beq.n	800aa48 <_vfiprintf_r+0xa4>
 800aa30:	465b      	mov	r3, fp
 800aa32:	4622      	mov	r2, r4
 800aa34:	4629      	mov	r1, r5
 800aa36:	4630      	mov	r0, r6
 800aa38:	f7ff ffa1 	bl	800a97e <__sfputs_r>
 800aa3c:	3001      	adds	r0, #1
 800aa3e:	f000 80a7 	beq.w	800ab90 <_vfiprintf_r+0x1ec>
 800aa42:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aa44:	445a      	add	r2, fp
 800aa46:	9209      	str	r2, [sp, #36]	@ 0x24
 800aa48:	f89a 3000 	ldrb.w	r3, [sl]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	f000 809f 	beq.w	800ab90 <_vfiprintf_r+0x1ec>
 800aa52:	2300      	movs	r3, #0
 800aa54:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800aa58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aa5c:	f10a 0a01 	add.w	sl, sl, #1
 800aa60:	9304      	str	r3, [sp, #16]
 800aa62:	9307      	str	r3, [sp, #28]
 800aa64:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800aa68:	931a      	str	r3, [sp, #104]	@ 0x68
 800aa6a:	4654      	mov	r4, sl
 800aa6c:	2205      	movs	r2, #5
 800aa6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa72:	4853      	ldr	r0, [pc, #332]	@ (800abc0 <_vfiprintf_r+0x21c>)
 800aa74:	f7f5 fbbc 	bl	80001f0 <memchr>
 800aa78:	9a04      	ldr	r2, [sp, #16]
 800aa7a:	b9d8      	cbnz	r0, 800aab4 <_vfiprintf_r+0x110>
 800aa7c:	06d1      	lsls	r1, r2, #27
 800aa7e:	bf44      	itt	mi
 800aa80:	2320      	movmi	r3, #32
 800aa82:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aa86:	0713      	lsls	r3, r2, #28
 800aa88:	bf44      	itt	mi
 800aa8a:	232b      	movmi	r3, #43	@ 0x2b
 800aa8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aa90:	f89a 3000 	ldrb.w	r3, [sl]
 800aa94:	2b2a      	cmp	r3, #42	@ 0x2a
 800aa96:	d015      	beq.n	800aac4 <_vfiprintf_r+0x120>
 800aa98:	9a07      	ldr	r2, [sp, #28]
 800aa9a:	4654      	mov	r4, sl
 800aa9c:	2000      	movs	r0, #0
 800aa9e:	f04f 0c0a 	mov.w	ip, #10
 800aaa2:	4621      	mov	r1, r4
 800aaa4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aaa8:	3b30      	subs	r3, #48	@ 0x30
 800aaaa:	2b09      	cmp	r3, #9
 800aaac:	d94b      	bls.n	800ab46 <_vfiprintf_r+0x1a2>
 800aaae:	b1b0      	cbz	r0, 800aade <_vfiprintf_r+0x13a>
 800aab0:	9207      	str	r2, [sp, #28]
 800aab2:	e014      	b.n	800aade <_vfiprintf_r+0x13a>
 800aab4:	eba0 0308 	sub.w	r3, r0, r8
 800aab8:	fa09 f303 	lsl.w	r3, r9, r3
 800aabc:	4313      	orrs	r3, r2
 800aabe:	9304      	str	r3, [sp, #16]
 800aac0:	46a2      	mov	sl, r4
 800aac2:	e7d2      	b.n	800aa6a <_vfiprintf_r+0xc6>
 800aac4:	9b03      	ldr	r3, [sp, #12]
 800aac6:	1d19      	adds	r1, r3, #4
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	9103      	str	r1, [sp, #12]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	bfbb      	ittet	lt
 800aad0:	425b      	neglt	r3, r3
 800aad2:	f042 0202 	orrlt.w	r2, r2, #2
 800aad6:	9307      	strge	r3, [sp, #28]
 800aad8:	9307      	strlt	r3, [sp, #28]
 800aada:	bfb8      	it	lt
 800aadc:	9204      	strlt	r2, [sp, #16]
 800aade:	7823      	ldrb	r3, [r4, #0]
 800aae0:	2b2e      	cmp	r3, #46	@ 0x2e
 800aae2:	d10a      	bne.n	800aafa <_vfiprintf_r+0x156>
 800aae4:	7863      	ldrb	r3, [r4, #1]
 800aae6:	2b2a      	cmp	r3, #42	@ 0x2a
 800aae8:	d132      	bne.n	800ab50 <_vfiprintf_r+0x1ac>
 800aaea:	9b03      	ldr	r3, [sp, #12]
 800aaec:	1d1a      	adds	r2, r3, #4
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	9203      	str	r2, [sp, #12]
 800aaf2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800aaf6:	3402      	adds	r4, #2
 800aaf8:	9305      	str	r3, [sp, #20]
 800aafa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800abd0 <_vfiprintf_r+0x22c>
 800aafe:	7821      	ldrb	r1, [r4, #0]
 800ab00:	2203      	movs	r2, #3
 800ab02:	4650      	mov	r0, sl
 800ab04:	f7f5 fb74 	bl	80001f0 <memchr>
 800ab08:	b138      	cbz	r0, 800ab1a <_vfiprintf_r+0x176>
 800ab0a:	9b04      	ldr	r3, [sp, #16]
 800ab0c:	eba0 000a 	sub.w	r0, r0, sl
 800ab10:	2240      	movs	r2, #64	@ 0x40
 800ab12:	4082      	lsls	r2, r0
 800ab14:	4313      	orrs	r3, r2
 800ab16:	3401      	adds	r4, #1
 800ab18:	9304      	str	r3, [sp, #16]
 800ab1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab1e:	4829      	ldr	r0, [pc, #164]	@ (800abc4 <_vfiprintf_r+0x220>)
 800ab20:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ab24:	2206      	movs	r2, #6
 800ab26:	f7f5 fb63 	bl	80001f0 <memchr>
 800ab2a:	2800      	cmp	r0, #0
 800ab2c:	d03f      	beq.n	800abae <_vfiprintf_r+0x20a>
 800ab2e:	4b26      	ldr	r3, [pc, #152]	@ (800abc8 <_vfiprintf_r+0x224>)
 800ab30:	bb1b      	cbnz	r3, 800ab7a <_vfiprintf_r+0x1d6>
 800ab32:	9b03      	ldr	r3, [sp, #12]
 800ab34:	3307      	adds	r3, #7
 800ab36:	f023 0307 	bic.w	r3, r3, #7
 800ab3a:	3308      	adds	r3, #8
 800ab3c:	9303      	str	r3, [sp, #12]
 800ab3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab40:	443b      	add	r3, r7
 800ab42:	9309      	str	r3, [sp, #36]	@ 0x24
 800ab44:	e76a      	b.n	800aa1c <_vfiprintf_r+0x78>
 800ab46:	fb0c 3202 	mla	r2, ip, r2, r3
 800ab4a:	460c      	mov	r4, r1
 800ab4c:	2001      	movs	r0, #1
 800ab4e:	e7a8      	b.n	800aaa2 <_vfiprintf_r+0xfe>
 800ab50:	2300      	movs	r3, #0
 800ab52:	3401      	adds	r4, #1
 800ab54:	9305      	str	r3, [sp, #20]
 800ab56:	4619      	mov	r1, r3
 800ab58:	f04f 0c0a 	mov.w	ip, #10
 800ab5c:	4620      	mov	r0, r4
 800ab5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab62:	3a30      	subs	r2, #48	@ 0x30
 800ab64:	2a09      	cmp	r2, #9
 800ab66:	d903      	bls.n	800ab70 <_vfiprintf_r+0x1cc>
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d0c6      	beq.n	800aafa <_vfiprintf_r+0x156>
 800ab6c:	9105      	str	r1, [sp, #20]
 800ab6e:	e7c4      	b.n	800aafa <_vfiprintf_r+0x156>
 800ab70:	fb0c 2101 	mla	r1, ip, r1, r2
 800ab74:	4604      	mov	r4, r0
 800ab76:	2301      	movs	r3, #1
 800ab78:	e7f0      	b.n	800ab5c <_vfiprintf_r+0x1b8>
 800ab7a:	ab03      	add	r3, sp, #12
 800ab7c:	9300      	str	r3, [sp, #0]
 800ab7e:	462a      	mov	r2, r5
 800ab80:	4b12      	ldr	r3, [pc, #72]	@ (800abcc <_vfiprintf_r+0x228>)
 800ab82:	a904      	add	r1, sp, #16
 800ab84:	4630      	mov	r0, r6
 800ab86:	f3af 8000 	nop.w
 800ab8a:	4607      	mov	r7, r0
 800ab8c:	1c78      	adds	r0, r7, #1
 800ab8e:	d1d6      	bne.n	800ab3e <_vfiprintf_r+0x19a>
 800ab90:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ab92:	07d9      	lsls	r1, r3, #31
 800ab94:	d405      	bmi.n	800aba2 <_vfiprintf_r+0x1fe>
 800ab96:	89ab      	ldrh	r3, [r5, #12]
 800ab98:	059a      	lsls	r2, r3, #22
 800ab9a:	d402      	bmi.n	800aba2 <_vfiprintf_r+0x1fe>
 800ab9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ab9e:	f7ff fd7f 	bl	800a6a0 <__retarget_lock_release_recursive>
 800aba2:	89ab      	ldrh	r3, [r5, #12]
 800aba4:	065b      	lsls	r3, r3, #25
 800aba6:	f53f af1f 	bmi.w	800a9e8 <_vfiprintf_r+0x44>
 800abaa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800abac:	e71e      	b.n	800a9ec <_vfiprintf_r+0x48>
 800abae:	ab03      	add	r3, sp, #12
 800abb0:	9300      	str	r3, [sp, #0]
 800abb2:	462a      	mov	r2, r5
 800abb4:	4b05      	ldr	r3, [pc, #20]	@ (800abcc <_vfiprintf_r+0x228>)
 800abb6:	a904      	add	r1, sp, #16
 800abb8:	4630      	mov	r0, r6
 800abba:	f000 f91b 	bl	800adf4 <_printf_i>
 800abbe:	e7e4      	b.n	800ab8a <_vfiprintf_r+0x1e6>
 800abc0:	08011a5e 	.word	0x08011a5e
 800abc4:	08011a68 	.word	0x08011a68
 800abc8:	00000000 	.word	0x00000000
 800abcc:	0800a97f 	.word	0x0800a97f
 800abd0:	08011a64 	.word	0x08011a64

0800abd4 <sbrk_aligned>:
 800abd4:	b570      	push	{r4, r5, r6, lr}
 800abd6:	4e0f      	ldr	r6, [pc, #60]	@ (800ac14 <sbrk_aligned+0x40>)
 800abd8:	460c      	mov	r4, r1
 800abda:	6831      	ldr	r1, [r6, #0]
 800abdc:	4605      	mov	r5, r0
 800abde:	b911      	cbnz	r1, 800abe6 <sbrk_aligned+0x12>
 800abe0:	f000 fcb8 	bl	800b554 <_sbrk_r>
 800abe4:	6030      	str	r0, [r6, #0]
 800abe6:	4621      	mov	r1, r4
 800abe8:	4628      	mov	r0, r5
 800abea:	f000 fcb3 	bl	800b554 <_sbrk_r>
 800abee:	1c43      	adds	r3, r0, #1
 800abf0:	d103      	bne.n	800abfa <sbrk_aligned+0x26>
 800abf2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800abf6:	4620      	mov	r0, r4
 800abf8:	bd70      	pop	{r4, r5, r6, pc}
 800abfa:	1cc4      	adds	r4, r0, #3
 800abfc:	f024 0403 	bic.w	r4, r4, #3
 800ac00:	42a0      	cmp	r0, r4
 800ac02:	d0f8      	beq.n	800abf6 <sbrk_aligned+0x22>
 800ac04:	1a21      	subs	r1, r4, r0
 800ac06:	4628      	mov	r0, r5
 800ac08:	f000 fca4 	bl	800b554 <_sbrk_r>
 800ac0c:	3001      	adds	r0, #1
 800ac0e:	d1f2      	bne.n	800abf6 <sbrk_aligned+0x22>
 800ac10:	e7ef      	b.n	800abf2 <sbrk_aligned+0x1e>
 800ac12:	bf00      	nop
 800ac14:	20004304 	.word	0x20004304

0800ac18 <_malloc_r>:
 800ac18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac1c:	1ccd      	adds	r5, r1, #3
 800ac1e:	f025 0503 	bic.w	r5, r5, #3
 800ac22:	3508      	adds	r5, #8
 800ac24:	2d0c      	cmp	r5, #12
 800ac26:	bf38      	it	cc
 800ac28:	250c      	movcc	r5, #12
 800ac2a:	2d00      	cmp	r5, #0
 800ac2c:	4606      	mov	r6, r0
 800ac2e:	db01      	blt.n	800ac34 <_malloc_r+0x1c>
 800ac30:	42a9      	cmp	r1, r5
 800ac32:	d904      	bls.n	800ac3e <_malloc_r+0x26>
 800ac34:	230c      	movs	r3, #12
 800ac36:	6033      	str	r3, [r6, #0]
 800ac38:	2000      	movs	r0, #0
 800ac3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac3e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ad14 <_malloc_r+0xfc>
 800ac42:	f000 faa3 	bl	800b18c <__malloc_lock>
 800ac46:	f8d8 3000 	ldr.w	r3, [r8]
 800ac4a:	461c      	mov	r4, r3
 800ac4c:	bb44      	cbnz	r4, 800aca0 <_malloc_r+0x88>
 800ac4e:	4629      	mov	r1, r5
 800ac50:	4630      	mov	r0, r6
 800ac52:	f7ff ffbf 	bl	800abd4 <sbrk_aligned>
 800ac56:	1c43      	adds	r3, r0, #1
 800ac58:	4604      	mov	r4, r0
 800ac5a:	d158      	bne.n	800ad0e <_malloc_r+0xf6>
 800ac5c:	f8d8 4000 	ldr.w	r4, [r8]
 800ac60:	4627      	mov	r7, r4
 800ac62:	2f00      	cmp	r7, #0
 800ac64:	d143      	bne.n	800acee <_malloc_r+0xd6>
 800ac66:	2c00      	cmp	r4, #0
 800ac68:	d04b      	beq.n	800ad02 <_malloc_r+0xea>
 800ac6a:	6823      	ldr	r3, [r4, #0]
 800ac6c:	4639      	mov	r1, r7
 800ac6e:	4630      	mov	r0, r6
 800ac70:	eb04 0903 	add.w	r9, r4, r3
 800ac74:	f000 fc6e 	bl	800b554 <_sbrk_r>
 800ac78:	4581      	cmp	r9, r0
 800ac7a:	d142      	bne.n	800ad02 <_malloc_r+0xea>
 800ac7c:	6821      	ldr	r1, [r4, #0]
 800ac7e:	1a6d      	subs	r5, r5, r1
 800ac80:	4629      	mov	r1, r5
 800ac82:	4630      	mov	r0, r6
 800ac84:	f7ff ffa6 	bl	800abd4 <sbrk_aligned>
 800ac88:	3001      	adds	r0, #1
 800ac8a:	d03a      	beq.n	800ad02 <_malloc_r+0xea>
 800ac8c:	6823      	ldr	r3, [r4, #0]
 800ac8e:	442b      	add	r3, r5
 800ac90:	6023      	str	r3, [r4, #0]
 800ac92:	f8d8 3000 	ldr.w	r3, [r8]
 800ac96:	685a      	ldr	r2, [r3, #4]
 800ac98:	bb62      	cbnz	r2, 800acf4 <_malloc_r+0xdc>
 800ac9a:	f8c8 7000 	str.w	r7, [r8]
 800ac9e:	e00f      	b.n	800acc0 <_malloc_r+0xa8>
 800aca0:	6822      	ldr	r2, [r4, #0]
 800aca2:	1b52      	subs	r2, r2, r5
 800aca4:	d420      	bmi.n	800ace8 <_malloc_r+0xd0>
 800aca6:	2a0b      	cmp	r2, #11
 800aca8:	d917      	bls.n	800acda <_malloc_r+0xc2>
 800acaa:	1961      	adds	r1, r4, r5
 800acac:	42a3      	cmp	r3, r4
 800acae:	6025      	str	r5, [r4, #0]
 800acb0:	bf18      	it	ne
 800acb2:	6059      	strne	r1, [r3, #4]
 800acb4:	6863      	ldr	r3, [r4, #4]
 800acb6:	bf08      	it	eq
 800acb8:	f8c8 1000 	streq.w	r1, [r8]
 800acbc:	5162      	str	r2, [r4, r5]
 800acbe:	604b      	str	r3, [r1, #4]
 800acc0:	4630      	mov	r0, r6
 800acc2:	f000 fa69 	bl	800b198 <__malloc_unlock>
 800acc6:	f104 000b 	add.w	r0, r4, #11
 800acca:	1d23      	adds	r3, r4, #4
 800accc:	f020 0007 	bic.w	r0, r0, #7
 800acd0:	1ac2      	subs	r2, r0, r3
 800acd2:	bf1c      	itt	ne
 800acd4:	1a1b      	subne	r3, r3, r0
 800acd6:	50a3      	strne	r3, [r4, r2]
 800acd8:	e7af      	b.n	800ac3a <_malloc_r+0x22>
 800acda:	6862      	ldr	r2, [r4, #4]
 800acdc:	42a3      	cmp	r3, r4
 800acde:	bf0c      	ite	eq
 800ace0:	f8c8 2000 	streq.w	r2, [r8]
 800ace4:	605a      	strne	r2, [r3, #4]
 800ace6:	e7eb      	b.n	800acc0 <_malloc_r+0xa8>
 800ace8:	4623      	mov	r3, r4
 800acea:	6864      	ldr	r4, [r4, #4]
 800acec:	e7ae      	b.n	800ac4c <_malloc_r+0x34>
 800acee:	463c      	mov	r4, r7
 800acf0:	687f      	ldr	r7, [r7, #4]
 800acf2:	e7b6      	b.n	800ac62 <_malloc_r+0x4a>
 800acf4:	461a      	mov	r2, r3
 800acf6:	685b      	ldr	r3, [r3, #4]
 800acf8:	42a3      	cmp	r3, r4
 800acfa:	d1fb      	bne.n	800acf4 <_malloc_r+0xdc>
 800acfc:	2300      	movs	r3, #0
 800acfe:	6053      	str	r3, [r2, #4]
 800ad00:	e7de      	b.n	800acc0 <_malloc_r+0xa8>
 800ad02:	230c      	movs	r3, #12
 800ad04:	6033      	str	r3, [r6, #0]
 800ad06:	4630      	mov	r0, r6
 800ad08:	f000 fa46 	bl	800b198 <__malloc_unlock>
 800ad0c:	e794      	b.n	800ac38 <_malloc_r+0x20>
 800ad0e:	6005      	str	r5, [r0, #0]
 800ad10:	e7d6      	b.n	800acc0 <_malloc_r+0xa8>
 800ad12:	bf00      	nop
 800ad14:	20004308 	.word	0x20004308

0800ad18 <_printf_common>:
 800ad18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad1c:	4616      	mov	r6, r2
 800ad1e:	4698      	mov	r8, r3
 800ad20:	688a      	ldr	r2, [r1, #8]
 800ad22:	690b      	ldr	r3, [r1, #16]
 800ad24:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ad28:	4293      	cmp	r3, r2
 800ad2a:	bfb8      	it	lt
 800ad2c:	4613      	movlt	r3, r2
 800ad2e:	6033      	str	r3, [r6, #0]
 800ad30:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ad34:	4607      	mov	r7, r0
 800ad36:	460c      	mov	r4, r1
 800ad38:	b10a      	cbz	r2, 800ad3e <_printf_common+0x26>
 800ad3a:	3301      	adds	r3, #1
 800ad3c:	6033      	str	r3, [r6, #0]
 800ad3e:	6823      	ldr	r3, [r4, #0]
 800ad40:	0699      	lsls	r1, r3, #26
 800ad42:	bf42      	ittt	mi
 800ad44:	6833      	ldrmi	r3, [r6, #0]
 800ad46:	3302      	addmi	r3, #2
 800ad48:	6033      	strmi	r3, [r6, #0]
 800ad4a:	6825      	ldr	r5, [r4, #0]
 800ad4c:	f015 0506 	ands.w	r5, r5, #6
 800ad50:	d106      	bne.n	800ad60 <_printf_common+0x48>
 800ad52:	f104 0a19 	add.w	sl, r4, #25
 800ad56:	68e3      	ldr	r3, [r4, #12]
 800ad58:	6832      	ldr	r2, [r6, #0]
 800ad5a:	1a9b      	subs	r3, r3, r2
 800ad5c:	42ab      	cmp	r3, r5
 800ad5e:	dc26      	bgt.n	800adae <_printf_common+0x96>
 800ad60:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ad64:	6822      	ldr	r2, [r4, #0]
 800ad66:	3b00      	subs	r3, #0
 800ad68:	bf18      	it	ne
 800ad6a:	2301      	movne	r3, #1
 800ad6c:	0692      	lsls	r2, r2, #26
 800ad6e:	d42b      	bmi.n	800adc8 <_printf_common+0xb0>
 800ad70:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ad74:	4641      	mov	r1, r8
 800ad76:	4638      	mov	r0, r7
 800ad78:	47c8      	blx	r9
 800ad7a:	3001      	adds	r0, #1
 800ad7c:	d01e      	beq.n	800adbc <_printf_common+0xa4>
 800ad7e:	6823      	ldr	r3, [r4, #0]
 800ad80:	6922      	ldr	r2, [r4, #16]
 800ad82:	f003 0306 	and.w	r3, r3, #6
 800ad86:	2b04      	cmp	r3, #4
 800ad88:	bf02      	ittt	eq
 800ad8a:	68e5      	ldreq	r5, [r4, #12]
 800ad8c:	6833      	ldreq	r3, [r6, #0]
 800ad8e:	1aed      	subeq	r5, r5, r3
 800ad90:	68a3      	ldr	r3, [r4, #8]
 800ad92:	bf0c      	ite	eq
 800ad94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ad98:	2500      	movne	r5, #0
 800ad9a:	4293      	cmp	r3, r2
 800ad9c:	bfc4      	itt	gt
 800ad9e:	1a9b      	subgt	r3, r3, r2
 800ada0:	18ed      	addgt	r5, r5, r3
 800ada2:	2600      	movs	r6, #0
 800ada4:	341a      	adds	r4, #26
 800ada6:	42b5      	cmp	r5, r6
 800ada8:	d11a      	bne.n	800ade0 <_printf_common+0xc8>
 800adaa:	2000      	movs	r0, #0
 800adac:	e008      	b.n	800adc0 <_printf_common+0xa8>
 800adae:	2301      	movs	r3, #1
 800adb0:	4652      	mov	r2, sl
 800adb2:	4641      	mov	r1, r8
 800adb4:	4638      	mov	r0, r7
 800adb6:	47c8      	blx	r9
 800adb8:	3001      	adds	r0, #1
 800adba:	d103      	bne.n	800adc4 <_printf_common+0xac>
 800adbc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800adc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800adc4:	3501      	adds	r5, #1
 800adc6:	e7c6      	b.n	800ad56 <_printf_common+0x3e>
 800adc8:	18e1      	adds	r1, r4, r3
 800adca:	1c5a      	adds	r2, r3, #1
 800adcc:	2030      	movs	r0, #48	@ 0x30
 800adce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800add2:	4422      	add	r2, r4
 800add4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800add8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800addc:	3302      	adds	r3, #2
 800adde:	e7c7      	b.n	800ad70 <_printf_common+0x58>
 800ade0:	2301      	movs	r3, #1
 800ade2:	4622      	mov	r2, r4
 800ade4:	4641      	mov	r1, r8
 800ade6:	4638      	mov	r0, r7
 800ade8:	47c8      	blx	r9
 800adea:	3001      	adds	r0, #1
 800adec:	d0e6      	beq.n	800adbc <_printf_common+0xa4>
 800adee:	3601      	adds	r6, #1
 800adf0:	e7d9      	b.n	800ada6 <_printf_common+0x8e>
	...

0800adf4 <_printf_i>:
 800adf4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800adf8:	7e0f      	ldrb	r7, [r1, #24]
 800adfa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800adfc:	2f78      	cmp	r7, #120	@ 0x78
 800adfe:	4691      	mov	r9, r2
 800ae00:	4680      	mov	r8, r0
 800ae02:	460c      	mov	r4, r1
 800ae04:	469a      	mov	sl, r3
 800ae06:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ae0a:	d807      	bhi.n	800ae1c <_printf_i+0x28>
 800ae0c:	2f62      	cmp	r7, #98	@ 0x62
 800ae0e:	d80a      	bhi.n	800ae26 <_printf_i+0x32>
 800ae10:	2f00      	cmp	r7, #0
 800ae12:	f000 80d2 	beq.w	800afba <_printf_i+0x1c6>
 800ae16:	2f58      	cmp	r7, #88	@ 0x58
 800ae18:	f000 80b9 	beq.w	800af8e <_printf_i+0x19a>
 800ae1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ae20:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ae24:	e03a      	b.n	800ae9c <_printf_i+0xa8>
 800ae26:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ae2a:	2b15      	cmp	r3, #21
 800ae2c:	d8f6      	bhi.n	800ae1c <_printf_i+0x28>
 800ae2e:	a101      	add	r1, pc, #4	@ (adr r1, 800ae34 <_printf_i+0x40>)
 800ae30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ae34:	0800ae8d 	.word	0x0800ae8d
 800ae38:	0800aea1 	.word	0x0800aea1
 800ae3c:	0800ae1d 	.word	0x0800ae1d
 800ae40:	0800ae1d 	.word	0x0800ae1d
 800ae44:	0800ae1d 	.word	0x0800ae1d
 800ae48:	0800ae1d 	.word	0x0800ae1d
 800ae4c:	0800aea1 	.word	0x0800aea1
 800ae50:	0800ae1d 	.word	0x0800ae1d
 800ae54:	0800ae1d 	.word	0x0800ae1d
 800ae58:	0800ae1d 	.word	0x0800ae1d
 800ae5c:	0800ae1d 	.word	0x0800ae1d
 800ae60:	0800afa1 	.word	0x0800afa1
 800ae64:	0800aecb 	.word	0x0800aecb
 800ae68:	0800af5b 	.word	0x0800af5b
 800ae6c:	0800ae1d 	.word	0x0800ae1d
 800ae70:	0800ae1d 	.word	0x0800ae1d
 800ae74:	0800afc3 	.word	0x0800afc3
 800ae78:	0800ae1d 	.word	0x0800ae1d
 800ae7c:	0800aecb 	.word	0x0800aecb
 800ae80:	0800ae1d 	.word	0x0800ae1d
 800ae84:	0800ae1d 	.word	0x0800ae1d
 800ae88:	0800af63 	.word	0x0800af63
 800ae8c:	6833      	ldr	r3, [r6, #0]
 800ae8e:	1d1a      	adds	r2, r3, #4
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	6032      	str	r2, [r6, #0]
 800ae94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ae98:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ae9c:	2301      	movs	r3, #1
 800ae9e:	e09d      	b.n	800afdc <_printf_i+0x1e8>
 800aea0:	6833      	ldr	r3, [r6, #0]
 800aea2:	6820      	ldr	r0, [r4, #0]
 800aea4:	1d19      	adds	r1, r3, #4
 800aea6:	6031      	str	r1, [r6, #0]
 800aea8:	0606      	lsls	r6, r0, #24
 800aeaa:	d501      	bpl.n	800aeb0 <_printf_i+0xbc>
 800aeac:	681d      	ldr	r5, [r3, #0]
 800aeae:	e003      	b.n	800aeb8 <_printf_i+0xc4>
 800aeb0:	0645      	lsls	r5, r0, #25
 800aeb2:	d5fb      	bpl.n	800aeac <_printf_i+0xb8>
 800aeb4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800aeb8:	2d00      	cmp	r5, #0
 800aeba:	da03      	bge.n	800aec4 <_printf_i+0xd0>
 800aebc:	232d      	movs	r3, #45	@ 0x2d
 800aebe:	426d      	negs	r5, r5
 800aec0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aec4:	4859      	ldr	r0, [pc, #356]	@ (800b02c <_printf_i+0x238>)
 800aec6:	230a      	movs	r3, #10
 800aec8:	e011      	b.n	800aeee <_printf_i+0xfa>
 800aeca:	6821      	ldr	r1, [r4, #0]
 800aecc:	6833      	ldr	r3, [r6, #0]
 800aece:	0608      	lsls	r0, r1, #24
 800aed0:	f853 5b04 	ldr.w	r5, [r3], #4
 800aed4:	d402      	bmi.n	800aedc <_printf_i+0xe8>
 800aed6:	0649      	lsls	r1, r1, #25
 800aed8:	bf48      	it	mi
 800aeda:	b2ad      	uxthmi	r5, r5
 800aedc:	2f6f      	cmp	r7, #111	@ 0x6f
 800aede:	4853      	ldr	r0, [pc, #332]	@ (800b02c <_printf_i+0x238>)
 800aee0:	6033      	str	r3, [r6, #0]
 800aee2:	bf14      	ite	ne
 800aee4:	230a      	movne	r3, #10
 800aee6:	2308      	moveq	r3, #8
 800aee8:	2100      	movs	r1, #0
 800aeea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800aeee:	6866      	ldr	r6, [r4, #4]
 800aef0:	60a6      	str	r6, [r4, #8]
 800aef2:	2e00      	cmp	r6, #0
 800aef4:	bfa2      	ittt	ge
 800aef6:	6821      	ldrge	r1, [r4, #0]
 800aef8:	f021 0104 	bicge.w	r1, r1, #4
 800aefc:	6021      	strge	r1, [r4, #0]
 800aefe:	b90d      	cbnz	r5, 800af04 <_printf_i+0x110>
 800af00:	2e00      	cmp	r6, #0
 800af02:	d04b      	beq.n	800af9c <_printf_i+0x1a8>
 800af04:	4616      	mov	r6, r2
 800af06:	fbb5 f1f3 	udiv	r1, r5, r3
 800af0a:	fb03 5711 	mls	r7, r3, r1, r5
 800af0e:	5dc7      	ldrb	r7, [r0, r7]
 800af10:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800af14:	462f      	mov	r7, r5
 800af16:	42bb      	cmp	r3, r7
 800af18:	460d      	mov	r5, r1
 800af1a:	d9f4      	bls.n	800af06 <_printf_i+0x112>
 800af1c:	2b08      	cmp	r3, #8
 800af1e:	d10b      	bne.n	800af38 <_printf_i+0x144>
 800af20:	6823      	ldr	r3, [r4, #0]
 800af22:	07df      	lsls	r7, r3, #31
 800af24:	d508      	bpl.n	800af38 <_printf_i+0x144>
 800af26:	6923      	ldr	r3, [r4, #16]
 800af28:	6861      	ldr	r1, [r4, #4]
 800af2a:	4299      	cmp	r1, r3
 800af2c:	bfde      	ittt	le
 800af2e:	2330      	movle	r3, #48	@ 0x30
 800af30:	f806 3c01 	strble.w	r3, [r6, #-1]
 800af34:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800af38:	1b92      	subs	r2, r2, r6
 800af3a:	6122      	str	r2, [r4, #16]
 800af3c:	f8cd a000 	str.w	sl, [sp]
 800af40:	464b      	mov	r3, r9
 800af42:	aa03      	add	r2, sp, #12
 800af44:	4621      	mov	r1, r4
 800af46:	4640      	mov	r0, r8
 800af48:	f7ff fee6 	bl	800ad18 <_printf_common>
 800af4c:	3001      	adds	r0, #1
 800af4e:	d14a      	bne.n	800afe6 <_printf_i+0x1f2>
 800af50:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800af54:	b004      	add	sp, #16
 800af56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af5a:	6823      	ldr	r3, [r4, #0]
 800af5c:	f043 0320 	orr.w	r3, r3, #32
 800af60:	6023      	str	r3, [r4, #0]
 800af62:	4833      	ldr	r0, [pc, #204]	@ (800b030 <_printf_i+0x23c>)
 800af64:	2778      	movs	r7, #120	@ 0x78
 800af66:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800af6a:	6823      	ldr	r3, [r4, #0]
 800af6c:	6831      	ldr	r1, [r6, #0]
 800af6e:	061f      	lsls	r7, r3, #24
 800af70:	f851 5b04 	ldr.w	r5, [r1], #4
 800af74:	d402      	bmi.n	800af7c <_printf_i+0x188>
 800af76:	065f      	lsls	r7, r3, #25
 800af78:	bf48      	it	mi
 800af7a:	b2ad      	uxthmi	r5, r5
 800af7c:	6031      	str	r1, [r6, #0]
 800af7e:	07d9      	lsls	r1, r3, #31
 800af80:	bf44      	itt	mi
 800af82:	f043 0320 	orrmi.w	r3, r3, #32
 800af86:	6023      	strmi	r3, [r4, #0]
 800af88:	b11d      	cbz	r5, 800af92 <_printf_i+0x19e>
 800af8a:	2310      	movs	r3, #16
 800af8c:	e7ac      	b.n	800aee8 <_printf_i+0xf4>
 800af8e:	4827      	ldr	r0, [pc, #156]	@ (800b02c <_printf_i+0x238>)
 800af90:	e7e9      	b.n	800af66 <_printf_i+0x172>
 800af92:	6823      	ldr	r3, [r4, #0]
 800af94:	f023 0320 	bic.w	r3, r3, #32
 800af98:	6023      	str	r3, [r4, #0]
 800af9a:	e7f6      	b.n	800af8a <_printf_i+0x196>
 800af9c:	4616      	mov	r6, r2
 800af9e:	e7bd      	b.n	800af1c <_printf_i+0x128>
 800afa0:	6833      	ldr	r3, [r6, #0]
 800afa2:	6825      	ldr	r5, [r4, #0]
 800afa4:	6961      	ldr	r1, [r4, #20]
 800afa6:	1d18      	adds	r0, r3, #4
 800afa8:	6030      	str	r0, [r6, #0]
 800afaa:	062e      	lsls	r6, r5, #24
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	d501      	bpl.n	800afb4 <_printf_i+0x1c0>
 800afb0:	6019      	str	r1, [r3, #0]
 800afb2:	e002      	b.n	800afba <_printf_i+0x1c6>
 800afb4:	0668      	lsls	r0, r5, #25
 800afb6:	d5fb      	bpl.n	800afb0 <_printf_i+0x1bc>
 800afb8:	8019      	strh	r1, [r3, #0]
 800afba:	2300      	movs	r3, #0
 800afbc:	6123      	str	r3, [r4, #16]
 800afbe:	4616      	mov	r6, r2
 800afc0:	e7bc      	b.n	800af3c <_printf_i+0x148>
 800afc2:	6833      	ldr	r3, [r6, #0]
 800afc4:	1d1a      	adds	r2, r3, #4
 800afc6:	6032      	str	r2, [r6, #0]
 800afc8:	681e      	ldr	r6, [r3, #0]
 800afca:	6862      	ldr	r2, [r4, #4]
 800afcc:	2100      	movs	r1, #0
 800afce:	4630      	mov	r0, r6
 800afd0:	f7f5 f90e 	bl	80001f0 <memchr>
 800afd4:	b108      	cbz	r0, 800afda <_printf_i+0x1e6>
 800afd6:	1b80      	subs	r0, r0, r6
 800afd8:	6060      	str	r0, [r4, #4]
 800afda:	6863      	ldr	r3, [r4, #4]
 800afdc:	6123      	str	r3, [r4, #16]
 800afde:	2300      	movs	r3, #0
 800afe0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800afe4:	e7aa      	b.n	800af3c <_printf_i+0x148>
 800afe6:	6923      	ldr	r3, [r4, #16]
 800afe8:	4632      	mov	r2, r6
 800afea:	4649      	mov	r1, r9
 800afec:	4640      	mov	r0, r8
 800afee:	47d0      	blx	sl
 800aff0:	3001      	adds	r0, #1
 800aff2:	d0ad      	beq.n	800af50 <_printf_i+0x15c>
 800aff4:	6823      	ldr	r3, [r4, #0]
 800aff6:	079b      	lsls	r3, r3, #30
 800aff8:	d413      	bmi.n	800b022 <_printf_i+0x22e>
 800affa:	68e0      	ldr	r0, [r4, #12]
 800affc:	9b03      	ldr	r3, [sp, #12]
 800affe:	4298      	cmp	r0, r3
 800b000:	bfb8      	it	lt
 800b002:	4618      	movlt	r0, r3
 800b004:	e7a6      	b.n	800af54 <_printf_i+0x160>
 800b006:	2301      	movs	r3, #1
 800b008:	4632      	mov	r2, r6
 800b00a:	4649      	mov	r1, r9
 800b00c:	4640      	mov	r0, r8
 800b00e:	47d0      	blx	sl
 800b010:	3001      	adds	r0, #1
 800b012:	d09d      	beq.n	800af50 <_printf_i+0x15c>
 800b014:	3501      	adds	r5, #1
 800b016:	68e3      	ldr	r3, [r4, #12]
 800b018:	9903      	ldr	r1, [sp, #12]
 800b01a:	1a5b      	subs	r3, r3, r1
 800b01c:	42ab      	cmp	r3, r5
 800b01e:	dcf2      	bgt.n	800b006 <_printf_i+0x212>
 800b020:	e7eb      	b.n	800affa <_printf_i+0x206>
 800b022:	2500      	movs	r5, #0
 800b024:	f104 0619 	add.w	r6, r4, #25
 800b028:	e7f5      	b.n	800b016 <_printf_i+0x222>
 800b02a:	bf00      	nop
 800b02c:	08011a6f 	.word	0x08011a6f
 800b030:	08011a80 	.word	0x08011a80

0800b034 <__sflush_r>:
 800b034:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b03c:	0716      	lsls	r6, r2, #28
 800b03e:	4605      	mov	r5, r0
 800b040:	460c      	mov	r4, r1
 800b042:	d454      	bmi.n	800b0ee <__sflush_r+0xba>
 800b044:	684b      	ldr	r3, [r1, #4]
 800b046:	2b00      	cmp	r3, #0
 800b048:	dc02      	bgt.n	800b050 <__sflush_r+0x1c>
 800b04a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	dd48      	ble.n	800b0e2 <__sflush_r+0xae>
 800b050:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b052:	2e00      	cmp	r6, #0
 800b054:	d045      	beq.n	800b0e2 <__sflush_r+0xae>
 800b056:	2300      	movs	r3, #0
 800b058:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b05c:	682f      	ldr	r7, [r5, #0]
 800b05e:	6a21      	ldr	r1, [r4, #32]
 800b060:	602b      	str	r3, [r5, #0]
 800b062:	d030      	beq.n	800b0c6 <__sflush_r+0x92>
 800b064:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b066:	89a3      	ldrh	r3, [r4, #12]
 800b068:	0759      	lsls	r1, r3, #29
 800b06a:	d505      	bpl.n	800b078 <__sflush_r+0x44>
 800b06c:	6863      	ldr	r3, [r4, #4]
 800b06e:	1ad2      	subs	r2, r2, r3
 800b070:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b072:	b10b      	cbz	r3, 800b078 <__sflush_r+0x44>
 800b074:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b076:	1ad2      	subs	r2, r2, r3
 800b078:	2300      	movs	r3, #0
 800b07a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b07c:	6a21      	ldr	r1, [r4, #32]
 800b07e:	4628      	mov	r0, r5
 800b080:	47b0      	blx	r6
 800b082:	1c43      	adds	r3, r0, #1
 800b084:	89a3      	ldrh	r3, [r4, #12]
 800b086:	d106      	bne.n	800b096 <__sflush_r+0x62>
 800b088:	6829      	ldr	r1, [r5, #0]
 800b08a:	291d      	cmp	r1, #29
 800b08c:	d82b      	bhi.n	800b0e6 <__sflush_r+0xb2>
 800b08e:	4a2a      	ldr	r2, [pc, #168]	@ (800b138 <__sflush_r+0x104>)
 800b090:	410a      	asrs	r2, r1
 800b092:	07d6      	lsls	r6, r2, #31
 800b094:	d427      	bmi.n	800b0e6 <__sflush_r+0xb2>
 800b096:	2200      	movs	r2, #0
 800b098:	6062      	str	r2, [r4, #4]
 800b09a:	04d9      	lsls	r1, r3, #19
 800b09c:	6922      	ldr	r2, [r4, #16]
 800b09e:	6022      	str	r2, [r4, #0]
 800b0a0:	d504      	bpl.n	800b0ac <__sflush_r+0x78>
 800b0a2:	1c42      	adds	r2, r0, #1
 800b0a4:	d101      	bne.n	800b0aa <__sflush_r+0x76>
 800b0a6:	682b      	ldr	r3, [r5, #0]
 800b0a8:	b903      	cbnz	r3, 800b0ac <__sflush_r+0x78>
 800b0aa:	6560      	str	r0, [r4, #84]	@ 0x54
 800b0ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b0ae:	602f      	str	r7, [r5, #0]
 800b0b0:	b1b9      	cbz	r1, 800b0e2 <__sflush_r+0xae>
 800b0b2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b0b6:	4299      	cmp	r1, r3
 800b0b8:	d002      	beq.n	800b0c0 <__sflush_r+0x8c>
 800b0ba:	4628      	mov	r0, r5
 800b0bc:	f000 fa7a 	bl	800b5b4 <_free_r>
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	6363      	str	r3, [r4, #52]	@ 0x34
 800b0c4:	e00d      	b.n	800b0e2 <__sflush_r+0xae>
 800b0c6:	2301      	movs	r3, #1
 800b0c8:	4628      	mov	r0, r5
 800b0ca:	47b0      	blx	r6
 800b0cc:	4602      	mov	r2, r0
 800b0ce:	1c50      	adds	r0, r2, #1
 800b0d0:	d1c9      	bne.n	800b066 <__sflush_r+0x32>
 800b0d2:	682b      	ldr	r3, [r5, #0]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d0c6      	beq.n	800b066 <__sflush_r+0x32>
 800b0d8:	2b1d      	cmp	r3, #29
 800b0da:	d001      	beq.n	800b0e0 <__sflush_r+0xac>
 800b0dc:	2b16      	cmp	r3, #22
 800b0de:	d11e      	bne.n	800b11e <__sflush_r+0xea>
 800b0e0:	602f      	str	r7, [r5, #0]
 800b0e2:	2000      	movs	r0, #0
 800b0e4:	e022      	b.n	800b12c <__sflush_r+0xf8>
 800b0e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b0ea:	b21b      	sxth	r3, r3
 800b0ec:	e01b      	b.n	800b126 <__sflush_r+0xf2>
 800b0ee:	690f      	ldr	r7, [r1, #16]
 800b0f0:	2f00      	cmp	r7, #0
 800b0f2:	d0f6      	beq.n	800b0e2 <__sflush_r+0xae>
 800b0f4:	0793      	lsls	r3, r2, #30
 800b0f6:	680e      	ldr	r6, [r1, #0]
 800b0f8:	bf08      	it	eq
 800b0fa:	694b      	ldreq	r3, [r1, #20]
 800b0fc:	600f      	str	r7, [r1, #0]
 800b0fe:	bf18      	it	ne
 800b100:	2300      	movne	r3, #0
 800b102:	eba6 0807 	sub.w	r8, r6, r7
 800b106:	608b      	str	r3, [r1, #8]
 800b108:	f1b8 0f00 	cmp.w	r8, #0
 800b10c:	dde9      	ble.n	800b0e2 <__sflush_r+0xae>
 800b10e:	6a21      	ldr	r1, [r4, #32]
 800b110:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b112:	4643      	mov	r3, r8
 800b114:	463a      	mov	r2, r7
 800b116:	4628      	mov	r0, r5
 800b118:	47b0      	blx	r6
 800b11a:	2800      	cmp	r0, #0
 800b11c:	dc08      	bgt.n	800b130 <__sflush_r+0xfc>
 800b11e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b122:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b126:	81a3      	strh	r3, [r4, #12]
 800b128:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b12c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b130:	4407      	add	r7, r0
 800b132:	eba8 0800 	sub.w	r8, r8, r0
 800b136:	e7e7      	b.n	800b108 <__sflush_r+0xd4>
 800b138:	dfbffffe 	.word	0xdfbffffe

0800b13c <_fflush_r>:
 800b13c:	b538      	push	{r3, r4, r5, lr}
 800b13e:	690b      	ldr	r3, [r1, #16]
 800b140:	4605      	mov	r5, r0
 800b142:	460c      	mov	r4, r1
 800b144:	b913      	cbnz	r3, 800b14c <_fflush_r+0x10>
 800b146:	2500      	movs	r5, #0
 800b148:	4628      	mov	r0, r5
 800b14a:	bd38      	pop	{r3, r4, r5, pc}
 800b14c:	b118      	cbz	r0, 800b156 <_fflush_r+0x1a>
 800b14e:	6a03      	ldr	r3, [r0, #32]
 800b150:	b90b      	cbnz	r3, 800b156 <_fflush_r+0x1a>
 800b152:	f7ff fa29 	bl	800a5a8 <__sinit>
 800b156:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d0f3      	beq.n	800b146 <_fflush_r+0xa>
 800b15e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b160:	07d0      	lsls	r0, r2, #31
 800b162:	d404      	bmi.n	800b16e <_fflush_r+0x32>
 800b164:	0599      	lsls	r1, r3, #22
 800b166:	d402      	bmi.n	800b16e <_fflush_r+0x32>
 800b168:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b16a:	f7ff fa98 	bl	800a69e <__retarget_lock_acquire_recursive>
 800b16e:	4628      	mov	r0, r5
 800b170:	4621      	mov	r1, r4
 800b172:	f7ff ff5f 	bl	800b034 <__sflush_r>
 800b176:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b178:	07da      	lsls	r2, r3, #31
 800b17a:	4605      	mov	r5, r0
 800b17c:	d4e4      	bmi.n	800b148 <_fflush_r+0xc>
 800b17e:	89a3      	ldrh	r3, [r4, #12]
 800b180:	059b      	lsls	r3, r3, #22
 800b182:	d4e1      	bmi.n	800b148 <_fflush_r+0xc>
 800b184:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b186:	f7ff fa8b 	bl	800a6a0 <__retarget_lock_release_recursive>
 800b18a:	e7dd      	b.n	800b148 <_fflush_r+0xc>

0800b18c <__malloc_lock>:
 800b18c:	4801      	ldr	r0, [pc, #4]	@ (800b194 <__malloc_lock+0x8>)
 800b18e:	f7ff ba86 	b.w	800a69e <__retarget_lock_acquire_recursive>
 800b192:	bf00      	nop
 800b194:	20004300 	.word	0x20004300

0800b198 <__malloc_unlock>:
 800b198:	4801      	ldr	r0, [pc, #4]	@ (800b1a0 <__malloc_unlock+0x8>)
 800b19a:	f7ff ba81 	b.w	800a6a0 <__retarget_lock_release_recursive>
 800b19e:	bf00      	nop
 800b1a0:	20004300 	.word	0x20004300

0800b1a4 <__sread>:
 800b1a4:	b510      	push	{r4, lr}
 800b1a6:	460c      	mov	r4, r1
 800b1a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1ac:	f000 f9c0 	bl	800b530 <_read_r>
 800b1b0:	2800      	cmp	r0, #0
 800b1b2:	bfab      	itete	ge
 800b1b4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b1b6:	89a3      	ldrhlt	r3, [r4, #12]
 800b1b8:	181b      	addge	r3, r3, r0
 800b1ba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b1be:	bfac      	ite	ge
 800b1c0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b1c2:	81a3      	strhlt	r3, [r4, #12]
 800b1c4:	bd10      	pop	{r4, pc}

0800b1c6 <__swrite>:
 800b1c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1ca:	461f      	mov	r7, r3
 800b1cc:	898b      	ldrh	r3, [r1, #12]
 800b1ce:	05db      	lsls	r3, r3, #23
 800b1d0:	4605      	mov	r5, r0
 800b1d2:	460c      	mov	r4, r1
 800b1d4:	4616      	mov	r6, r2
 800b1d6:	d505      	bpl.n	800b1e4 <__swrite+0x1e>
 800b1d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1dc:	2302      	movs	r3, #2
 800b1de:	2200      	movs	r2, #0
 800b1e0:	f000 f994 	bl	800b50c <_lseek_r>
 800b1e4:	89a3      	ldrh	r3, [r4, #12]
 800b1e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b1ea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b1ee:	81a3      	strh	r3, [r4, #12]
 800b1f0:	4632      	mov	r2, r6
 800b1f2:	463b      	mov	r3, r7
 800b1f4:	4628      	mov	r0, r5
 800b1f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b1fa:	f000 b9bb 	b.w	800b574 <_write_r>

0800b1fe <__sseek>:
 800b1fe:	b510      	push	{r4, lr}
 800b200:	460c      	mov	r4, r1
 800b202:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b206:	f000 f981 	bl	800b50c <_lseek_r>
 800b20a:	1c43      	adds	r3, r0, #1
 800b20c:	89a3      	ldrh	r3, [r4, #12]
 800b20e:	bf15      	itete	ne
 800b210:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b212:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b216:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b21a:	81a3      	strheq	r3, [r4, #12]
 800b21c:	bf18      	it	ne
 800b21e:	81a3      	strhne	r3, [r4, #12]
 800b220:	bd10      	pop	{r4, pc}

0800b222 <__sclose>:
 800b222:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b226:	f000 b93f 	b.w	800b4a8 <_close_r>

0800b22a <_realloc_r>:
 800b22a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b22e:	4680      	mov	r8, r0
 800b230:	4615      	mov	r5, r2
 800b232:	460c      	mov	r4, r1
 800b234:	b921      	cbnz	r1, 800b240 <_realloc_r+0x16>
 800b236:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b23a:	4611      	mov	r1, r2
 800b23c:	f7ff bcec 	b.w	800ac18 <_malloc_r>
 800b240:	b92a      	cbnz	r2, 800b24e <_realloc_r+0x24>
 800b242:	f000 f9b7 	bl	800b5b4 <_free_r>
 800b246:	2400      	movs	r4, #0
 800b248:	4620      	mov	r0, r4
 800b24a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b24e:	f000 f9fb 	bl	800b648 <_malloc_usable_size_r>
 800b252:	4285      	cmp	r5, r0
 800b254:	4606      	mov	r6, r0
 800b256:	d802      	bhi.n	800b25e <_realloc_r+0x34>
 800b258:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b25c:	d8f4      	bhi.n	800b248 <_realloc_r+0x1e>
 800b25e:	4629      	mov	r1, r5
 800b260:	4640      	mov	r0, r8
 800b262:	f7ff fcd9 	bl	800ac18 <_malloc_r>
 800b266:	4607      	mov	r7, r0
 800b268:	2800      	cmp	r0, #0
 800b26a:	d0ec      	beq.n	800b246 <_realloc_r+0x1c>
 800b26c:	42b5      	cmp	r5, r6
 800b26e:	462a      	mov	r2, r5
 800b270:	4621      	mov	r1, r4
 800b272:	bf28      	it	cs
 800b274:	4632      	movcs	r2, r6
 800b276:	f000 f98f 	bl	800b598 <memcpy>
 800b27a:	4621      	mov	r1, r4
 800b27c:	4640      	mov	r0, r8
 800b27e:	f000 f999 	bl	800b5b4 <_free_r>
 800b282:	463c      	mov	r4, r7
 800b284:	e7e0      	b.n	800b248 <_realloc_r+0x1e>

0800b286 <__swbuf_r>:
 800b286:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b288:	460e      	mov	r6, r1
 800b28a:	4614      	mov	r4, r2
 800b28c:	4605      	mov	r5, r0
 800b28e:	b118      	cbz	r0, 800b298 <__swbuf_r+0x12>
 800b290:	6a03      	ldr	r3, [r0, #32]
 800b292:	b90b      	cbnz	r3, 800b298 <__swbuf_r+0x12>
 800b294:	f7ff f988 	bl	800a5a8 <__sinit>
 800b298:	69a3      	ldr	r3, [r4, #24]
 800b29a:	60a3      	str	r3, [r4, #8]
 800b29c:	89a3      	ldrh	r3, [r4, #12]
 800b29e:	071a      	lsls	r2, r3, #28
 800b2a0:	d501      	bpl.n	800b2a6 <__swbuf_r+0x20>
 800b2a2:	6923      	ldr	r3, [r4, #16]
 800b2a4:	b943      	cbnz	r3, 800b2b8 <__swbuf_r+0x32>
 800b2a6:	4621      	mov	r1, r4
 800b2a8:	4628      	mov	r0, r5
 800b2aa:	f000 f82b 	bl	800b304 <__swsetup_r>
 800b2ae:	b118      	cbz	r0, 800b2b8 <__swbuf_r+0x32>
 800b2b0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800b2b4:	4638      	mov	r0, r7
 800b2b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b2b8:	6823      	ldr	r3, [r4, #0]
 800b2ba:	6922      	ldr	r2, [r4, #16]
 800b2bc:	1a98      	subs	r0, r3, r2
 800b2be:	6963      	ldr	r3, [r4, #20]
 800b2c0:	b2f6      	uxtb	r6, r6
 800b2c2:	4283      	cmp	r3, r0
 800b2c4:	4637      	mov	r7, r6
 800b2c6:	dc05      	bgt.n	800b2d4 <__swbuf_r+0x4e>
 800b2c8:	4621      	mov	r1, r4
 800b2ca:	4628      	mov	r0, r5
 800b2cc:	f7ff ff36 	bl	800b13c <_fflush_r>
 800b2d0:	2800      	cmp	r0, #0
 800b2d2:	d1ed      	bne.n	800b2b0 <__swbuf_r+0x2a>
 800b2d4:	68a3      	ldr	r3, [r4, #8]
 800b2d6:	3b01      	subs	r3, #1
 800b2d8:	60a3      	str	r3, [r4, #8]
 800b2da:	6823      	ldr	r3, [r4, #0]
 800b2dc:	1c5a      	adds	r2, r3, #1
 800b2de:	6022      	str	r2, [r4, #0]
 800b2e0:	701e      	strb	r6, [r3, #0]
 800b2e2:	6962      	ldr	r2, [r4, #20]
 800b2e4:	1c43      	adds	r3, r0, #1
 800b2e6:	429a      	cmp	r2, r3
 800b2e8:	d004      	beq.n	800b2f4 <__swbuf_r+0x6e>
 800b2ea:	89a3      	ldrh	r3, [r4, #12]
 800b2ec:	07db      	lsls	r3, r3, #31
 800b2ee:	d5e1      	bpl.n	800b2b4 <__swbuf_r+0x2e>
 800b2f0:	2e0a      	cmp	r6, #10
 800b2f2:	d1df      	bne.n	800b2b4 <__swbuf_r+0x2e>
 800b2f4:	4621      	mov	r1, r4
 800b2f6:	4628      	mov	r0, r5
 800b2f8:	f7ff ff20 	bl	800b13c <_fflush_r>
 800b2fc:	2800      	cmp	r0, #0
 800b2fe:	d0d9      	beq.n	800b2b4 <__swbuf_r+0x2e>
 800b300:	e7d6      	b.n	800b2b0 <__swbuf_r+0x2a>
	...

0800b304 <__swsetup_r>:
 800b304:	b538      	push	{r3, r4, r5, lr}
 800b306:	4b29      	ldr	r3, [pc, #164]	@ (800b3ac <__swsetup_r+0xa8>)
 800b308:	4605      	mov	r5, r0
 800b30a:	6818      	ldr	r0, [r3, #0]
 800b30c:	460c      	mov	r4, r1
 800b30e:	b118      	cbz	r0, 800b318 <__swsetup_r+0x14>
 800b310:	6a03      	ldr	r3, [r0, #32]
 800b312:	b90b      	cbnz	r3, 800b318 <__swsetup_r+0x14>
 800b314:	f7ff f948 	bl	800a5a8 <__sinit>
 800b318:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b31c:	0719      	lsls	r1, r3, #28
 800b31e:	d422      	bmi.n	800b366 <__swsetup_r+0x62>
 800b320:	06da      	lsls	r2, r3, #27
 800b322:	d407      	bmi.n	800b334 <__swsetup_r+0x30>
 800b324:	2209      	movs	r2, #9
 800b326:	602a      	str	r2, [r5, #0]
 800b328:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b32c:	81a3      	strh	r3, [r4, #12]
 800b32e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b332:	e033      	b.n	800b39c <__swsetup_r+0x98>
 800b334:	0758      	lsls	r0, r3, #29
 800b336:	d512      	bpl.n	800b35e <__swsetup_r+0x5a>
 800b338:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b33a:	b141      	cbz	r1, 800b34e <__swsetup_r+0x4a>
 800b33c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b340:	4299      	cmp	r1, r3
 800b342:	d002      	beq.n	800b34a <__swsetup_r+0x46>
 800b344:	4628      	mov	r0, r5
 800b346:	f000 f935 	bl	800b5b4 <_free_r>
 800b34a:	2300      	movs	r3, #0
 800b34c:	6363      	str	r3, [r4, #52]	@ 0x34
 800b34e:	89a3      	ldrh	r3, [r4, #12]
 800b350:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b354:	81a3      	strh	r3, [r4, #12]
 800b356:	2300      	movs	r3, #0
 800b358:	6063      	str	r3, [r4, #4]
 800b35a:	6923      	ldr	r3, [r4, #16]
 800b35c:	6023      	str	r3, [r4, #0]
 800b35e:	89a3      	ldrh	r3, [r4, #12]
 800b360:	f043 0308 	orr.w	r3, r3, #8
 800b364:	81a3      	strh	r3, [r4, #12]
 800b366:	6923      	ldr	r3, [r4, #16]
 800b368:	b94b      	cbnz	r3, 800b37e <__swsetup_r+0x7a>
 800b36a:	89a3      	ldrh	r3, [r4, #12]
 800b36c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b370:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b374:	d003      	beq.n	800b37e <__swsetup_r+0x7a>
 800b376:	4621      	mov	r1, r4
 800b378:	4628      	mov	r0, r5
 800b37a:	f000 f83f 	bl	800b3fc <__smakebuf_r>
 800b37e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b382:	f013 0201 	ands.w	r2, r3, #1
 800b386:	d00a      	beq.n	800b39e <__swsetup_r+0x9a>
 800b388:	2200      	movs	r2, #0
 800b38a:	60a2      	str	r2, [r4, #8]
 800b38c:	6962      	ldr	r2, [r4, #20]
 800b38e:	4252      	negs	r2, r2
 800b390:	61a2      	str	r2, [r4, #24]
 800b392:	6922      	ldr	r2, [r4, #16]
 800b394:	b942      	cbnz	r2, 800b3a8 <__swsetup_r+0xa4>
 800b396:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b39a:	d1c5      	bne.n	800b328 <__swsetup_r+0x24>
 800b39c:	bd38      	pop	{r3, r4, r5, pc}
 800b39e:	0799      	lsls	r1, r3, #30
 800b3a0:	bf58      	it	pl
 800b3a2:	6962      	ldrpl	r2, [r4, #20]
 800b3a4:	60a2      	str	r2, [r4, #8]
 800b3a6:	e7f4      	b.n	800b392 <__swsetup_r+0x8e>
 800b3a8:	2000      	movs	r0, #0
 800b3aa:	e7f7      	b.n	800b39c <__swsetup_r+0x98>
 800b3ac:	200001dc 	.word	0x200001dc

0800b3b0 <__swhatbuf_r>:
 800b3b0:	b570      	push	{r4, r5, r6, lr}
 800b3b2:	460c      	mov	r4, r1
 800b3b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3b8:	2900      	cmp	r1, #0
 800b3ba:	b096      	sub	sp, #88	@ 0x58
 800b3bc:	4615      	mov	r5, r2
 800b3be:	461e      	mov	r6, r3
 800b3c0:	da0d      	bge.n	800b3de <__swhatbuf_r+0x2e>
 800b3c2:	89a3      	ldrh	r3, [r4, #12]
 800b3c4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b3c8:	f04f 0100 	mov.w	r1, #0
 800b3cc:	bf14      	ite	ne
 800b3ce:	2340      	movne	r3, #64	@ 0x40
 800b3d0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b3d4:	2000      	movs	r0, #0
 800b3d6:	6031      	str	r1, [r6, #0]
 800b3d8:	602b      	str	r3, [r5, #0]
 800b3da:	b016      	add	sp, #88	@ 0x58
 800b3dc:	bd70      	pop	{r4, r5, r6, pc}
 800b3de:	466a      	mov	r2, sp
 800b3e0:	f000 f872 	bl	800b4c8 <_fstat_r>
 800b3e4:	2800      	cmp	r0, #0
 800b3e6:	dbec      	blt.n	800b3c2 <__swhatbuf_r+0x12>
 800b3e8:	9901      	ldr	r1, [sp, #4]
 800b3ea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b3ee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b3f2:	4259      	negs	r1, r3
 800b3f4:	4159      	adcs	r1, r3
 800b3f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b3fa:	e7eb      	b.n	800b3d4 <__swhatbuf_r+0x24>

0800b3fc <__smakebuf_r>:
 800b3fc:	898b      	ldrh	r3, [r1, #12]
 800b3fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b400:	079d      	lsls	r5, r3, #30
 800b402:	4606      	mov	r6, r0
 800b404:	460c      	mov	r4, r1
 800b406:	d507      	bpl.n	800b418 <__smakebuf_r+0x1c>
 800b408:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b40c:	6023      	str	r3, [r4, #0]
 800b40e:	6123      	str	r3, [r4, #16]
 800b410:	2301      	movs	r3, #1
 800b412:	6163      	str	r3, [r4, #20]
 800b414:	b003      	add	sp, #12
 800b416:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b418:	ab01      	add	r3, sp, #4
 800b41a:	466a      	mov	r2, sp
 800b41c:	f7ff ffc8 	bl	800b3b0 <__swhatbuf_r>
 800b420:	9f00      	ldr	r7, [sp, #0]
 800b422:	4605      	mov	r5, r0
 800b424:	4639      	mov	r1, r7
 800b426:	4630      	mov	r0, r6
 800b428:	f7ff fbf6 	bl	800ac18 <_malloc_r>
 800b42c:	b948      	cbnz	r0, 800b442 <__smakebuf_r+0x46>
 800b42e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b432:	059a      	lsls	r2, r3, #22
 800b434:	d4ee      	bmi.n	800b414 <__smakebuf_r+0x18>
 800b436:	f023 0303 	bic.w	r3, r3, #3
 800b43a:	f043 0302 	orr.w	r3, r3, #2
 800b43e:	81a3      	strh	r3, [r4, #12]
 800b440:	e7e2      	b.n	800b408 <__smakebuf_r+0xc>
 800b442:	89a3      	ldrh	r3, [r4, #12]
 800b444:	6020      	str	r0, [r4, #0]
 800b446:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b44a:	81a3      	strh	r3, [r4, #12]
 800b44c:	9b01      	ldr	r3, [sp, #4]
 800b44e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b452:	b15b      	cbz	r3, 800b46c <__smakebuf_r+0x70>
 800b454:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b458:	4630      	mov	r0, r6
 800b45a:	f000 f847 	bl	800b4ec <_isatty_r>
 800b45e:	b128      	cbz	r0, 800b46c <__smakebuf_r+0x70>
 800b460:	89a3      	ldrh	r3, [r4, #12]
 800b462:	f023 0303 	bic.w	r3, r3, #3
 800b466:	f043 0301 	orr.w	r3, r3, #1
 800b46a:	81a3      	strh	r3, [r4, #12]
 800b46c:	89a3      	ldrh	r3, [r4, #12]
 800b46e:	431d      	orrs	r5, r3
 800b470:	81a5      	strh	r5, [r4, #12]
 800b472:	e7cf      	b.n	800b414 <__smakebuf_r+0x18>

0800b474 <memmove>:
 800b474:	4288      	cmp	r0, r1
 800b476:	b510      	push	{r4, lr}
 800b478:	eb01 0402 	add.w	r4, r1, r2
 800b47c:	d902      	bls.n	800b484 <memmove+0x10>
 800b47e:	4284      	cmp	r4, r0
 800b480:	4623      	mov	r3, r4
 800b482:	d807      	bhi.n	800b494 <memmove+0x20>
 800b484:	1e43      	subs	r3, r0, #1
 800b486:	42a1      	cmp	r1, r4
 800b488:	d008      	beq.n	800b49c <memmove+0x28>
 800b48a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b48e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b492:	e7f8      	b.n	800b486 <memmove+0x12>
 800b494:	4402      	add	r2, r0
 800b496:	4601      	mov	r1, r0
 800b498:	428a      	cmp	r2, r1
 800b49a:	d100      	bne.n	800b49e <memmove+0x2a>
 800b49c:	bd10      	pop	{r4, pc}
 800b49e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b4a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b4a6:	e7f7      	b.n	800b498 <memmove+0x24>

0800b4a8 <_close_r>:
 800b4a8:	b538      	push	{r3, r4, r5, lr}
 800b4aa:	4d06      	ldr	r5, [pc, #24]	@ (800b4c4 <_close_r+0x1c>)
 800b4ac:	2300      	movs	r3, #0
 800b4ae:	4604      	mov	r4, r0
 800b4b0:	4608      	mov	r0, r1
 800b4b2:	602b      	str	r3, [r5, #0]
 800b4b4:	f7fd ff80 	bl	80093b8 <_close>
 800b4b8:	1c43      	adds	r3, r0, #1
 800b4ba:	d102      	bne.n	800b4c2 <_close_r+0x1a>
 800b4bc:	682b      	ldr	r3, [r5, #0]
 800b4be:	b103      	cbz	r3, 800b4c2 <_close_r+0x1a>
 800b4c0:	6023      	str	r3, [r4, #0]
 800b4c2:	bd38      	pop	{r3, r4, r5, pc}
 800b4c4:	2000430c 	.word	0x2000430c

0800b4c8 <_fstat_r>:
 800b4c8:	b538      	push	{r3, r4, r5, lr}
 800b4ca:	4d07      	ldr	r5, [pc, #28]	@ (800b4e8 <_fstat_r+0x20>)
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	4604      	mov	r4, r0
 800b4d0:	4608      	mov	r0, r1
 800b4d2:	4611      	mov	r1, r2
 800b4d4:	602b      	str	r3, [r5, #0]
 800b4d6:	f7fd ff7b 	bl	80093d0 <_fstat>
 800b4da:	1c43      	adds	r3, r0, #1
 800b4dc:	d102      	bne.n	800b4e4 <_fstat_r+0x1c>
 800b4de:	682b      	ldr	r3, [r5, #0]
 800b4e0:	b103      	cbz	r3, 800b4e4 <_fstat_r+0x1c>
 800b4e2:	6023      	str	r3, [r4, #0]
 800b4e4:	bd38      	pop	{r3, r4, r5, pc}
 800b4e6:	bf00      	nop
 800b4e8:	2000430c 	.word	0x2000430c

0800b4ec <_isatty_r>:
 800b4ec:	b538      	push	{r3, r4, r5, lr}
 800b4ee:	4d06      	ldr	r5, [pc, #24]	@ (800b508 <_isatty_r+0x1c>)
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	4604      	mov	r4, r0
 800b4f4:	4608      	mov	r0, r1
 800b4f6:	602b      	str	r3, [r5, #0]
 800b4f8:	f7fd ff7a 	bl	80093f0 <_isatty>
 800b4fc:	1c43      	adds	r3, r0, #1
 800b4fe:	d102      	bne.n	800b506 <_isatty_r+0x1a>
 800b500:	682b      	ldr	r3, [r5, #0]
 800b502:	b103      	cbz	r3, 800b506 <_isatty_r+0x1a>
 800b504:	6023      	str	r3, [r4, #0]
 800b506:	bd38      	pop	{r3, r4, r5, pc}
 800b508:	2000430c 	.word	0x2000430c

0800b50c <_lseek_r>:
 800b50c:	b538      	push	{r3, r4, r5, lr}
 800b50e:	4d07      	ldr	r5, [pc, #28]	@ (800b52c <_lseek_r+0x20>)
 800b510:	4604      	mov	r4, r0
 800b512:	4608      	mov	r0, r1
 800b514:	4611      	mov	r1, r2
 800b516:	2200      	movs	r2, #0
 800b518:	602a      	str	r2, [r5, #0]
 800b51a:	461a      	mov	r2, r3
 800b51c:	f7fd ff73 	bl	8009406 <_lseek>
 800b520:	1c43      	adds	r3, r0, #1
 800b522:	d102      	bne.n	800b52a <_lseek_r+0x1e>
 800b524:	682b      	ldr	r3, [r5, #0]
 800b526:	b103      	cbz	r3, 800b52a <_lseek_r+0x1e>
 800b528:	6023      	str	r3, [r4, #0]
 800b52a:	bd38      	pop	{r3, r4, r5, pc}
 800b52c:	2000430c 	.word	0x2000430c

0800b530 <_read_r>:
 800b530:	b538      	push	{r3, r4, r5, lr}
 800b532:	4d07      	ldr	r5, [pc, #28]	@ (800b550 <_read_r+0x20>)
 800b534:	4604      	mov	r4, r0
 800b536:	4608      	mov	r0, r1
 800b538:	4611      	mov	r1, r2
 800b53a:	2200      	movs	r2, #0
 800b53c:	602a      	str	r2, [r5, #0]
 800b53e:	461a      	mov	r2, r3
 800b540:	f7fd ff01 	bl	8009346 <_read>
 800b544:	1c43      	adds	r3, r0, #1
 800b546:	d102      	bne.n	800b54e <_read_r+0x1e>
 800b548:	682b      	ldr	r3, [r5, #0]
 800b54a:	b103      	cbz	r3, 800b54e <_read_r+0x1e>
 800b54c:	6023      	str	r3, [r4, #0]
 800b54e:	bd38      	pop	{r3, r4, r5, pc}
 800b550:	2000430c 	.word	0x2000430c

0800b554 <_sbrk_r>:
 800b554:	b538      	push	{r3, r4, r5, lr}
 800b556:	4d06      	ldr	r5, [pc, #24]	@ (800b570 <_sbrk_r+0x1c>)
 800b558:	2300      	movs	r3, #0
 800b55a:	4604      	mov	r4, r0
 800b55c:	4608      	mov	r0, r1
 800b55e:	602b      	str	r3, [r5, #0]
 800b560:	f7fd ff5e 	bl	8009420 <_sbrk>
 800b564:	1c43      	adds	r3, r0, #1
 800b566:	d102      	bne.n	800b56e <_sbrk_r+0x1a>
 800b568:	682b      	ldr	r3, [r5, #0]
 800b56a:	b103      	cbz	r3, 800b56e <_sbrk_r+0x1a>
 800b56c:	6023      	str	r3, [r4, #0]
 800b56e:	bd38      	pop	{r3, r4, r5, pc}
 800b570:	2000430c 	.word	0x2000430c

0800b574 <_write_r>:
 800b574:	b538      	push	{r3, r4, r5, lr}
 800b576:	4d07      	ldr	r5, [pc, #28]	@ (800b594 <_write_r+0x20>)
 800b578:	4604      	mov	r4, r0
 800b57a:	4608      	mov	r0, r1
 800b57c:	4611      	mov	r1, r2
 800b57e:	2200      	movs	r2, #0
 800b580:	602a      	str	r2, [r5, #0]
 800b582:	461a      	mov	r2, r3
 800b584:	f7fd fefc 	bl	8009380 <_write>
 800b588:	1c43      	adds	r3, r0, #1
 800b58a:	d102      	bne.n	800b592 <_write_r+0x1e>
 800b58c:	682b      	ldr	r3, [r5, #0]
 800b58e:	b103      	cbz	r3, 800b592 <_write_r+0x1e>
 800b590:	6023      	str	r3, [r4, #0]
 800b592:	bd38      	pop	{r3, r4, r5, pc}
 800b594:	2000430c 	.word	0x2000430c

0800b598 <memcpy>:
 800b598:	440a      	add	r2, r1
 800b59a:	4291      	cmp	r1, r2
 800b59c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800b5a0:	d100      	bne.n	800b5a4 <memcpy+0xc>
 800b5a2:	4770      	bx	lr
 800b5a4:	b510      	push	{r4, lr}
 800b5a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b5aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b5ae:	4291      	cmp	r1, r2
 800b5b0:	d1f9      	bne.n	800b5a6 <memcpy+0xe>
 800b5b2:	bd10      	pop	{r4, pc}

0800b5b4 <_free_r>:
 800b5b4:	b538      	push	{r3, r4, r5, lr}
 800b5b6:	4605      	mov	r5, r0
 800b5b8:	2900      	cmp	r1, #0
 800b5ba:	d041      	beq.n	800b640 <_free_r+0x8c>
 800b5bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b5c0:	1f0c      	subs	r4, r1, #4
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	bfb8      	it	lt
 800b5c6:	18e4      	addlt	r4, r4, r3
 800b5c8:	f7ff fde0 	bl	800b18c <__malloc_lock>
 800b5cc:	4a1d      	ldr	r2, [pc, #116]	@ (800b644 <_free_r+0x90>)
 800b5ce:	6813      	ldr	r3, [r2, #0]
 800b5d0:	b933      	cbnz	r3, 800b5e0 <_free_r+0x2c>
 800b5d2:	6063      	str	r3, [r4, #4]
 800b5d4:	6014      	str	r4, [r2, #0]
 800b5d6:	4628      	mov	r0, r5
 800b5d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b5dc:	f7ff bddc 	b.w	800b198 <__malloc_unlock>
 800b5e0:	42a3      	cmp	r3, r4
 800b5e2:	d908      	bls.n	800b5f6 <_free_r+0x42>
 800b5e4:	6820      	ldr	r0, [r4, #0]
 800b5e6:	1821      	adds	r1, r4, r0
 800b5e8:	428b      	cmp	r3, r1
 800b5ea:	bf01      	itttt	eq
 800b5ec:	6819      	ldreq	r1, [r3, #0]
 800b5ee:	685b      	ldreq	r3, [r3, #4]
 800b5f0:	1809      	addeq	r1, r1, r0
 800b5f2:	6021      	streq	r1, [r4, #0]
 800b5f4:	e7ed      	b.n	800b5d2 <_free_r+0x1e>
 800b5f6:	461a      	mov	r2, r3
 800b5f8:	685b      	ldr	r3, [r3, #4]
 800b5fa:	b10b      	cbz	r3, 800b600 <_free_r+0x4c>
 800b5fc:	42a3      	cmp	r3, r4
 800b5fe:	d9fa      	bls.n	800b5f6 <_free_r+0x42>
 800b600:	6811      	ldr	r1, [r2, #0]
 800b602:	1850      	adds	r0, r2, r1
 800b604:	42a0      	cmp	r0, r4
 800b606:	d10b      	bne.n	800b620 <_free_r+0x6c>
 800b608:	6820      	ldr	r0, [r4, #0]
 800b60a:	4401      	add	r1, r0
 800b60c:	1850      	adds	r0, r2, r1
 800b60e:	4283      	cmp	r3, r0
 800b610:	6011      	str	r1, [r2, #0]
 800b612:	d1e0      	bne.n	800b5d6 <_free_r+0x22>
 800b614:	6818      	ldr	r0, [r3, #0]
 800b616:	685b      	ldr	r3, [r3, #4]
 800b618:	6053      	str	r3, [r2, #4]
 800b61a:	4408      	add	r0, r1
 800b61c:	6010      	str	r0, [r2, #0]
 800b61e:	e7da      	b.n	800b5d6 <_free_r+0x22>
 800b620:	d902      	bls.n	800b628 <_free_r+0x74>
 800b622:	230c      	movs	r3, #12
 800b624:	602b      	str	r3, [r5, #0]
 800b626:	e7d6      	b.n	800b5d6 <_free_r+0x22>
 800b628:	6820      	ldr	r0, [r4, #0]
 800b62a:	1821      	adds	r1, r4, r0
 800b62c:	428b      	cmp	r3, r1
 800b62e:	bf04      	itt	eq
 800b630:	6819      	ldreq	r1, [r3, #0]
 800b632:	685b      	ldreq	r3, [r3, #4]
 800b634:	6063      	str	r3, [r4, #4]
 800b636:	bf04      	itt	eq
 800b638:	1809      	addeq	r1, r1, r0
 800b63a:	6021      	streq	r1, [r4, #0]
 800b63c:	6054      	str	r4, [r2, #4]
 800b63e:	e7ca      	b.n	800b5d6 <_free_r+0x22>
 800b640:	bd38      	pop	{r3, r4, r5, pc}
 800b642:	bf00      	nop
 800b644:	20004308 	.word	0x20004308

0800b648 <_malloc_usable_size_r>:
 800b648:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b64c:	1f18      	subs	r0, r3, #4
 800b64e:	2b00      	cmp	r3, #0
 800b650:	bfbc      	itt	lt
 800b652:	580b      	ldrlt	r3, [r1, r0]
 800b654:	18c0      	addlt	r0, r0, r3
 800b656:	4770      	bx	lr

0800b658 <_init>:
 800b658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b65a:	bf00      	nop
 800b65c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b65e:	bc08      	pop	{r3}
 800b660:	469e      	mov	lr, r3
 800b662:	4770      	bx	lr

0800b664 <_fini>:
 800b664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b666:	bf00      	nop
 800b668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b66a:	bc08      	pop	{r3}
 800b66c:	469e      	mov	lr, r3
 800b66e:	4770      	bx	lr
