
project1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dc50  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  0800de00  0800de00  0000ee00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dec4  0800dec4  0000f080  2**0
                  CONTENTS
  4 .ARM          00000008  0800dec4  0800dec4  0000eec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800decc  0800decc  0000f080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800decc  0800decc  0000eecc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ded0  0800ded0  0000eed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  0800ded4  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f080  2**0
                  CONTENTS
 10 .bss          00009a00  20000080  20000080  0000f080  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20009a80  20009a80  0000f080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f080  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002df44  00000000  00000000  0000f0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000061f1  00000000  00000000  0003cff4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002520  00000000  00000000  000431e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001cc3  00000000  00000000  00045708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002bee2  00000000  00000000  000473cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002de92  00000000  00000000  000732ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f6d09  00000000  00000000  000a113f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00197e48  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a1a4  00000000  00000000  00197e8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  001a2030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000080 	.word	0x20000080
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800dde8 	.word	0x0800dde8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000084 	.word	0x20000084
 80001ec:	0800dde8 	.word	0x0800dde8

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000200:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000204:	f000 b96a 	b.w	80004dc <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	460c      	mov	r4, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14e      	bne.n	80002ca <__udivmoddi4+0xaa>
 800022c:	4694      	mov	ip, r2
 800022e:	458c      	cmp	ip, r1
 8000230:	4686      	mov	lr, r0
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	d962      	bls.n	80002fe <__udivmoddi4+0xde>
 8000238:	b14a      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023a:	f1c2 0320 	rsb	r3, r2, #32
 800023e:	4091      	lsls	r1, r2
 8000240:	fa20 f303 	lsr.w	r3, r0, r3
 8000244:	fa0c fc02 	lsl.w	ip, ip, r2
 8000248:	4319      	orrs	r1, r3
 800024a:	fa00 fe02 	lsl.w	lr, r0, r2
 800024e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000252:	fa1f f68c 	uxth.w	r6, ip
 8000256:	fbb1 f4f7 	udiv	r4, r1, r7
 800025a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025e:	fb07 1114 	mls	r1, r7, r4, r1
 8000262:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000266:	fb04 f106 	mul.w	r1, r4, r6
 800026a:	4299      	cmp	r1, r3
 800026c:	d90a      	bls.n	8000284 <__udivmoddi4+0x64>
 800026e:	eb1c 0303 	adds.w	r3, ip, r3
 8000272:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000276:	f080 8112 	bcs.w	800049e <__udivmoddi4+0x27e>
 800027a:	4299      	cmp	r1, r3
 800027c:	f240 810f 	bls.w	800049e <__udivmoddi4+0x27e>
 8000280:	3c02      	subs	r4, #2
 8000282:	4463      	add	r3, ip
 8000284:	1a59      	subs	r1, r3, r1
 8000286:	fa1f f38e 	uxth.w	r3, lr
 800028a:	fbb1 f0f7 	udiv	r0, r1, r7
 800028e:	fb07 1110 	mls	r1, r7, r0, r1
 8000292:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000296:	fb00 f606 	mul.w	r6, r0, r6
 800029a:	429e      	cmp	r6, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x94>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002a6:	f080 80fc 	bcs.w	80004a2 <__udivmoddi4+0x282>
 80002aa:	429e      	cmp	r6, r3
 80002ac:	f240 80f9 	bls.w	80004a2 <__udivmoddi4+0x282>
 80002b0:	4463      	add	r3, ip
 80002b2:	3802      	subs	r0, #2
 80002b4:	1b9b      	subs	r3, r3, r6
 80002b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ba:	2100      	movs	r1, #0
 80002bc:	b11d      	cbz	r5, 80002c6 <__udivmoddi4+0xa6>
 80002be:	40d3      	lsrs	r3, r2
 80002c0:	2200      	movs	r2, #0
 80002c2:	e9c5 3200 	strd	r3, r2, [r5]
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d905      	bls.n	80002da <__udivmoddi4+0xba>
 80002ce:	b10d      	cbz	r5, 80002d4 <__udivmoddi4+0xb4>
 80002d0:	e9c5 0100 	strd	r0, r1, [r5]
 80002d4:	2100      	movs	r1, #0
 80002d6:	4608      	mov	r0, r1
 80002d8:	e7f5      	b.n	80002c6 <__udivmoddi4+0xa6>
 80002da:	fab3 f183 	clz	r1, r3
 80002de:	2900      	cmp	r1, #0
 80002e0:	d146      	bne.n	8000370 <__udivmoddi4+0x150>
 80002e2:	42a3      	cmp	r3, r4
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xcc>
 80002e6:	4290      	cmp	r0, r2
 80002e8:	f0c0 80f0 	bcc.w	80004cc <__udivmoddi4+0x2ac>
 80002ec:	1a86      	subs	r6, r0, r2
 80002ee:	eb64 0303 	sbc.w	r3, r4, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	2d00      	cmp	r5, #0
 80002f6:	d0e6      	beq.n	80002c6 <__udivmoddi4+0xa6>
 80002f8:	e9c5 6300 	strd	r6, r3, [r5]
 80002fc:	e7e3      	b.n	80002c6 <__udivmoddi4+0xa6>
 80002fe:	2a00      	cmp	r2, #0
 8000300:	f040 8090 	bne.w	8000424 <__udivmoddi4+0x204>
 8000304:	eba1 040c 	sub.w	r4, r1, ip
 8000308:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800030c:	fa1f f78c 	uxth.w	r7, ip
 8000310:	2101      	movs	r1, #1
 8000312:	fbb4 f6f8 	udiv	r6, r4, r8
 8000316:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031a:	fb08 4416 	mls	r4, r8, r6, r4
 800031e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000322:	fb07 f006 	mul.w	r0, r7, r6
 8000326:	4298      	cmp	r0, r3
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x11c>
 800032a:	eb1c 0303 	adds.w	r3, ip, r3
 800032e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x11a>
 8000334:	4298      	cmp	r0, r3
 8000336:	f200 80cd 	bhi.w	80004d4 <__udivmoddi4+0x2b4>
 800033a:	4626      	mov	r6, r4
 800033c:	1a1c      	subs	r4, r3, r0
 800033e:	fa1f f38e 	uxth.w	r3, lr
 8000342:	fbb4 f0f8 	udiv	r0, r4, r8
 8000346:	fb08 4410 	mls	r4, r8, r0, r4
 800034a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034e:	fb00 f707 	mul.w	r7, r0, r7
 8000352:	429f      	cmp	r7, r3
 8000354:	d908      	bls.n	8000368 <__udivmoddi4+0x148>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x146>
 8000360:	429f      	cmp	r7, r3
 8000362:	f200 80b0 	bhi.w	80004c6 <__udivmoddi4+0x2a6>
 8000366:	4620      	mov	r0, r4
 8000368:	1bdb      	subs	r3, r3, r7
 800036a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0x9c>
 8000370:	f1c1 0620 	rsb	r6, r1, #32
 8000374:	408b      	lsls	r3, r1
 8000376:	fa22 f706 	lsr.w	r7, r2, r6
 800037a:	431f      	orrs	r7, r3
 800037c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000380:	fa04 f301 	lsl.w	r3, r4, r1
 8000384:	ea43 030c 	orr.w	r3, r3, ip
 8000388:	40f4      	lsrs	r4, r6
 800038a:	fa00 f801 	lsl.w	r8, r0, r1
 800038e:	0c38      	lsrs	r0, r7, #16
 8000390:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000394:	fbb4 fef0 	udiv	lr, r4, r0
 8000398:	fa1f fc87 	uxth.w	ip, r7
 800039c:	fb00 441e 	mls	r4, r0, lr, r4
 80003a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a4:	fb0e f90c 	mul.w	r9, lr, ip
 80003a8:	45a1      	cmp	r9, r4
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	d90a      	bls.n	80003c6 <__udivmoddi4+0x1a6>
 80003b0:	193c      	adds	r4, r7, r4
 80003b2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003b6:	f080 8084 	bcs.w	80004c2 <__udivmoddi4+0x2a2>
 80003ba:	45a1      	cmp	r9, r4
 80003bc:	f240 8081 	bls.w	80004c2 <__udivmoddi4+0x2a2>
 80003c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	eba4 0409 	sub.w	r4, r4, r9
 80003ca:	fa1f f983 	uxth.w	r9, r3
 80003ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80003d2:	fb00 4413 	mls	r4, r0, r3, r4
 80003d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003da:	fb03 fc0c 	mul.w	ip, r3, ip
 80003de:	45a4      	cmp	ip, r4
 80003e0:	d907      	bls.n	80003f2 <__udivmoddi4+0x1d2>
 80003e2:	193c      	adds	r4, r7, r4
 80003e4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003e8:	d267      	bcs.n	80004ba <__udivmoddi4+0x29a>
 80003ea:	45a4      	cmp	ip, r4
 80003ec:	d965      	bls.n	80004ba <__udivmoddi4+0x29a>
 80003ee:	3b02      	subs	r3, #2
 80003f0:	443c      	add	r4, r7
 80003f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f6:	fba0 9302 	umull	r9, r3, r0, r2
 80003fa:	eba4 040c 	sub.w	r4, r4, ip
 80003fe:	429c      	cmp	r4, r3
 8000400:	46ce      	mov	lr, r9
 8000402:	469c      	mov	ip, r3
 8000404:	d351      	bcc.n	80004aa <__udivmoddi4+0x28a>
 8000406:	d04e      	beq.n	80004a6 <__udivmoddi4+0x286>
 8000408:	b155      	cbz	r5, 8000420 <__udivmoddi4+0x200>
 800040a:	ebb8 030e 	subs.w	r3, r8, lr
 800040e:	eb64 040c 	sbc.w	r4, r4, ip
 8000412:	fa04 f606 	lsl.w	r6, r4, r6
 8000416:	40cb      	lsrs	r3, r1
 8000418:	431e      	orrs	r6, r3
 800041a:	40cc      	lsrs	r4, r1
 800041c:	e9c5 6400 	strd	r6, r4, [r5]
 8000420:	2100      	movs	r1, #0
 8000422:	e750      	b.n	80002c6 <__udivmoddi4+0xa6>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f103 	lsr.w	r1, r0, r3
 800042c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000430:	fa24 f303 	lsr.w	r3, r4, r3
 8000434:	4094      	lsls	r4, r2
 8000436:	430c      	orrs	r4, r1
 8000438:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800043c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000440:	fa1f f78c 	uxth.w	r7, ip
 8000444:	fbb3 f0f8 	udiv	r0, r3, r8
 8000448:	fb08 3110 	mls	r1, r8, r0, r3
 800044c:	0c23      	lsrs	r3, r4, #16
 800044e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000452:	fb00 f107 	mul.w	r1, r0, r7
 8000456:	4299      	cmp	r1, r3
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x24c>
 800045a:	eb1c 0303 	adds.w	r3, ip, r3
 800045e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000462:	d22c      	bcs.n	80004be <__udivmoddi4+0x29e>
 8000464:	4299      	cmp	r1, r3
 8000466:	d92a      	bls.n	80004be <__udivmoddi4+0x29e>
 8000468:	3802      	subs	r0, #2
 800046a:	4463      	add	r3, ip
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb3 f1f8 	udiv	r1, r3, r8
 8000474:	fb08 3311 	mls	r3, r8, r1, r3
 8000478:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800047c:	fb01 f307 	mul.w	r3, r1, r7
 8000480:	42a3      	cmp	r3, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x276>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800048c:	d213      	bcs.n	80004b6 <__udivmoddi4+0x296>
 800048e:	42a3      	cmp	r3, r4
 8000490:	d911      	bls.n	80004b6 <__udivmoddi4+0x296>
 8000492:	3902      	subs	r1, #2
 8000494:	4464      	add	r4, ip
 8000496:	1ae4      	subs	r4, r4, r3
 8000498:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800049c:	e739      	b.n	8000312 <__udivmoddi4+0xf2>
 800049e:	4604      	mov	r4, r0
 80004a0:	e6f0      	b.n	8000284 <__udivmoddi4+0x64>
 80004a2:	4608      	mov	r0, r1
 80004a4:	e706      	b.n	80002b4 <__udivmoddi4+0x94>
 80004a6:	45c8      	cmp	r8, r9
 80004a8:	d2ae      	bcs.n	8000408 <__udivmoddi4+0x1e8>
 80004aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80004b2:	3801      	subs	r0, #1
 80004b4:	e7a8      	b.n	8000408 <__udivmoddi4+0x1e8>
 80004b6:	4631      	mov	r1, r6
 80004b8:	e7ed      	b.n	8000496 <__udivmoddi4+0x276>
 80004ba:	4603      	mov	r3, r0
 80004bc:	e799      	b.n	80003f2 <__udivmoddi4+0x1d2>
 80004be:	4630      	mov	r0, r6
 80004c0:	e7d4      	b.n	800046c <__udivmoddi4+0x24c>
 80004c2:	46d6      	mov	lr, sl
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1a6>
 80004c6:	4463      	add	r3, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e74d      	b.n	8000368 <__udivmoddi4+0x148>
 80004cc:	4606      	mov	r6, r0
 80004ce:	4623      	mov	r3, r4
 80004d0:	4608      	mov	r0, r1
 80004d2:	e70f      	b.n	80002f4 <__udivmoddi4+0xd4>
 80004d4:	3e02      	subs	r6, #2
 80004d6:	4463      	add	r3, ip
 80004d8:	e730      	b.n	800033c <__udivmoddi4+0x11c>
 80004da:	bf00      	nop

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
void vApplicationIdleHook( void )
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80004e4:	bf00      	nop
 80004e6:	46bd      	mov	sp, r7
 80004e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ec:	4770      	bx	lr

080004ee <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80004ee:	b480      	push	{r7}
 80004f0:	b083      	sub	sp, #12
 80004f2:	af00      	add	r7, sp, #0
 80004f4:	6078      	str	r0, [r7, #4]
 80004f6:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80004f8:	bf00      	nop
 80004fa:	370c      	adds	r7, #12
 80004fc:	46bd      	mov	sp, r7
 80004fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000502:	4770      	bx	lr

08000504 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
void vApplicationMallocFailedHook(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000508:	bf00      	nop
 800050a:	46bd      	mov	sp, r7
 800050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000510:	4770      	bx	lr
	...

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000518:	f001 f89a 	bl	8001650 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051c:	f000 f842 	bl	80005a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000520:	f000 fab0 	bl	8000a84 <MX_GPIO_Init>
  MX_CRC_Init();
 8000524:	f000 f8a8 	bl	8000678 <MX_CRC_Init>
  MX_DMA2D_Init();
 8000528:	f000 f8ba 	bl	80006a0 <MX_DMA2D_Init>
  MX_FMC_Init();
 800052c:	f000 fa5a 	bl	80009e4 <MX_FMC_Init>
  MX_I2C3_Init();
 8000530:	f000 f8e8 	bl	8000704 <MX_I2C3_Init>
  MX_LTDC_Init();
 8000534:	f000 f926 	bl	8000784 <MX_LTDC_Init>
  MX_SPI5_Init();
 8000538:	f000 f9a4 	bl	8000884 <MX_SPI5_Init>
  MX_TIM1_Init();
 800053c:	f000 f9d8 	bl	80008f0 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000540:	f000 fa26 	bl	8000990 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000544:	f009 ffc8 	bl	800a4d8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task1 */
  Task1Handle = osThreadNew(StartTask1, NULL, &Task1_attributes);
 8000548:	4a0d      	ldr	r2, [pc, #52]	@ (8000580 <main+0x6c>)
 800054a:	2100      	movs	r1, #0
 800054c:	480d      	ldr	r0, [pc, #52]	@ (8000584 <main+0x70>)
 800054e:	f00a f80d 	bl	800a56c <osThreadNew>
 8000552:	4603      	mov	r3, r0
 8000554:	4a0c      	ldr	r2, [pc, #48]	@ (8000588 <main+0x74>)
 8000556:	6013      	str	r3, [r2, #0]

  /* creation of Task2 */
  Task2Handle = osThreadNew(StartTask2, NULL, &Task2_attributes);
 8000558:	4a0c      	ldr	r2, [pc, #48]	@ (800058c <main+0x78>)
 800055a:	2100      	movs	r1, #0
 800055c:	480c      	ldr	r0, [pc, #48]	@ (8000590 <main+0x7c>)
 800055e:	f00a f805 	bl	800a56c <osThreadNew>
 8000562:	4603      	mov	r3, r0
 8000564:	4a0b      	ldr	r2, [pc, #44]	@ (8000594 <main+0x80>)
 8000566:	6013      	str	r3, [r2, #0]

  /* creation of Task3 */
  Task3Handle = osThreadNew(StartTask3, NULL, &Task3_attributes);
 8000568:	4a0b      	ldr	r2, [pc, #44]	@ (8000598 <main+0x84>)
 800056a:	2100      	movs	r1, #0
 800056c:	480b      	ldr	r0, [pc, #44]	@ (800059c <main+0x88>)
 800056e:	f009 fffd 	bl	800a56c <osThreadNew>
 8000572:	4603      	mov	r3, r0
 8000574:	4a0a      	ldr	r2, [pc, #40]	@ (80005a0 <main+0x8c>)
 8000576:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000578:	f009 ffd2 	bl	800a520 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800057c:	bf00      	nop
 800057e:	e7fd      	b.n	800057c <main+0x68>
 8000580:	0800de40 	.word	0x0800de40
 8000584:	08000ca5 	.word	0x08000ca5
 8000588:	200002fc 	.word	0x200002fc
 800058c:	0800de64 	.word	0x0800de64
 8000590:	08000cb9 	.word	0x08000cb9
 8000594:	20000300 	.word	0x20000300
 8000598:	0800de88 	.word	0x0800de88
 800059c:	08000cdd 	.word	0x08000cdd
 80005a0:	20000304 	.word	0x20000304

080005a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b094      	sub	sp, #80	@ 0x50
 80005a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005aa:	f107 0320 	add.w	r3, r7, #32
 80005ae:	2230      	movs	r2, #48	@ 0x30
 80005b0:	2100      	movs	r1, #0
 80005b2:	4618      	mov	r0, r3
 80005b4:	f00d fb26 	bl	800dc04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b8:	f107 030c 	add.w	r3, r7, #12
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	605a      	str	r2, [r3, #4]
 80005c2:	609a      	str	r2, [r3, #8]
 80005c4:	60da      	str	r2, [r3, #12]
 80005c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c8:	2300      	movs	r3, #0
 80005ca:	60bb      	str	r3, [r7, #8]
 80005cc:	4b28      	ldr	r3, [pc, #160]	@ (8000670 <SystemClock_Config+0xcc>)
 80005ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005d0:	4a27      	ldr	r2, [pc, #156]	@ (8000670 <SystemClock_Config+0xcc>)
 80005d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80005d8:	4b25      	ldr	r3, [pc, #148]	@ (8000670 <SystemClock_Config+0xcc>)
 80005da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005e0:	60bb      	str	r3, [r7, #8]
 80005e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005e4:	2300      	movs	r3, #0
 80005e6:	607b      	str	r3, [r7, #4]
 80005e8:	4b22      	ldr	r3, [pc, #136]	@ (8000674 <SystemClock_Config+0xd0>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80005f0:	4a20      	ldr	r2, [pc, #128]	@ (8000674 <SystemClock_Config+0xd0>)
 80005f2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005f6:	6013      	str	r3, [r2, #0]
 80005f8:	4b1e      	ldr	r3, [pc, #120]	@ (8000674 <SystemClock_Config+0xd0>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000600:	607b      	str	r3, [r7, #4]
 8000602:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000604:	2301      	movs	r3, #1
 8000606:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000608:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800060c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800060e:	2302      	movs	r3, #2
 8000610:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000612:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000616:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000618:	2304      	movs	r3, #4
 800061a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800061c:	2348      	movs	r3, #72	@ 0x48
 800061e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000620:	2302      	movs	r3, #2
 8000622:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000624:	2303      	movs	r3, #3
 8000626:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000628:	f107 0320 	add.w	r3, r7, #32
 800062c:	4618      	mov	r0, r3
 800062e:	f004 fb81 	bl	8004d34 <HAL_RCC_OscConfig>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000638:	f000 fb74 	bl	8000d24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800063c:	230f      	movs	r3, #15
 800063e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000640:	2302      	movs	r3, #2
 8000642:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000644:	2300      	movs	r3, #0
 8000646:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000648:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800064c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800064e:	2300      	movs	r3, #0
 8000650:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000652:	f107 030c 	add.w	r3, r7, #12
 8000656:	2102      	movs	r1, #2
 8000658:	4618      	mov	r0, r3
 800065a:	f004 fde3 	bl	8005224 <HAL_RCC_ClockConfig>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000664:	f000 fb5e 	bl	8000d24 <Error_Handler>
  }
}
 8000668:	bf00      	nop
 800066a:	3750      	adds	r7, #80	@ 0x50
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	40023800 	.word	0x40023800
 8000674:	40007000 	.word	0x40007000

08000678 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800067c:	4b06      	ldr	r3, [pc, #24]	@ (8000698 <MX_CRC_Init+0x20>)
 800067e:	4a07      	ldr	r2, [pc, #28]	@ (800069c <MX_CRC_Init+0x24>)
 8000680:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000682:	4805      	ldr	r0, [pc, #20]	@ (8000698 <MX_CRC_Init+0x20>)
 8000684:	f001 f92c 	bl	80018e0 <HAL_CRC_Init>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800068e:	f000 fb49 	bl	8000d24 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000692:	bf00      	nop
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	2000009c 	.word	0x2000009c
 800069c:	40023000 	.word	0x40023000

080006a0 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80006a4:	4b15      	ldr	r3, [pc, #84]	@ (80006fc <MX_DMA2D_Init+0x5c>)
 80006a6:	4a16      	ldr	r2, [pc, #88]	@ (8000700 <MX_DMA2D_Init+0x60>)
 80006a8:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80006aa:	4b14      	ldr	r3, [pc, #80]	@ (80006fc <MX_DMA2D_Init+0x5c>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80006b0:	4b12      	ldr	r3, [pc, #72]	@ (80006fc <MX_DMA2D_Init+0x5c>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80006b6:	4b11      	ldr	r3, [pc, #68]	@ (80006fc <MX_DMA2D_Init+0x5c>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80006bc:	4b0f      	ldr	r3, [pc, #60]	@ (80006fc <MX_DMA2D_Init+0x5c>)
 80006be:	2200      	movs	r2, #0
 80006c0:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80006c2:	4b0e      	ldr	r3, [pc, #56]	@ (80006fc <MX_DMA2D_Init+0x5c>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80006c8:	4b0c      	ldr	r3, [pc, #48]	@ (80006fc <MX_DMA2D_Init+0x5c>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80006ce:	4b0b      	ldr	r3, [pc, #44]	@ (80006fc <MX_DMA2D_Init+0x5c>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80006d4:	4809      	ldr	r0, [pc, #36]	@ (80006fc <MX_DMA2D_Init+0x5c>)
 80006d6:	f001 f91f 	bl	8001918 <HAL_DMA2D_Init>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80006e0:	f000 fb20 	bl	8000d24 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80006e4:	2101      	movs	r1, #1
 80006e6:	4805      	ldr	r0, [pc, #20]	@ (80006fc <MX_DMA2D_Init+0x5c>)
 80006e8:	f001 fa70 	bl	8001bcc <HAL_DMA2D_ConfigLayer>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80006f2:	f000 fb17 	bl	8000d24 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80006f6:	bf00      	nop
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	200000a4 	.word	0x200000a4
 8000700:	4002b000 	.word	0x4002b000

08000704 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000708:	4b1b      	ldr	r3, [pc, #108]	@ (8000778 <MX_I2C3_Init+0x74>)
 800070a:	4a1c      	ldr	r2, [pc, #112]	@ (800077c <MX_I2C3_Init+0x78>)
 800070c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800070e:	4b1a      	ldr	r3, [pc, #104]	@ (8000778 <MX_I2C3_Init+0x74>)
 8000710:	4a1b      	ldr	r2, [pc, #108]	@ (8000780 <MX_I2C3_Init+0x7c>)
 8000712:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000714:	4b18      	ldr	r3, [pc, #96]	@ (8000778 <MX_I2C3_Init+0x74>)
 8000716:	2200      	movs	r2, #0
 8000718:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800071a:	4b17      	ldr	r3, [pc, #92]	@ (8000778 <MX_I2C3_Init+0x74>)
 800071c:	2200      	movs	r2, #0
 800071e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000720:	4b15      	ldr	r3, [pc, #84]	@ (8000778 <MX_I2C3_Init+0x74>)
 8000722:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000726:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000728:	4b13      	ldr	r3, [pc, #76]	@ (8000778 <MX_I2C3_Init+0x74>)
 800072a:	2200      	movs	r2, #0
 800072c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800072e:	4b12      	ldr	r3, [pc, #72]	@ (8000778 <MX_I2C3_Init+0x74>)
 8000730:	2200      	movs	r2, #0
 8000732:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000734:	4b10      	ldr	r3, [pc, #64]	@ (8000778 <MX_I2C3_Init+0x74>)
 8000736:	2200      	movs	r2, #0
 8000738:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800073a:	4b0f      	ldr	r3, [pc, #60]	@ (8000778 <MX_I2C3_Init+0x74>)
 800073c:	2200      	movs	r2, #0
 800073e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000740:	480d      	ldr	r0, [pc, #52]	@ (8000778 <MX_I2C3_Init+0x74>)
 8000742:	f003 fdcf 	bl	80042e4 <HAL_I2C_Init>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800074c:	f000 faea 	bl	8000d24 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000750:	2100      	movs	r1, #0
 8000752:	4809      	ldr	r0, [pc, #36]	@ (8000778 <MX_I2C3_Init+0x74>)
 8000754:	f003 ff0a 	bl	800456c <HAL_I2CEx_ConfigAnalogFilter>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800075e:	f000 fae1 	bl	8000d24 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000762:	2100      	movs	r1, #0
 8000764:	4804      	ldr	r0, [pc, #16]	@ (8000778 <MX_I2C3_Init+0x74>)
 8000766:	f003 ff3d 	bl	80045e4 <HAL_I2CEx_ConfigDigitalFilter>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000770:	f000 fad8 	bl	8000d24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000774:	bf00      	nop
 8000776:	bd80      	pop	{r7, pc}
 8000778:	200000e4 	.word	0x200000e4
 800077c:	40005c00 	.word	0x40005c00
 8000780:	000186a0 	.word	0x000186a0

08000784 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b08e      	sub	sp, #56	@ 0x38
 8000788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800078a:	1d3b      	adds	r3, r7, #4
 800078c:	2234      	movs	r2, #52	@ 0x34
 800078e:	2100      	movs	r1, #0
 8000790:	4618      	mov	r0, r3
 8000792:	f00d fa37 	bl	800dc04 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000796:	4b39      	ldr	r3, [pc, #228]	@ (800087c <MX_LTDC_Init+0xf8>)
 8000798:	4a39      	ldr	r2, [pc, #228]	@ (8000880 <MX_LTDC_Init+0xfc>)
 800079a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800079c:	4b37      	ldr	r3, [pc, #220]	@ (800087c <MX_LTDC_Init+0xf8>)
 800079e:	2200      	movs	r2, #0
 80007a0:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80007a2:	4b36      	ldr	r3, [pc, #216]	@ (800087c <MX_LTDC_Init+0xf8>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80007a8:	4b34      	ldr	r3, [pc, #208]	@ (800087c <MX_LTDC_Init+0xf8>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80007ae:	4b33      	ldr	r3, [pc, #204]	@ (800087c <MX_LTDC_Init+0xf8>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 80007b4:	4b31      	ldr	r3, [pc, #196]	@ (800087c <MX_LTDC_Init+0xf8>)
 80007b6:	2209      	movs	r2, #9
 80007b8:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 80007ba:	4b30      	ldr	r3, [pc, #192]	@ (800087c <MX_LTDC_Init+0xf8>)
 80007bc:	2201      	movs	r2, #1
 80007be:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 80007c0:	4b2e      	ldr	r3, [pc, #184]	@ (800087c <MX_LTDC_Init+0xf8>)
 80007c2:	221d      	movs	r2, #29
 80007c4:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 80007c6:	4b2d      	ldr	r3, [pc, #180]	@ (800087c <MX_LTDC_Init+0xf8>)
 80007c8:	2203      	movs	r2, #3
 80007ca:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 80007cc:	4b2b      	ldr	r3, [pc, #172]	@ (800087c <MX_LTDC_Init+0xf8>)
 80007ce:	f240 120d 	movw	r2, #269	@ 0x10d
 80007d2:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 80007d4:	4b29      	ldr	r3, [pc, #164]	@ (800087c <MX_LTDC_Init+0xf8>)
 80007d6:	f240 1243 	movw	r2, #323	@ 0x143
 80007da:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 279;
 80007dc:	4b27      	ldr	r3, [pc, #156]	@ (800087c <MX_LTDC_Init+0xf8>)
 80007de:	f240 1217 	movw	r2, #279	@ 0x117
 80007e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 327;
 80007e4:	4b25      	ldr	r3, [pc, #148]	@ (800087c <MX_LTDC_Init+0xf8>)
 80007e6:	f240 1247 	movw	r2, #327	@ 0x147
 80007ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80007ec:	4b23      	ldr	r3, [pc, #140]	@ (800087c <MX_LTDC_Init+0xf8>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 80007f4:	4b21      	ldr	r3, [pc, #132]	@ (800087c <MX_LTDC_Init+0xf8>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 80007fc:	4b1f      	ldr	r3, [pc, #124]	@ (800087c <MX_LTDC_Init+0xf8>)
 80007fe:	2200      	movs	r2, #0
 8000800:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000804:	481d      	ldr	r0, [pc, #116]	@ (800087c <MX_LTDC_Init+0xf8>)
 8000806:	f003 ff2d 	bl	8004664 <HAL_LTDC_Init>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000810:	f000 fa88 	bl	8000d24 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000814:	2300      	movs	r3, #0
 8000816:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8000818:	23f0      	movs	r3, #240	@ 0xf0
 800081a:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800081c:	2300      	movs	r3, #0
 800081e:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8000820:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000824:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000826:	2302      	movs	r3, #2
 8000828:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800082a:	23ff      	movs	r3, #255	@ 0xff
 800082c:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 800082e:	2300      	movs	r3, #0
 8000830:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000832:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000836:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000838:	2307      	movs	r3, #7
 800083a:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 800083c:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 8000840:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 240;
 8000842:	23f0      	movs	r3, #240	@ 0xf0
 8000844:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 320;
 8000846:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800084a:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 800084c:	2300      	movs	r3, #0
 800084e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000852:	2300      	movs	r3, #0
 8000854:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000858:	2300      	movs	r3, #0
 800085a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800085e:	1d3b      	adds	r3, r7, #4
 8000860:	2200      	movs	r2, #0
 8000862:	4619      	mov	r1, r3
 8000864:	4805      	ldr	r0, [pc, #20]	@ (800087c <MX_LTDC_Init+0xf8>)
 8000866:	f004 f88f 	bl	8004988 <HAL_LTDC_ConfigLayer>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8000870:	f000 fa58 	bl	8000d24 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000874:	bf00      	nop
 8000876:	3738      	adds	r7, #56	@ 0x38
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	20000138 	.word	0x20000138
 8000880:	40016800 	.word	0x40016800

08000884 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000888:	4b17      	ldr	r3, [pc, #92]	@ (80008e8 <MX_SPI5_Init+0x64>)
 800088a:	4a18      	ldr	r2, [pc, #96]	@ (80008ec <MX_SPI5_Init+0x68>)
 800088c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800088e:	4b16      	ldr	r3, [pc, #88]	@ (80008e8 <MX_SPI5_Init+0x64>)
 8000890:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000894:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000896:	4b14      	ldr	r3, [pc, #80]	@ (80008e8 <MX_SPI5_Init+0x64>)
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800089c:	4b12      	ldr	r3, [pc, #72]	@ (80008e8 <MX_SPI5_Init+0x64>)
 800089e:	2200      	movs	r2, #0
 80008a0:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008a2:	4b11      	ldr	r3, [pc, #68]	@ (80008e8 <MX_SPI5_Init+0x64>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008a8:	4b0f      	ldr	r3, [pc, #60]	@ (80008e8 <MX_SPI5_Init+0x64>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80008ae:	4b0e      	ldr	r3, [pc, #56]	@ (80008e8 <MX_SPI5_Init+0x64>)
 80008b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008b4:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80008b6:	4b0c      	ldr	r3, [pc, #48]	@ (80008e8 <MX_SPI5_Init+0x64>)
 80008b8:	2218      	movs	r2, #24
 80008ba:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008bc:	4b0a      	ldr	r3, [pc, #40]	@ (80008e8 <MX_SPI5_Init+0x64>)
 80008be:	2200      	movs	r2, #0
 80008c0:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80008c2:	4b09      	ldr	r3, [pc, #36]	@ (80008e8 <MX_SPI5_Init+0x64>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008c8:	4b07      	ldr	r3, [pc, #28]	@ (80008e8 <MX_SPI5_Init+0x64>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 80008ce:	4b06      	ldr	r3, [pc, #24]	@ (80008e8 <MX_SPI5_Init+0x64>)
 80008d0:	220a      	movs	r2, #10
 80008d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80008d4:	4804      	ldr	r0, [pc, #16]	@ (80008e8 <MX_SPI5_Init+0x64>)
 80008d6:	f005 f8eb 	bl	8005ab0 <HAL_SPI_Init>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80008e0:	f000 fa20 	bl	8000d24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80008e4:	bf00      	nop
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	200001e0 	.word	0x200001e0
 80008ec:	40015000 	.word	0x40015000

080008f0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b086      	sub	sp, #24
 80008f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008f6:	f107 0308 	add.w	r3, r7, #8
 80008fa:	2200      	movs	r2, #0
 80008fc:	601a      	str	r2, [r3, #0]
 80008fe:	605a      	str	r2, [r3, #4]
 8000900:	609a      	str	r2, [r3, #8]
 8000902:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000904:	463b      	mov	r3, r7
 8000906:	2200      	movs	r2, #0
 8000908:	601a      	str	r2, [r3, #0]
 800090a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800090c:	4b1e      	ldr	r3, [pc, #120]	@ (8000988 <MX_TIM1_Init+0x98>)
 800090e:	4a1f      	ldr	r2, [pc, #124]	@ (800098c <MX_TIM1_Init+0x9c>)
 8000910:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000912:	4b1d      	ldr	r3, [pc, #116]	@ (8000988 <MX_TIM1_Init+0x98>)
 8000914:	2200      	movs	r2, #0
 8000916:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000918:	4b1b      	ldr	r3, [pc, #108]	@ (8000988 <MX_TIM1_Init+0x98>)
 800091a:	2200      	movs	r2, #0
 800091c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800091e:	4b1a      	ldr	r3, [pc, #104]	@ (8000988 <MX_TIM1_Init+0x98>)
 8000920:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000924:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000926:	4b18      	ldr	r3, [pc, #96]	@ (8000988 <MX_TIM1_Init+0x98>)
 8000928:	2200      	movs	r2, #0
 800092a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800092c:	4b16      	ldr	r3, [pc, #88]	@ (8000988 <MX_TIM1_Init+0x98>)
 800092e:	2200      	movs	r2, #0
 8000930:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000932:	4b15      	ldr	r3, [pc, #84]	@ (8000988 <MX_TIM1_Init+0x98>)
 8000934:	2200      	movs	r2, #0
 8000936:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000938:	4813      	ldr	r0, [pc, #76]	@ (8000988 <MX_TIM1_Init+0x98>)
 800093a:	f005 f942 	bl	8005bc2 <HAL_TIM_Base_Init>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000944:	f000 f9ee 	bl	8000d24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000948:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800094c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800094e:	f107 0308 	add.w	r3, r7, #8
 8000952:	4619      	mov	r1, r3
 8000954:	480c      	ldr	r0, [pc, #48]	@ (8000988 <MX_TIM1_Init+0x98>)
 8000956:	f005 fae3 	bl	8005f20 <HAL_TIM_ConfigClockSource>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000960:	f000 f9e0 	bl	8000d24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000964:	2300      	movs	r3, #0
 8000966:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000968:	2300      	movs	r3, #0
 800096a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800096c:	463b      	mov	r3, r7
 800096e:	4619      	mov	r1, r3
 8000970:	4805      	ldr	r0, [pc, #20]	@ (8000988 <MX_TIM1_Init+0x98>)
 8000972:	f005 fd0b 	bl	800638c <HAL_TIMEx_MasterConfigSynchronization>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800097c:	f000 f9d2 	bl	8000d24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000980:	bf00      	nop
 8000982:	3718      	adds	r7, #24
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	20000238 	.word	0x20000238
 800098c:	40010000 	.word	0x40010000

08000990 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000994:	4b11      	ldr	r3, [pc, #68]	@ (80009dc <MX_USART1_UART_Init+0x4c>)
 8000996:	4a12      	ldr	r2, [pc, #72]	@ (80009e0 <MX_USART1_UART_Init+0x50>)
 8000998:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800099a:	4b10      	ldr	r3, [pc, #64]	@ (80009dc <MX_USART1_UART_Init+0x4c>)
 800099c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009a2:	4b0e      	ldr	r3, [pc, #56]	@ (80009dc <MX_USART1_UART_Init+0x4c>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009a8:	4b0c      	ldr	r3, [pc, #48]	@ (80009dc <MX_USART1_UART_Init+0x4c>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009ae:	4b0b      	ldr	r3, [pc, #44]	@ (80009dc <MX_USART1_UART_Init+0x4c>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009b4:	4b09      	ldr	r3, [pc, #36]	@ (80009dc <MX_USART1_UART_Init+0x4c>)
 80009b6:	220c      	movs	r2, #12
 80009b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ba:	4b08      	ldr	r3, [pc, #32]	@ (80009dc <MX_USART1_UART_Init+0x4c>)
 80009bc:	2200      	movs	r2, #0
 80009be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009c0:	4b06      	ldr	r3, [pc, #24]	@ (80009dc <MX_USART1_UART_Init+0x4c>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009c6:	4805      	ldr	r0, [pc, #20]	@ (80009dc <MX_USART1_UART_Init+0x4c>)
 80009c8:	f005 fd70 	bl	80064ac <HAL_UART_Init>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80009d2:	f000 f9a7 	bl	8000d24 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	20000280 	.word	0x20000280
 80009e0:	40011000 	.word	0x40011000

080009e4 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b088      	sub	sp, #32
 80009e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80009ea:	1d3b      	adds	r3, r7, #4
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	605a      	str	r2, [r3, #4]
 80009f2:	609a      	str	r2, [r3, #8]
 80009f4:	60da      	str	r2, [r3, #12]
 80009f6:	611a      	str	r2, [r3, #16]
 80009f8:	615a      	str	r2, [r3, #20]
 80009fa:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80009fc:	4b1f      	ldr	r3, [pc, #124]	@ (8000a7c <MX_FMC_Init+0x98>)
 80009fe:	4a20      	ldr	r2, [pc, #128]	@ (8000a80 <MX_FMC_Init+0x9c>)
 8000a00:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000a02:	4b1e      	ldr	r3, [pc, #120]	@ (8000a7c <MX_FMC_Init+0x98>)
 8000a04:	2201      	movs	r2, #1
 8000a06:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000a08:	4b1c      	ldr	r3, [pc, #112]	@ (8000a7c <MX_FMC_Init+0x98>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000a0e:	4b1b      	ldr	r3, [pc, #108]	@ (8000a7c <MX_FMC_Init+0x98>)
 8000a10:	2204      	movs	r2, #4
 8000a12:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000a14:	4b19      	ldr	r3, [pc, #100]	@ (8000a7c <MX_FMC_Init+0x98>)
 8000a16:	2210      	movs	r2, #16
 8000a18:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000a1a:	4b18      	ldr	r3, [pc, #96]	@ (8000a7c <MX_FMC_Init+0x98>)
 8000a1c:	2240      	movs	r2, #64	@ 0x40
 8000a1e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000a20:	4b16      	ldr	r3, [pc, #88]	@ (8000a7c <MX_FMC_Init+0x98>)
 8000a22:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8000a26:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000a28:	4b14      	ldr	r3, [pc, #80]	@ (8000a7c <MX_FMC_Init+0x98>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000a2e:	4b13      	ldr	r3, [pc, #76]	@ (8000a7c <MX_FMC_Init+0x98>)
 8000a30:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000a34:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000a36:	4b11      	ldr	r3, [pc, #68]	@ (8000a7c <MX_FMC_Init+0x98>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000a3c:	4b0f      	ldr	r3, [pc, #60]	@ (8000a7c <MX_FMC_Init+0x98>)
 8000a3e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a42:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000a44:	2302      	movs	r3, #2
 8000a46:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000a48:	2307      	movs	r3, #7
 8000a4a:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000a4c:	2304      	movs	r3, #4
 8000a4e:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000a50:	2307      	movs	r3, #7
 8000a52:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000a54:	2303      	movs	r3, #3
 8000a56:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000a60:	1d3b      	adds	r3, r7, #4
 8000a62:	4619      	mov	r1, r3
 8000a64:	4805      	ldr	r0, [pc, #20]	@ (8000a7c <MX_FMC_Init+0x98>)
 8000a66:	f004 ffef 	bl	8005a48 <HAL_SDRAM_Init>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000a70:	f000 f958 	bl	8000d24 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000a74:	bf00      	nop
 8000a76:	3720      	adds	r7, #32
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	200002c8 	.word	0x200002c8
 8000a80:	a0000140 	.word	0xa0000140

08000a84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b08e      	sub	sp, #56	@ 0x38
 8000a88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a8e:	2200      	movs	r2, #0
 8000a90:	601a      	str	r2, [r3, #0]
 8000a92:	605a      	str	r2, [r3, #4]
 8000a94:	609a      	str	r2, [r3, #8]
 8000a96:	60da      	str	r2, [r3, #12]
 8000a98:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	623b      	str	r3, [r7, #32]
 8000a9e:	4b7b      	ldr	r3, [pc, #492]	@ (8000c8c <MX_GPIO_Init+0x208>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa2:	4a7a      	ldr	r2, [pc, #488]	@ (8000c8c <MX_GPIO_Init+0x208>)
 8000aa4:	f043 0304 	orr.w	r3, r3, #4
 8000aa8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aaa:	4b78      	ldr	r3, [pc, #480]	@ (8000c8c <MX_GPIO_Init+0x208>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aae:	f003 0304 	and.w	r3, r3, #4
 8000ab2:	623b      	str	r3, [r7, #32]
 8000ab4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	61fb      	str	r3, [r7, #28]
 8000aba:	4b74      	ldr	r3, [pc, #464]	@ (8000c8c <MX_GPIO_Init+0x208>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000abe:	4a73      	ldr	r2, [pc, #460]	@ (8000c8c <MX_GPIO_Init+0x208>)
 8000ac0:	f043 0320 	orr.w	r3, r3, #32
 8000ac4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ac6:	4b71      	ldr	r3, [pc, #452]	@ (8000c8c <MX_GPIO_Init+0x208>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aca:	f003 0320 	and.w	r3, r3, #32
 8000ace:	61fb      	str	r3, [r7, #28]
 8000ad0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	61bb      	str	r3, [r7, #24]
 8000ad6:	4b6d      	ldr	r3, [pc, #436]	@ (8000c8c <MX_GPIO_Init+0x208>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ada:	4a6c      	ldr	r2, [pc, #432]	@ (8000c8c <MX_GPIO_Init+0x208>)
 8000adc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ae0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ae2:	4b6a      	ldr	r3, [pc, #424]	@ (8000c8c <MX_GPIO_Init+0x208>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000aea:	61bb      	str	r3, [r7, #24]
 8000aec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	617b      	str	r3, [r7, #20]
 8000af2:	4b66      	ldr	r3, [pc, #408]	@ (8000c8c <MX_GPIO_Init+0x208>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af6:	4a65      	ldr	r2, [pc, #404]	@ (8000c8c <MX_GPIO_Init+0x208>)
 8000af8:	f043 0301 	orr.w	r3, r3, #1
 8000afc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000afe:	4b63      	ldr	r3, [pc, #396]	@ (8000c8c <MX_GPIO_Init+0x208>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b02:	f003 0301 	and.w	r3, r3, #1
 8000b06:	617b      	str	r3, [r7, #20]
 8000b08:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	613b      	str	r3, [r7, #16]
 8000b0e:	4b5f      	ldr	r3, [pc, #380]	@ (8000c8c <MX_GPIO_Init+0x208>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b12:	4a5e      	ldr	r2, [pc, #376]	@ (8000c8c <MX_GPIO_Init+0x208>)
 8000b14:	f043 0302 	orr.w	r3, r3, #2
 8000b18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b1a:	4b5c      	ldr	r3, [pc, #368]	@ (8000c8c <MX_GPIO_Init+0x208>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1e:	f003 0302 	and.w	r3, r3, #2
 8000b22:	613b      	str	r3, [r7, #16]
 8000b24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	60fb      	str	r3, [r7, #12]
 8000b2a:	4b58      	ldr	r3, [pc, #352]	@ (8000c8c <MX_GPIO_Init+0x208>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2e:	4a57      	ldr	r2, [pc, #348]	@ (8000c8c <MX_GPIO_Init+0x208>)
 8000b30:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b36:	4b55      	ldr	r3, [pc, #340]	@ (8000c8c <MX_GPIO_Init+0x208>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b3e:	60fb      	str	r3, [r7, #12]
 8000b40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	60bb      	str	r3, [r7, #8]
 8000b46:	4b51      	ldr	r3, [pc, #324]	@ (8000c8c <MX_GPIO_Init+0x208>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4a:	4a50      	ldr	r2, [pc, #320]	@ (8000c8c <MX_GPIO_Init+0x208>)
 8000b4c:	f043 0310 	orr.w	r3, r3, #16
 8000b50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b52:	4b4e      	ldr	r3, [pc, #312]	@ (8000c8c <MX_GPIO_Init+0x208>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b56:	f003 0310 	and.w	r3, r3, #16
 8000b5a:	60bb      	str	r3, [r7, #8]
 8000b5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	607b      	str	r3, [r7, #4]
 8000b62:	4b4a      	ldr	r3, [pc, #296]	@ (8000c8c <MX_GPIO_Init+0x208>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b66:	4a49      	ldr	r2, [pc, #292]	@ (8000c8c <MX_GPIO_Init+0x208>)
 8000b68:	f043 0308 	orr.w	r3, r3, #8
 8000b6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b6e:	4b47      	ldr	r3, [pc, #284]	@ (8000c8c <MX_GPIO_Init+0x208>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b72:	f003 0308 	and.w	r3, r3, #8
 8000b76:	607b      	str	r3, [r7, #4]
 8000b78:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	2116      	movs	r1, #22
 8000b7e:	4844      	ldr	r0, [pc, #272]	@ (8000c90 <MX_GPIO_Init+0x20c>)
 8000b80:	f001 fa62 	bl	8002048 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000b84:	2200      	movs	r2, #0
 8000b86:	2180      	movs	r1, #128	@ 0x80
 8000b88:	4842      	ldr	r0, [pc, #264]	@ (8000c94 <MX_GPIO_Init+0x210>)
 8000b8a:	f001 fa5d 	bl	8002048 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8000b94:	4840      	ldr	r0, [pc, #256]	@ (8000c98 <MX_GPIO_Init+0x214>)
 8000b96:	f001 fa57 	bl	8002048 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8000ba0:	483e      	ldr	r0, [pc, #248]	@ (8000c9c <MX_GPIO_Init+0x218>)
 8000ba2:	f001 fa51 	bl	8002048 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000ba6:	2316      	movs	r3, #22
 8000ba8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000baa:	2301      	movs	r3, #1
 8000bac:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bb6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4834      	ldr	r0, [pc, #208]	@ (8000c90 <MX_GPIO_Init+0x20c>)
 8000bbe:	f001 f897 	bl	8001cf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000bc2:	f248 0307 	movw	r3, #32775	@ 0x8007
 8000bc6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000bc8:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000bcc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	482e      	ldr	r0, [pc, #184]	@ (8000c94 <MX_GPIO_Init+0x210>)
 8000bda:	f001 f889 	bl	8001cf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000bde:	2380      	movs	r3, #128	@ 0x80
 8000be0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be2:	2301      	movs	r3, #1
 8000be4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be6:	2300      	movs	r3, #0
 8000be8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bea:	2300      	movs	r3, #0
 8000bec:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000bee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4827      	ldr	r0, [pc, #156]	@ (8000c94 <MX_GPIO_Init+0x210>)
 8000bf6:	f001 f87b 	bl	8001cf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000bfa:	2320      	movs	r3, #32
 8000bfc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000bfe:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000c02:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c04:	2300      	movs	r3, #0
 8000c06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000c08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	4820      	ldr	r0, [pc, #128]	@ (8000c90 <MX_GPIO_Init+0x20c>)
 8000c10:	f001 f86e 	bl	8001cf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000c14:	2304      	movs	r3, #4
 8000c16:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000c20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c24:	4619      	mov	r1, r3
 8000c26:	481e      	ldr	r0, [pc, #120]	@ (8000ca0 <MX_GPIO_Init+0x21c>)
 8000c28:	f001 f862 	bl	8001cf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000c2c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000c30:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c32:	2300      	movs	r3, #0
 8000c34:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000c3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c3e:	4619      	mov	r1, r3
 8000c40:	4815      	ldr	r0, [pc, #84]	@ (8000c98 <MX_GPIO_Init+0x214>)
 8000c42:	f001 f855 	bl	8001cf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000c46:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000c4a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c54:	2300      	movs	r3, #0
 8000c56:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	480e      	ldr	r0, [pc, #56]	@ (8000c98 <MX_GPIO_Init+0x214>)
 8000c60:	f001 f846 	bl	8001cf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000c64:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000c68:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c72:	2300      	movs	r3, #0
 8000c74:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4807      	ldr	r0, [pc, #28]	@ (8000c9c <MX_GPIO_Init+0x218>)
 8000c7e:	f001 f837 	bl	8001cf0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c82:	bf00      	nop
 8000c84:	3738      	adds	r7, #56	@ 0x38
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40023800 	.word	0x40023800
 8000c90:	40020800 	.word	0x40020800
 8000c94:	40020000 	.word	0x40020000
 8000c98:	40020c00 	.word	0x40020c00
 8000c9c:	40021800 	.word	0x40021800
 8000ca0:	40020400 	.word	0x40020400

08000ca4 <StartTask1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask1 */
void StartTask1(void *argument)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8000cac:	f00c fbe2 	bl	800d474 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000cb0:	2001      	movs	r0, #1
 8000cb2:	f009 fced 	bl	800a690 <osDelay>
 8000cb6:	e7fb      	b.n	8000cb0 <StartTask1+0xc>

08000cb8 <StartTask2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask2 */
void StartTask2(void *argument)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask2 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOG,LD3_Pin);
 8000cc0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000cc4:	4804      	ldr	r0, [pc, #16]	@ (8000cd8 <StartTask2+0x20>)
 8000cc6:	f001 f9d8 	bl	800207a <HAL_GPIO_TogglePin>
	  osDelay(1000);
 8000cca:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000cce:	f009 fcdf 	bl	800a690 <osDelay>
	  HAL_GPIO_TogglePin(GPIOG,LD3_Pin);
 8000cd2:	bf00      	nop
 8000cd4:	e7f4      	b.n	8000cc0 <StartTask2+0x8>
 8000cd6:	bf00      	nop
 8000cd8:	40021800 	.word	0x40021800

08000cdc <StartTask3>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask3 */
void StartTask3(void *argument)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask3 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOG,LD4_Pin);
 8000ce4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ce8:	4804      	ldr	r0, [pc, #16]	@ (8000cfc <StartTask3+0x20>)
 8000cea:	f001 f9c6 	bl	800207a <HAL_GPIO_TogglePin>
	  osDelay(2000);
 8000cee:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000cf2:	f009 fccd 	bl	800a690 <osDelay>
	  HAL_GPIO_TogglePin(GPIOG,LD4_Pin);
 8000cf6:	bf00      	nop
 8000cf8:	e7f4      	b.n	8000ce4 <StartTask3+0x8>
 8000cfa:	bf00      	nop
 8000cfc:	40021800 	.word	0x40021800

08000d00 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a04      	ldr	r2, [pc, #16]	@ (8000d20 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d101      	bne.n	8000d16 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d12:	f000 fcbf 	bl	8001694 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d16:	bf00      	nop
 8000d18:	3708      	adds	r7, #8
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	40001000 	.word	0x40001000

08000d24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d28:	b672      	cpsid	i
}
 8000d2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d2c:	bf00      	nop
 8000d2e:	e7fd      	b.n	8000d2c <Error_Handler+0x8>

08000d30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	607b      	str	r3, [r7, #4]
 8000d3a:	4b12      	ldr	r3, [pc, #72]	@ (8000d84 <HAL_MspInit+0x54>)
 8000d3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d3e:	4a11      	ldr	r2, [pc, #68]	@ (8000d84 <HAL_MspInit+0x54>)
 8000d40:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d44:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d46:	4b0f      	ldr	r3, [pc, #60]	@ (8000d84 <HAL_MspInit+0x54>)
 8000d48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d4e:	607b      	str	r3, [r7, #4]
 8000d50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	603b      	str	r3, [r7, #0]
 8000d56:	4b0b      	ldr	r3, [pc, #44]	@ (8000d84 <HAL_MspInit+0x54>)
 8000d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d5a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d84 <HAL_MspInit+0x54>)
 8000d5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d60:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d62:	4b08      	ldr	r3, [pc, #32]	@ (8000d84 <HAL_MspInit+0x54>)
 8000d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d6a:	603b      	str	r3, [r7, #0]
 8000d6c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d6e:	2200      	movs	r2, #0
 8000d70:	210f      	movs	r1, #15
 8000d72:	f06f 0001 	mvn.w	r0, #1
 8000d76:	f000 fd89 	bl	800188c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d7a:	bf00      	nop
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	40023800 	.word	0x40023800

08000d88 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b085      	sub	sp, #20
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a0b      	ldr	r2, [pc, #44]	@ (8000dc4 <HAL_CRC_MspInit+0x3c>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d10d      	bne.n	8000db6 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	60fb      	str	r3, [r7, #12]
 8000d9e:	4b0a      	ldr	r3, [pc, #40]	@ (8000dc8 <HAL_CRC_MspInit+0x40>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da2:	4a09      	ldr	r2, [pc, #36]	@ (8000dc8 <HAL_CRC_MspInit+0x40>)
 8000da4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000da8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000daa:	4b07      	ldr	r3, [pc, #28]	@ (8000dc8 <HAL_CRC_MspInit+0x40>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000db2:	60fb      	str	r3, [r7, #12]
 8000db4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000db6:	bf00      	nop
 8000db8:	3714      	adds	r7, #20
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	40023000 	.word	0x40023000
 8000dc8:	40023800 	.word	0x40023800

08000dcc <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a0e      	ldr	r2, [pc, #56]	@ (8000e14 <HAL_DMA2D_MspInit+0x48>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d115      	bne.n	8000e0a <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000dde:	2300      	movs	r3, #0
 8000de0:	60fb      	str	r3, [r7, #12]
 8000de2:	4b0d      	ldr	r3, [pc, #52]	@ (8000e18 <HAL_DMA2D_MspInit+0x4c>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de6:	4a0c      	ldr	r2, [pc, #48]	@ (8000e18 <HAL_DMA2D_MspInit+0x4c>)
 8000de8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000dec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dee:	4b0a      	ldr	r3, [pc, #40]	@ (8000e18 <HAL_DMA2D_MspInit+0x4c>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	2105      	movs	r1, #5
 8000dfe:	205a      	movs	r0, #90	@ 0x5a
 8000e00:	f000 fd44 	bl	800188c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000e04:	205a      	movs	r0, #90	@ 0x5a
 8000e06:	f000 fd5d 	bl	80018c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8000e0a:	bf00      	nop
 8000e0c:	3710      	adds	r7, #16
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	4002b000 	.word	0x4002b000
 8000e18:	40023800 	.word	0x40023800

08000e1c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b08a      	sub	sp, #40	@ 0x28
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e24:	f107 0314 	add.w	r3, r7, #20
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	605a      	str	r2, [r3, #4]
 8000e2e:	609a      	str	r2, [r3, #8]
 8000e30:	60da      	str	r2, [r3, #12]
 8000e32:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a29      	ldr	r2, [pc, #164]	@ (8000ee0 <HAL_I2C_MspInit+0xc4>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d14b      	bne.n	8000ed6 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	613b      	str	r3, [r7, #16]
 8000e42:	4b28      	ldr	r3, [pc, #160]	@ (8000ee4 <HAL_I2C_MspInit+0xc8>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e46:	4a27      	ldr	r2, [pc, #156]	@ (8000ee4 <HAL_I2C_MspInit+0xc8>)
 8000e48:	f043 0304 	orr.w	r3, r3, #4
 8000e4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e4e:	4b25      	ldr	r3, [pc, #148]	@ (8000ee4 <HAL_I2C_MspInit+0xc8>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e52:	f003 0304 	and.w	r3, r3, #4
 8000e56:	613b      	str	r3, [r7, #16]
 8000e58:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	60fb      	str	r3, [r7, #12]
 8000e5e:	4b21      	ldr	r3, [pc, #132]	@ (8000ee4 <HAL_I2C_MspInit+0xc8>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e62:	4a20      	ldr	r2, [pc, #128]	@ (8000ee4 <HAL_I2C_MspInit+0xc8>)
 8000e64:	f043 0301 	orr.w	r3, r3, #1
 8000e68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e6a:	4b1e      	ldr	r3, [pc, #120]	@ (8000ee4 <HAL_I2C_MspInit+0xc8>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6e:	f003 0301 	and.w	r3, r3, #1
 8000e72:	60fb      	str	r3, [r7, #12]
 8000e74:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000e76:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e7c:	2312      	movs	r3, #18
 8000e7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e80:	2301      	movs	r3, #1
 8000e82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e84:	2300      	movs	r3, #0
 8000e86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000e88:	2304      	movs	r3, #4
 8000e8a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000e8c:	f107 0314 	add.w	r3, r7, #20
 8000e90:	4619      	mov	r1, r3
 8000e92:	4815      	ldr	r0, [pc, #84]	@ (8000ee8 <HAL_I2C_MspInit+0xcc>)
 8000e94:	f000 ff2c 	bl	8001cf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000e98:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e9e:	2312      	movs	r3, #18
 8000ea0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000eaa:	2304      	movs	r3, #4
 8000eac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000eae:	f107 0314 	add.w	r3, r7, #20
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	480d      	ldr	r0, [pc, #52]	@ (8000eec <HAL_I2C_MspInit+0xd0>)
 8000eb6:	f000 ff1b 	bl	8001cf0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000eba:	2300      	movs	r3, #0
 8000ebc:	60bb      	str	r3, [r7, #8]
 8000ebe:	4b09      	ldr	r3, [pc, #36]	@ (8000ee4 <HAL_I2C_MspInit+0xc8>)
 8000ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ec2:	4a08      	ldr	r2, [pc, #32]	@ (8000ee4 <HAL_I2C_MspInit+0xc8>)
 8000ec4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000ec8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000eca:	4b06      	ldr	r3, [pc, #24]	@ (8000ee4 <HAL_I2C_MspInit+0xc8>)
 8000ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ece:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000ed2:	60bb      	str	r3, [r7, #8]
 8000ed4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000ed6:	bf00      	nop
 8000ed8:	3728      	adds	r7, #40	@ 0x28
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	40005c00 	.word	0x40005c00
 8000ee4:	40023800 	.word	0x40023800
 8000ee8:	40020800 	.word	0x40020800
 8000eec:	40020000 	.word	0x40020000

08000ef0 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b09a      	sub	sp, #104	@ 0x68
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	605a      	str	r2, [r3, #4]
 8000f02:	609a      	str	r2, [r3, #8]
 8000f04:	60da      	str	r2, [r3, #12]
 8000f06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f0c:	2230      	movs	r2, #48	@ 0x30
 8000f0e:	2100      	movs	r1, #0
 8000f10:	4618      	mov	r0, r3
 8000f12:	f00c fe77 	bl	800dc04 <memset>
  if(hltdc->Instance==LTDC)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4a85      	ldr	r2, [pc, #532]	@ (8001130 <HAL_LTDC_MspInit+0x240>)
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	f040 8102 	bne.w	8001126 <HAL_LTDC_MspInit+0x236>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000f22:	2308      	movs	r3, #8
 8000f24:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8000f26:	2332      	movs	r3, #50	@ 0x32
 8000f28:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f36:	4618      	mov	r0, r3
 8000f38:	f004 fbc6 	bl	80056c8 <HAL_RCCEx_PeriphCLKConfig>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8000f42:	f7ff feef 	bl	8000d24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	623b      	str	r3, [r7, #32]
 8000f4a:	4b7a      	ldr	r3, [pc, #488]	@ (8001134 <HAL_LTDC_MspInit+0x244>)
 8000f4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f4e:	4a79      	ldr	r2, [pc, #484]	@ (8001134 <HAL_LTDC_MspInit+0x244>)
 8000f50:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000f54:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f56:	4b77      	ldr	r3, [pc, #476]	@ (8001134 <HAL_LTDC_MspInit+0x244>)
 8000f58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f5a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000f5e:	623b      	str	r3, [r7, #32]
 8000f60:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f62:	2300      	movs	r3, #0
 8000f64:	61fb      	str	r3, [r7, #28]
 8000f66:	4b73      	ldr	r3, [pc, #460]	@ (8001134 <HAL_LTDC_MspInit+0x244>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f6a:	4a72      	ldr	r2, [pc, #456]	@ (8001134 <HAL_LTDC_MspInit+0x244>)
 8000f6c:	f043 0320 	orr.w	r3, r3, #32
 8000f70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f72:	4b70      	ldr	r3, [pc, #448]	@ (8001134 <HAL_LTDC_MspInit+0x244>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f76:	f003 0320 	and.w	r3, r3, #32
 8000f7a:	61fb      	str	r3, [r7, #28]
 8000f7c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7e:	2300      	movs	r3, #0
 8000f80:	61bb      	str	r3, [r7, #24]
 8000f82:	4b6c      	ldr	r3, [pc, #432]	@ (8001134 <HAL_LTDC_MspInit+0x244>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f86:	4a6b      	ldr	r2, [pc, #428]	@ (8001134 <HAL_LTDC_MspInit+0x244>)
 8000f88:	f043 0301 	orr.w	r3, r3, #1
 8000f8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f8e:	4b69      	ldr	r3, [pc, #420]	@ (8001134 <HAL_LTDC_MspInit+0x244>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f92:	f003 0301 	and.w	r3, r3, #1
 8000f96:	61bb      	str	r3, [r7, #24]
 8000f98:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	617b      	str	r3, [r7, #20]
 8000f9e:	4b65      	ldr	r3, [pc, #404]	@ (8001134 <HAL_LTDC_MspInit+0x244>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa2:	4a64      	ldr	r2, [pc, #400]	@ (8001134 <HAL_LTDC_MspInit+0x244>)
 8000fa4:	f043 0302 	orr.w	r3, r3, #2
 8000fa8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000faa:	4b62      	ldr	r3, [pc, #392]	@ (8001134 <HAL_LTDC_MspInit+0x244>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fae:	f003 0302 	and.w	r3, r3, #2
 8000fb2:	617b      	str	r3, [r7, #20]
 8000fb4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	613b      	str	r3, [r7, #16]
 8000fba:	4b5e      	ldr	r3, [pc, #376]	@ (8001134 <HAL_LTDC_MspInit+0x244>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fbe:	4a5d      	ldr	r2, [pc, #372]	@ (8001134 <HAL_LTDC_MspInit+0x244>)
 8000fc0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000fc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fc6:	4b5b      	ldr	r3, [pc, #364]	@ (8001134 <HAL_LTDC_MspInit+0x244>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000fce:	613b      	str	r3, [r7, #16]
 8000fd0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	60fb      	str	r3, [r7, #12]
 8000fd6:	4b57      	ldr	r3, [pc, #348]	@ (8001134 <HAL_LTDC_MspInit+0x244>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fda:	4a56      	ldr	r2, [pc, #344]	@ (8001134 <HAL_LTDC_MspInit+0x244>)
 8000fdc:	f043 0304 	orr.w	r3, r3, #4
 8000fe0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fe2:	4b54      	ldr	r3, [pc, #336]	@ (8001134 <HAL_LTDC_MspInit+0x244>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe6:	f003 0304 	and.w	r3, r3, #4
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60bb      	str	r3, [r7, #8]
 8000ff2:	4b50      	ldr	r3, [pc, #320]	@ (8001134 <HAL_LTDC_MspInit+0x244>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff6:	4a4f      	ldr	r2, [pc, #316]	@ (8001134 <HAL_LTDC_MspInit+0x244>)
 8000ff8:	f043 0308 	orr.w	r3, r3, #8
 8000ffc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ffe:	4b4d      	ldr	r3, [pc, #308]	@ (8001134 <HAL_LTDC_MspInit+0x244>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001002:	f003 0308 	and.w	r3, r3, #8
 8001006:	60bb      	str	r3, [r7, #8]
 8001008:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 800100a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800100e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001010:	2302      	movs	r3, #2
 8001012:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001014:	2300      	movs	r3, #0
 8001016:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001018:	2300      	movs	r3, #0
 800101a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800101c:	230e      	movs	r3, #14
 800101e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001020:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001024:	4619      	mov	r1, r3
 8001026:	4844      	ldr	r0, [pc, #272]	@ (8001138 <HAL_LTDC_MspInit+0x248>)
 8001028:	f000 fe62 	bl	8001cf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 800102c:	f641 0358 	movw	r3, #6232	@ 0x1858
 8001030:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001032:	2302      	movs	r3, #2
 8001034:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001036:	2300      	movs	r3, #0
 8001038:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103a:	2300      	movs	r3, #0
 800103c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800103e:	230e      	movs	r3, #14
 8001040:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001042:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001046:	4619      	mov	r1, r3
 8001048:	483c      	ldr	r0, [pc, #240]	@ (800113c <HAL_LTDC_MspInit+0x24c>)
 800104a:	f000 fe51 	bl	8001cf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 800104e:	2303      	movs	r3, #3
 8001050:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001052:	2302      	movs	r3, #2
 8001054:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001056:	2300      	movs	r3, #0
 8001058:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105a:	2300      	movs	r3, #0
 800105c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800105e:	2309      	movs	r3, #9
 8001060:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001062:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001066:	4619      	mov	r1, r3
 8001068:	4835      	ldr	r0, [pc, #212]	@ (8001140 <HAL_LTDC_MspInit+0x250>)
 800106a:	f000 fe41 	bl	8001cf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 800106e:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001072:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001074:	2302      	movs	r3, #2
 8001076:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001078:	2300      	movs	r3, #0
 800107a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107c:	2300      	movs	r3, #0
 800107e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001080:	230e      	movs	r3, #14
 8001082:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001084:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001088:	4619      	mov	r1, r3
 800108a:	482d      	ldr	r0, [pc, #180]	@ (8001140 <HAL_LTDC_MspInit+0x250>)
 800108c:	f000 fe30 	bl	8001cf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8001090:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8001094:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001096:	2302      	movs	r3, #2
 8001098:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109a:	2300      	movs	r3, #0
 800109c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109e:	2300      	movs	r3, #0
 80010a0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80010a2:	230e      	movs	r3, #14
 80010a4:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010a6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80010aa:	4619      	mov	r1, r3
 80010ac:	4825      	ldr	r0, [pc, #148]	@ (8001144 <HAL_LTDC_MspInit+0x254>)
 80010ae:	f000 fe1f 	bl	8001cf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 80010b2:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 80010b6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b8:	2302      	movs	r3, #2
 80010ba:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010bc:	2300      	movs	r3, #0
 80010be:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c0:	2300      	movs	r3, #0
 80010c2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80010c4:	230e      	movs	r3, #14
 80010c6:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010c8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80010cc:	4619      	mov	r1, r3
 80010ce:	481e      	ldr	r0, [pc, #120]	@ (8001148 <HAL_LTDC_MspInit+0x258>)
 80010d0:	f000 fe0e 	bl	8001cf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 80010d4:	2348      	movs	r3, #72	@ 0x48
 80010d6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d8:	2302      	movs	r3, #2
 80010da:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010dc:	2300      	movs	r3, #0
 80010de:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e0:	2300      	movs	r3, #0
 80010e2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80010e4:	230e      	movs	r3, #14
 80010e6:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010e8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80010ec:	4619      	mov	r1, r3
 80010ee:	4817      	ldr	r0, [pc, #92]	@ (800114c <HAL_LTDC_MspInit+0x25c>)
 80010f0:	f000 fdfe 	bl	8001cf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 80010f4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80010f8:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fa:	2302      	movs	r3, #2
 80010fc:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001102:	2300      	movs	r3, #0
 8001104:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001106:	2309      	movs	r3, #9
 8001108:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800110a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800110e:	4619      	mov	r1, r3
 8001110:	480c      	ldr	r0, [pc, #48]	@ (8001144 <HAL_LTDC_MspInit+0x254>)
 8001112:	f000 fded 	bl	8001cf0 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001116:	2200      	movs	r2, #0
 8001118:	2105      	movs	r1, #5
 800111a:	2058      	movs	r0, #88	@ 0x58
 800111c:	f000 fbb6 	bl	800188c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001120:	2058      	movs	r0, #88	@ 0x58
 8001122:	f000 fbcf 	bl	80018c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001126:	bf00      	nop
 8001128:	3768      	adds	r7, #104	@ 0x68
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	40016800 	.word	0x40016800
 8001134:	40023800 	.word	0x40023800
 8001138:	40021400 	.word	0x40021400
 800113c:	40020000 	.word	0x40020000
 8001140:	40020400 	.word	0x40020400
 8001144:	40021800 	.word	0x40021800
 8001148:	40020800 	.word	0x40020800
 800114c:	40020c00 	.word	0x40020c00

08001150 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b08a      	sub	sp, #40	@ 0x28
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001158:	f107 0314 	add.w	r3, r7, #20
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	609a      	str	r2, [r3, #8]
 8001164:	60da      	str	r2, [r3, #12]
 8001166:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a19      	ldr	r2, [pc, #100]	@ (80011d4 <HAL_SPI_MspInit+0x84>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d12c      	bne.n	80011cc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	613b      	str	r3, [r7, #16]
 8001176:	4b18      	ldr	r3, [pc, #96]	@ (80011d8 <HAL_SPI_MspInit+0x88>)
 8001178:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800117a:	4a17      	ldr	r2, [pc, #92]	@ (80011d8 <HAL_SPI_MspInit+0x88>)
 800117c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001180:	6453      	str	r3, [r2, #68]	@ 0x44
 8001182:	4b15      	ldr	r3, [pc, #84]	@ (80011d8 <HAL_SPI_MspInit+0x88>)
 8001184:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001186:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800118a:	613b      	str	r3, [r7, #16]
 800118c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	60fb      	str	r3, [r7, #12]
 8001192:	4b11      	ldr	r3, [pc, #68]	@ (80011d8 <HAL_SPI_MspInit+0x88>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001196:	4a10      	ldr	r2, [pc, #64]	@ (80011d8 <HAL_SPI_MspInit+0x88>)
 8001198:	f043 0320 	orr.w	r3, r3, #32
 800119c:	6313      	str	r3, [r2, #48]	@ 0x30
 800119e:	4b0e      	ldr	r3, [pc, #56]	@ (80011d8 <HAL_SPI_MspInit+0x88>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a2:	f003 0320 	and.w	r3, r3, #32
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 80011aa:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80011ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b0:	2302      	movs	r3, #2
 80011b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b4:	2300      	movs	r3, #0
 80011b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b8:	2300      	movs	r3, #0
 80011ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80011bc:	2305      	movs	r3, #5
 80011be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80011c0:	f107 0314 	add.w	r3, r7, #20
 80011c4:	4619      	mov	r1, r3
 80011c6:	4805      	ldr	r0, [pc, #20]	@ (80011dc <HAL_SPI_MspInit+0x8c>)
 80011c8:	f000 fd92 	bl	8001cf0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 80011cc:	bf00      	nop
 80011ce:	3728      	adds	r7, #40	@ 0x28
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	40015000 	.word	0x40015000
 80011d8:	40023800 	.word	0x40023800
 80011dc:	40021400 	.word	0x40021400

080011e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b085      	sub	sp, #20
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a0b      	ldr	r2, [pc, #44]	@ (800121c <HAL_TIM_Base_MspInit+0x3c>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d10d      	bne.n	800120e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011f2:	2300      	movs	r3, #0
 80011f4:	60fb      	str	r3, [r7, #12]
 80011f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001220 <HAL_TIM_Base_MspInit+0x40>)
 80011f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011fa:	4a09      	ldr	r2, [pc, #36]	@ (8001220 <HAL_TIM_Base_MspInit+0x40>)
 80011fc:	f043 0301 	orr.w	r3, r3, #1
 8001200:	6453      	str	r3, [r2, #68]	@ 0x44
 8001202:	4b07      	ldr	r3, [pc, #28]	@ (8001220 <HAL_TIM_Base_MspInit+0x40>)
 8001204:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001206:	f003 0301 	and.w	r3, r3, #1
 800120a:	60fb      	str	r3, [r7, #12]
 800120c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800120e:	bf00      	nop
 8001210:	3714      	adds	r7, #20
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	40010000 	.word	0x40010000
 8001220:	40023800 	.word	0x40023800

08001224 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b08a      	sub	sp, #40	@ 0x28
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800122c:	f107 0314 	add.w	r3, r7, #20
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	609a      	str	r2, [r3, #8]
 8001238:	60da      	str	r2, [r3, #12]
 800123a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a19      	ldr	r2, [pc, #100]	@ (80012a8 <HAL_UART_MspInit+0x84>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d12c      	bne.n	80012a0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001246:	2300      	movs	r3, #0
 8001248:	613b      	str	r3, [r7, #16]
 800124a:	4b18      	ldr	r3, [pc, #96]	@ (80012ac <HAL_UART_MspInit+0x88>)
 800124c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800124e:	4a17      	ldr	r2, [pc, #92]	@ (80012ac <HAL_UART_MspInit+0x88>)
 8001250:	f043 0310 	orr.w	r3, r3, #16
 8001254:	6453      	str	r3, [r2, #68]	@ 0x44
 8001256:	4b15      	ldr	r3, [pc, #84]	@ (80012ac <HAL_UART_MspInit+0x88>)
 8001258:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800125a:	f003 0310 	and.w	r3, r3, #16
 800125e:	613b      	str	r3, [r7, #16]
 8001260:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	60fb      	str	r3, [r7, #12]
 8001266:	4b11      	ldr	r3, [pc, #68]	@ (80012ac <HAL_UART_MspInit+0x88>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126a:	4a10      	ldr	r2, [pc, #64]	@ (80012ac <HAL_UART_MspInit+0x88>)
 800126c:	f043 0301 	orr.w	r3, r3, #1
 8001270:	6313      	str	r3, [r2, #48]	@ 0x30
 8001272:	4b0e      	ldr	r3, [pc, #56]	@ (80012ac <HAL_UART_MspInit+0x88>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001276:	f003 0301 	and.w	r3, r3, #1
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800127e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001282:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001284:	2302      	movs	r3, #2
 8001286:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001288:	2300      	movs	r3, #0
 800128a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800128c:	2303      	movs	r3, #3
 800128e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001290:	2307      	movs	r3, #7
 8001292:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001294:	f107 0314 	add.w	r3, r7, #20
 8001298:	4619      	mov	r1, r3
 800129a:	4805      	ldr	r0, [pc, #20]	@ (80012b0 <HAL_UART_MspInit+0x8c>)
 800129c:	f000 fd28 	bl	8001cf0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80012a0:	bf00      	nop
 80012a2:	3728      	adds	r7, #40	@ 0x28
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	40011000 	.word	0x40011000
 80012ac:	40023800 	.word	0x40023800
 80012b0:	40020000 	.word	0x40020000

080012b4 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b086      	sub	sp, #24
 80012b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80012ba:	1d3b      	adds	r3, r7, #4
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	605a      	str	r2, [r3, #4]
 80012c2:	609a      	str	r2, [r3, #8]
 80012c4:	60da      	str	r2, [r3, #12]
 80012c6:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80012c8:	4b3b      	ldr	r3, [pc, #236]	@ (80013b8 <HAL_FMC_MspInit+0x104>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d16f      	bne.n	80013b0 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 80012d0:	4b39      	ldr	r3, [pc, #228]	@ (80013b8 <HAL_FMC_MspInit+0x104>)
 80012d2:	2201      	movs	r2, #1
 80012d4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	603b      	str	r3, [r7, #0]
 80012da:	4b38      	ldr	r3, [pc, #224]	@ (80013bc <HAL_FMC_MspInit+0x108>)
 80012dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012de:	4a37      	ldr	r2, [pc, #220]	@ (80013bc <HAL_FMC_MspInit+0x108>)
 80012e0:	f043 0301 	orr.w	r3, r3, #1
 80012e4:	6393      	str	r3, [r2, #56]	@ 0x38
 80012e6:	4b35      	ldr	r3, [pc, #212]	@ (80013bc <HAL_FMC_MspInit+0x108>)
 80012e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012ea:	f003 0301 	and.w	r3, r3, #1
 80012ee:	603b      	str	r3, [r7, #0]
 80012f0:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80012f2:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80012f6:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f8:	2302      	movs	r3, #2
 80012fa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fc:	2300      	movs	r3, #0
 80012fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001300:	2303      	movs	r3, #3
 8001302:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001304:	230c      	movs	r3, #12
 8001306:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001308:	1d3b      	adds	r3, r7, #4
 800130a:	4619      	mov	r1, r3
 800130c:	482c      	ldr	r0, [pc, #176]	@ (80013c0 <HAL_FMC_MspInit+0x10c>)
 800130e:	f000 fcef 	bl	8001cf0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 8001312:	2301      	movs	r3, #1
 8001314:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001316:	2302      	movs	r3, #2
 8001318:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131a:	2300      	movs	r3, #0
 800131c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800131e:	2303      	movs	r3, #3
 8001320:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001322:	230c      	movs	r3, #12
 8001324:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8001326:	1d3b      	adds	r3, r7, #4
 8001328:	4619      	mov	r1, r3
 800132a:	4826      	ldr	r0, [pc, #152]	@ (80013c4 <HAL_FMC_MspInit+0x110>)
 800132c:	f000 fce0 	bl	8001cf0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8001330:	f248 1333 	movw	r3, #33075	@ 0x8133
 8001334:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001336:	2302      	movs	r3, #2
 8001338:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133a:	2300      	movs	r3, #0
 800133c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800133e:	2303      	movs	r3, #3
 8001340:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001342:	230c      	movs	r3, #12
 8001344:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001346:	1d3b      	adds	r3, r7, #4
 8001348:	4619      	mov	r1, r3
 800134a:	481f      	ldr	r0, [pc, #124]	@ (80013c8 <HAL_FMC_MspInit+0x114>)
 800134c:	f000 fcd0 	bl	8001cf0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8001350:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8001354:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001356:	2302      	movs	r3, #2
 8001358:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135a:	2300      	movs	r3, #0
 800135c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800135e:	2303      	movs	r3, #3
 8001360:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001362:	230c      	movs	r3, #12
 8001364:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001366:	1d3b      	adds	r3, r7, #4
 8001368:	4619      	mov	r1, r3
 800136a:	4818      	ldr	r0, [pc, #96]	@ (80013cc <HAL_FMC_MspInit+0x118>)
 800136c:	f000 fcc0 	bl	8001cf0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8001370:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8001374:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001376:	2302      	movs	r3, #2
 8001378:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137a:	2300      	movs	r3, #0
 800137c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800137e:	2303      	movs	r3, #3
 8001380:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001382:	230c      	movs	r3, #12
 8001384:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001386:	1d3b      	adds	r3, r7, #4
 8001388:	4619      	mov	r1, r3
 800138a:	4811      	ldr	r0, [pc, #68]	@ (80013d0 <HAL_FMC_MspInit+0x11c>)
 800138c:	f000 fcb0 	bl	8001cf0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8001390:	2360      	movs	r3, #96	@ 0x60
 8001392:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001394:	2302      	movs	r3, #2
 8001396:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001398:	2300      	movs	r3, #0
 800139a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800139c:	2303      	movs	r3, #3
 800139e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80013a0:	230c      	movs	r3, #12
 80013a2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013a4:	1d3b      	adds	r3, r7, #4
 80013a6:	4619      	mov	r1, r3
 80013a8:	480a      	ldr	r0, [pc, #40]	@ (80013d4 <HAL_FMC_MspInit+0x120>)
 80013aa:	f000 fca1 	bl	8001cf0 <HAL_GPIO_Init>
 80013ae:	e000      	b.n	80013b2 <HAL_FMC_MspInit+0xfe>
    return;
 80013b0:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80013b2:	3718      	adds	r7, #24
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	20000308 	.word	0x20000308
 80013bc:	40023800 	.word	0x40023800
 80013c0:	40021400 	.word	0x40021400
 80013c4:	40020800 	.word	0x40020800
 80013c8:	40021800 	.word	0x40021800
 80013cc:	40021000 	.word	0x40021000
 80013d0:	40020c00 	.word	0x40020c00
 80013d4:	40020400 	.word	0x40020400

080013d8 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80013e0:	f7ff ff68 	bl	80012b4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80013e4:	bf00      	nop
 80013e6:	3708      	adds	r7, #8
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}

080013ec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b08e      	sub	sp, #56	@ 0x38
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80013f4:	2300      	movs	r3, #0
 80013f6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80013f8:	2300      	movs	r3, #0
 80013fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80013fc:	2300      	movs	r3, #0
 80013fe:	60fb      	str	r3, [r7, #12]
 8001400:	4b33      	ldr	r3, [pc, #204]	@ (80014d0 <HAL_InitTick+0xe4>)
 8001402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001404:	4a32      	ldr	r2, [pc, #200]	@ (80014d0 <HAL_InitTick+0xe4>)
 8001406:	f043 0310 	orr.w	r3, r3, #16
 800140a:	6413      	str	r3, [r2, #64]	@ 0x40
 800140c:	4b30      	ldr	r3, [pc, #192]	@ (80014d0 <HAL_InitTick+0xe4>)
 800140e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001410:	f003 0310 	and.w	r3, r3, #16
 8001414:	60fb      	str	r3, [r7, #12]
 8001416:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001418:	f107 0210 	add.w	r2, r7, #16
 800141c:	f107 0314 	add.w	r3, r7, #20
 8001420:	4611      	mov	r1, r2
 8001422:	4618      	mov	r0, r3
 8001424:	f004 f91e 	bl	8005664 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001428:	6a3b      	ldr	r3, [r7, #32]
 800142a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800142c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800142e:	2b00      	cmp	r3, #0
 8001430:	d103      	bne.n	800143a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001432:	f004 f8ef 	bl	8005614 <HAL_RCC_GetPCLK1Freq>
 8001436:	6378      	str	r0, [r7, #52]	@ 0x34
 8001438:	e004      	b.n	8001444 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800143a:	f004 f8eb 	bl	8005614 <HAL_RCC_GetPCLK1Freq>
 800143e:	4603      	mov	r3, r0
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001444:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001446:	4a23      	ldr	r2, [pc, #140]	@ (80014d4 <HAL_InitTick+0xe8>)
 8001448:	fba2 2303 	umull	r2, r3, r2, r3
 800144c:	0c9b      	lsrs	r3, r3, #18
 800144e:	3b01      	subs	r3, #1
 8001450:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001452:	4b21      	ldr	r3, [pc, #132]	@ (80014d8 <HAL_InitTick+0xec>)
 8001454:	4a21      	ldr	r2, [pc, #132]	@ (80014dc <HAL_InitTick+0xf0>)
 8001456:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001458:	4b1f      	ldr	r3, [pc, #124]	@ (80014d8 <HAL_InitTick+0xec>)
 800145a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800145e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001460:	4a1d      	ldr	r2, [pc, #116]	@ (80014d8 <HAL_InitTick+0xec>)
 8001462:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001464:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001466:	4b1c      	ldr	r3, [pc, #112]	@ (80014d8 <HAL_InitTick+0xec>)
 8001468:	2200      	movs	r2, #0
 800146a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800146c:	4b1a      	ldr	r3, [pc, #104]	@ (80014d8 <HAL_InitTick+0xec>)
 800146e:	2200      	movs	r2, #0
 8001470:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001472:	4b19      	ldr	r3, [pc, #100]	@ (80014d8 <HAL_InitTick+0xec>)
 8001474:	2200      	movs	r2, #0
 8001476:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001478:	4817      	ldr	r0, [pc, #92]	@ (80014d8 <HAL_InitTick+0xec>)
 800147a:	f004 fba2 	bl	8005bc2 <HAL_TIM_Base_Init>
 800147e:	4603      	mov	r3, r0
 8001480:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001484:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001488:	2b00      	cmp	r3, #0
 800148a:	d11b      	bne.n	80014c4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800148c:	4812      	ldr	r0, [pc, #72]	@ (80014d8 <HAL_InitTick+0xec>)
 800148e:	f004 fbe7 	bl	8005c60 <HAL_TIM_Base_Start_IT>
 8001492:	4603      	mov	r3, r0
 8001494:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001498:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800149c:	2b00      	cmp	r3, #0
 800149e:	d111      	bne.n	80014c4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80014a0:	2036      	movs	r0, #54	@ 0x36
 80014a2:	f000 fa0f 	bl	80018c4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2b0f      	cmp	r3, #15
 80014aa:	d808      	bhi.n	80014be <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80014ac:	2200      	movs	r2, #0
 80014ae:	6879      	ldr	r1, [r7, #4]
 80014b0:	2036      	movs	r0, #54	@ 0x36
 80014b2:	f000 f9eb 	bl	800188c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014b6:	4a0a      	ldr	r2, [pc, #40]	@ (80014e0 <HAL_InitTick+0xf4>)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6013      	str	r3, [r2, #0]
 80014bc:	e002      	b.n	80014c4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80014c4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3738      	adds	r7, #56	@ 0x38
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	40023800 	.word	0x40023800
 80014d4:	431bde83 	.word	0x431bde83
 80014d8:	2000030c 	.word	0x2000030c
 80014dc:	40001000 	.word	0x40001000
 80014e0:	20000004 	.word	0x20000004

080014e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014e8:	bf00      	nop
 80014ea:	e7fd      	b.n	80014e8 <NMI_Handler+0x4>

080014ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014f0:	bf00      	nop
 80014f2:	e7fd      	b.n	80014f0 <HardFault_Handler+0x4>

080014f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014f8:	bf00      	nop
 80014fa:	e7fd      	b.n	80014f8 <MemManage_Handler+0x4>

080014fc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001500:	bf00      	nop
 8001502:	e7fd      	b.n	8001500 <BusFault_Handler+0x4>

08001504 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001508:	bf00      	nop
 800150a:	e7fd      	b.n	8001508 <UsageFault_Handler+0x4>

0800150c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001510:	bf00      	nop
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
	...

0800151c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001520:	4802      	ldr	r0, [pc, #8]	@ (800152c <TIM6_DAC_IRQHandler+0x10>)
 8001522:	f004 fc0d 	bl	8005d40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001526:	bf00      	nop
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	2000030c 	.word	0x2000030c

08001530 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8001534:	4802      	ldr	r0, [pc, #8]	@ (8001540 <OTG_HS_IRQHandler+0x10>)
 8001536:	f001 f89b 	bl	8002670 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800153a:	bf00      	nop
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	20009558 	.word	0x20009558

08001544 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001548:	4802      	ldr	r0, [pc, #8]	@ (8001554 <LTDC_IRQHandler+0x10>)
 800154a:	f003 f95b 	bl	8004804 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800154e:	bf00      	nop
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	20000138 	.word	0x20000138

08001558 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800155c:	4802      	ldr	r0, [pc, #8]	@ (8001568 <DMA2D_IRQHandler+0x10>)
 800155e:	f000 fa24 	bl	80019aa <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001562:	bf00      	nop
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	200000a4 	.word	0x200000a4

0800156c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b086      	sub	sp, #24
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001574:	4a14      	ldr	r2, [pc, #80]	@ (80015c8 <_sbrk+0x5c>)
 8001576:	4b15      	ldr	r3, [pc, #84]	@ (80015cc <_sbrk+0x60>)
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001580:	4b13      	ldr	r3, [pc, #76]	@ (80015d0 <_sbrk+0x64>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d102      	bne.n	800158e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001588:	4b11      	ldr	r3, [pc, #68]	@ (80015d0 <_sbrk+0x64>)
 800158a:	4a12      	ldr	r2, [pc, #72]	@ (80015d4 <_sbrk+0x68>)
 800158c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800158e:	4b10      	ldr	r3, [pc, #64]	@ (80015d0 <_sbrk+0x64>)
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4413      	add	r3, r2
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	429a      	cmp	r2, r3
 800159a:	d207      	bcs.n	80015ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800159c:	f00c fba0 	bl	800dce0 <__errno>
 80015a0:	4603      	mov	r3, r0
 80015a2:	220c      	movs	r2, #12
 80015a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80015aa:	e009      	b.n	80015c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015ac:	4b08      	ldr	r3, [pc, #32]	@ (80015d0 <_sbrk+0x64>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015b2:	4b07      	ldr	r3, [pc, #28]	@ (80015d0 <_sbrk+0x64>)
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4413      	add	r3, r2
 80015ba:	4a05      	ldr	r2, [pc, #20]	@ (80015d0 <_sbrk+0x64>)
 80015bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015be:	68fb      	ldr	r3, [r7, #12]
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3718      	adds	r7, #24
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	20030000 	.word	0x20030000
 80015cc:	00000400 	.word	0x00000400
 80015d0:	20000354 	.word	0x20000354
 80015d4:	20009a80 	.word	0x20009a80

080015d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015dc:	4b06      	ldr	r3, [pc, #24]	@ (80015f8 <SystemInit+0x20>)
 80015de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015e2:	4a05      	ldr	r2, [pc, #20]	@ (80015f8 <SystemInit+0x20>)
 80015e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015ec:	bf00      	nop
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	e000ed00 	.word	0xe000ed00

080015fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80015fc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001634 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001600:	f7ff ffea 	bl	80015d8 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001604:	480c      	ldr	r0, [pc, #48]	@ (8001638 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001606:	490d      	ldr	r1, [pc, #52]	@ (800163c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001608:	4a0d      	ldr	r2, [pc, #52]	@ (8001640 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800160a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800160c:	e002      	b.n	8001614 <LoopCopyDataInit>

0800160e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800160e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001610:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001612:	3304      	adds	r3, #4

08001614 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001614:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001616:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001618:	d3f9      	bcc.n	800160e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800161a:	4a0a      	ldr	r2, [pc, #40]	@ (8001644 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800161c:	4c0a      	ldr	r4, [pc, #40]	@ (8001648 <LoopFillZerobss+0x22>)
  movs r3, #0
 800161e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001620:	e001      	b.n	8001626 <LoopFillZerobss>

08001622 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001622:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001624:	3204      	adds	r2, #4

08001626 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001626:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001628:	d3fb      	bcc.n	8001622 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800162a:	f00c fb5f 	bl	800dcec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800162e:	f7fe ff71 	bl	8000514 <main>
  bx  lr    
 8001632:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001634:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001638:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800163c:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001640:	0800ded4 	.word	0x0800ded4
  ldr r2, =_sbss
 8001644:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001648:	20009a80 	.word	0x20009a80

0800164c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800164c:	e7fe      	b.n	800164c <ADC_IRQHandler>
	...

08001650 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001654:	4b0e      	ldr	r3, [pc, #56]	@ (8001690 <HAL_Init+0x40>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a0d      	ldr	r2, [pc, #52]	@ (8001690 <HAL_Init+0x40>)
 800165a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800165e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001660:	4b0b      	ldr	r3, [pc, #44]	@ (8001690 <HAL_Init+0x40>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a0a      	ldr	r2, [pc, #40]	@ (8001690 <HAL_Init+0x40>)
 8001666:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800166a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800166c:	4b08      	ldr	r3, [pc, #32]	@ (8001690 <HAL_Init+0x40>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a07      	ldr	r2, [pc, #28]	@ (8001690 <HAL_Init+0x40>)
 8001672:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001676:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001678:	2003      	movs	r0, #3
 800167a:	f000 f8fc 	bl	8001876 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800167e:	200f      	movs	r0, #15
 8001680:	f7ff feb4 	bl	80013ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001684:	f7ff fb54 	bl	8000d30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001688:	2300      	movs	r3, #0
}
 800168a:	4618      	mov	r0, r3
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	40023c00 	.word	0x40023c00

08001694 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001698:	4b06      	ldr	r3, [pc, #24]	@ (80016b4 <HAL_IncTick+0x20>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	461a      	mov	r2, r3
 800169e:	4b06      	ldr	r3, [pc, #24]	@ (80016b8 <HAL_IncTick+0x24>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4413      	add	r3, r2
 80016a4:	4a04      	ldr	r2, [pc, #16]	@ (80016b8 <HAL_IncTick+0x24>)
 80016a6:	6013      	str	r3, [r2, #0]
}
 80016a8:	bf00      	nop
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	20000008 	.word	0x20000008
 80016b8:	20000358 	.word	0x20000358

080016bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  return uwTick;
 80016c0:	4b03      	ldr	r3, [pc, #12]	@ (80016d0 <HAL_GetTick+0x14>)
 80016c2:	681b      	ldr	r3, [r3, #0]
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	20000358 	.word	0x20000358

080016d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016dc:	f7ff ffee 	bl	80016bc <HAL_GetTick>
 80016e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80016ec:	d005      	beq.n	80016fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001718 <HAL_Delay+0x44>)
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	461a      	mov	r2, r3
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	4413      	add	r3, r2
 80016f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016fa:	bf00      	nop
 80016fc:	f7ff ffde 	bl	80016bc <HAL_GetTick>
 8001700:	4602      	mov	r2, r0
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	68fa      	ldr	r2, [r7, #12]
 8001708:	429a      	cmp	r2, r3
 800170a:	d8f7      	bhi.n	80016fc <HAL_Delay+0x28>
  {
  }
}
 800170c:	bf00      	nop
 800170e:	bf00      	nop
 8001710:	3710      	adds	r7, #16
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	20000008 	.word	0x20000008

0800171c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800171c:	b480      	push	{r7}
 800171e:	b085      	sub	sp, #20
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	f003 0307 	and.w	r3, r3, #7
 800172a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800172c:	4b0c      	ldr	r3, [pc, #48]	@ (8001760 <__NVIC_SetPriorityGrouping+0x44>)
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001732:	68ba      	ldr	r2, [r7, #8]
 8001734:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001738:	4013      	ands	r3, r2
 800173a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001744:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001748:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800174c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800174e:	4a04      	ldr	r2, [pc, #16]	@ (8001760 <__NVIC_SetPriorityGrouping+0x44>)
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	60d3      	str	r3, [r2, #12]
}
 8001754:	bf00      	nop
 8001756:	3714      	adds	r7, #20
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr
 8001760:	e000ed00 	.word	0xe000ed00

08001764 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001768:	4b04      	ldr	r3, [pc, #16]	@ (800177c <__NVIC_GetPriorityGrouping+0x18>)
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	0a1b      	lsrs	r3, r3, #8
 800176e:	f003 0307 	and.w	r3, r3, #7
}
 8001772:	4618      	mov	r0, r3
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr
 800177c:	e000ed00 	.word	0xe000ed00

08001780 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	4603      	mov	r3, r0
 8001788:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800178a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178e:	2b00      	cmp	r3, #0
 8001790:	db0b      	blt.n	80017aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001792:	79fb      	ldrb	r3, [r7, #7]
 8001794:	f003 021f 	and.w	r2, r3, #31
 8001798:	4907      	ldr	r1, [pc, #28]	@ (80017b8 <__NVIC_EnableIRQ+0x38>)
 800179a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800179e:	095b      	lsrs	r3, r3, #5
 80017a0:	2001      	movs	r0, #1
 80017a2:	fa00 f202 	lsl.w	r2, r0, r2
 80017a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80017aa:	bf00      	nop
 80017ac:	370c      	adds	r7, #12
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	e000e100 	.word	0xe000e100

080017bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	4603      	mov	r3, r0
 80017c4:	6039      	str	r1, [r7, #0]
 80017c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	db0a      	blt.n	80017e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	b2da      	uxtb	r2, r3
 80017d4:	490c      	ldr	r1, [pc, #48]	@ (8001808 <__NVIC_SetPriority+0x4c>)
 80017d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017da:	0112      	lsls	r2, r2, #4
 80017dc:	b2d2      	uxtb	r2, r2
 80017de:	440b      	add	r3, r1
 80017e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017e4:	e00a      	b.n	80017fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	b2da      	uxtb	r2, r3
 80017ea:	4908      	ldr	r1, [pc, #32]	@ (800180c <__NVIC_SetPriority+0x50>)
 80017ec:	79fb      	ldrb	r3, [r7, #7]
 80017ee:	f003 030f 	and.w	r3, r3, #15
 80017f2:	3b04      	subs	r3, #4
 80017f4:	0112      	lsls	r2, r2, #4
 80017f6:	b2d2      	uxtb	r2, r2
 80017f8:	440b      	add	r3, r1
 80017fa:	761a      	strb	r2, [r3, #24]
}
 80017fc:	bf00      	nop
 80017fe:	370c      	adds	r7, #12
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr
 8001808:	e000e100 	.word	0xe000e100
 800180c:	e000ed00 	.word	0xe000ed00

08001810 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001810:	b480      	push	{r7}
 8001812:	b089      	sub	sp, #36	@ 0x24
 8001814:	af00      	add	r7, sp, #0
 8001816:	60f8      	str	r0, [r7, #12]
 8001818:	60b9      	str	r1, [r7, #8]
 800181a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	f003 0307 	and.w	r3, r3, #7
 8001822:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	f1c3 0307 	rsb	r3, r3, #7
 800182a:	2b04      	cmp	r3, #4
 800182c:	bf28      	it	cs
 800182e:	2304      	movcs	r3, #4
 8001830:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	3304      	adds	r3, #4
 8001836:	2b06      	cmp	r3, #6
 8001838:	d902      	bls.n	8001840 <NVIC_EncodePriority+0x30>
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	3b03      	subs	r3, #3
 800183e:	e000      	b.n	8001842 <NVIC_EncodePriority+0x32>
 8001840:	2300      	movs	r3, #0
 8001842:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001844:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001848:	69bb      	ldr	r3, [r7, #24]
 800184a:	fa02 f303 	lsl.w	r3, r2, r3
 800184e:	43da      	mvns	r2, r3
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	401a      	ands	r2, r3
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001858:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	fa01 f303 	lsl.w	r3, r1, r3
 8001862:	43d9      	mvns	r1, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001868:	4313      	orrs	r3, r2
         );
}
 800186a:	4618      	mov	r0, r3
 800186c:	3724      	adds	r7, #36	@ 0x24
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr

08001876 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001876:	b580      	push	{r7, lr}
 8001878:	b082      	sub	sp, #8
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f7ff ff4c 	bl	800171c <__NVIC_SetPriorityGrouping>
}
 8001884:	bf00      	nop
 8001886:	3708      	adds	r7, #8
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}

0800188c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800188c:	b580      	push	{r7, lr}
 800188e:	b086      	sub	sp, #24
 8001890:	af00      	add	r7, sp, #0
 8001892:	4603      	mov	r3, r0
 8001894:	60b9      	str	r1, [r7, #8]
 8001896:	607a      	str	r2, [r7, #4]
 8001898:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800189a:	2300      	movs	r3, #0
 800189c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800189e:	f7ff ff61 	bl	8001764 <__NVIC_GetPriorityGrouping>
 80018a2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018a4:	687a      	ldr	r2, [r7, #4]
 80018a6:	68b9      	ldr	r1, [r7, #8]
 80018a8:	6978      	ldr	r0, [r7, #20]
 80018aa:	f7ff ffb1 	bl	8001810 <NVIC_EncodePriority>
 80018ae:	4602      	mov	r2, r0
 80018b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018b4:	4611      	mov	r1, r2
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7ff ff80 	bl	80017bc <__NVIC_SetPriority>
}
 80018bc:	bf00      	nop
 80018be:	3718      	adds	r7, #24
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	4603      	mov	r3, r0
 80018cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7ff ff54 	bl	8001780 <__NVIC_EnableIRQ>
}
 80018d8:	bf00      	nop
 80018da:	3708      	adds	r7, #8
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}

080018e0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d101      	bne.n	80018f2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e00e      	b.n	8001910 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	795b      	ldrb	r3, [r3, #5]
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d105      	bne.n	8001908 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2200      	movs	r2, #0
 8001900:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f7ff fa40 	bl	8000d88 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2201      	movs	r2, #1
 800190c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800190e:	2300      	movs	r3, #0
}
 8001910:	4618      	mov	r0, r3
 8001912:	3708      	adds	r7, #8
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}

08001918 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d101      	bne.n	800192a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e03b      	b.n	80019a2 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001930:	b2db      	uxtb	r3, r3
 8001932:	2b00      	cmp	r3, #0
 8001934:	d106      	bne.n	8001944 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2200      	movs	r2, #0
 800193a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f7ff fa44 	bl	8000dcc <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2202      	movs	r2, #2
 8001948:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	685a      	ldr	r2, [r3, #4]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	430a      	orrs	r2, r1
 8001960:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001968:	f023 0107 	bic.w	r1, r3, #7
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	689a      	ldr	r2, [r3, #8]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	430a      	orrs	r2, r1
 8001976:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800197e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001982:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	68d1      	ldr	r1, [r2, #12]
 800198a:	687a      	ldr	r2, [r7, #4]
 800198c:	6812      	ldr	r2, [r2, #0]
 800198e:	430b      	orrs	r3, r1
 8001990:	6413      	str	r3, [r2, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2200      	movs	r2, #0
 8001996:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2201      	movs	r2, #1
 800199c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 80019a0:	2300      	movs	r3, #0
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}

080019aa <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80019aa:	b580      	push	{r7, lr}
 80019ac:	b084      	sub	sp, #16
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	f003 0301 	and.w	r3, r3, #1
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d026      	beq.n	8001a1a <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d021      	beq.n	8001a1a <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80019e4:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019ea:	f043 0201 	orr.w	r2, r3, #1
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	2201      	movs	r2, #1
 80019f8:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2204      	movs	r2, #4
 80019fe:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2200      	movs	r2, #0
 8001a06:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	695b      	ldr	r3, [r3, #20]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d003      	beq.n	8001a1a <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	695b      	ldr	r3, [r3, #20]
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	f003 0320 	and.w	r3, r3, #32
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d026      	beq.n	8001a72 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d021      	beq.n	8001a72 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001a3c:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	2220      	movs	r2, #32
 8001a44:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a4a:	f043 0202 	orr.w	r2, r3, #2
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2204      	movs	r2, #4
 8001a56:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	695b      	ldr	r3, [r3, #20]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d003      	beq.n	8001a72 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	695b      	ldr	r3, [r3, #20]
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	f003 0308 	and.w	r3, r3, #8
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d026      	beq.n	8001aca <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d021      	beq.n	8001aca <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001a94:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	2208      	movs	r2, #8
 8001a9c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001aa2:	f043 0204 	orr.w	r2, r3, #4
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2204      	movs	r2, #4
 8001aae:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	695b      	ldr	r3, [r3, #20]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d003      	beq.n	8001aca <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	695b      	ldr	r3, [r3, #20]
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	f003 0304 	and.w	r3, r3, #4
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d013      	beq.n	8001afc <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d00e      	beq.n	8001afc <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001aec:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	2204      	movs	r2, #4
 8001af4:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f000 f853 	bl	8001ba2 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	f003 0302 	and.w	r3, r3, #2
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d024      	beq.n	8001b50 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d01f      	beq.n	8001b50 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001b1e:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	2202      	movs	r2, #2
 8001b26:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2201      	movs	r2, #1
 8001b34:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	691b      	ldr	r3, [r3, #16]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d003      	beq.n	8001b50 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	691b      	ldr	r3, [r3, #16]
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	f003 0310 	and.w	r3, r3, #16
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d01f      	beq.n	8001b9a <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d01a      	beq.n	8001b9a <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001b72:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	2210      	movs	r2, #16
 8001b7a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2201      	movs	r2, #1
 8001b88:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f000 f80e 	bl	8001bb6 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8001b9a:	bf00      	nop
 8001b9c:	3710      	adds	r7, #16
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	b083      	sub	sp, #12
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8001baa:	bf00      	nop
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr

08001bb6 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	b083      	sub	sp, #12
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8001bbe:	bf00      	nop
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
	...

08001bcc <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b087      	sub	sp, #28
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d101      	bne.n	8001bec <HAL_DMA2D_ConfigLayer+0x20>
 8001be8:	2302      	movs	r3, #2
 8001bea:	e079      	b.n	8001ce0 <HAL_DMA2D_ConfigLayer+0x114>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2202      	movs	r2, #2
 8001bf8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	011b      	lsls	r3, r3, #4
 8001c00:	3318      	adds	r3, #24
 8001c02:	687a      	ldr	r2, [r7, #4]
 8001c04:	4413      	add	r3, r2
 8001c06:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	685a      	ldr	r2, [r3, #4]
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	041b      	lsls	r3, r3, #16
 8001c12:	4313      	orrs	r3, r2
 8001c14:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8001c16:	4b35      	ldr	r3, [pc, #212]	@ (8001cec <HAL_DMA2D_ConfigLayer+0x120>)
 8001c18:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	2b0a      	cmp	r3, #10
 8001c20:	d003      	beq.n	8001c2a <HAL_DMA2D_ConfigLayer+0x5e>
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	2b09      	cmp	r3, #9
 8001c28:	d107      	bne.n	8001c3a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	68db      	ldr	r3, [r3, #12]
 8001c2e:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8001c32:	697a      	ldr	r2, [r7, #20]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	617b      	str	r3, [r7, #20]
 8001c38:	e005      	b.n	8001c46 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	68db      	ldr	r3, [r3, #12]
 8001c3e:	061b      	lsls	r3, r3, #24
 8001c40:	697a      	ldr	r2, [r7, #20]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d120      	bne.n	8001c8e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	43db      	mvns	r3, r3
 8001c56:	ea02 0103 	and.w	r1, r2, r3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	697a      	ldr	r2, [r7, #20]
 8001c60:	430a      	orrs	r2, r1
 8001c62:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	693a      	ldr	r2, [r7, #16]
 8001c6a:	6812      	ldr	r2, [r2, #0]
 8001c6c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	2b0a      	cmp	r3, #10
 8001c74:	d003      	beq.n	8001c7e <HAL_DMA2D_ConfigLayer+0xb2>
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	2b09      	cmp	r3, #9
 8001c7c:	d127      	bne.n	8001cce <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	68da      	ldr	r2, [r3, #12]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8001c8a:	629a      	str	r2, [r3, #40]	@ 0x28
 8001c8c:	e01f      	b.n	8001cce <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	69da      	ldr	r2, [r3, #28]
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	43db      	mvns	r3, r3
 8001c98:	ea02 0103 	and.w	r1, r2, r3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	697a      	ldr	r2, [r7, #20]
 8001ca2:	430a      	orrs	r2, r1
 8001ca4:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	693a      	ldr	r2, [r7, #16]
 8001cac:	6812      	ldr	r2, [r2, #0]
 8001cae:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	2b0a      	cmp	r3, #10
 8001cb6:	d003      	beq.n	8001cc0 <HAL_DMA2D_ConfigLayer+0xf4>
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	2b09      	cmp	r3, #9
 8001cbe:	d106      	bne.n	8001cce <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	68da      	ldr	r2, [r3, #12]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8001ccc:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8001cde:	2300      	movs	r3, #0
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	371c      	adds	r7, #28
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr
 8001cec:	ff03000f 	.word	0xff03000f

08001cf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b089      	sub	sp, #36	@ 0x24
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d02:	2300      	movs	r3, #0
 8001d04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d06:	2300      	movs	r3, #0
 8001d08:	61fb      	str	r3, [r7, #28]
 8001d0a:	e177      	b.n	8001ffc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	fa02 f303 	lsl.w	r3, r2, r3
 8001d14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	697a      	ldr	r2, [r7, #20]
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d20:	693a      	ldr	r2, [r7, #16]
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	f040 8166 	bne.w	8001ff6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f003 0303 	and.w	r3, r3, #3
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d005      	beq.n	8001d42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d130      	bne.n	8001da4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	2203      	movs	r2, #3
 8001d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d52:	43db      	mvns	r3, r3
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	4013      	ands	r3, r2
 8001d58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	68da      	ldr	r2, [r3, #12]
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	fa02 f303 	lsl.w	r3, r2, r3
 8001d66:	69ba      	ldr	r2, [r7, #24]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	69ba      	ldr	r2, [r7, #24]
 8001d70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d78:	2201      	movs	r2, #1
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	43db      	mvns	r3, r3
 8001d82:	69ba      	ldr	r2, [r7, #24]
 8001d84:	4013      	ands	r3, r2
 8001d86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	091b      	lsrs	r3, r3, #4
 8001d8e:	f003 0201 	and.w	r2, r3, #1
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f003 0303 	and.w	r3, r3, #3
 8001dac:	2b03      	cmp	r3, #3
 8001dae:	d017      	beq.n	8001de0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	005b      	lsls	r3, r3, #1
 8001dba:	2203      	movs	r2, #3
 8001dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc0:	43db      	mvns	r3, r3
 8001dc2:	69ba      	ldr	r2, [r7, #24]
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	689a      	ldr	r2, [r3, #8]
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd4:	69ba      	ldr	r2, [r7, #24]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f003 0303 	and.w	r3, r3, #3
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	d123      	bne.n	8001e34 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	08da      	lsrs	r2, r3, #3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	3208      	adds	r2, #8
 8001df4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001df8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	f003 0307 	and.w	r3, r3, #7
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	220f      	movs	r2, #15
 8001e04:	fa02 f303 	lsl.w	r3, r2, r3
 8001e08:	43db      	mvns	r3, r3
 8001e0a:	69ba      	ldr	r2, [r7, #24]
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	691a      	ldr	r2, [r3, #16]
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	f003 0307 	and.w	r3, r3, #7
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	08da      	lsrs	r2, r3, #3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	3208      	adds	r2, #8
 8001e2e:	69b9      	ldr	r1, [r7, #24]
 8001e30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	2203      	movs	r2, #3
 8001e40:	fa02 f303 	lsl.w	r3, r2, r3
 8001e44:	43db      	mvns	r3, r3
 8001e46:	69ba      	ldr	r2, [r7, #24]
 8001e48:	4013      	ands	r3, r2
 8001e4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f003 0203 	and.w	r2, r3, #3
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	005b      	lsls	r3, r3, #1
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	f000 80c0 	beq.w	8001ff6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e76:	2300      	movs	r3, #0
 8001e78:	60fb      	str	r3, [r7, #12]
 8001e7a:	4b66      	ldr	r3, [pc, #408]	@ (8002014 <HAL_GPIO_Init+0x324>)
 8001e7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e7e:	4a65      	ldr	r2, [pc, #404]	@ (8002014 <HAL_GPIO_Init+0x324>)
 8001e80:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e84:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e86:	4b63      	ldr	r3, [pc, #396]	@ (8002014 <HAL_GPIO_Init+0x324>)
 8001e88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e8e:	60fb      	str	r3, [r7, #12]
 8001e90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e92:	4a61      	ldr	r2, [pc, #388]	@ (8002018 <HAL_GPIO_Init+0x328>)
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	089b      	lsrs	r3, r3, #2
 8001e98:	3302      	adds	r3, #2
 8001e9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	f003 0303 	and.w	r3, r3, #3
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	220f      	movs	r2, #15
 8001eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001eae:	43db      	mvns	r3, r3
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a58      	ldr	r2, [pc, #352]	@ (800201c <HAL_GPIO_Init+0x32c>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d037      	beq.n	8001f2e <HAL_GPIO_Init+0x23e>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a57      	ldr	r2, [pc, #348]	@ (8002020 <HAL_GPIO_Init+0x330>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d031      	beq.n	8001f2a <HAL_GPIO_Init+0x23a>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a56      	ldr	r2, [pc, #344]	@ (8002024 <HAL_GPIO_Init+0x334>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d02b      	beq.n	8001f26 <HAL_GPIO_Init+0x236>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4a55      	ldr	r2, [pc, #340]	@ (8002028 <HAL_GPIO_Init+0x338>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d025      	beq.n	8001f22 <HAL_GPIO_Init+0x232>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a54      	ldr	r2, [pc, #336]	@ (800202c <HAL_GPIO_Init+0x33c>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d01f      	beq.n	8001f1e <HAL_GPIO_Init+0x22e>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a53      	ldr	r2, [pc, #332]	@ (8002030 <HAL_GPIO_Init+0x340>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d019      	beq.n	8001f1a <HAL_GPIO_Init+0x22a>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a52      	ldr	r2, [pc, #328]	@ (8002034 <HAL_GPIO_Init+0x344>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d013      	beq.n	8001f16 <HAL_GPIO_Init+0x226>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a51      	ldr	r2, [pc, #324]	@ (8002038 <HAL_GPIO_Init+0x348>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d00d      	beq.n	8001f12 <HAL_GPIO_Init+0x222>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a50      	ldr	r2, [pc, #320]	@ (800203c <HAL_GPIO_Init+0x34c>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d007      	beq.n	8001f0e <HAL_GPIO_Init+0x21e>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a4f      	ldr	r2, [pc, #316]	@ (8002040 <HAL_GPIO_Init+0x350>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d101      	bne.n	8001f0a <HAL_GPIO_Init+0x21a>
 8001f06:	2309      	movs	r3, #9
 8001f08:	e012      	b.n	8001f30 <HAL_GPIO_Init+0x240>
 8001f0a:	230a      	movs	r3, #10
 8001f0c:	e010      	b.n	8001f30 <HAL_GPIO_Init+0x240>
 8001f0e:	2308      	movs	r3, #8
 8001f10:	e00e      	b.n	8001f30 <HAL_GPIO_Init+0x240>
 8001f12:	2307      	movs	r3, #7
 8001f14:	e00c      	b.n	8001f30 <HAL_GPIO_Init+0x240>
 8001f16:	2306      	movs	r3, #6
 8001f18:	e00a      	b.n	8001f30 <HAL_GPIO_Init+0x240>
 8001f1a:	2305      	movs	r3, #5
 8001f1c:	e008      	b.n	8001f30 <HAL_GPIO_Init+0x240>
 8001f1e:	2304      	movs	r3, #4
 8001f20:	e006      	b.n	8001f30 <HAL_GPIO_Init+0x240>
 8001f22:	2303      	movs	r3, #3
 8001f24:	e004      	b.n	8001f30 <HAL_GPIO_Init+0x240>
 8001f26:	2302      	movs	r3, #2
 8001f28:	e002      	b.n	8001f30 <HAL_GPIO_Init+0x240>
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e000      	b.n	8001f30 <HAL_GPIO_Init+0x240>
 8001f2e:	2300      	movs	r3, #0
 8001f30:	69fa      	ldr	r2, [r7, #28]
 8001f32:	f002 0203 	and.w	r2, r2, #3
 8001f36:	0092      	lsls	r2, r2, #2
 8001f38:	4093      	lsls	r3, r2
 8001f3a:	69ba      	ldr	r2, [r7, #24]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f40:	4935      	ldr	r1, [pc, #212]	@ (8002018 <HAL_GPIO_Init+0x328>)
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	089b      	lsrs	r3, r3, #2
 8001f46:	3302      	adds	r3, #2
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f4e:	4b3d      	ldr	r3, [pc, #244]	@ (8002044 <HAL_GPIO_Init+0x354>)
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	43db      	mvns	r3, r3
 8001f58:	69ba      	ldr	r2, [r7, #24]
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d003      	beq.n	8001f72 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001f6a:	69ba      	ldr	r2, [r7, #24]
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f72:	4a34      	ldr	r2, [pc, #208]	@ (8002044 <HAL_GPIO_Init+0x354>)
 8001f74:	69bb      	ldr	r3, [r7, #24]
 8001f76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f78:	4b32      	ldr	r3, [pc, #200]	@ (8002044 <HAL_GPIO_Init+0x354>)
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	43db      	mvns	r3, r3
 8001f82:	69ba      	ldr	r2, [r7, #24]
 8001f84:	4013      	ands	r3, r2
 8001f86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d003      	beq.n	8001f9c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001f94:	69ba      	ldr	r2, [r7, #24]
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f9c:	4a29      	ldr	r2, [pc, #164]	@ (8002044 <HAL_GPIO_Init+0x354>)
 8001f9e:	69bb      	ldr	r3, [r7, #24]
 8001fa0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001fa2:	4b28      	ldr	r3, [pc, #160]	@ (8002044 <HAL_GPIO_Init+0x354>)
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	43db      	mvns	r3, r3
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	4013      	ands	r3, r2
 8001fb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d003      	beq.n	8001fc6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001fbe:	69ba      	ldr	r2, [r7, #24]
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fc6:	4a1f      	ldr	r2, [pc, #124]	@ (8002044 <HAL_GPIO_Init+0x354>)
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fcc:	4b1d      	ldr	r3, [pc, #116]	@ (8002044 <HAL_GPIO_Init+0x354>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	43db      	mvns	r3, r3
 8001fd6:	69ba      	ldr	r2, [r7, #24]
 8001fd8:	4013      	ands	r3, r2
 8001fda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d003      	beq.n	8001ff0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ff0:	4a14      	ldr	r2, [pc, #80]	@ (8002044 <HAL_GPIO_Init+0x354>)
 8001ff2:	69bb      	ldr	r3, [r7, #24]
 8001ff4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	61fb      	str	r3, [r7, #28]
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	2b0f      	cmp	r3, #15
 8002000:	f67f ae84 	bls.w	8001d0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002004:	bf00      	nop
 8002006:	bf00      	nop
 8002008:	3724      	adds	r7, #36	@ 0x24
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	40023800 	.word	0x40023800
 8002018:	40013800 	.word	0x40013800
 800201c:	40020000 	.word	0x40020000
 8002020:	40020400 	.word	0x40020400
 8002024:	40020800 	.word	0x40020800
 8002028:	40020c00 	.word	0x40020c00
 800202c:	40021000 	.word	0x40021000
 8002030:	40021400 	.word	0x40021400
 8002034:	40021800 	.word	0x40021800
 8002038:	40021c00 	.word	0x40021c00
 800203c:	40022000 	.word	0x40022000
 8002040:	40022400 	.word	0x40022400
 8002044:	40013c00 	.word	0x40013c00

08002048 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	460b      	mov	r3, r1
 8002052:	807b      	strh	r3, [r7, #2]
 8002054:	4613      	mov	r3, r2
 8002056:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002058:	787b      	ldrb	r3, [r7, #1]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d003      	beq.n	8002066 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800205e:	887a      	ldrh	r2, [r7, #2]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002064:	e003      	b.n	800206e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002066:	887b      	ldrh	r3, [r7, #2]
 8002068:	041a      	lsls	r2, r3, #16
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	619a      	str	r2, [r3, #24]
}
 800206e:	bf00      	nop
 8002070:	370c      	adds	r7, #12
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr

0800207a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800207a:	b480      	push	{r7}
 800207c:	b085      	sub	sp, #20
 800207e:	af00      	add	r7, sp, #0
 8002080:	6078      	str	r0, [r7, #4]
 8002082:	460b      	mov	r3, r1
 8002084:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	695b      	ldr	r3, [r3, #20]
 800208a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800208c:	887a      	ldrh	r2, [r7, #2]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	4013      	ands	r3, r2
 8002092:	041a      	lsls	r2, r3, #16
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	43d9      	mvns	r1, r3
 8002098:	887b      	ldrh	r3, [r7, #2]
 800209a:	400b      	ands	r3, r1
 800209c:	431a      	orrs	r2, r3
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	619a      	str	r2, [r3, #24]
}
 80020a2:	bf00      	nop
 80020a4:	3714      	adds	r7, #20
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr

080020ae <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80020ae:	b580      	push	{r7, lr}
 80020b0:	b086      	sub	sp, #24
 80020b2:	af02      	add	r7, sp, #8
 80020b4:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d101      	bne.n	80020c0 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	e059      	b.n	8002174 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d106      	bne.n	80020e0 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2200      	movs	r2, #0
 80020d6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f00b fa1e 	bl	800d51c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2203      	movs	r2, #3
 80020e4:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80020ee:	d102      	bne.n	80020f6 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2200      	movs	r2, #0
 80020f4:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4618      	mov	r0, r3
 80020fc:	f004 fdd5 	bl	8006caa <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6818      	ldr	r0, [r3, #0]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	7c1a      	ldrb	r2, [r3, #16]
 8002108:	f88d 2000 	strb.w	r2, [sp]
 800210c:	3304      	adds	r3, #4
 800210e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002110:	f004 fd56 	bl	8006bc0 <USB_CoreInit>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d005      	beq.n	8002126 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2202      	movs	r2, #2
 800211e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e026      	b.n	8002174 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	2101      	movs	r1, #1
 800212c:	4618      	mov	r0, r3
 800212e:	f004 fdcd 	bl	8006ccc <USB_SetCurrentMode>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d005      	beq.n	8002144 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2202      	movs	r2, #2
 800213c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e017      	b.n	8002174 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6818      	ldr	r0, [r3, #0]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	7c1a      	ldrb	r2, [r3, #16]
 800214c:	f88d 2000 	strb.w	r2, [sp]
 8002150:	3304      	adds	r3, #4
 8002152:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002154:	f004 ff70 	bl	8007038 <USB_HostInit>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d005      	beq.n	800216a <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2202      	movs	r2, #2
 8002162:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e004      	b.n	8002174 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2201      	movs	r2, #1
 800216e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8002172:	2300      	movs	r3, #0
}
 8002174:	4618      	mov	r0, r3
 8002176:	3710      	adds	r7, #16
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}

0800217c <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800217c:	b590      	push	{r4, r7, lr}
 800217e:	b08b      	sub	sp, #44	@ 0x2c
 8002180:	af04      	add	r7, sp, #16
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	4608      	mov	r0, r1
 8002186:	4611      	mov	r1, r2
 8002188:	461a      	mov	r2, r3
 800218a:	4603      	mov	r3, r0
 800218c:	70fb      	strb	r3, [r7, #3]
 800218e:	460b      	mov	r3, r1
 8002190:	70bb      	strb	r3, [r7, #2]
 8002192:	4613      	mov	r3, r2
 8002194:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8002196:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8002198:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d101      	bne.n	80021a8 <HAL_HCD_HC_Init+0x2c>
 80021a4:	2302      	movs	r3, #2
 80021a6:	e09d      	b.n	80022e4 <HAL_HCD_HC_Init+0x168>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2201      	movs	r2, #1
 80021ac:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 80021b0:	78fa      	ldrb	r2, [r7, #3]
 80021b2:	6879      	ldr	r1, [r7, #4]
 80021b4:	4613      	mov	r3, r2
 80021b6:	011b      	lsls	r3, r3, #4
 80021b8:	1a9b      	subs	r3, r3, r2
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	440b      	add	r3, r1
 80021be:	3319      	adds	r3, #25
 80021c0:	2200      	movs	r2, #0
 80021c2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80021c4:	78fa      	ldrb	r2, [r7, #3]
 80021c6:	6879      	ldr	r1, [r7, #4]
 80021c8:	4613      	mov	r3, r2
 80021ca:	011b      	lsls	r3, r3, #4
 80021cc:	1a9b      	subs	r3, r3, r2
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	440b      	add	r3, r1
 80021d2:	3314      	adds	r3, #20
 80021d4:	787a      	ldrb	r2, [r7, #1]
 80021d6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80021d8:	78fa      	ldrb	r2, [r7, #3]
 80021da:	6879      	ldr	r1, [r7, #4]
 80021dc:	4613      	mov	r3, r2
 80021de:	011b      	lsls	r3, r3, #4
 80021e0:	1a9b      	subs	r3, r3, r2
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	440b      	add	r3, r1
 80021e6:	3315      	adds	r3, #21
 80021e8:	78fa      	ldrb	r2, [r7, #3]
 80021ea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80021ec:	78fa      	ldrb	r2, [r7, #3]
 80021ee:	6879      	ldr	r1, [r7, #4]
 80021f0:	4613      	mov	r3, r2
 80021f2:	011b      	lsls	r3, r3, #4
 80021f4:	1a9b      	subs	r3, r3, r2
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	440b      	add	r3, r1
 80021fa:	3326      	adds	r3, #38	@ 0x26
 80021fc:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8002200:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002202:	78fa      	ldrb	r2, [r7, #3]
 8002204:	78bb      	ldrb	r3, [r7, #2]
 8002206:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800220a:	b2d8      	uxtb	r0, r3
 800220c:	6879      	ldr	r1, [r7, #4]
 800220e:	4613      	mov	r3, r2
 8002210:	011b      	lsls	r3, r3, #4
 8002212:	1a9b      	subs	r3, r3, r2
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	440b      	add	r3, r1
 8002218:	3316      	adds	r3, #22
 800221a:	4602      	mov	r2, r0
 800221c:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 800221e:	78fb      	ldrb	r3, [r7, #3]
 8002220:	4619      	mov	r1, r3
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f000 fbc8 	bl	80029b8 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8002228:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800222c:	2b00      	cmp	r3, #0
 800222e:	da0a      	bge.n	8002246 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002230:	78fa      	ldrb	r2, [r7, #3]
 8002232:	6879      	ldr	r1, [r7, #4]
 8002234:	4613      	mov	r3, r2
 8002236:	011b      	lsls	r3, r3, #4
 8002238:	1a9b      	subs	r3, r3, r2
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	440b      	add	r3, r1
 800223e:	3317      	adds	r3, #23
 8002240:	2201      	movs	r2, #1
 8002242:	701a      	strb	r2, [r3, #0]
 8002244:	e009      	b.n	800225a <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002246:	78fa      	ldrb	r2, [r7, #3]
 8002248:	6879      	ldr	r1, [r7, #4]
 800224a:	4613      	mov	r3, r2
 800224c:	011b      	lsls	r3, r3, #4
 800224e:	1a9b      	subs	r3, r3, r2
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	440b      	add	r3, r1
 8002254:	3317      	adds	r3, #23
 8002256:	2200      	movs	r2, #0
 8002258:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4618      	mov	r0, r3
 8002260:	f005 f84e 	bl	8007300 <USB_GetHostSpeed>
 8002264:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8002266:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800226a:	2b01      	cmp	r3, #1
 800226c:	d10b      	bne.n	8002286 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 800226e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002272:	2b01      	cmp	r3, #1
 8002274:	d107      	bne.n	8002286 <HAL_HCD_HC_Init+0x10a>
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d104      	bne.n	8002286 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	2bbc      	cmp	r3, #188	@ 0xbc
 8002280:	d901      	bls.n	8002286 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8002282:	23bc      	movs	r3, #188	@ 0xbc
 8002284:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8002286:	78fa      	ldrb	r2, [r7, #3]
 8002288:	6879      	ldr	r1, [r7, #4]
 800228a:	4613      	mov	r3, r2
 800228c:	011b      	lsls	r3, r3, #4
 800228e:	1a9b      	subs	r3, r3, r2
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	440b      	add	r3, r1
 8002294:	3318      	adds	r3, #24
 8002296:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800229a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 800229c:	78fa      	ldrb	r2, [r7, #3]
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	b298      	uxth	r0, r3
 80022a2:	6879      	ldr	r1, [r7, #4]
 80022a4:	4613      	mov	r3, r2
 80022a6:	011b      	lsls	r3, r3, #4
 80022a8:	1a9b      	subs	r3, r3, r2
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	440b      	add	r3, r1
 80022ae:	3328      	adds	r3, #40	@ 0x28
 80022b0:	4602      	mov	r2, r0
 80022b2:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6818      	ldr	r0, [r3, #0]
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	b29b      	uxth	r3, r3
 80022bc:	787c      	ldrb	r4, [r7, #1]
 80022be:	78ba      	ldrb	r2, [r7, #2]
 80022c0:	78f9      	ldrb	r1, [r7, #3]
 80022c2:	9302      	str	r3, [sp, #8]
 80022c4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80022c8:	9301      	str	r3, [sp, #4]
 80022ca:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80022ce:	9300      	str	r3, [sp, #0]
 80022d0:	4623      	mov	r3, r4
 80022d2:	f005 f83d 	bl	8007350 <USB_HC_Init>
 80022d6:	4603      	mov	r3, r0
 80022d8:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80022e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	371c      	adds	r7, #28
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd90      	pop	{r4, r7, pc}

080022ec <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	460b      	mov	r3, r1
 80022f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80022f8:	2300      	movs	r3, #0
 80022fa:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002302:	2b01      	cmp	r3, #1
 8002304:	d101      	bne.n	800230a <HAL_HCD_HC_Halt+0x1e>
 8002306:	2302      	movs	r3, #2
 8002308:	e00f      	b.n	800232a <HAL_HCD_HC_Halt+0x3e>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2201      	movs	r2, #1
 800230e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	78fa      	ldrb	r2, [r7, #3]
 8002318:	4611      	mov	r1, r2
 800231a:	4618      	mov	r0, r3
 800231c:	f005 fbcf 	bl	8007abe <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2200      	movs	r2, #0
 8002324:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8002328:	7bfb      	ldrb	r3, [r7, #15]
}
 800232a:	4618      	mov	r0, r3
 800232c:	3710      	adds	r7, #16
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
	...

08002334 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	4608      	mov	r0, r1
 800233e:	4611      	mov	r1, r2
 8002340:	461a      	mov	r2, r3
 8002342:	4603      	mov	r3, r0
 8002344:	70fb      	strb	r3, [r7, #3]
 8002346:	460b      	mov	r3, r1
 8002348:	70bb      	strb	r3, [r7, #2]
 800234a:	4613      	mov	r3, r2
 800234c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800234e:	78fa      	ldrb	r2, [r7, #3]
 8002350:	6879      	ldr	r1, [r7, #4]
 8002352:	4613      	mov	r3, r2
 8002354:	011b      	lsls	r3, r3, #4
 8002356:	1a9b      	subs	r3, r3, r2
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	440b      	add	r3, r1
 800235c:	3317      	adds	r3, #23
 800235e:	78ba      	ldrb	r2, [r7, #2]
 8002360:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002362:	78fa      	ldrb	r2, [r7, #3]
 8002364:	6879      	ldr	r1, [r7, #4]
 8002366:	4613      	mov	r3, r2
 8002368:	011b      	lsls	r3, r3, #4
 800236a:	1a9b      	subs	r3, r3, r2
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	440b      	add	r3, r1
 8002370:	3326      	adds	r3, #38	@ 0x26
 8002372:	787a      	ldrb	r2, [r7, #1]
 8002374:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002376:	7c3b      	ldrb	r3, [r7, #16]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d114      	bne.n	80023a6 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800237c:	78fa      	ldrb	r2, [r7, #3]
 800237e:	6879      	ldr	r1, [r7, #4]
 8002380:	4613      	mov	r3, r2
 8002382:	011b      	lsls	r3, r3, #4
 8002384:	1a9b      	subs	r3, r3, r2
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	440b      	add	r3, r1
 800238a:	332a      	adds	r3, #42	@ 0x2a
 800238c:	2203      	movs	r2, #3
 800238e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002390:	78fa      	ldrb	r2, [r7, #3]
 8002392:	6879      	ldr	r1, [r7, #4]
 8002394:	4613      	mov	r3, r2
 8002396:	011b      	lsls	r3, r3, #4
 8002398:	1a9b      	subs	r3, r3, r2
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	440b      	add	r3, r1
 800239e:	3319      	adds	r3, #25
 80023a0:	7f3a      	ldrb	r2, [r7, #28]
 80023a2:	701a      	strb	r2, [r3, #0]
 80023a4:	e009      	b.n	80023ba <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80023a6:	78fa      	ldrb	r2, [r7, #3]
 80023a8:	6879      	ldr	r1, [r7, #4]
 80023aa:	4613      	mov	r3, r2
 80023ac:	011b      	lsls	r3, r3, #4
 80023ae:	1a9b      	subs	r3, r3, r2
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	440b      	add	r3, r1
 80023b4:	332a      	adds	r3, #42	@ 0x2a
 80023b6:	2202      	movs	r2, #2
 80023b8:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80023ba:	787b      	ldrb	r3, [r7, #1]
 80023bc:	2b03      	cmp	r3, #3
 80023be:	f200 8102 	bhi.w	80025c6 <HAL_HCD_HC_SubmitRequest+0x292>
 80023c2:	a201      	add	r2, pc, #4	@ (adr r2, 80023c8 <HAL_HCD_HC_SubmitRequest+0x94>)
 80023c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023c8:	080023d9 	.word	0x080023d9
 80023cc:	080025b1 	.word	0x080025b1
 80023d0:	0800249d 	.word	0x0800249d
 80023d4:	08002527 	.word	0x08002527
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 80023d8:	7c3b      	ldrb	r3, [r7, #16]
 80023da:	2b01      	cmp	r3, #1
 80023dc:	f040 80f5 	bne.w	80025ca <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 80023e0:	78bb      	ldrb	r3, [r7, #2]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d12d      	bne.n	8002442 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 80023e6:	8b3b      	ldrh	r3, [r7, #24]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d109      	bne.n	8002400 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 80023ec:	78fa      	ldrb	r2, [r7, #3]
 80023ee:	6879      	ldr	r1, [r7, #4]
 80023f0:	4613      	mov	r3, r2
 80023f2:	011b      	lsls	r3, r3, #4
 80023f4:	1a9b      	subs	r3, r3, r2
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	440b      	add	r3, r1
 80023fa:	333d      	adds	r3, #61	@ 0x3d
 80023fc:	2201      	movs	r2, #1
 80023fe:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8002400:	78fa      	ldrb	r2, [r7, #3]
 8002402:	6879      	ldr	r1, [r7, #4]
 8002404:	4613      	mov	r3, r2
 8002406:	011b      	lsls	r3, r3, #4
 8002408:	1a9b      	subs	r3, r3, r2
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	440b      	add	r3, r1
 800240e:	333d      	adds	r3, #61	@ 0x3d
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d10a      	bne.n	800242c <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002416:	78fa      	ldrb	r2, [r7, #3]
 8002418:	6879      	ldr	r1, [r7, #4]
 800241a:	4613      	mov	r3, r2
 800241c:	011b      	lsls	r3, r3, #4
 800241e:	1a9b      	subs	r3, r3, r2
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	440b      	add	r3, r1
 8002424:	332a      	adds	r3, #42	@ 0x2a
 8002426:	2200      	movs	r2, #0
 8002428:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 800242a:	e0ce      	b.n	80025ca <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800242c:	78fa      	ldrb	r2, [r7, #3]
 800242e:	6879      	ldr	r1, [r7, #4]
 8002430:	4613      	mov	r3, r2
 8002432:	011b      	lsls	r3, r3, #4
 8002434:	1a9b      	subs	r3, r3, r2
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	440b      	add	r3, r1
 800243a:	332a      	adds	r3, #42	@ 0x2a
 800243c:	2202      	movs	r2, #2
 800243e:	701a      	strb	r2, [r3, #0]
      break;
 8002440:	e0c3      	b.n	80025ca <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8002442:	78fa      	ldrb	r2, [r7, #3]
 8002444:	6879      	ldr	r1, [r7, #4]
 8002446:	4613      	mov	r3, r2
 8002448:	011b      	lsls	r3, r3, #4
 800244a:	1a9b      	subs	r3, r3, r2
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	440b      	add	r3, r1
 8002450:	331a      	adds	r3, #26
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	2b01      	cmp	r3, #1
 8002456:	f040 80b8 	bne.w	80025ca <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 800245a:	78fa      	ldrb	r2, [r7, #3]
 800245c:	6879      	ldr	r1, [r7, #4]
 800245e:	4613      	mov	r3, r2
 8002460:	011b      	lsls	r3, r3, #4
 8002462:	1a9b      	subs	r3, r3, r2
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	440b      	add	r3, r1
 8002468:	333c      	adds	r3, #60	@ 0x3c
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d10a      	bne.n	8002486 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002470:	78fa      	ldrb	r2, [r7, #3]
 8002472:	6879      	ldr	r1, [r7, #4]
 8002474:	4613      	mov	r3, r2
 8002476:	011b      	lsls	r3, r3, #4
 8002478:	1a9b      	subs	r3, r3, r2
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	440b      	add	r3, r1
 800247e:	332a      	adds	r3, #42	@ 0x2a
 8002480:	2200      	movs	r2, #0
 8002482:	701a      	strb	r2, [r3, #0]
      break;
 8002484:	e0a1      	b.n	80025ca <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002486:	78fa      	ldrb	r2, [r7, #3]
 8002488:	6879      	ldr	r1, [r7, #4]
 800248a:	4613      	mov	r3, r2
 800248c:	011b      	lsls	r3, r3, #4
 800248e:	1a9b      	subs	r3, r3, r2
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	440b      	add	r3, r1
 8002494:	332a      	adds	r3, #42	@ 0x2a
 8002496:	2202      	movs	r2, #2
 8002498:	701a      	strb	r2, [r3, #0]
      break;
 800249a:	e096      	b.n	80025ca <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800249c:	78bb      	ldrb	r3, [r7, #2]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d120      	bne.n	80024e4 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80024a2:	78fa      	ldrb	r2, [r7, #3]
 80024a4:	6879      	ldr	r1, [r7, #4]
 80024a6:	4613      	mov	r3, r2
 80024a8:	011b      	lsls	r3, r3, #4
 80024aa:	1a9b      	subs	r3, r3, r2
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	440b      	add	r3, r1
 80024b0:	333d      	adds	r3, #61	@ 0x3d
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d10a      	bne.n	80024ce <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80024b8:	78fa      	ldrb	r2, [r7, #3]
 80024ba:	6879      	ldr	r1, [r7, #4]
 80024bc:	4613      	mov	r3, r2
 80024be:	011b      	lsls	r3, r3, #4
 80024c0:	1a9b      	subs	r3, r3, r2
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	440b      	add	r3, r1
 80024c6:	332a      	adds	r3, #42	@ 0x2a
 80024c8:	2200      	movs	r2, #0
 80024ca:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80024cc:	e07e      	b.n	80025cc <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80024ce:	78fa      	ldrb	r2, [r7, #3]
 80024d0:	6879      	ldr	r1, [r7, #4]
 80024d2:	4613      	mov	r3, r2
 80024d4:	011b      	lsls	r3, r3, #4
 80024d6:	1a9b      	subs	r3, r3, r2
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	440b      	add	r3, r1
 80024dc:	332a      	adds	r3, #42	@ 0x2a
 80024de:	2202      	movs	r2, #2
 80024e0:	701a      	strb	r2, [r3, #0]
      break;
 80024e2:	e073      	b.n	80025cc <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80024e4:	78fa      	ldrb	r2, [r7, #3]
 80024e6:	6879      	ldr	r1, [r7, #4]
 80024e8:	4613      	mov	r3, r2
 80024ea:	011b      	lsls	r3, r3, #4
 80024ec:	1a9b      	subs	r3, r3, r2
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	440b      	add	r3, r1
 80024f2:	333c      	adds	r3, #60	@ 0x3c
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d10a      	bne.n	8002510 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80024fa:	78fa      	ldrb	r2, [r7, #3]
 80024fc:	6879      	ldr	r1, [r7, #4]
 80024fe:	4613      	mov	r3, r2
 8002500:	011b      	lsls	r3, r3, #4
 8002502:	1a9b      	subs	r3, r3, r2
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	440b      	add	r3, r1
 8002508:	332a      	adds	r3, #42	@ 0x2a
 800250a:	2200      	movs	r2, #0
 800250c:	701a      	strb	r2, [r3, #0]
      break;
 800250e:	e05d      	b.n	80025cc <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002510:	78fa      	ldrb	r2, [r7, #3]
 8002512:	6879      	ldr	r1, [r7, #4]
 8002514:	4613      	mov	r3, r2
 8002516:	011b      	lsls	r3, r3, #4
 8002518:	1a9b      	subs	r3, r3, r2
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	440b      	add	r3, r1
 800251e:	332a      	adds	r3, #42	@ 0x2a
 8002520:	2202      	movs	r2, #2
 8002522:	701a      	strb	r2, [r3, #0]
      break;
 8002524:	e052      	b.n	80025cc <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002526:	78bb      	ldrb	r3, [r7, #2]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d120      	bne.n	800256e <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800252c:	78fa      	ldrb	r2, [r7, #3]
 800252e:	6879      	ldr	r1, [r7, #4]
 8002530:	4613      	mov	r3, r2
 8002532:	011b      	lsls	r3, r3, #4
 8002534:	1a9b      	subs	r3, r3, r2
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	440b      	add	r3, r1
 800253a:	333d      	adds	r3, #61	@ 0x3d
 800253c:	781b      	ldrb	r3, [r3, #0]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d10a      	bne.n	8002558 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002542:	78fa      	ldrb	r2, [r7, #3]
 8002544:	6879      	ldr	r1, [r7, #4]
 8002546:	4613      	mov	r3, r2
 8002548:	011b      	lsls	r3, r3, #4
 800254a:	1a9b      	subs	r3, r3, r2
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	440b      	add	r3, r1
 8002550:	332a      	adds	r3, #42	@ 0x2a
 8002552:	2200      	movs	r2, #0
 8002554:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002556:	e039      	b.n	80025cc <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002558:	78fa      	ldrb	r2, [r7, #3]
 800255a:	6879      	ldr	r1, [r7, #4]
 800255c:	4613      	mov	r3, r2
 800255e:	011b      	lsls	r3, r3, #4
 8002560:	1a9b      	subs	r3, r3, r2
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	440b      	add	r3, r1
 8002566:	332a      	adds	r3, #42	@ 0x2a
 8002568:	2202      	movs	r2, #2
 800256a:	701a      	strb	r2, [r3, #0]
      break;
 800256c:	e02e      	b.n	80025cc <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800256e:	78fa      	ldrb	r2, [r7, #3]
 8002570:	6879      	ldr	r1, [r7, #4]
 8002572:	4613      	mov	r3, r2
 8002574:	011b      	lsls	r3, r3, #4
 8002576:	1a9b      	subs	r3, r3, r2
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	440b      	add	r3, r1
 800257c:	333c      	adds	r3, #60	@ 0x3c
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d10a      	bne.n	800259a <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002584:	78fa      	ldrb	r2, [r7, #3]
 8002586:	6879      	ldr	r1, [r7, #4]
 8002588:	4613      	mov	r3, r2
 800258a:	011b      	lsls	r3, r3, #4
 800258c:	1a9b      	subs	r3, r3, r2
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	440b      	add	r3, r1
 8002592:	332a      	adds	r3, #42	@ 0x2a
 8002594:	2200      	movs	r2, #0
 8002596:	701a      	strb	r2, [r3, #0]
      break;
 8002598:	e018      	b.n	80025cc <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800259a:	78fa      	ldrb	r2, [r7, #3]
 800259c:	6879      	ldr	r1, [r7, #4]
 800259e:	4613      	mov	r3, r2
 80025a0:	011b      	lsls	r3, r3, #4
 80025a2:	1a9b      	subs	r3, r3, r2
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	440b      	add	r3, r1
 80025a8:	332a      	adds	r3, #42	@ 0x2a
 80025aa:	2202      	movs	r2, #2
 80025ac:	701a      	strb	r2, [r3, #0]
      break;
 80025ae:	e00d      	b.n	80025cc <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80025b0:	78fa      	ldrb	r2, [r7, #3]
 80025b2:	6879      	ldr	r1, [r7, #4]
 80025b4:	4613      	mov	r3, r2
 80025b6:	011b      	lsls	r3, r3, #4
 80025b8:	1a9b      	subs	r3, r3, r2
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	440b      	add	r3, r1
 80025be:	332a      	adds	r3, #42	@ 0x2a
 80025c0:	2200      	movs	r2, #0
 80025c2:	701a      	strb	r2, [r3, #0]
      break;
 80025c4:	e002      	b.n	80025cc <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 80025c6:	bf00      	nop
 80025c8:	e000      	b.n	80025cc <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 80025ca:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80025cc:	78fa      	ldrb	r2, [r7, #3]
 80025ce:	6879      	ldr	r1, [r7, #4]
 80025d0:	4613      	mov	r3, r2
 80025d2:	011b      	lsls	r3, r3, #4
 80025d4:	1a9b      	subs	r3, r3, r2
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	440b      	add	r3, r1
 80025da:	332c      	adds	r3, #44	@ 0x2c
 80025dc:	697a      	ldr	r2, [r7, #20]
 80025de:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80025e0:	78fa      	ldrb	r2, [r7, #3]
 80025e2:	8b39      	ldrh	r1, [r7, #24]
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	4613      	mov	r3, r2
 80025e8:	011b      	lsls	r3, r3, #4
 80025ea:	1a9b      	subs	r3, r3, r2
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	4403      	add	r3, r0
 80025f0:	3334      	adds	r3, #52	@ 0x34
 80025f2:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80025f4:	78fa      	ldrb	r2, [r7, #3]
 80025f6:	6879      	ldr	r1, [r7, #4]
 80025f8:	4613      	mov	r3, r2
 80025fa:	011b      	lsls	r3, r3, #4
 80025fc:	1a9b      	subs	r3, r3, r2
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	440b      	add	r3, r1
 8002602:	334c      	adds	r3, #76	@ 0x4c
 8002604:	2200      	movs	r2, #0
 8002606:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002608:	78fa      	ldrb	r2, [r7, #3]
 800260a:	6879      	ldr	r1, [r7, #4]
 800260c:	4613      	mov	r3, r2
 800260e:	011b      	lsls	r3, r3, #4
 8002610:	1a9b      	subs	r3, r3, r2
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	440b      	add	r3, r1
 8002616:	3338      	adds	r3, #56	@ 0x38
 8002618:	2200      	movs	r2, #0
 800261a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800261c:	78fa      	ldrb	r2, [r7, #3]
 800261e:	6879      	ldr	r1, [r7, #4]
 8002620:	4613      	mov	r3, r2
 8002622:	011b      	lsls	r3, r3, #4
 8002624:	1a9b      	subs	r3, r3, r2
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	440b      	add	r3, r1
 800262a:	3315      	adds	r3, #21
 800262c:	78fa      	ldrb	r2, [r7, #3]
 800262e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002630:	78fa      	ldrb	r2, [r7, #3]
 8002632:	6879      	ldr	r1, [r7, #4]
 8002634:	4613      	mov	r3, r2
 8002636:	011b      	lsls	r3, r3, #4
 8002638:	1a9b      	subs	r3, r3, r2
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	440b      	add	r3, r1
 800263e:	334d      	adds	r3, #77	@ 0x4d
 8002640:	2200      	movs	r2, #0
 8002642:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6818      	ldr	r0, [r3, #0]
 8002648:	78fa      	ldrb	r2, [r7, #3]
 800264a:	4613      	mov	r3, r2
 800264c:	011b      	lsls	r3, r3, #4
 800264e:	1a9b      	subs	r3, r3, r2
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	3310      	adds	r3, #16
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	4413      	add	r3, r2
 8002658:	1d19      	adds	r1, r3, #4
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	799b      	ldrb	r3, [r3, #6]
 800265e:	461a      	mov	r2, r3
 8002660:	f004 ffa2 	bl	80075a8 <USB_HC_StartXfer>
 8002664:	4603      	mov	r3, r0
}
 8002666:	4618      	mov	r0, r3
 8002668:	3708      	adds	r7, #8
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop

08002670 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b086      	sub	sp, #24
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4618      	mov	r0, r3
 8002688:	f004 fc96 	bl	8006fb8 <USB_GetMode>
 800268c:	4603      	mov	r3, r0
 800268e:	2b01      	cmp	r3, #1
 8002690:	f040 80fb 	bne.w	800288a <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4618      	mov	r0, r3
 800269a:	f004 fc59 	bl	8006f50 <USB_ReadInterrupts>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	f000 80f1 	beq.w	8002888 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4618      	mov	r0, r3
 80026ac:	f004 fc50 	bl	8006f50 <USB_ReadInterrupts>
 80026b0:	4603      	mov	r3, r0
 80026b2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026b6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80026ba:	d104      	bne.n	80026c6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80026c4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4618      	mov	r0, r3
 80026cc:	f004 fc40 	bl	8006f50 <USB_ReadInterrupts>
 80026d0:	4603      	mov	r3, r0
 80026d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80026da:	d104      	bne.n	80026e6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80026e4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4618      	mov	r0, r3
 80026ec:	f004 fc30 	bl	8006f50 <USB_ReadInterrupts>
 80026f0:	4603      	mov	r3, r0
 80026f2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80026f6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80026fa:	d104      	bne.n	8002706 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002704:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4618      	mov	r0, r3
 800270c:	f004 fc20 	bl	8006f50 <USB_ReadInterrupts>
 8002710:	4603      	mov	r3, r0
 8002712:	f003 0302 	and.w	r3, r3, #2
 8002716:	2b02      	cmp	r3, #2
 8002718:	d103      	bne.n	8002722 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	2202      	movs	r2, #2
 8002720:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4618      	mov	r0, r3
 8002728:	f004 fc12 	bl	8006f50 <USB_ReadInterrupts>
 800272c:	4603      	mov	r3, r0
 800272e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002732:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002736:	d120      	bne.n	800277a <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002740:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0301 	and.w	r3, r3, #1
 800274e:	2b00      	cmp	r3, #0
 8002750:	d113      	bne.n	800277a <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002752:	2110      	movs	r1, #16
 8002754:	6938      	ldr	r0, [r7, #16]
 8002756:	f004 fb05 	bl	8006d64 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800275a:	6938      	ldr	r0, [r7, #16]
 800275c:	f004 fb34 	bl	8006dc8 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	7a5b      	ldrb	r3, [r3, #9]
 8002764:	2b02      	cmp	r3, #2
 8002766:	d105      	bne.n	8002774 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	2101      	movs	r1, #1
 800276e:	4618      	mov	r0, r3
 8002770:	f004 fd26 	bl	80071c0 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f00a ff4b 	bl	800d610 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4618      	mov	r0, r3
 8002780:	f004 fbe6 	bl	8006f50 <USB_ReadInterrupts>
 8002784:	4603      	mov	r3, r0
 8002786:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800278a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800278e:	d102      	bne.n	8002796 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f001 fd33 	bl	80041fc <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4618      	mov	r0, r3
 800279c:	f004 fbd8 	bl	8006f50 <USB_ReadInterrupts>
 80027a0:	4603      	mov	r3, r0
 80027a2:	f003 0308 	and.w	r3, r3, #8
 80027a6:	2b08      	cmp	r3, #8
 80027a8:	d106      	bne.n	80027b8 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f00a ff14 	bl	800d5d8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2208      	movs	r2, #8
 80027b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4618      	mov	r0, r3
 80027be:	f004 fbc7 	bl	8006f50 <USB_ReadInterrupts>
 80027c2:	4603      	mov	r3, r0
 80027c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027c8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80027cc:	d139      	bne.n	8002842 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4618      	mov	r0, r3
 80027d4:	f005 f962 	bl	8007a9c <USB_HC_ReadInterrupt>
 80027d8:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80027da:	2300      	movs	r3, #0
 80027dc:	617b      	str	r3, [r7, #20]
 80027de:	e025      	b.n	800282c <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	f003 030f 	and.w	r3, r3, #15
 80027e6:	68ba      	ldr	r2, [r7, #8]
 80027e8:	fa22 f303 	lsr.w	r3, r2, r3
 80027ec:	f003 0301 	and.w	r3, r3, #1
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d018      	beq.n	8002826 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	015a      	lsls	r2, r3, #5
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	4413      	add	r3, r2
 80027fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002806:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800280a:	d106      	bne.n	800281a <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	b2db      	uxtb	r3, r3
 8002810:	4619      	mov	r1, r3
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f000 f905 	bl	8002a22 <HCD_HC_IN_IRQHandler>
 8002818:	e005      	b.n	8002826 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	b2db      	uxtb	r3, r3
 800281e:	4619      	mov	r1, r3
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f000 ff67 	bl	80036f4 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	3301      	adds	r3, #1
 800282a:	617b      	str	r3, [r7, #20]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	795b      	ldrb	r3, [r3, #5]
 8002830:	461a      	mov	r2, r3
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	4293      	cmp	r3, r2
 8002836:	d3d3      	bcc.n	80027e0 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002840:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4618      	mov	r0, r3
 8002848:	f004 fb82 	bl	8006f50 <USB_ReadInterrupts>
 800284c:	4603      	mov	r3, r0
 800284e:	f003 0310 	and.w	r3, r3, #16
 8002852:	2b10      	cmp	r3, #16
 8002854:	d101      	bne.n	800285a <HAL_HCD_IRQHandler+0x1ea>
 8002856:	2301      	movs	r3, #1
 8002858:	e000      	b.n	800285c <HAL_HCD_IRQHandler+0x1ec>
 800285a:	2300      	movs	r3, #0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d014      	beq.n	800288a <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	699a      	ldr	r2, [r3, #24]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f022 0210 	bic.w	r2, r2, #16
 800286e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f001 fbe4 	bl	800403e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	699a      	ldr	r2, [r3, #24]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f042 0210 	orr.w	r2, r2, #16
 8002884:	619a      	str	r2, [r3, #24]
 8002886:	e000      	b.n	800288a <HAL_HCD_IRQHandler+0x21a>
      return;
 8002888:	bf00      	nop
    }
  }
}
 800288a:	3718      	adds	r7, #24
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}

08002890 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d101      	bne.n	80028a6 <HAL_HCD_Start+0x16>
 80028a2:	2302      	movs	r3, #2
 80028a4:	e013      	b.n	80028ce <HAL_HCD_Start+0x3e>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2201      	movs	r2, #1
 80028aa:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	2101      	movs	r1, #1
 80028b4:	4618      	mov	r0, r3
 80028b6:	f004 fcea 	bl	800728e <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4618      	mov	r0, r3
 80028c0:	f004 f9e2 	bl	8006c88 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2200      	movs	r2, #0
 80028c8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80028cc:	2300      	movs	r3, #0
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3708      	adds	r7, #8
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}

080028d6 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80028d6:	b580      	push	{r7, lr}
 80028d8:	b082      	sub	sp, #8
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d101      	bne.n	80028ec <HAL_HCD_Stop+0x16>
 80028e8:	2302      	movs	r3, #2
 80028ea:	e00d      	b.n	8002908 <HAL_HCD_Stop+0x32>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4618      	mov	r0, r3
 80028fa:	f005 fa3d 	bl	8007d78 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002906:	2300      	movs	r3, #0
}
 8002908:	4618      	mov	r0, r3
 800290a:	3708      	adds	r7, #8
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4618      	mov	r0, r3
 800291e:	f004 fc8c 	bl	800723a <USB_ResetPort>
 8002922:	4603      	mov	r3, r0
}
 8002924:	4618      	mov	r0, r3
 8002926:	3708      	adds	r7, #8
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}

0800292c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	460b      	mov	r3, r1
 8002936:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002938:	78fa      	ldrb	r2, [r7, #3]
 800293a:	6879      	ldr	r1, [r7, #4]
 800293c:	4613      	mov	r3, r2
 800293e:	011b      	lsls	r3, r3, #4
 8002940:	1a9b      	subs	r3, r3, r2
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	440b      	add	r3, r1
 8002946:	334c      	adds	r3, #76	@ 0x4c
 8002948:	781b      	ldrb	r3, [r3, #0]
}
 800294a:	4618      	mov	r0, r3
 800294c:	370c      	adds	r7, #12
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr

08002956 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002956:	b480      	push	{r7}
 8002958:	b083      	sub	sp, #12
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
 800295e:	460b      	mov	r3, r1
 8002960:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002962:	78fa      	ldrb	r2, [r7, #3]
 8002964:	6879      	ldr	r1, [r7, #4]
 8002966:	4613      	mov	r3, r2
 8002968:	011b      	lsls	r3, r3, #4
 800296a:	1a9b      	subs	r3, r3, r2
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	440b      	add	r3, r1
 8002970:	3338      	adds	r3, #56	@ 0x38
 8002972:	681b      	ldr	r3, [r3, #0]
}
 8002974:	4618      	mov	r0, r3
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b082      	sub	sp, #8
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4618      	mov	r0, r3
 800298e:	f004 fcce 	bl	800732e <USB_GetCurrentFrame>
 8002992:	4603      	mov	r3, r0
}
 8002994:	4618      	mov	r0, r3
 8002996:	3708      	adds	r7, #8
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}

0800299c <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4618      	mov	r0, r3
 80029aa:	f004 fca9 	bl	8007300 <USB_GetHostSpeed>
 80029ae:	4603      	mov	r3, r0
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3708      	adds	r7, #8
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	460b      	mov	r3, r1
 80029c2:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 80029c4:	78fa      	ldrb	r2, [r7, #3]
 80029c6:	6879      	ldr	r1, [r7, #4]
 80029c8:	4613      	mov	r3, r2
 80029ca:	011b      	lsls	r3, r3, #4
 80029cc:	1a9b      	subs	r3, r3, r2
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	440b      	add	r3, r1
 80029d2:	331a      	adds	r3, #26
 80029d4:	2200      	movs	r2, #0
 80029d6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 80029d8:	78fa      	ldrb	r2, [r7, #3]
 80029da:	6879      	ldr	r1, [r7, #4]
 80029dc:	4613      	mov	r3, r2
 80029de:	011b      	lsls	r3, r3, #4
 80029e0:	1a9b      	subs	r3, r3, r2
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	440b      	add	r3, r1
 80029e6:	331b      	adds	r3, #27
 80029e8:	2200      	movs	r2, #0
 80029ea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 80029ec:	78fa      	ldrb	r2, [r7, #3]
 80029ee:	6879      	ldr	r1, [r7, #4]
 80029f0:	4613      	mov	r3, r2
 80029f2:	011b      	lsls	r3, r3, #4
 80029f4:	1a9b      	subs	r3, r3, r2
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	440b      	add	r3, r1
 80029fa:	3325      	adds	r3, #37	@ 0x25
 80029fc:	2200      	movs	r2, #0
 80029fe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8002a00:	78fa      	ldrb	r2, [r7, #3]
 8002a02:	6879      	ldr	r1, [r7, #4]
 8002a04:	4613      	mov	r3, r2
 8002a06:	011b      	lsls	r3, r3, #4
 8002a08:	1a9b      	subs	r3, r3, r2
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	440b      	add	r3, r1
 8002a0e:	3324      	adds	r3, #36	@ 0x24
 8002a10:	2200      	movs	r2, #0
 8002a12:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	370c      	adds	r7, #12
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr

08002a22 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002a22:	b580      	push	{r7, lr}
 8002a24:	b086      	sub	sp, #24
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]
 8002a2a:	460b      	mov	r3, r1
 8002a2c:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	78fa      	ldrb	r2, [r7, #3]
 8002a3e:	4611      	mov	r1, r2
 8002a40:	4618      	mov	r0, r3
 8002a42:	f004 fa98 	bl	8006f76 <USB_ReadChInterrupts>
 8002a46:	4603      	mov	r3, r0
 8002a48:	f003 0304 	and.w	r3, r3, #4
 8002a4c:	2b04      	cmp	r3, #4
 8002a4e:	d11a      	bne.n	8002a86 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002a50:	78fb      	ldrb	r3, [r7, #3]
 8002a52:	015a      	lsls	r2, r3, #5
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	4413      	add	r3, r2
 8002a58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	2304      	movs	r3, #4
 8002a60:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002a62:	78fa      	ldrb	r2, [r7, #3]
 8002a64:	6879      	ldr	r1, [r7, #4]
 8002a66:	4613      	mov	r3, r2
 8002a68:	011b      	lsls	r3, r3, #4
 8002a6a:	1a9b      	subs	r3, r3, r2
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	440b      	add	r3, r1
 8002a70:	334d      	adds	r3, #77	@ 0x4d
 8002a72:	2207      	movs	r2, #7
 8002a74:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	78fa      	ldrb	r2, [r7, #3]
 8002a7c:	4611      	mov	r1, r2
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f005 f81d 	bl	8007abe <USB_HC_Halt>
 8002a84:	e09e      	b.n	8002bc4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	78fa      	ldrb	r2, [r7, #3]
 8002a8c:	4611      	mov	r1, r2
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f004 fa71 	bl	8006f76 <USB_ReadChInterrupts>
 8002a94:	4603      	mov	r3, r0
 8002a96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a9e:	d11b      	bne.n	8002ad8 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8002aa0:	78fb      	ldrb	r3, [r7, #3]
 8002aa2:	015a      	lsls	r2, r3, #5
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	4413      	add	r3, r2
 8002aa8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002aac:	461a      	mov	r2, r3
 8002aae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002ab2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8002ab4:	78fa      	ldrb	r2, [r7, #3]
 8002ab6:	6879      	ldr	r1, [r7, #4]
 8002ab8:	4613      	mov	r3, r2
 8002aba:	011b      	lsls	r3, r3, #4
 8002abc:	1a9b      	subs	r3, r3, r2
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	440b      	add	r3, r1
 8002ac2:	334d      	adds	r3, #77	@ 0x4d
 8002ac4:	2208      	movs	r2, #8
 8002ac6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	78fa      	ldrb	r2, [r7, #3]
 8002ace:	4611      	mov	r1, r2
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f004 fff4 	bl	8007abe <USB_HC_Halt>
 8002ad6:	e075      	b.n	8002bc4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	78fa      	ldrb	r2, [r7, #3]
 8002ade:	4611      	mov	r1, r2
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f004 fa48 	bl	8006f76 <USB_ReadChInterrupts>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	f003 0308 	and.w	r3, r3, #8
 8002aec:	2b08      	cmp	r3, #8
 8002aee:	d11a      	bne.n	8002b26 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002af0:	78fb      	ldrb	r3, [r7, #3]
 8002af2:	015a      	lsls	r2, r3, #5
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	4413      	add	r3, r2
 8002af8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002afc:	461a      	mov	r2, r3
 8002afe:	2308      	movs	r3, #8
 8002b00:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002b02:	78fa      	ldrb	r2, [r7, #3]
 8002b04:	6879      	ldr	r1, [r7, #4]
 8002b06:	4613      	mov	r3, r2
 8002b08:	011b      	lsls	r3, r3, #4
 8002b0a:	1a9b      	subs	r3, r3, r2
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	440b      	add	r3, r1
 8002b10:	334d      	adds	r3, #77	@ 0x4d
 8002b12:	2206      	movs	r2, #6
 8002b14:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	78fa      	ldrb	r2, [r7, #3]
 8002b1c:	4611      	mov	r1, r2
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f004 ffcd 	bl	8007abe <USB_HC_Halt>
 8002b24:	e04e      	b.n	8002bc4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	78fa      	ldrb	r2, [r7, #3]
 8002b2c:	4611      	mov	r1, r2
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f004 fa21 	bl	8006f76 <USB_ReadChInterrupts>
 8002b34:	4603      	mov	r3, r0
 8002b36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b3e:	d11b      	bne.n	8002b78 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002b40:	78fb      	ldrb	r3, [r7, #3]
 8002b42:	015a      	lsls	r2, r3, #5
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	4413      	add	r3, r2
 8002b48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002b52:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002b54:	78fa      	ldrb	r2, [r7, #3]
 8002b56:	6879      	ldr	r1, [r7, #4]
 8002b58:	4613      	mov	r3, r2
 8002b5a:	011b      	lsls	r3, r3, #4
 8002b5c:	1a9b      	subs	r3, r3, r2
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	440b      	add	r3, r1
 8002b62:	334d      	adds	r3, #77	@ 0x4d
 8002b64:	2209      	movs	r2, #9
 8002b66:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	78fa      	ldrb	r2, [r7, #3]
 8002b6e:	4611      	mov	r1, r2
 8002b70:	4618      	mov	r0, r3
 8002b72:	f004 ffa4 	bl	8007abe <USB_HC_Halt>
 8002b76:	e025      	b.n	8002bc4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	78fa      	ldrb	r2, [r7, #3]
 8002b7e:	4611      	mov	r1, r2
 8002b80:	4618      	mov	r0, r3
 8002b82:	f004 f9f8 	bl	8006f76 <USB_ReadChInterrupts>
 8002b86:	4603      	mov	r3, r0
 8002b88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b8c:	2b80      	cmp	r3, #128	@ 0x80
 8002b8e:	d119      	bne.n	8002bc4 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002b90:	78fb      	ldrb	r3, [r7, #3]
 8002b92:	015a      	lsls	r2, r3, #5
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	4413      	add	r3, r2
 8002b98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	2380      	movs	r3, #128	@ 0x80
 8002ba0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002ba2:	78fa      	ldrb	r2, [r7, #3]
 8002ba4:	6879      	ldr	r1, [r7, #4]
 8002ba6:	4613      	mov	r3, r2
 8002ba8:	011b      	lsls	r3, r3, #4
 8002baa:	1a9b      	subs	r3, r3, r2
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	440b      	add	r3, r1
 8002bb0:	334d      	adds	r3, #77	@ 0x4d
 8002bb2:	2207      	movs	r2, #7
 8002bb4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	78fa      	ldrb	r2, [r7, #3]
 8002bbc:	4611      	mov	r1, r2
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f004 ff7d 	bl	8007abe <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	78fa      	ldrb	r2, [r7, #3]
 8002bca:	4611      	mov	r1, r2
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f004 f9d2 	bl	8006f76 <USB_ReadChInterrupts>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002bd8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002bdc:	d112      	bne.n	8002c04 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	78fa      	ldrb	r2, [r7, #3]
 8002be4:	4611      	mov	r1, r2
 8002be6:	4618      	mov	r0, r3
 8002be8:	f004 ff69 	bl	8007abe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002bec:	78fb      	ldrb	r3, [r7, #3]
 8002bee:	015a      	lsls	r2, r3, #5
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	4413      	add	r3, r2
 8002bf4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002bfe:	6093      	str	r3, [r2, #8]
 8002c00:	f000 bd75 	b.w	80036ee <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	78fa      	ldrb	r2, [r7, #3]
 8002c0a:	4611      	mov	r1, r2
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f004 f9b2 	bl	8006f76 <USB_ReadChInterrupts>
 8002c12:	4603      	mov	r3, r0
 8002c14:	f003 0301 	and.w	r3, r3, #1
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	f040 8128 	bne.w	8002e6e <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002c1e:	78fb      	ldrb	r3, [r7, #3]
 8002c20:	015a      	lsls	r2, r3, #5
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	4413      	add	r3, r2
 8002c26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	2320      	movs	r3, #32
 8002c2e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002c30:	78fa      	ldrb	r2, [r7, #3]
 8002c32:	6879      	ldr	r1, [r7, #4]
 8002c34:	4613      	mov	r3, r2
 8002c36:	011b      	lsls	r3, r3, #4
 8002c38:	1a9b      	subs	r3, r3, r2
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	440b      	add	r3, r1
 8002c3e:	331b      	adds	r3, #27
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d119      	bne.n	8002c7a <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002c46:	78fa      	ldrb	r2, [r7, #3]
 8002c48:	6879      	ldr	r1, [r7, #4]
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	011b      	lsls	r3, r3, #4
 8002c4e:	1a9b      	subs	r3, r3, r2
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	440b      	add	r3, r1
 8002c54:	331b      	adds	r3, #27
 8002c56:	2200      	movs	r2, #0
 8002c58:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002c5a:	78fb      	ldrb	r3, [r7, #3]
 8002c5c:	015a      	lsls	r2, r3, #5
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	4413      	add	r3, r2
 8002c62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	78fa      	ldrb	r2, [r7, #3]
 8002c6a:	0151      	lsls	r1, r2, #5
 8002c6c:	693a      	ldr	r2, [r7, #16]
 8002c6e:	440a      	add	r2, r1
 8002c70:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002c74:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c78:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	799b      	ldrb	r3, [r3, #6]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d01b      	beq.n	8002cba <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002c82:	78fa      	ldrb	r2, [r7, #3]
 8002c84:	6879      	ldr	r1, [r7, #4]
 8002c86:	4613      	mov	r3, r2
 8002c88:	011b      	lsls	r3, r3, #4
 8002c8a:	1a9b      	subs	r3, r3, r2
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	440b      	add	r3, r1
 8002c90:	3330      	adds	r3, #48	@ 0x30
 8002c92:	6819      	ldr	r1, [r3, #0]
 8002c94:	78fb      	ldrb	r3, [r7, #3]
 8002c96:	015a      	lsls	r2, r3, #5
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	4413      	add	r3, r2
 8002c9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ca0:	691b      	ldr	r3, [r3, #16]
 8002ca2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ca6:	78fa      	ldrb	r2, [r7, #3]
 8002ca8:	1ac9      	subs	r1, r1, r3
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	4613      	mov	r3, r2
 8002cae:	011b      	lsls	r3, r3, #4
 8002cb0:	1a9b      	subs	r3, r3, r2
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	4403      	add	r3, r0
 8002cb6:	3338      	adds	r3, #56	@ 0x38
 8002cb8:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8002cba:	78fa      	ldrb	r2, [r7, #3]
 8002cbc:	6879      	ldr	r1, [r7, #4]
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	011b      	lsls	r3, r3, #4
 8002cc2:	1a9b      	subs	r3, r3, r2
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	440b      	add	r3, r1
 8002cc8:	334d      	adds	r3, #77	@ 0x4d
 8002cca:	2201      	movs	r2, #1
 8002ccc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8002cce:	78fa      	ldrb	r2, [r7, #3]
 8002cd0:	6879      	ldr	r1, [r7, #4]
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	011b      	lsls	r3, r3, #4
 8002cd6:	1a9b      	subs	r3, r3, r2
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	440b      	add	r3, r1
 8002cdc:	3344      	adds	r3, #68	@ 0x44
 8002cde:	2200      	movs	r2, #0
 8002ce0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002ce2:	78fb      	ldrb	r3, [r7, #3]
 8002ce4:	015a      	lsls	r2, r3, #5
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	4413      	add	r3, r2
 8002cea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cee:	461a      	mov	r2, r3
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002cf4:	78fa      	ldrb	r2, [r7, #3]
 8002cf6:	6879      	ldr	r1, [r7, #4]
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	011b      	lsls	r3, r3, #4
 8002cfc:	1a9b      	subs	r3, r3, r2
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	440b      	add	r3, r1
 8002d02:	3326      	adds	r3, #38	@ 0x26
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d00a      	beq.n	8002d20 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002d0a:	78fa      	ldrb	r2, [r7, #3]
 8002d0c:	6879      	ldr	r1, [r7, #4]
 8002d0e:	4613      	mov	r3, r2
 8002d10:	011b      	lsls	r3, r3, #4
 8002d12:	1a9b      	subs	r3, r3, r2
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	440b      	add	r3, r1
 8002d18:	3326      	adds	r3, #38	@ 0x26
 8002d1a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d110      	bne.n	8002d42 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	78fa      	ldrb	r2, [r7, #3]
 8002d26:	4611      	mov	r1, r2
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f004 fec8 	bl	8007abe <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002d2e:	78fb      	ldrb	r3, [r7, #3]
 8002d30:	015a      	lsls	r2, r3, #5
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	4413      	add	r3, r2
 8002d36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	2310      	movs	r3, #16
 8002d3e:	6093      	str	r3, [r2, #8]
 8002d40:	e03d      	b.n	8002dbe <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002d42:	78fa      	ldrb	r2, [r7, #3]
 8002d44:	6879      	ldr	r1, [r7, #4]
 8002d46:	4613      	mov	r3, r2
 8002d48:	011b      	lsls	r3, r3, #4
 8002d4a:	1a9b      	subs	r3, r3, r2
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	440b      	add	r3, r1
 8002d50:	3326      	adds	r3, #38	@ 0x26
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	2b03      	cmp	r3, #3
 8002d56:	d00a      	beq.n	8002d6e <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002d58:	78fa      	ldrb	r2, [r7, #3]
 8002d5a:	6879      	ldr	r1, [r7, #4]
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	011b      	lsls	r3, r3, #4
 8002d60:	1a9b      	subs	r3, r3, r2
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	440b      	add	r3, r1
 8002d66:	3326      	adds	r3, #38	@ 0x26
 8002d68:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d127      	bne.n	8002dbe <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002d6e:	78fb      	ldrb	r3, [r7, #3]
 8002d70:	015a      	lsls	r2, r3, #5
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	4413      	add	r3, r2
 8002d76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	78fa      	ldrb	r2, [r7, #3]
 8002d7e:	0151      	lsls	r1, r2, #5
 8002d80:	693a      	ldr	r2, [r7, #16]
 8002d82:	440a      	add	r2, r1
 8002d84:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002d88:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002d8c:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002d8e:	78fa      	ldrb	r2, [r7, #3]
 8002d90:	6879      	ldr	r1, [r7, #4]
 8002d92:	4613      	mov	r3, r2
 8002d94:	011b      	lsls	r3, r3, #4
 8002d96:	1a9b      	subs	r3, r3, r2
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	440b      	add	r3, r1
 8002d9c:	334c      	adds	r3, #76	@ 0x4c
 8002d9e:	2201      	movs	r2, #1
 8002da0:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002da2:	78fa      	ldrb	r2, [r7, #3]
 8002da4:	6879      	ldr	r1, [r7, #4]
 8002da6:	4613      	mov	r3, r2
 8002da8:	011b      	lsls	r3, r3, #4
 8002daa:	1a9b      	subs	r3, r3, r2
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	440b      	add	r3, r1
 8002db0:	334c      	adds	r3, #76	@ 0x4c
 8002db2:	781a      	ldrb	r2, [r3, #0]
 8002db4:	78fb      	ldrb	r3, [r7, #3]
 8002db6:	4619      	mov	r1, r3
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	f00a fc37 	bl	800d62c <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	799b      	ldrb	r3, [r3, #6]
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d13b      	bne.n	8002e3e <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8002dc6:	78fa      	ldrb	r2, [r7, #3]
 8002dc8:	6879      	ldr	r1, [r7, #4]
 8002dca:	4613      	mov	r3, r2
 8002dcc:	011b      	lsls	r3, r3, #4
 8002dce:	1a9b      	subs	r3, r3, r2
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	440b      	add	r3, r1
 8002dd4:	3338      	adds	r3, #56	@ 0x38
 8002dd6:	6819      	ldr	r1, [r3, #0]
 8002dd8:	78fa      	ldrb	r2, [r7, #3]
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	4613      	mov	r3, r2
 8002dde:	011b      	lsls	r3, r3, #4
 8002de0:	1a9b      	subs	r3, r3, r2
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	4403      	add	r3, r0
 8002de6:	3328      	adds	r3, #40	@ 0x28
 8002de8:	881b      	ldrh	r3, [r3, #0]
 8002dea:	440b      	add	r3, r1
 8002dec:	1e59      	subs	r1, r3, #1
 8002dee:	78fa      	ldrb	r2, [r7, #3]
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	4613      	mov	r3, r2
 8002df4:	011b      	lsls	r3, r3, #4
 8002df6:	1a9b      	subs	r3, r3, r2
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	4403      	add	r3, r0
 8002dfc:	3328      	adds	r3, #40	@ 0x28
 8002dfe:	881b      	ldrh	r3, [r3, #0]
 8002e00:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e04:	f003 0301 	and.w	r3, r3, #1
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	f000 8470 	beq.w	80036ee <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8002e0e:	78fa      	ldrb	r2, [r7, #3]
 8002e10:	6879      	ldr	r1, [r7, #4]
 8002e12:	4613      	mov	r3, r2
 8002e14:	011b      	lsls	r3, r3, #4
 8002e16:	1a9b      	subs	r3, r3, r2
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	440b      	add	r3, r1
 8002e1c:	333c      	adds	r3, #60	@ 0x3c
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	78fa      	ldrb	r2, [r7, #3]
 8002e22:	f083 0301 	eor.w	r3, r3, #1
 8002e26:	b2d8      	uxtb	r0, r3
 8002e28:	6879      	ldr	r1, [r7, #4]
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	011b      	lsls	r3, r3, #4
 8002e2e:	1a9b      	subs	r3, r3, r2
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	440b      	add	r3, r1
 8002e34:	333c      	adds	r3, #60	@ 0x3c
 8002e36:	4602      	mov	r2, r0
 8002e38:	701a      	strb	r2, [r3, #0]
 8002e3a:	f000 bc58 	b.w	80036ee <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8002e3e:	78fa      	ldrb	r2, [r7, #3]
 8002e40:	6879      	ldr	r1, [r7, #4]
 8002e42:	4613      	mov	r3, r2
 8002e44:	011b      	lsls	r3, r3, #4
 8002e46:	1a9b      	subs	r3, r3, r2
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	440b      	add	r3, r1
 8002e4c:	333c      	adds	r3, #60	@ 0x3c
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	78fa      	ldrb	r2, [r7, #3]
 8002e52:	f083 0301 	eor.w	r3, r3, #1
 8002e56:	b2d8      	uxtb	r0, r3
 8002e58:	6879      	ldr	r1, [r7, #4]
 8002e5a:	4613      	mov	r3, r2
 8002e5c:	011b      	lsls	r3, r3, #4
 8002e5e:	1a9b      	subs	r3, r3, r2
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	440b      	add	r3, r1
 8002e64:	333c      	adds	r3, #60	@ 0x3c
 8002e66:	4602      	mov	r2, r0
 8002e68:	701a      	strb	r2, [r3, #0]
 8002e6a:	f000 bc40 	b.w	80036ee <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	78fa      	ldrb	r2, [r7, #3]
 8002e74:	4611      	mov	r1, r2
 8002e76:	4618      	mov	r0, r3
 8002e78:	f004 f87d 	bl	8006f76 <USB_ReadChInterrupts>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	f003 0320 	and.w	r3, r3, #32
 8002e82:	2b20      	cmp	r3, #32
 8002e84:	d131      	bne.n	8002eea <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002e86:	78fb      	ldrb	r3, [r7, #3]
 8002e88:	015a      	lsls	r2, r3, #5
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	4413      	add	r3, r2
 8002e8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e92:	461a      	mov	r2, r3
 8002e94:	2320      	movs	r3, #32
 8002e96:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8002e98:	78fa      	ldrb	r2, [r7, #3]
 8002e9a:	6879      	ldr	r1, [r7, #4]
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	011b      	lsls	r3, r3, #4
 8002ea0:	1a9b      	subs	r3, r3, r2
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	440b      	add	r3, r1
 8002ea6:	331a      	adds	r3, #26
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	f040 841f 	bne.w	80036ee <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8002eb0:	78fa      	ldrb	r2, [r7, #3]
 8002eb2:	6879      	ldr	r1, [r7, #4]
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	011b      	lsls	r3, r3, #4
 8002eb8:	1a9b      	subs	r3, r3, r2
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	440b      	add	r3, r1
 8002ebe:	331b      	adds	r3, #27
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002ec4:	78fa      	ldrb	r2, [r7, #3]
 8002ec6:	6879      	ldr	r1, [r7, #4]
 8002ec8:	4613      	mov	r3, r2
 8002eca:	011b      	lsls	r3, r3, #4
 8002ecc:	1a9b      	subs	r3, r3, r2
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	440b      	add	r3, r1
 8002ed2:	334d      	adds	r3, #77	@ 0x4d
 8002ed4:	2203      	movs	r2, #3
 8002ed6:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	78fa      	ldrb	r2, [r7, #3]
 8002ede:	4611      	mov	r1, r2
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f004 fdec 	bl	8007abe <USB_HC_Halt>
 8002ee6:	f000 bc02 	b.w	80036ee <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	78fa      	ldrb	r2, [r7, #3]
 8002ef0:	4611      	mov	r1, r2
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f004 f83f 	bl	8006f76 <USB_ReadChInterrupts>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	f003 0302 	and.w	r3, r3, #2
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	f040 8305 	bne.w	800350e <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002f04:	78fb      	ldrb	r3, [r7, #3]
 8002f06:	015a      	lsls	r2, r3, #5
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	4413      	add	r3, r2
 8002f0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f10:	461a      	mov	r2, r3
 8002f12:	2302      	movs	r3, #2
 8002f14:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002f16:	78fa      	ldrb	r2, [r7, #3]
 8002f18:	6879      	ldr	r1, [r7, #4]
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	011b      	lsls	r3, r3, #4
 8002f1e:	1a9b      	subs	r3, r3, r2
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	440b      	add	r3, r1
 8002f24:	334d      	adds	r3, #77	@ 0x4d
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d114      	bne.n	8002f56 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002f2c:	78fa      	ldrb	r2, [r7, #3]
 8002f2e:	6879      	ldr	r1, [r7, #4]
 8002f30:	4613      	mov	r3, r2
 8002f32:	011b      	lsls	r3, r3, #4
 8002f34:	1a9b      	subs	r3, r3, r2
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	440b      	add	r3, r1
 8002f3a:	334d      	adds	r3, #77	@ 0x4d
 8002f3c:	2202      	movs	r2, #2
 8002f3e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002f40:	78fa      	ldrb	r2, [r7, #3]
 8002f42:	6879      	ldr	r1, [r7, #4]
 8002f44:	4613      	mov	r3, r2
 8002f46:	011b      	lsls	r3, r3, #4
 8002f48:	1a9b      	subs	r3, r3, r2
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	440b      	add	r3, r1
 8002f4e:	334c      	adds	r3, #76	@ 0x4c
 8002f50:	2201      	movs	r2, #1
 8002f52:	701a      	strb	r2, [r3, #0]
 8002f54:	e2cc      	b.n	80034f0 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002f56:	78fa      	ldrb	r2, [r7, #3]
 8002f58:	6879      	ldr	r1, [r7, #4]
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	011b      	lsls	r3, r3, #4
 8002f5e:	1a9b      	subs	r3, r3, r2
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	440b      	add	r3, r1
 8002f64:	334d      	adds	r3, #77	@ 0x4d
 8002f66:	781b      	ldrb	r3, [r3, #0]
 8002f68:	2b06      	cmp	r3, #6
 8002f6a:	d114      	bne.n	8002f96 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002f6c:	78fa      	ldrb	r2, [r7, #3]
 8002f6e:	6879      	ldr	r1, [r7, #4]
 8002f70:	4613      	mov	r3, r2
 8002f72:	011b      	lsls	r3, r3, #4
 8002f74:	1a9b      	subs	r3, r3, r2
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	440b      	add	r3, r1
 8002f7a:	334d      	adds	r3, #77	@ 0x4d
 8002f7c:	2202      	movs	r2, #2
 8002f7e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002f80:	78fa      	ldrb	r2, [r7, #3]
 8002f82:	6879      	ldr	r1, [r7, #4]
 8002f84:	4613      	mov	r3, r2
 8002f86:	011b      	lsls	r3, r3, #4
 8002f88:	1a9b      	subs	r3, r3, r2
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	440b      	add	r3, r1
 8002f8e:	334c      	adds	r3, #76	@ 0x4c
 8002f90:	2205      	movs	r2, #5
 8002f92:	701a      	strb	r2, [r3, #0]
 8002f94:	e2ac      	b.n	80034f0 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002f96:	78fa      	ldrb	r2, [r7, #3]
 8002f98:	6879      	ldr	r1, [r7, #4]
 8002f9a:	4613      	mov	r3, r2
 8002f9c:	011b      	lsls	r3, r3, #4
 8002f9e:	1a9b      	subs	r3, r3, r2
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	440b      	add	r3, r1
 8002fa4:	334d      	adds	r3, #77	@ 0x4d
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	2b07      	cmp	r3, #7
 8002faa:	d00b      	beq.n	8002fc4 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002fac:	78fa      	ldrb	r2, [r7, #3]
 8002fae:	6879      	ldr	r1, [r7, #4]
 8002fb0:	4613      	mov	r3, r2
 8002fb2:	011b      	lsls	r3, r3, #4
 8002fb4:	1a9b      	subs	r3, r3, r2
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	440b      	add	r3, r1
 8002fba:	334d      	adds	r3, #77	@ 0x4d
 8002fbc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002fbe:	2b09      	cmp	r3, #9
 8002fc0:	f040 80a6 	bne.w	8003110 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002fc4:	78fa      	ldrb	r2, [r7, #3]
 8002fc6:	6879      	ldr	r1, [r7, #4]
 8002fc8:	4613      	mov	r3, r2
 8002fca:	011b      	lsls	r3, r3, #4
 8002fcc:	1a9b      	subs	r3, r3, r2
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	440b      	add	r3, r1
 8002fd2:	334d      	adds	r3, #77	@ 0x4d
 8002fd4:	2202      	movs	r2, #2
 8002fd6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002fd8:	78fa      	ldrb	r2, [r7, #3]
 8002fda:	6879      	ldr	r1, [r7, #4]
 8002fdc:	4613      	mov	r3, r2
 8002fde:	011b      	lsls	r3, r3, #4
 8002fe0:	1a9b      	subs	r3, r3, r2
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	440b      	add	r3, r1
 8002fe6:	3344      	adds	r3, #68	@ 0x44
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	1c59      	adds	r1, r3, #1
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	4613      	mov	r3, r2
 8002ff0:	011b      	lsls	r3, r3, #4
 8002ff2:	1a9b      	subs	r3, r3, r2
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	4403      	add	r3, r0
 8002ff8:	3344      	adds	r3, #68	@ 0x44
 8002ffa:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002ffc:	78fa      	ldrb	r2, [r7, #3]
 8002ffe:	6879      	ldr	r1, [r7, #4]
 8003000:	4613      	mov	r3, r2
 8003002:	011b      	lsls	r3, r3, #4
 8003004:	1a9b      	subs	r3, r3, r2
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	440b      	add	r3, r1
 800300a:	3344      	adds	r3, #68	@ 0x44
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	2b02      	cmp	r3, #2
 8003010:	d943      	bls.n	800309a <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003012:	78fa      	ldrb	r2, [r7, #3]
 8003014:	6879      	ldr	r1, [r7, #4]
 8003016:	4613      	mov	r3, r2
 8003018:	011b      	lsls	r3, r3, #4
 800301a:	1a9b      	subs	r3, r3, r2
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	440b      	add	r3, r1
 8003020:	3344      	adds	r3, #68	@ 0x44
 8003022:	2200      	movs	r2, #0
 8003024:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8003026:	78fa      	ldrb	r2, [r7, #3]
 8003028:	6879      	ldr	r1, [r7, #4]
 800302a:	4613      	mov	r3, r2
 800302c:	011b      	lsls	r3, r3, #4
 800302e:	1a9b      	subs	r3, r3, r2
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	440b      	add	r3, r1
 8003034:	331a      	adds	r3, #26
 8003036:	781b      	ldrb	r3, [r3, #0]
 8003038:	2b01      	cmp	r3, #1
 800303a:	d123      	bne.n	8003084 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 800303c:	78fa      	ldrb	r2, [r7, #3]
 800303e:	6879      	ldr	r1, [r7, #4]
 8003040:	4613      	mov	r3, r2
 8003042:	011b      	lsls	r3, r3, #4
 8003044:	1a9b      	subs	r3, r3, r2
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	440b      	add	r3, r1
 800304a:	331b      	adds	r3, #27
 800304c:	2200      	movs	r2, #0
 800304e:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8003050:	78fa      	ldrb	r2, [r7, #3]
 8003052:	6879      	ldr	r1, [r7, #4]
 8003054:	4613      	mov	r3, r2
 8003056:	011b      	lsls	r3, r3, #4
 8003058:	1a9b      	subs	r3, r3, r2
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	440b      	add	r3, r1
 800305e:	331c      	adds	r3, #28
 8003060:	2200      	movs	r2, #0
 8003062:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003064:	78fb      	ldrb	r3, [r7, #3]
 8003066:	015a      	lsls	r2, r3, #5
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	4413      	add	r3, r2
 800306c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	78fa      	ldrb	r2, [r7, #3]
 8003074:	0151      	lsls	r1, r2, #5
 8003076:	693a      	ldr	r2, [r7, #16]
 8003078:	440a      	add	r2, r1
 800307a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800307e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003082:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003084:	78fa      	ldrb	r2, [r7, #3]
 8003086:	6879      	ldr	r1, [r7, #4]
 8003088:	4613      	mov	r3, r2
 800308a:	011b      	lsls	r3, r3, #4
 800308c:	1a9b      	subs	r3, r3, r2
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	440b      	add	r3, r1
 8003092:	334c      	adds	r3, #76	@ 0x4c
 8003094:	2204      	movs	r2, #4
 8003096:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003098:	e229      	b.n	80034ee <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800309a:	78fa      	ldrb	r2, [r7, #3]
 800309c:	6879      	ldr	r1, [r7, #4]
 800309e:	4613      	mov	r3, r2
 80030a0:	011b      	lsls	r3, r3, #4
 80030a2:	1a9b      	subs	r3, r3, r2
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	440b      	add	r3, r1
 80030a8:	334c      	adds	r3, #76	@ 0x4c
 80030aa:	2202      	movs	r2, #2
 80030ac:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80030ae:	78fa      	ldrb	r2, [r7, #3]
 80030b0:	6879      	ldr	r1, [r7, #4]
 80030b2:	4613      	mov	r3, r2
 80030b4:	011b      	lsls	r3, r3, #4
 80030b6:	1a9b      	subs	r3, r3, r2
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	440b      	add	r3, r1
 80030bc:	3326      	adds	r3, #38	@ 0x26
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d00b      	beq.n	80030dc <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80030c4:	78fa      	ldrb	r2, [r7, #3]
 80030c6:	6879      	ldr	r1, [r7, #4]
 80030c8:	4613      	mov	r3, r2
 80030ca:	011b      	lsls	r3, r3, #4
 80030cc:	1a9b      	subs	r3, r3, r2
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	440b      	add	r3, r1
 80030d2:	3326      	adds	r3, #38	@ 0x26
 80030d4:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	f040 8209 	bne.w	80034ee <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80030dc:	78fb      	ldrb	r3, [r7, #3]
 80030de:	015a      	lsls	r2, r3, #5
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	4413      	add	r3, r2
 80030e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80030f2:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80030fa:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80030fc:	78fb      	ldrb	r3, [r7, #3]
 80030fe:	015a      	lsls	r2, r3, #5
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	4413      	add	r3, r2
 8003104:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003108:	461a      	mov	r2, r3
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800310e:	e1ee      	b.n	80034ee <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003110:	78fa      	ldrb	r2, [r7, #3]
 8003112:	6879      	ldr	r1, [r7, #4]
 8003114:	4613      	mov	r3, r2
 8003116:	011b      	lsls	r3, r3, #4
 8003118:	1a9b      	subs	r3, r3, r2
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	440b      	add	r3, r1
 800311e:	334d      	adds	r3, #77	@ 0x4d
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	2b05      	cmp	r3, #5
 8003124:	f040 80c8 	bne.w	80032b8 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003128:	78fa      	ldrb	r2, [r7, #3]
 800312a:	6879      	ldr	r1, [r7, #4]
 800312c:	4613      	mov	r3, r2
 800312e:	011b      	lsls	r3, r3, #4
 8003130:	1a9b      	subs	r3, r3, r2
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	440b      	add	r3, r1
 8003136:	334d      	adds	r3, #77	@ 0x4d
 8003138:	2202      	movs	r2, #2
 800313a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800313c:	78fa      	ldrb	r2, [r7, #3]
 800313e:	6879      	ldr	r1, [r7, #4]
 8003140:	4613      	mov	r3, r2
 8003142:	011b      	lsls	r3, r3, #4
 8003144:	1a9b      	subs	r3, r3, r2
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	440b      	add	r3, r1
 800314a:	331b      	adds	r3, #27
 800314c:	781b      	ldrb	r3, [r3, #0]
 800314e:	2b01      	cmp	r3, #1
 8003150:	f040 81ce 	bne.w	80034f0 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003154:	78fa      	ldrb	r2, [r7, #3]
 8003156:	6879      	ldr	r1, [r7, #4]
 8003158:	4613      	mov	r3, r2
 800315a:	011b      	lsls	r3, r3, #4
 800315c:	1a9b      	subs	r3, r3, r2
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	440b      	add	r3, r1
 8003162:	3326      	adds	r3, #38	@ 0x26
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	2b03      	cmp	r3, #3
 8003168:	d16b      	bne.n	8003242 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800316a:	78fa      	ldrb	r2, [r7, #3]
 800316c:	6879      	ldr	r1, [r7, #4]
 800316e:	4613      	mov	r3, r2
 8003170:	011b      	lsls	r3, r3, #4
 8003172:	1a9b      	subs	r3, r3, r2
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	440b      	add	r3, r1
 8003178:	3348      	adds	r3, #72	@ 0x48
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	1c59      	adds	r1, r3, #1
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	4613      	mov	r3, r2
 8003182:	011b      	lsls	r3, r3, #4
 8003184:	1a9b      	subs	r3, r3, r2
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	4403      	add	r3, r0
 800318a:	3348      	adds	r3, #72	@ 0x48
 800318c:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 800318e:	78fa      	ldrb	r2, [r7, #3]
 8003190:	6879      	ldr	r1, [r7, #4]
 8003192:	4613      	mov	r3, r2
 8003194:	011b      	lsls	r3, r3, #4
 8003196:	1a9b      	subs	r3, r3, r2
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	440b      	add	r3, r1
 800319c:	3348      	adds	r3, #72	@ 0x48
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	d943      	bls.n	800322c <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80031a4:	78fa      	ldrb	r2, [r7, #3]
 80031a6:	6879      	ldr	r1, [r7, #4]
 80031a8:	4613      	mov	r3, r2
 80031aa:	011b      	lsls	r3, r3, #4
 80031ac:	1a9b      	subs	r3, r3, r2
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	440b      	add	r3, r1
 80031b2:	3348      	adds	r3, #72	@ 0x48
 80031b4:	2200      	movs	r2, #0
 80031b6:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80031b8:	78fa      	ldrb	r2, [r7, #3]
 80031ba:	6879      	ldr	r1, [r7, #4]
 80031bc:	4613      	mov	r3, r2
 80031be:	011b      	lsls	r3, r3, #4
 80031c0:	1a9b      	subs	r3, r3, r2
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	440b      	add	r3, r1
 80031c6:	331b      	adds	r3, #27
 80031c8:	2200      	movs	r2, #0
 80031ca:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80031cc:	78fa      	ldrb	r2, [r7, #3]
 80031ce:	6879      	ldr	r1, [r7, #4]
 80031d0:	4613      	mov	r3, r2
 80031d2:	011b      	lsls	r3, r3, #4
 80031d4:	1a9b      	subs	r3, r3, r2
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	440b      	add	r3, r1
 80031da:	3344      	adds	r3, #68	@ 0x44
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	2b02      	cmp	r3, #2
 80031e0:	d809      	bhi.n	80031f6 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80031e2:	78fa      	ldrb	r2, [r7, #3]
 80031e4:	6879      	ldr	r1, [r7, #4]
 80031e6:	4613      	mov	r3, r2
 80031e8:	011b      	lsls	r3, r3, #4
 80031ea:	1a9b      	subs	r3, r3, r2
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	440b      	add	r3, r1
 80031f0:	331c      	adds	r3, #28
 80031f2:	2201      	movs	r2, #1
 80031f4:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80031f6:	78fb      	ldrb	r3, [r7, #3]
 80031f8:	015a      	lsls	r2, r3, #5
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	4413      	add	r3, r2
 80031fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	78fa      	ldrb	r2, [r7, #3]
 8003206:	0151      	lsls	r1, r2, #5
 8003208:	693a      	ldr	r2, [r7, #16]
 800320a:	440a      	add	r2, r1
 800320c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003210:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003214:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8003216:	78fa      	ldrb	r2, [r7, #3]
 8003218:	6879      	ldr	r1, [r7, #4]
 800321a:	4613      	mov	r3, r2
 800321c:	011b      	lsls	r3, r3, #4
 800321e:	1a9b      	subs	r3, r3, r2
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	440b      	add	r3, r1
 8003224:	334c      	adds	r3, #76	@ 0x4c
 8003226:	2204      	movs	r2, #4
 8003228:	701a      	strb	r2, [r3, #0]
 800322a:	e014      	b.n	8003256 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800322c:	78fa      	ldrb	r2, [r7, #3]
 800322e:	6879      	ldr	r1, [r7, #4]
 8003230:	4613      	mov	r3, r2
 8003232:	011b      	lsls	r3, r3, #4
 8003234:	1a9b      	subs	r3, r3, r2
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	440b      	add	r3, r1
 800323a:	334c      	adds	r3, #76	@ 0x4c
 800323c:	2202      	movs	r2, #2
 800323e:	701a      	strb	r2, [r3, #0]
 8003240:	e009      	b.n	8003256 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003242:	78fa      	ldrb	r2, [r7, #3]
 8003244:	6879      	ldr	r1, [r7, #4]
 8003246:	4613      	mov	r3, r2
 8003248:	011b      	lsls	r3, r3, #4
 800324a:	1a9b      	subs	r3, r3, r2
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	440b      	add	r3, r1
 8003250:	334c      	adds	r3, #76	@ 0x4c
 8003252:	2202      	movs	r2, #2
 8003254:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003256:	78fa      	ldrb	r2, [r7, #3]
 8003258:	6879      	ldr	r1, [r7, #4]
 800325a:	4613      	mov	r3, r2
 800325c:	011b      	lsls	r3, r3, #4
 800325e:	1a9b      	subs	r3, r3, r2
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	440b      	add	r3, r1
 8003264:	3326      	adds	r3, #38	@ 0x26
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d00b      	beq.n	8003284 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800326c:	78fa      	ldrb	r2, [r7, #3]
 800326e:	6879      	ldr	r1, [r7, #4]
 8003270:	4613      	mov	r3, r2
 8003272:	011b      	lsls	r3, r3, #4
 8003274:	1a9b      	subs	r3, r3, r2
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	440b      	add	r3, r1
 800327a:	3326      	adds	r3, #38	@ 0x26
 800327c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800327e:	2b02      	cmp	r3, #2
 8003280:	f040 8136 	bne.w	80034f0 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003284:	78fb      	ldrb	r3, [r7, #3]
 8003286:	015a      	lsls	r2, r3, #5
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	4413      	add	r3, r2
 800328c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800329a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80032a2:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80032a4:	78fb      	ldrb	r3, [r7, #3]
 80032a6:	015a      	lsls	r2, r3, #5
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	4413      	add	r3, r2
 80032ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032b0:	461a      	mov	r2, r3
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	6013      	str	r3, [r2, #0]
 80032b6:	e11b      	b.n	80034f0 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80032b8:	78fa      	ldrb	r2, [r7, #3]
 80032ba:	6879      	ldr	r1, [r7, #4]
 80032bc:	4613      	mov	r3, r2
 80032be:	011b      	lsls	r3, r3, #4
 80032c0:	1a9b      	subs	r3, r3, r2
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	440b      	add	r3, r1
 80032c6:	334d      	adds	r3, #77	@ 0x4d
 80032c8:	781b      	ldrb	r3, [r3, #0]
 80032ca:	2b03      	cmp	r3, #3
 80032cc:	f040 8081 	bne.w	80033d2 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80032d0:	78fa      	ldrb	r2, [r7, #3]
 80032d2:	6879      	ldr	r1, [r7, #4]
 80032d4:	4613      	mov	r3, r2
 80032d6:	011b      	lsls	r3, r3, #4
 80032d8:	1a9b      	subs	r3, r3, r2
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	440b      	add	r3, r1
 80032de:	334d      	adds	r3, #77	@ 0x4d
 80032e0:	2202      	movs	r2, #2
 80032e2:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80032e4:	78fa      	ldrb	r2, [r7, #3]
 80032e6:	6879      	ldr	r1, [r7, #4]
 80032e8:	4613      	mov	r3, r2
 80032ea:	011b      	lsls	r3, r3, #4
 80032ec:	1a9b      	subs	r3, r3, r2
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	440b      	add	r3, r1
 80032f2:	331b      	adds	r3, #27
 80032f4:	781b      	ldrb	r3, [r3, #0]
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	f040 80fa 	bne.w	80034f0 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80032fc:	78fa      	ldrb	r2, [r7, #3]
 80032fe:	6879      	ldr	r1, [r7, #4]
 8003300:	4613      	mov	r3, r2
 8003302:	011b      	lsls	r3, r3, #4
 8003304:	1a9b      	subs	r3, r3, r2
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	440b      	add	r3, r1
 800330a:	334c      	adds	r3, #76	@ 0x4c
 800330c:	2202      	movs	r2, #2
 800330e:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8003310:	78fb      	ldrb	r3, [r7, #3]
 8003312:	015a      	lsls	r2, r3, #5
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	4413      	add	r3, r2
 8003318:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	78fa      	ldrb	r2, [r7, #3]
 8003320:	0151      	lsls	r1, r2, #5
 8003322:	693a      	ldr	r2, [r7, #16]
 8003324:	440a      	add	r2, r1
 8003326:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800332a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800332e:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8003330:	78fb      	ldrb	r3, [r7, #3]
 8003332:	015a      	lsls	r2, r3, #5
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	4413      	add	r3, r2
 8003338:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	78fa      	ldrb	r2, [r7, #3]
 8003340:	0151      	lsls	r1, r2, #5
 8003342:	693a      	ldr	r2, [r7, #16]
 8003344:	440a      	add	r2, r1
 8003346:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800334a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800334e:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8003350:	78fb      	ldrb	r3, [r7, #3]
 8003352:	015a      	lsls	r2, r3, #5
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	4413      	add	r3, r2
 8003358:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	78fa      	ldrb	r2, [r7, #3]
 8003360:	0151      	lsls	r1, r2, #5
 8003362:	693a      	ldr	r2, [r7, #16]
 8003364:	440a      	add	r2, r1
 8003366:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800336a:	f023 0320 	bic.w	r3, r3, #32
 800336e:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003370:	78fa      	ldrb	r2, [r7, #3]
 8003372:	6879      	ldr	r1, [r7, #4]
 8003374:	4613      	mov	r3, r2
 8003376:	011b      	lsls	r3, r3, #4
 8003378:	1a9b      	subs	r3, r3, r2
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	440b      	add	r3, r1
 800337e:	3326      	adds	r3, #38	@ 0x26
 8003380:	781b      	ldrb	r3, [r3, #0]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d00b      	beq.n	800339e <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003386:	78fa      	ldrb	r2, [r7, #3]
 8003388:	6879      	ldr	r1, [r7, #4]
 800338a:	4613      	mov	r3, r2
 800338c:	011b      	lsls	r3, r3, #4
 800338e:	1a9b      	subs	r3, r3, r2
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	440b      	add	r3, r1
 8003394:	3326      	adds	r3, #38	@ 0x26
 8003396:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003398:	2b02      	cmp	r3, #2
 800339a:	f040 80a9 	bne.w	80034f0 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800339e:	78fb      	ldrb	r3, [r7, #3]
 80033a0:	015a      	lsls	r2, r3, #5
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	4413      	add	r3, r2
 80033a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80033b4:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80033bc:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80033be:	78fb      	ldrb	r3, [r7, #3]
 80033c0:	015a      	lsls	r2, r3, #5
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	4413      	add	r3, r2
 80033c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033ca:	461a      	mov	r2, r3
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6013      	str	r3, [r2, #0]
 80033d0:	e08e      	b.n	80034f0 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80033d2:	78fa      	ldrb	r2, [r7, #3]
 80033d4:	6879      	ldr	r1, [r7, #4]
 80033d6:	4613      	mov	r3, r2
 80033d8:	011b      	lsls	r3, r3, #4
 80033da:	1a9b      	subs	r3, r3, r2
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	440b      	add	r3, r1
 80033e0:	334d      	adds	r3, #77	@ 0x4d
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	2b04      	cmp	r3, #4
 80033e6:	d143      	bne.n	8003470 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80033e8:	78fa      	ldrb	r2, [r7, #3]
 80033ea:	6879      	ldr	r1, [r7, #4]
 80033ec:	4613      	mov	r3, r2
 80033ee:	011b      	lsls	r3, r3, #4
 80033f0:	1a9b      	subs	r3, r3, r2
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	440b      	add	r3, r1
 80033f6:	334d      	adds	r3, #77	@ 0x4d
 80033f8:	2202      	movs	r2, #2
 80033fa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80033fc:	78fa      	ldrb	r2, [r7, #3]
 80033fe:	6879      	ldr	r1, [r7, #4]
 8003400:	4613      	mov	r3, r2
 8003402:	011b      	lsls	r3, r3, #4
 8003404:	1a9b      	subs	r3, r3, r2
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	440b      	add	r3, r1
 800340a:	334c      	adds	r3, #76	@ 0x4c
 800340c:	2202      	movs	r2, #2
 800340e:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003410:	78fa      	ldrb	r2, [r7, #3]
 8003412:	6879      	ldr	r1, [r7, #4]
 8003414:	4613      	mov	r3, r2
 8003416:	011b      	lsls	r3, r3, #4
 8003418:	1a9b      	subs	r3, r3, r2
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	440b      	add	r3, r1
 800341e:	3326      	adds	r3, #38	@ 0x26
 8003420:	781b      	ldrb	r3, [r3, #0]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d00a      	beq.n	800343c <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003426:	78fa      	ldrb	r2, [r7, #3]
 8003428:	6879      	ldr	r1, [r7, #4]
 800342a:	4613      	mov	r3, r2
 800342c:	011b      	lsls	r3, r3, #4
 800342e:	1a9b      	subs	r3, r3, r2
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	440b      	add	r3, r1
 8003434:	3326      	adds	r3, #38	@ 0x26
 8003436:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003438:	2b02      	cmp	r3, #2
 800343a:	d159      	bne.n	80034f0 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800343c:	78fb      	ldrb	r3, [r7, #3]
 800343e:	015a      	lsls	r2, r3, #5
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	4413      	add	r3, r2
 8003444:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003452:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800345a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800345c:	78fb      	ldrb	r3, [r7, #3]
 800345e:	015a      	lsls	r2, r3, #5
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	4413      	add	r3, r2
 8003464:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003468:	461a      	mov	r2, r3
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	6013      	str	r3, [r2, #0]
 800346e:	e03f      	b.n	80034f0 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8003470:	78fa      	ldrb	r2, [r7, #3]
 8003472:	6879      	ldr	r1, [r7, #4]
 8003474:	4613      	mov	r3, r2
 8003476:	011b      	lsls	r3, r3, #4
 8003478:	1a9b      	subs	r3, r3, r2
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	440b      	add	r3, r1
 800347e:	334d      	adds	r3, #77	@ 0x4d
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	2b08      	cmp	r3, #8
 8003484:	d126      	bne.n	80034d4 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003486:	78fa      	ldrb	r2, [r7, #3]
 8003488:	6879      	ldr	r1, [r7, #4]
 800348a:	4613      	mov	r3, r2
 800348c:	011b      	lsls	r3, r3, #4
 800348e:	1a9b      	subs	r3, r3, r2
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	440b      	add	r3, r1
 8003494:	334d      	adds	r3, #77	@ 0x4d
 8003496:	2202      	movs	r2, #2
 8003498:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800349a:	78fa      	ldrb	r2, [r7, #3]
 800349c:	6879      	ldr	r1, [r7, #4]
 800349e:	4613      	mov	r3, r2
 80034a0:	011b      	lsls	r3, r3, #4
 80034a2:	1a9b      	subs	r3, r3, r2
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	440b      	add	r3, r1
 80034a8:	3344      	adds	r3, #68	@ 0x44
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	1c59      	adds	r1, r3, #1
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	4613      	mov	r3, r2
 80034b2:	011b      	lsls	r3, r3, #4
 80034b4:	1a9b      	subs	r3, r3, r2
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	4403      	add	r3, r0
 80034ba:	3344      	adds	r3, #68	@ 0x44
 80034bc:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80034be:	78fa      	ldrb	r2, [r7, #3]
 80034c0:	6879      	ldr	r1, [r7, #4]
 80034c2:	4613      	mov	r3, r2
 80034c4:	011b      	lsls	r3, r3, #4
 80034c6:	1a9b      	subs	r3, r3, r2
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	440b      	add	r3, r1
 80034cc:	334c      	adds	r3, #76	@ 0x4c
 80034ce:	2204      	movs	r2, #4
 80034d0:	701a      	strb	r2, [r3, #0]
 80034d2:	e00d      	b.n	80034f0 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80034d4:	78fa      	ldrb	r2, [r7, #3]
 80034d6:	6879      	ldr	r1, [r7, #4]
 80034d8:	4613      	mov	r3, r2
 80034da:	011b      	lsls	r3, r3, #4
 80034dc:	1a9b      	subs	r3, r3, r2
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	440b      	add	r3, r1
 80034e2:	334d      	adds	r3, #77	@ 0x4d
 80034e4:	781b      	ldrb	r3, [r3, #0]
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	f000 8100 	beq.w	80036ec <HCD_HC_IN_IRQHandler+0xcca>
 80034ec:	e000      	b.n	80034f0 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80034ee:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80034f0:	78fa      	ldrb	r2, [r7, #3]
 80034f2:	6879      	ldr	r1, [r7, #4]
 80034f4:	4613      	mov	r3, r2
 80034f6:	011b      	lsls	r3, r3, #4
 80034f8:	1a9b      	subs	r3, r3, r2
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	440b      	add	r3, r1
 80034fe:	334c      	adds	r3, #76	@ 0x4c
 8003500:	781a      	ldrb	r2, [r3, #0]
 8003502:	78fb      	ldrb	r3, [r7, #3]
 8003504:	4619      	mov	r1, r3
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f00a f890 	bl	800d62c <HAL_HCD_HC_NotifyURBChange_Callback>
 800350c:	e0ef      	b.n	80036ee <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	78fa      	ldrb	r2, [r7, #3]
 8003514:	4611      	mov	r1, r2
 8003516:	4618      	mov	r0, r3
 8003518:	f003 fd2d 	bl	8006f76 <USB_ReadChInterrupts>
 800351c:	4603      	mov	r3, r0
 800351e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003522:	2b40      	cmp	r3, #64	@ 0x40
 8003524:	d12f      	bne.n	8003586 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003526:	78fb      	ldrb	r3, [r7, #3]
 8003528:	015a      	lsls	r2, r3, #5
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	4413      	add	r3, r2
 800352e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003532:	461a      	mov	r2, r3
 8003534:	2340      	movs	r3, #64	@ 0x40
 8003536:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8003538:	78fa      	ldrb	r2, [r7, #3]
 800353a:	6879      	ldr	r1, [r7, #4]
 800353c:	4613      	mov	r3, r2
 800353e:	011b      	lsls	r3, r3, #4
 8003540:	1a9b      	subs	r3, r3, r2
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	440b      	add	r3, r1
 8003546:	334d      	adds	r3, #77	@ 0x4d
 8003548:	2205      	movs	r2, #5
 800354a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800354c:	78fa      	ldrb	r2, [r7, #3]
 800354e:	6879      	ldr	r1, [r7, #4]
 8003550:	4613      	mov	r3, r2
 8003552:	011b      	lsls	r3, r3, #4
 8003554:	1a9b      	subs	r3, r3, r2
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	440b      	add	r3, r1
 800355a:	331a      	adds	r3, #26
 800355c:	781b      	ldrb	r3, [r3, #0]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d109      	bne.n	8003576 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003562:	78fa      	ldrb	r2, [r7, #3]
 8003564:	6879      	ldr	r1, [r7, #4]
 8003566:	4613      	mov	r3, r2
 8003568:	011b      	lsls	r3, r3, #4
 800356a:	1a9b      	subs	r3, r3, r2
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	440b      	add	r3, r1
 8003570:	3344      	adds	r3, #68	@ 0x44
 8003572:	2200      	movs	r2, #0
 8003574:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	78fa      	ldrb	r2, [r7, #3]
 800357c:	4611      	mov	r1, r2
 800357e:	4618      	mov	r0, r3
 8003580:	f004 fa9d 	bl	8007abe <USB_HC_Halt>
 8003584:	e0b3      	b.n	80036ee <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	78fa      	ldrb	r2, [r7, #3]
 800358c:	4611      	mov	r1, r2
 800358e:	4618      	mov	r0, r3
 8003590:	f003 fcf1 	bl	8006f76 <USB_ReadChInterrupts>
 8003594:	4603      	mov	r3, r0
 8003596:	f003 0310 	and.w	r3, r3, #16
 800359a:	2b10      	cmp	r3, #16
 800359c:	f040 80a7 	bne.w	80036ee <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80035a0:	78fa      	ldrb	r2, [r7, #3]
 80035a2:	6879      	ldr	r1, [r7, #4]
 80035a4:	4613      	mov	r3, r2
 80035a6:	011b      	lsls	r3, r3, #4
 80035a8:	1a9b      	subs	r3, r3, r2
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	440b      	add	r3, r1
 80035ae:	3326      	adds	r3, #38	@ 0x26
 80035b0:	781b      	ldrb	r3, [r3, #0]
 80035b2:	2b03      	cmp	r3, #3
 80035b4:	d11b      	bne.n	80035ee <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80035b6:	78fa      	ldrb	r2, [r7, #3]
 80035b8:	6879      	ldr	r1, [r7, #4]
 80035ba:	4613      	mov	r3, r2
 80035bc:	011b      	lsls	r3, r3, #4
 80035be:	1a9b      	subs	r3, r3, r2
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	440b      	add	r3, r1
 80035c4:	3344      	adds	r3, #68	@ 0x44
 80035c6:	2200      	movs	r2, #0
 80035c8:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80035ca:	78fa      	ldrb	r2, [r7, #3]
 80035cc:	6879      	ldr	r1, [r7, #4]
 80035ce:	4613      	mov	r3, r2
 80035d0:	011b      	lsls	r3, r3, #4
 80035d2:	1a9b      	subs	r3, r3, r2
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	440b      	add	r3, r1
 80035d8:	334d      	adds	r3, #77	@ 0x4d
 80035da:	2204      	movs	r2, #4
 80035dc:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	78fa      	ldrb	r2, [r7, #3]
 80035e4:	4611      	mov	r1, r2
 80035e6:	4618      	mov	r0, r3
 80035e8:	f004 fa69 	bl	8007abe <USB_HC_Halt>
 80035ec:	e03f      	b.n	800366e <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80035ee:	78fa      	ldrb	r2, [r7, #3]
 80035f0:	6879      	ldr	r1, [r7, #4]
 80035f2:	4613      	mov	r3, r2
 80035f4:	011b      	lsls	r3, r3, #4
 80035f6:	1a9b      	subs	r3, r3, r2
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	440b      	add	r3, r1
 80035fc:	3326      	adds	r3, #38	@ 0x26
 80035fe:	781b      	ldrb	r3, [r3, #0]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d00a      	beq.n	800361a <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003604:	78fa      	ldrb	r2, [r7, #3]
 8003606:	6879      	ldr	r1, [r7, #4]
 8003608:	4613      	mov	r3, r2
 800360a:	011b      	lsls	r3, r3, #4
 800360c:	1a9b      	subs	r3, r3, r2
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	440b      	add	r3, r1
 8003612:	3326      	adds	r3, #38	@ 0x26
 8003614:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003616:	2b02      	cmp	r3, #2
 8003618:	d129      	bne.n	800366e <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800361a:	78fa      	ldrb	r2, [r7, #3]
 800361c:	6879      	ldr	r1, [r7, #4]
 800361e:	4613      	mov	r3, r2
 8003620:	011b      	lsls	r3, r3, #4
 8003622:	1a9b      	subs	r3, r3, r2
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	440b      	add	r3, r1
 8003628:	3344      	adds	r3, #68	@ 0x44
 800362a:	2200      	movs	r2, #0
 800362c:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	799b      	ldrb	r3, [r3, #6]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d00a      	beq.n	800364c <HCD_HC_IN_IRQHandler+0xc2a>
 8003636:	78fa      	ldrb	r2, [r7, #3]
 8003638:	6879      	ldr	r1, [r7, #4]
 800363a:	4613      	mov	r3, r2
 800363c:	011b      	lsls	r3, r3, #4
 800363e:	1a9b      	subs	r3, r3, r2
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	440b      	add	r3, r1
 8003644:	331b      	adds	r3, #27
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	2b01      	cmp	r3, #1
 800364a:	d110      	bne.n	800366e <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 800364c:	78fa      	ldrb	r2, [r7, #3]
 800364e:	6879      	ldr	r1, [r7, #4]
 8003650:	4613      	mov	r3, r2
 8003652:	011b      	lsls	r3, r3, #4
 8003654:	1a9b      	subs	r3, r3, r2
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	440b      	add	r3, r1
 800365a:	334d      	adds	r3, #77	@ 0x4d
 800365c:	2204      	movs	r2, #4
 800365e:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	78fa      	ldrb	r2, [r7, #3]
 8003666:	4611      	mov	r1, r2
 8003668:	4618      	mov	r0, r3
 800366a:	f004 fa28 	bl	8007abe <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 800366e:	78fa      	ldrb	r2, [r7, #3]
 8003670:	6879      	ldr	r1, [r7, #4]
 8003672:	4613      	mov	r3, r2
 8003674:	011b      	lsls	r3, r3, #4
 8003676:	1a9b      	subs	r3, r3, r2
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	440b      	add	r3, r1
 800367c:	331b      	adds	r3, #27
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	2b01      	cmp	r3, #1
 8003682:	d129      	bne.n	80036d8 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003684:	78fa      	ldrb	r2, [r7, #3]
 8003686:	6879      	ldr	r1, [r7, #4]
 8003688:	4613      	mov	r3, r2
 800368a:	011b      	lsls	r3, r3, #4
 800368c:	1a9b      	subs	r3, r3, r2
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	440b      	add	r3, r1
 8003692:	331b      	adds	r3, #27
 8003694:	2200      	movs	r2, #0
 8003696:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003698:	78fb      	ldrb	r3, [r7, #3]
 800369a:	015a      	lsls	r2, r3, #5
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	4413      	add	r3, r2
 80036a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	78fa      	ldrb	r2, [r7, #3]
 80036a8:	0151      	lsls	r1, r2, #5
 80036aa:	693a      	ldr	r2, [r7, #16]
 80036ac:	440a      	add	r2, r1
 80036ae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80036b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036b6:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 80036b8:	78fb      	ldrb	r3, [r7, #3]
 80036ba:	015a      	lsls	r2, r3, #5
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	4413      	add	r3, r2
 80036c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	78fa      	ldrb	r2, [r7, #3]
 80036c8:	0151      	lsls	r1, r2, #5
 80036ca:	693a      	ldr	r2, [r7, #16]
 80036cc:	440a      	add	r2, r1
 80036ce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80036d2:	f043 0320 	orr.w	r3, r3, #32
 80036d6:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80036d8:	78fb      	ldrb	r3, [r7, #3]
 80036da:	015a      	lsls	r2, r3, #5
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	4413      	add	r3, r2
 80036e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036e4:	461a      	mov	r2, r3
 80036e6:	2310      	movs	r3, #16
 80036e8:	6093      	str	r3, [r2, #8]
 80036ea:	e000      	b.n	80036ee <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80036ec:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80036ee:	3718      	adds	r7, #24
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}

080036f4 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b086      	sub	sp, #24
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	460b      	mov	r3, r1
 80036fe:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	78fa      	ldrb	r2, [r7, #3]
 8003710:	4611      	mov	r1, r2
 8003712:	4618      	mov	r0, r3
 8003714:	f003 fc2f 	bl	8006f76 <USB_ReadChInterrupts>
 8003718:	4603      	mov	r3, r0
 800371a:	f003 0304 	and.w	r3, r3, #4
 800371e:	2b04      	cmp	r3, #4
 8003720:	d11b      	bne.n	800375a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003722:	78fb      	ldrb	r3, [r7, #3]
 8003724:	015a      	lsls	r2, r3, #5
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	4413      	add	r3, r2
 800372a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800372e:	461a      	mov	r2, r3
 8003730:	2304      	movs	r3, #4
 8003732:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003734:	78fa      	ldrb	r2, [r7, #3]
 8003736:	6879      	ldr	r1, [r7, #4]
 8003738:	4613      	mov	r3, r2
 800373a:	011b      	lsls	r3, r3, #4
 800373c:	1a9b      	subs	r3, r3, r2
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	440b      	add	r3, r1
 8003742:	334d      	adds	r3, #77	@ 0x4d
 8003744:	2207      	movs	r2, #7
 8003746:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	78fa      	ldrb	r2, [r7, #3]
 800374e:	4611      	mov	r1, r2
 8003750:	4618      	mov	r0, r3
 8003752:	f004 f9b4 	bl	8007abe <USB_HC_Halt>
 8003756:	f000 bc6f 	b.w	8004038 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	78fa      	ldrb	r2, [r7, #3]
 8003760:	4611      	mov	r1, r2
 8003762:	4618      	mov	r0, r3
 8003764:	f003 fc07 	bl	8006f76 <USB_ReadChInterrupts>
 8003768:	4603      	mov	r3, r0
 800376a:	f003 0320 	and.w	r3, r3, #32
 800376e:	2b20      	cmp	r3, #32
 8003770:	f040 8082 	bne.w	8003878 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003774:	78fb      	ldrb	r3, [r7, #3]
 8003776:	015a      	lsls	r2, r3, #5
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	4413      	add	r3, r2
 800377c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003780:	461a      	mov	r2, r3
 8003782:	2320      	movs	r3, #32
 8003784:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8003786:	78fa      	ldrb	r2, [r7, #3]
 8003788:	6879      	ldr	r1, [r7, #4]
 800378a:	4613      	mov	r3, r2
 800378c:	011b      	lsls	r3, r3, #4
 800378e:	1a9b      	subs	r3, r3, r2
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	440b      	add	r3, r1
 8003794:	3319      	adds	r3, #25
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	2b01      	cmp	r3, #1
 800379a:	d124      	bne.n	80037e6 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 800379c:	78fa      	ldrb	r2, [r7, #3]
 800379e:	6879      	ldr	r1, [r7, #4]
 80037a0:	4613      	mov	r3, r2
 80037a2:	011b      	lsls	r3, r3, #4
 80037a4:	1a9b      	subs	r3, r3, r2
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	440b      	add	r3, r1
 80037aa:	3319      	adds	r3, #25
 80037ac:	2200      	movs	r2, #0
 80037ae:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80037b0:	78fa      	ldrb	r2, [r7, #3]
 80037b2:	6879      	ldr	r1, [r7, #4]
 80037b4:	4613      	mov	r3, r2
 80037b6:	011b      	lsls	r3, r3, #4
 80037b8:	1a9b      	subs	r3, r3, r2
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	440b      	add	r3, r1
 80037be:	334c      	adds	r3, #76	@ 0x4c
 80037c0:	2202      	movs	r2, #2
 80037c2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80037c4:	78fa      	ldrb	r2, [r7, #3]
 80037c6:	6879      	ldr	r1, [r7, #4]
 80037c8:	4613      	mov	r3, r2
 80037ca:	011b      	lsls	r3, r3, #4
 80037cc:	1a9b      	subs	r3, r3, r2
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	440b      	add	r3, r1
 80037d2:	334d      	adds	r3, #77	@ 0x4d
 80037d4:	2203      	movs	r2, #3
 80037d6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	78fa      	ldrb	r2, [r7, #3]
 80037de:	4611      	mov	r1, r2
 80037e0:	4618      	mov	r0, r3
 80037e2:	f004 f96c 	bl	8007abe <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 80037e6:	78fa      	ldrb	r2, [r7, #3]
 80037e8:	6879      	ldr	r1, [r7, #4]
 80037ea:	4613      	mov	r3, r2
 80037ec:	011b      	lsls	r3, r3, #4
 80037ee:	1a9b      	subs	r3, r3, r2
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	440b      	add	r3, r1
 80037f4:	331a      	adds	r3, #26
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	f040 841d 	bne.w	8004038 <HCD_HC_OUT_IRQHandler+0x944>
 80037fe:	78fa      	ldrb	r2, [r7, #3]
 8003800:	6879      	ldr	r1, [r7, #4]
 8003802:	4613      	mov	r3, r2
 8003804:	011b      	lsls	r3, r3, #4
 8003806:	1a9b      	subs	r3, r3, r2
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	440b      	add	r3, r1
 800380c:	331b      	adds	r3, #27
 800380e:	781b      	ldrb	r3, [r3, #0]
 8003810:	2b00      	cmp	r3, #0
 8003812:	f040 8411 	bne.w	8004038 <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8003816:	78fa      	ldrb	r2, [r7, #3]
 8003818:	6879      	ldr	r1, [r7, #4]
 800381a:	4613      	mov	r3, r2
 800381c:	011b      	lsls	r3, r3, #4
 800381e:	1a9b      	subs	r3, r3, r2
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	440b      	add	r3, r1
 8003824:	3326      	adds	r3, #38	@ 0x26
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	2b01      	cmp	r3, #1
 800382a:	d009      	beq.n	8003840 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 800382c:	78fa      	ldrb	r2, [r7, #3]
 800382e:	6879      	ldr	r1, [r7, #4]
 8003830:	4613      	mov	r3, r2
 8003832:	011b      	lsls	r3, r3, #4
 8003834:	1a9b      	subs	r3, r3, r2
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	440b      	add	r3, r1
 800383a:	331b      	adds	r3, #27
 800383c:	2201      	movs	r2, #1
 800383e:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8003840:	78fa      	ldrb	r2, [r7, #3]
 8003842:	6879      	ldr	r1, [r7, #4]
 8003844:	4613      	mov	r3, r2
 8003846:	011b      	lsls	r3, r3, #4
 8003848:	1a9b      	subs	r3, r3, r2
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	440b      	add	r3, r1
 800384e:	334d      	adds	r3, #77	@ 0x4d
 8003850:	2203      	movs	r2, #3
 8003852:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	78fa      	ldrb	r2, [r7, #3]
 800385a:	4611      	mov	r1, r2
 800385c:	4618      	mov	r0, r3
 800385e:	f004 f92e 	bl	8007abe <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8003862:	78fa      	ldrb	r2, [r7, #3]
 8003864:	6879      	ldr	r1, [r7, #4]
 8003866:	4613      	mov	r3, r2
 8003868:	011b      	lsls	r3, r3, #4
 800386a:	1a9b      	subs	r3, r3, r2
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	440b      	add	r3, r1
 8003870:	3344      	adds	r3, #68	@ 0x44
 8003872:	2200      	movs	r2, #0
 8003874:	601a      	str	r2, [r3, #0]
 8003876:	e3df      	b.n	8004038 <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	78fa      	ldrb	r2, [r7, #3]
 800387e:	4611      	mov	r1, r2
 8003880:	4618      	mov	r0, r3
 8003882:	f003 fb78 	bl	8006f76 <USB_ReadChInterrupts>
 8003886:	4603      	mov	r3, r0
 8003888:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800388c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003890:	d111      	bne.n	80038b6 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003892:	78fb      	ldrb	r3, [r7, #3]
 8003894:	015a      	lsls	r2, r3, #5
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	4413      	add	r3, r2
 800389a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800389e:	461a      	mov	r2, r3
 80038a0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80038a4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	78fa      	ldrb	r2, [r7, #3]
 80038ac:	4611      	mov	r1, r2
 80038ae:	4618      	mov	r0, r3
 80038b0:	f004 f905 	bl	8007abe <USB_HC_Halt>
 80038b4:	e3c0      	b.n	8004038 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	78fa      	ldrb	r2, [r7, #3]
 80038bc:	4611      	mov	r1, r2
 80038be:	4618      	mov	r0, r3
 80038c0:	f003 fb59 	bl	8006f76 <USB_ReadChInterrupts>
 80038c4:	4603      	mov	r3, r0
 80038c6:	f003 0301 	and.w	r3, r3, #1
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d168      	bne.n	80039a0 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80038ce:	78fa      	ldrb	r2, [r7, #3]
 80038d0:	6879      	ldr	r1, [r7, #4]
 80038d2:	4613      	mov	r3, r2
 80038d4:	011b      	lsls	r3, r3, #4
 80038d6:	1a9b      	subs	r3, r3, r2
 80038d8:	009b      	lsls	r3, r3, #2
 80038da:	440b      	add	r3, r1
 80038dc:	3344      	adds	r3, #68	@ 0x44
 80038de:	2200      	movs	r2, #0
 80038e0:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	78fa      	ldrb	r2, [r7, #3]
 80038e8:	4611      	mov	r1, r2
 80038ea:	4618      	mov	r0, r3
 80038ec:	f003 fb43 	bl	8006f76 <USB_ReadChInterrupts>
 80038f0:	4603      	mov	r3, r0
 80038f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038f6:	2b40      	cmp	r3, #64	@ 0x40
 80038f8:	d112      	bne.n	8003920 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80038fa:	78fa      	ldrb	r2, [r7, #3]
 80038fc:	6879      	ldr	r1, [r7, #4]
 80038fe:	4613      	mov	r3, r2
 8003900:	011b      	lsls	r3, r3, #4
 8003902:	1a9b      	subs	r3, r3, r2
 8003904:	009b      	lsls	r3, r3, #2
 8003906:	440b      	add	r3, r1
 8003908:	3319      	adds	r3, #25
 800390a:	2201      	movs	r2, #1
 800390c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800390e:	78fb      	ldrb	r3, [r7, #3]
 8003910:	015a      	lsls	r2, r3, #5
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	4413      	add	r3, r2
 8003916:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800391a:	461a      	mov	r2, r3
 800391c:	2340      	movs	r3, #64	@ 0x40
 800391e:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8003920:	78fa      	ldrb	r2, [r7, #3]
 8003922:	6879      	ldr	r1, [r7, #4]
 8003924:	4613      	mov	r3, r2
 8003926:	011b      	lsls	r3, r3, #4
 8003928:	1a9b      	subs	r3, r3, r2
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	440b      	add	r3, r1
 800392e:	331b      	adds	r3, #27
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d019      	beq.n	800396a <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003936:	78fa      	ldrb	r2, [r7, #3]
 8003938:	6879      	ldr	r1, [r7, #4]
 800393a:	4613      	mov	r3, r2
 800393c:	011b      	lsls	r3, r3, #4
 800393e:	1a9b      	subs	r3, r3, r2
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	440b      	add	r3, r1
 8003944:	331b      	adds	r3, #27
 8003946:	2200      	movs	r2, #0
 8003948:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800394a:	78fb      	ldrb	r3, [r7, #3]
 800394c:	015a      	lsls	r2, r3, #5
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	4413      	add	r3, r2
 8003952:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	78fa      	ldrb	r2, [r7, #3]
 800395a:	0151      	lsls	r1, r2, #5
 800395c:	693a      	ldr	r2, [r7, #16]
 800395e:	440a      	add	r2, r1
 8003960:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003964:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003968:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800396a:	78fb      	ldrb	r3, [r7, #3]
 800396c:	015a      	lsls	r2, r3, #5
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	4413      	add	r3, r2
 8003972:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003976:	461a      	mov	r2, r3
 8003978:	2301      	movs	r3, #1
 800397a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 800397c:	78fa      	ldrb	r2, [r7, #3]
 800397e:	6879      	ldr	r1, [r7, #4]
 8003980:	4613      	mov	r3, r2
 8003982:	011b      	lsls	r3, r3, #4
 8003984:	1a9b      	subs	r3, r3, r2
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	440b      	add	r3, r1
 800398a:	334d      	adds	r3, #77	@ 0x4d
 800398c:	2201      	movs	r2, #1
 800398e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	78fa      	ldrb	r2, [r7, #3]
 8003996:	4611      	mov	r1, r2
 8003998:	4618      	mov	r0, r3
 800399a:	f004 f890 	bl	8007abe <USB_HC_Halt>
 800399e:	e34b      	b.n	8004038 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	78fa      	ldrb	r2, [r7, #3]
 80039a6:	4611      	mov	r1, r2
 80039a8:	4618      	mov	r0, r3
 80039aa:	f003 fae4 	bl	8006f76 <USB_ReadChInterrupts>
 80039ae:	4603      	mov	r3, r0
 80039b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039b4:	2b40      	cmp	r3, #64	@ 0x40
 80039b6:	d139      	bne.n	8003a2c <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 80039b8:	78fa      	ldrb	r2, [r7, #3]
 80039ba:	6879      	ldr	r1, [r7, #4]
 80039bc:	4613      	mov	r3, r2
 80039be:	011b      	lsls	r3, r3, #4
 80039c0:	1a9b      	subs	r3, r3, r2
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	440b      	add	r3, r1
 80039c6:	334d      	adds	r3, #77	@ 0x4d
 80039c8:	2205      	movs	r2, #5
 80039ca:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80039cc:	78fa      	ldrb	r2, [r7, #3]
 80039ce:	6879      	ldr	r1, [r7, #4]
 80039d0:	4613      	mov	r3, r2
 80039d2:	011b      	lsls	r3, r3, #4
 80039d4:	1a9b      	subs	r3, r3, r2
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	440b      	add	r3, r1
 80039da:	331a      	adds	r3, #26
 80039dc:	781b      	ldrb	r3, [r3, #0]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d109      	bne.n	80039f6 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80039e2:	78fa      	ldrb	r2, [r7, #3]
 80039e4:	6879      	ldr	r1, [r7, #4]
 80039e6:	4613      	mov	r3, r2
 80039e8:	011b      	lsls	r3, r3, #4
 80039ea:	1a9b      	subs	r3, r3, r2
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	440b      	add	r3, r1
 80039f0:	3319      	adds	r3, #25
 80039f2:	2201      	movs	r2, #1
 80039f4:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80039f6:	78fa      	ldrb	r2, [r7, #3]
 80039f8:	6879      	ldr	r1, [r7, #4]
 80039fa:	4613      	mov	r3, r2
 80039fc:	011b      	lsls	r3, r3, #4
 80039fe:	1a9b      	subs	r3, r3, r2
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	440b      	add	r3, r1
 8003a04:	3344      	adds	r3, #68	@ 0x44
 8003a06:	2200      	movs	r2, #0
 8003a08:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	78fa      	ldrb	r2, [r7, #3]
 8003a10:	4611      	mov	r1, r2
 8003a12:	4618      	mov	r0, r3
 8003a14:	f004 f853 	bl	8007abe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003a18:	78fb      	ldrb	r3, [r7, #3]
 8003a1a:	015a      	lsls	r2, r3, #5
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	4413      	add	r3, r2
 8003a20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a24:	461a      	mov	r2, r3
 8003a26:	2340      	movs	r3, #64	@ 0x40
 8003a28:	6093      	str	r3, [r2, #8]
 8003a2a:	e305      	b.n	8004038 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	78fa      	ldrb	r2, [r7, #3]
 8003a32:	4611      	mov	r1, r2
 8003a34:	4618      	mov	r0, r3
 8003a36:	f003 fa9e 	bl	8006f76 <USB_ReadChInterrupts>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	f003 0308 	and.w	r3, r3, #8
 8003a40:	2b08      	cmp	r3, #8
 8003a42:	d11a      	bne.n	8003a7a <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003a44:	78fb      	ldrb	r3, [r7, #3]
 8003a46:	015a      	lsls	r2, r3, #5
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	4413      	add	r3, r2
 8003a4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a50:	461a      	mov	r2, r3
 8003a52:	2308      	movs	r3, #8
 8003a54:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003a56:	78fa      	ldrb	r2, [r7, #3]
 8003a58:	6879      	ldr	r1, [r7, #4]
 8003a5a:	4613      	mov	r3, r2
 8003a5c:	011b      	lsls	r3, r3, #4
 8003a5e:	1a9b      	subs	r3, r3, r2
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	440b      	add	r3, r1
 8003a64:	334d      	adds	r3, #77	@ 0x4d
 8003a66:	2206      	movs	r2, #6
 8003a68:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	78fa      	ldrb	r2, [r7, #3]
 8003a70:	4611      	mov	r1, r2
 8003a72:	4618      	mov	r0, r3
 8003a74:	f004 f823 	bl	8007abe <USB_HC_Halt>
 8003a78:	e2de      	b.n	8004038 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	78fa      	ldrb	r2, [r7, #3]
 8003a80:	4611      	mov	r1, r2
 8003a82:	4618      	mov	r0, r3
 8003a84:	f003 fa77 	bl	8006f76 <USB_ReadChInterrupts>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	f003 0310 	and.w	r3, r3, #16
 8003a8e:	2b10      	cmp	r3, #16
 8003a90:	d144      	bne.n	8003b1c <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003a92:	78fa      	ldrb	r2, [r7, #3]
 8003a94:	6879      	ldr	r1, [r7, #4]
 8003a96:	4613      	mov	r3, r2
 8003a98:	011b      	lsls	r3, r3, #4
 8003a9a:	1a9b      	subs	r3, r3, r2
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	440b      	add	r3, r1
 8003aa0:	3344      	adds	r3, #68	@ 0x44
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8003aa6:	78fa      	ldrb	r2, [r7, #3]
 8003aa8:	6879      	ldr	r1, [r7, #4]
 8003aaa:	4613      	mov	r3, r2
 8003aac:	011b      	lsls	r3, r3, #4
 8003aae:	1a9b      	subs	r3, r3, r2
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	440b      	add	r3, r1
 8003ab4:	334d      	adds	r3, #77	@ 0x4d
 8003ab6:	2204      	movs	r2, #4
 8003ab8:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8003aba:	78fa      	ldrb	r2, [r7, #3]
 8003abc:	6879      	ldr	r1, [r7, #4]
 8003abe:	4613      	mov	r3, r2
 8003ac0:	011b      	lsls	r3, r3, #4
 8003ac2:	1a9b      	subs	r3, r3, r2
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	440b      	add	r3, r1
 8003ac8:	3319      	adds	r3, #25
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d114      	bne.n	8003afa <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8003ad0:	78fa      	ldrb	r2, [r7, #3]
 8003ad2:	6879      	ldr	r1, [r7, #4]
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	011b      	lsls	r3, r3, #4
 8003ad8:	1a9b      	subs	r3, r3, r2
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	440b      	add	r3, r1
 8003ade:	3318      	adds	r3, #24
 8003ae0:	781b      	ldrb	r3, [r3, #0]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d109      	bne.n	8003afa <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8003ae6:	78fa      	ldrb	r2, [r7, #3]
 8003ae8:	6879      	ldr	r1, [r7, #4]
 8003aea:	4613      	mov	r3, r2
 8003aec:	011b      	lsls	r3, r3, #4
 8003aee:	1a9b      	subs	r3, r3, r2
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	440b      	add	r3, r1
 8003af4:	3319      	adds	r3, #25
 8003af6:	2201      	movs	r2, #1
 8003af8:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	78fa      	ldrb	r2, [r7, #3]
 8003b00:	4611      	mov	r1, r2
 8003b02:	4618      	mov	r0, r3
 8003b04:	f003 ffdb 	bl	8007abe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003b08:	78fb      	ldrb	r3, [r7, #3]
 8003b0a:	015a      	lsls	r2, r3, #5
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	4413      	add	r3, r2
 8003b10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b14:	461a      	mov	r2, r3
 8003b16:	2310      	movs	r3, #16
 8003b18:	6093      	str	r3, [r2, #8]
 8003b1a:	e28d      	b.n	8004038 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	78fa      	ldrb	r2, [r7, #3]
 8003b22:	4611      	mov	r1, r2
 8003b24:	4618      	mov	r0, r3
 8003b26:	f003 fa26 	bl	8006f76 <USB_ReadChInterrupts>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b30:	2b80      	cmp	r3, #128	@ 0x80
 8003b32:	d169      	bne.n	8003c08 <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	799b      	ldrb	r3, [r3, #6]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d111      	bne.n	8003b60 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8003b3c:	78fa      	ldrb	r2, [r7, #3]
 8003b3e:	6879      	ldr	r1, [r7, #4]
 8003b40:	4613      	mov	r3, r2
 8003b42:	011b      	lsls	r3, r3, #4
 8003b44:	1a9b      	subs	r3, r3, r2
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	440b      	add	r3, r1
 8003b4a:	334d      	adds	r3, #77	@ 0x4d
 8003b4c:	2207      	movs	r2, #7
 8003b4e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	78fa      	ldrb	r2, [r7, #3]
 8003b56:	4611      	mov	r1, r2
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f003 ffb0 	bl	8007abe <USB_HC_Halt>
 8003b5e:	e049      	b.n	8003bf4 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8003b60:	78fa      	ldrb	r2, [r7, #3]
 8003b62:	6879      	ldr	r1, [r7, #4]
 8003b64:	4613      	mov	r3, r2
 8003b66:	011b      	lsls	r3, r3, #4
 8003b68:	1a9b      	subs	r3, r3, r2
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	440b      	add	r3, r1
 8003b6e:	3344      	adds	r3, #68	@ 0x44
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	1c59      	adds	r1, r3, #1
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	4613      	mov	r3, r2
 8003b78:	011b      	lsls	r3, r3, #4
 8003b7a:	1a9b      	subs	r3, r3, r2
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	4403      	add	r3, r0
 8003b80:	3344      	adds	r3, #68	@ 0x44
 8003b82:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003b84:	78fa      	ldrb	r2, [r7, #3]
 8003b86:	6879      	ldr	r1, [r7, #4]
 8003b88:	4613      	mov	r3, r2
 8003b8a:	011b      	lsls	r3, r3, #4
 8003b8c:	1a9b      	subs	r3, r3, r2
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	440b      	add	r3, r1
 8003b92:	3344      	adds	r3, #68	@ 0x44
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	2b02      	cmp	r3, #2
 8003b98:	d922      	bls.n	8003be0 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003b9a:	78fa      	ldrb	r2, [r7, #3]
 8003b9c:	6879      	ldr	r1, [r7, #4]
 8003b9e:	4613      	mov	r3, r2
 8003ba0:	011b      	lsls	r3, r3, #4
 8003ba2:	1a9b      	subs	r3, r3, r2
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	440b      	add	r3, r1
 8003ba8:	3344      	adds	r3, #68	@ 0x44
 8003baa:	2200      	movs	r2, #0
 8003bac:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003bae:	78fa      	ldrb	r2, [r7, #3]
 8003bb0:	6879      	ldr	r1, [r7, #4]
 8003bb2:	4613      	mov	r3, r2
 8003bb4:	011b      	lsls	r3, r3, #4
 8003bb6:	1a9b      	subs	r3, r3, r2
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	440b      	add	r3, r1
 8003bbc:	334c      	adds	r3, #76	@ 0x4c
 8003bbe:	2204      	movs	r2, #4
 8003bc0:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003bc2:	78fa      	ldrb	r2, [r7, #3]
 8003bc4:	6879      	ldr	r1, [r7, #4]
 8003bc6:	4613      	mov	r3, r2
 8003bc8:	011b      	lsls	r3, r3, #4
 8003bca:	1a9b      	subs	r3, r3, r2
 8003bcc:	009b      	lsls	r3, r3, #2
 8003bce:	440b      	add	r3, r1
 8003bd0:	334c      	adds	r3, #76	@ 0x4c
 8003bd2:	781a      	ldrb	r2, [r3, #0]
 8003bd4:	78fb      	ldrb	r3, [r7, #3]
 8003bd6:	4619      	mov	r1, r3
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f009 fd27 	bl	800d62c <HAL_HCD_HC_NotifyURBChange_Callback>
 8003bde:	e009      	b.n	8003bf4 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003be0:	78fa      	ldrb	r2, [r7, #3]
 8003be2:	6879      	ldr	r1, [r7, #4]
 8003be4:	4613      	mov	r3, r2
 8003be6:	011b      	lsls	r3, r3, #4
 8003be8:	1a9b      	subs	r3, r3, r2
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	440b      	add	r3, r1
 8003bee:	334c      	adds	r3, #76	@ 0x4c
 8003bf0:	2202      	movs	r2, #2
 8003bf2:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003bf4:	78fb      	ldrb	r3, [r7, #3]
 8003bf6:	015a      	lsls	r2, r3, #5
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	4413      	add	r3, r2
 8003bfc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c00:	461a      	mov	r2, r3
 8003c02:	2380      	movs	r3, #128	@ 0x80
 8003c04:	6093      	str	r3, [r2, #8]
 8003c06:	e217      	b.n	8004038 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	78fa      	ldrb	r2, [r7, #3]
 8003c0e:	4611      	mov	r1, r2
 8003c10:	4618      	mov	r0, r3
 8003c12:	f003 f9b0 	bl	8006f76 <USB_ReadChInterrupts>
 8003c16:	4603      	mov	r3, r0
 8003c18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c20:	d11b      	bne.n	8003c5a <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003c22:	78fa      	ldrb	r2, [r7, #3]
 8003c24:	6879      	ldr	r1, [r7, #4]
 8003c26:	4613      	mov	r3, r2
 8003c28:	011b      	lsls	r3, r3, #4
 8003c2a:	1a9b      	subs	r3, r3, r2
 8003c2c:	009b      	lsls	r3, r3, #2
 8003c2e:	440b      	add	r3, r1
 8003c30:	334d      	adds	r3, #77	@ 0x4d
 8003c32:	2209      	movs	r2, #9
 8003c34:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	78fa      	ldrb	r2, [r7, #3]
 8003c3c:	4611      	mov	r1, r2
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f003 ff3d 	bl	8007abe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003c44:	78fb      	ldrb	r3, [r7, #3]
 8003c46:	015a      	lsls	r2, r3, #5
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	4413      	add	r3, r2
 8003c4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c50:	461a      	mov	r2, r3
 8003c52:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003c56:	6093      	str	r3, [r2, #8]
 8003c58:	e1ee      	b.n	8004038 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	78fa      	ldrb	r2, [r7, #3]
 8003c60:	4611      	mov	r1, r2
 8003c62:	4618      	mov	r0, r3
 8003c64:	f003 f987 	bl	8006f76 <USB_ReadChInterrupts>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	f003 0302 	and.w	r3, r3, #2
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	f040 81df 	bne.w	8004032 <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003c74:	78fb      	ldrb	r3, [r7, #3]
 8003c76:	015a      	lsls	r2, r3, #5
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	4413      	add	r3, r2
 8003c7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c80:	461a      	mov	r2, r3
 8003c82:	2302      	movs	r3, #2
 8003c84:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003c86:	78fa      	ldrb	r2, [r7, #3]
 8003c88:	6879      	ldr	r1, [r7, #4]
 8003c8a:	4613      	mov	r3, r2
 8003c8c:	011b      	lsls	r3, r3, #4
 8003c8e:	1a9b      	subs	r3, r3, r2
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	440b      	add	r3, r1
 8003c94:	334d      	adds	r3, #77	@ 0x4d
 8003c96:	781b      	ldrb	r3, [r3, #0]
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	f040 8093 	bne.w	8003dc4 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003c9e:	78fa      	ldrb	r2, [r7, #3]
 8003ca0:	6879      	ldr	r1, [r7, #4]
 8003ca2:	4613      	mov	r3, r2
 8003ca4:	011b      	lsls	r3, r3, #4
 8003ca6:	1a9b      	subs	r3, r3, r2
 8003ca8:	009b      	lsls	r3, r3, #2
 8003caa:	440b      	add	r3, r1
 8003cac:	334d      	adds	r3, #77	@ 0x4d
 8003cae:	2202      	movs	r2, #2
 8003cb0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003cb2:	78fa      	ldrb	r2, [r7, #3]
 8003cb4:	6879      	ldr	r1, [r7, #4]
 8003cb6:	4613      	mov	r3, r2
 8003cb8:	011b      	lsls	r3, r3, #4
 8003cba:	1a9b      	subs	r3, r3, r2
 8003cbc:	009b      	lsls	r3, r3, #2
 8003cbe:	440b      	add	r3, r1
 8003cc0:	334c      	adds	r3, #76	@ 0x4c
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003cc6:	78fa      	ldrb	r2, [r7, #3]
 8003cc8:	6879      	ldr	r1, [r7, #4]
 8003cca:	4613      	mov	r3, r2
 8003ccc:	011b      	lsls	r3, r3, #4
 8003cce:	1a9b      	subs	r3, r3, r2
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	440b      	add	r3, r1
 8003cd4:	3326      	adds	r3, #38	@ 0x26
 8003cd6:	781b      	ldrb	r3, [r3, #0]
 8003cd8:	2b02      	cmp	r3, #2
 8003cda:	d00b      	beq.n	8003cf4 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003cdc:	78fa      	ldrb	r2, [r7, #3]
 8003cde:	6879      	ldr	r1, [r7, #4]
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	011b      	lsls	r3, r3, #4
 8003ce4:	1a9b      	subs	r3, r3, r2
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	440b      	add	r3, r1
 8003cea:	3326      	adds	r3, #38	@ 0x26
 8003cec:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003cee:	2b03      	cmp	r3, #3
 8003cf0:	f040 8190 	bne.w	8004014 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	799b      	ldrb	r3, [r3, #6]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d115      	bne.n	8003d28 <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8003cfc:	78fa      	ldrb	r2, [r7, #3]
 8003cfe:	6879      	ldr	r1, [r7, #4]
 8003d00:	4613      	mov	r3, r2
 8003d02:	011b      	lsls	r3, r3, #4
 8003d04:	1a9b      	subs	r3, r3, r2
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	440b      	add	r3, r1
 8003d0a:	333d      	adds	r3, #61	@ 0x3d
 8003d0c:	781b      	ldrb	r3, [r3, #0]
 8003d0e:	78fa      	ldrb	r2, [r7, #3]
 8003d10:	f083 0301 	eor.w	r3, r3, #1
 8003d14:	b2d8      	uxtb	r0, r3
 8003d16:	6879      	ldr	r1, [r7, #4]
 8003d18:	4613      	mov	r3, r2
 8003d1a:	011b      	lsls	r3, r3, #4
 8003d1c:	1a9b      	subs	r3, r3, r2
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	440b      	add	r3, r1
 8003d22:	333d      	adds	r3, #61	@ 0x3d
 8003d24:	4602      	mov	r2, r0
 8003d26:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	799b      	ldrb	r3, [r3, #6]
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	f040 8171 	bne.w	8004014 <HCD_HC_OUT_IRQHandler+0x920>
 8003d32:	78fa      	ldrb	r2, [r7, #3]
 8003d34:	6879      	ldr	r1, [r7, #4]
 8003d36:	4613      	mov	r3, r2
 8003d38:	011b      	lsls	r3, r3, #4
 8003d3a:	1a9b      	subs	r3, r3, r2
 8003d3c:	009b      	lsls	r3, r3, #2
 8003d3e:	440b      	add	r3, r1
 8003d40:	3334      	adds	r3, #52	@ 0x34
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	f000 8165 	beq.w	8004014 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8003d4a:	78fa      	ldrb	r2, [r7, #3]
 8003d4c:	6879      	ldr	r1, [r7, #4]
 8003d4e:	4613      	mov	r3, r2
 8003d50:	011b      	lsls	r3, r3, #4
 8003d52:	1a9b      	subs	r3, r3, r2
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	440b      	add	r3, r1
 8003d58:	3334      	adds	r3, #52	@ 0x34
 8003d5a:	6819      	ldr	r1, [r3, #0]
 8003d5c:	78fa      	ldrb	r2, [r7, #3]
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	4613      	mov	r3, r2
 8003d62:	011b      	lsls	r3, r3, #4
 8003d64:	1a9b      	subs	r3, r3, r2
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	4403      	add	r3, r0
 8003d6a:	3328      	adds	r3, #40	@ 0x28
 8003d6c:	881b      	ldrh	r3, [r3, #0]
 8003d6e:	440b      	add	r3, r1
 8003d70:	1e59      	subs	r1, r3, #1
 8003d72:	78fa      	ldrb	r2, [r7, #3]
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	4613      	mov	r3, r2
 8003d78:	011b      	lsls	r3, r3, #4
 8003d7a:	1a9b      	subs	r3, r3, r2
 8003d7c:	009b      	lsls	r3, r3, #2
 8003d7e:	4403      	add	r3, r0
 8003d80:	3328      	adds	r3, #40	@ 0x28
 8003d82:	881b      	ldrh	r3, [r3, #0]
 8003d84:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d88:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	f003 0301 	and.w	r3, r3, #1
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	f000 813f 	beq.w	8004014 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8003d96:	78fa      	ldrb	r2, [r7, #3]
 8003d98:	6879      	ldr	r1, [r7, #4]
 8003d9a:	4613      	mov	r3, r2
 8003d9c:	011b      	lsls	r3, r3, #4
 8003d9e:	1a9b      	subs	r3, r3, r2
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	440b      	add	r3, r1
 8003da4:	333d      	adds	r3, #61	@ 0x3d
 8003da6:	781b      	ldrb	r3, [r3, #0]
 8003da8:	78fa      	ldrb	r2, [r7, #3]
 8003daa:	f083 0301 	eor.w	r3, r3, #1
 8003dae:	b2d8      	uxtb	r0, r3
 8003db0:	6879      	ldr	r1, [r7, #4]
 8003db2:	4613      	mov	r3, r2
 8003db4:	011b      	lsls	r3, r3, #4
 8003db6:	1a9b      	subs	r3, r3, r2
 8003db8:	009b      	lsls	r3, r3, #2
 8003dba:	440b      	add	r3, r1
 8003dbc:	333d      	adds	r3, #61	@ 0x3d
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	701a      	strb	r2, [r3, #0]
 8003dc2:	e127      	b.n	8004014 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003dc4:	78fa      	ldrb	r2, [r7, #3]
 8003dc6:	6879      	ldr	r1, [r7, #4]
 8003dc8:	4613      	mov	r3, r2
 8003dca:	011b      	lsls	r3, r3, #4
 8003dcc:	1a9b      	subs	r3, r3, r2
 8003dce:	009b      	lsls	r3, r3, #2
 8003dd0:	440b      	add	r3, r1
 8003dd2:	334d      	adds	r3, #77	@ 0x4d
 8003dd4:	781b      	ldrb	r3, [r3, #0]
 8003dd6:	2b03      	cmp	r3, #3
 8003dd8:	d120      	bne.n	8003e1c <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003dda:	78fa      	ldrb	r2, [r7, #3]
 8003ddc:	6879      	ldr	r1, [r7, #4]
 8003dde:	4613      	mov	r3, r2
 8003de0:	011b      	lsls	r3, r3, #4
 8003de2:	1a9b      	subs	r3, r3, r2
 8003de4:	009b      	lsls	r3, r3, #2
 8003de6:	440b      	add	r3, r1
 8003de8:	334d      	adds	r3, #77	@ 0x4d
 8003dea:	2202      	movs	r2, #2
 8003dec:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003dee:	78fa      	ldrb	r2, [r7, #3]
 8003df0:	6879      	ldr	r1, [r7, #4]
 8003df2:	4613      	mov	r3, r2
 8003df4:	011b      	lsls	r3, r3, #4
 8003df6:	1a9b      	subs	r3, r3, r2
 8003df8:	009b      	lsls	r3, r3, #2
 8003dfa:	440b      	add	r3, r1
 8003dfc:	331b      	adds	r3, #27
 8003dfe:	781b      	ldrb	r3, [r3, #0]
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	f040 8107 	bne.w	8004014 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003e06:	78fa      	ldrb	r2, [r7, #3]
 8003e08:	6879      	ldr	r1, [r7, #4]
 8003e0a:	4613      	mov	r3, r2
 8003e0c:	011b      	lsls	r3, r3, #4
 8003e0e:	1a9b      	subs	r3, r3, r2
 8003e10:	009b      	lsls	r3, r3, #2
 8003e12:	440b      	add	r3, r1
 8003e14:	334c      	adds	r3, #76	@ 0x4c
 8003e16:	2202      	movs	r2, #2
 8003e18:	701a      	strb	r2, [r3, #0]
 8003e1a:	e0fb      	b.n	8004014 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003e1c:	78fa      	ldrb	r2, [r7, #3]
 8003e1e:	6879      	ldr	r1, [r7, #4]
 8003e20:	4613      	mov	r3, r2
 8003e22:	011b      	lsls	r3, r3, #4
 8003e24:	1a9b      	subs	r3, r3, r2
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	440b      	add	r3, r1
 8003e2a:	334d      	adds	r3, #77	@ 0x4d
 8003e2c:	781b      	ldrb	r3, [r3, #0]
 8003e2e:	2b04      	cmp	r3, #4
 8003e30:	d13a      	bne.n	8003ea8 <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003e32:	78fa      	ldrb	r2, [r7, #3]
 8003e34:	6879      	ldr	r1, [r7, #4]
 8003e36:	4613      	mov	r3, r2
 8003e38:	011b      	lsls	r3, r3, #4
 8003e3a:	1a9b      	subs	r3, r3, r2
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	440b      	add	r3, r1
 8003e40:	334d      	adds	r3, #77	@ 0x4d
 8003e42:	2202      	movs	r2, #2
 8003e44:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003e46:	78fa      	ldrb	r2, [r7, #3]
 8003e48:	6879      	ldr	r1, [r7, #4]
 8003e4a:	4613      	mov	r3, r2
 8003e4c:	011b      	lsls	r3, r3, #4
 8003e4e:	1a9b      	subs	r3, r3, r2
 8003e50:	009b      	lsls	r3, r3, #2
 8003e52:	440b      	add	r3, r1
 8003e54:	334c      	adds	r3, #76	@ 0x4c
 8003e56:	2202      	movs	r2, #2
 8003e58:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003e5a:	78fa      	ldrb	r2, [r7, #3]
 8003e5c:	6879      	ldr	r1, [r7, #4]
 8003e5e:	4613      	mov	r3, r2
 8003e60:	011b      	lsls	r3, r3, #4
 8003e62:	1a9b      	subs	r3, r3, r2
 8003e64:	009b      	lsls	r3, r3, #2
 8003e66:	440b      	add	r3, r1
 8003e68:	331b      	adds	r3, #27
 8003e6a:	781b      	ldrb	r3, [r3, #0]
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	f040 80d1 	bne.w	8004014 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8003e72:	78fa      	ldrb	r2, [r7, #3]
 8003e74:	6879      	ldr	r1, [r7, #4]
 8003e76:	4613      	mov	r3, r2
 8003e78:	011b      	lsls	r3, r3, #4
 8003e7a:	1a9b      	subs	r3, r3, r2
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	440b      	add	r3, r1
 8003e80:	331b      	adds	r3, #27
 8003e82:	2200      	movs	r2, #0
 8003e84:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003e86:	78fb      	ldrb	r3, [r7, #3]
 8003e88:	015a      	lsls	r2, r3, #5
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	4413      	add	r3, r2
 8003e8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	78fa      	ldrb	r2, [r7, #3]
 8003e96:	0151      	lsls	r1, r2, #5
 8003e98:	693a      	ldr	r2, [r7, #16]
 8003e9a:	440a      	add	r2, r1
 8003e9c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003ea0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ea4:	6053      	str	r3, [r2, #4]
 8003ea6:	e0b5      	b.n	8004014 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003ea8:	78fa      	ldrb	r2, [r7, #3]
 8003eaa:	6879      	ldr	r1, [r7, #4]
 8003eac:	4613      	mov	r3, r2
 8003eae:	011b      	lsls	r3, r3, #4
 8003eb0:	1a9b      	subs	r3, r3, r2
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	440b      	add	r3, r1
 8003eb6:	334d      	adds	r3, #77	@ 0x4d
 8003eb8:	781b      	ldrb	r3, [r3, #0]
 8003eba:	2b05      	cmp	r3, #5
 8003ebc:	d114      	bne.n	8003ee8 <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003ebe:	78fa      	ldrb	r2, [r7, #3]
 8003ec0:	6879      	ldr	r1, [r7, #4]
 8003ec2:	4613      	mov	r3, r2
 8003ec4:	011b      	lsls	r3, r3, #4
 8003ec6:	1a9b      	subs	r3, r3, r2
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	440b      	add	r3, r1
 8003ecc:	334d      	adds	r3, #77	@ 0x4d
 8003ece:	2202      	movs	r2, #2
 8003ed0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8003ed2:	78fa      	ldrb	r2, [r7, #3]
 8003ed4:	6879      	ldr	r1, [r7, #4]
 8003ed6:	4613      	mov	r3, r2
 8003ed8:	011b      	lsls	r3, r3, #4
 8003eda:	1a9b      	subs	r3, r3, r2
 8003edc:	009b      	lsls	r3, r3, #2
 8003ede:	440b      	add	r3, r1
 8003ee0:	334c      	adds	r3, #76	@ 0x4c
 8003ee2:	2202      	movs	r2, #2
 8003ee4:	701a      	strb	r2, [r3, #0]
 8003ee6:	e095      	b.n	8004014 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003ee8:	78fa      	ldrb	r2, [r7, #3]
 8003eea:	6879      	ldr	r1, [r7, #4]
 8003eec:	4613      	mov	r3, r2
 8003eee:	011b      	lsls	r3, r3, #4
 8003ef0:	1a9b      	subs	r3, r3, r2
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	440b      	add	r3, r1
 8003ef6:	334d      	adds	r3, #77	@ 0x4d
 8003ef8:	781b      	ldrb	r3, [r3, #0]
 8003efa:	2b06      	cmp	r3, #6
 8003efc:	d114      	bne.n	8003f28 <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003efe:	78fa      	ldrb	r2, [r7, #3]
 8003f00:	6879      	ldr	r1, [r7, #4]
 8003f02:	4613      	mov	r3, r2
 8003f04:	011b      	lsls	r3, r3, #4
 8003f06:	1a9b      	subs	r3, r3, r2
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	440b      	add	r3, r1
 8003f0c:	334d      	adds	r3, #77	@ 0x4d
 8003f0e:	2202      	movs	r2, #2
 8003f10:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8003f12:	78fa      	ldrb	r2, [r7, #3]
 8003f14:	6879      	ldr	r1, [r7, #4]
 8003f16:	4613      	mov	r3, r2
 8003f18:	011b      	lsls	r3, r3, #4
 8003f1a:	1a9b      	subs	r3, r3, r2
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	440b      	add	r3, r1
 8003f20:	334c      	adds	r3, #76	@ 0x4c
 8003f22:	2205      	movs	r2, #5
 8003f24:	701a      	strb	r2, [r3, #0]
 8003f26:	e075      	b.n	8004014 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003f28:	78fa      	ldrb	r2, [r7, #3]
 8003f2a:	6879      	ldr	r1, [r7, #4]
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	011b      	lsls	r3, r3, #4
 8003f30:	1a9b      	subs	r3, r3, r2
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	440b      	add	r3, r1
 8003f36:	334d      	adds	r3, #77	@ 0x4d
 8003f38:	781b      	ldrb	r3, [r3, #0]
 8003f3a:	2b07      	cmp	r3, #7
 8003f3c:	d00a      	beq.n	8003f54 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003f3e:	78fa      	ldrb	r2, [r7, #3]
 8003f40:	6879      	ldr	r1, [r7, #4]
 8003f42:	4613      	mov	r3, r2
 8003f44:	011b      	lsls	r3, r3, #4
 8003f46:	1a9b      	subs	r3, r3, r2
 8003f48:	009b      	lsls	r3, r3, #2
 8003f4a:	440b      	add	r3, r1
 8003f4c:	334d      	adds	r3, #77	@ 0x4d
 8003f4e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003f50:	2b09      	cmp	r3, #9
 8003f52:	d170      	bne.n	8004036 <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003f54:	78fa      	ldrb	r2, [r7, #3]
 8003f56:	6879      	ldr	r1, [r7, #4]
 8003f58:	4613      	mov	r3, r2
 8003f5a:	011b      	lsls	r3, r3, #4
 8003f5c:	1a9b      	subs	r3, r3, r2
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	440b      	add	r3, r1
 8003f62:	334d      	adds	r3, #77	@ 0x4d
 8003f64:	2202      	movs	r2, #2
 8003f66:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003f68:	78fa      	ldrb	r2, [r7, #3]
 8003f6a:	6879      	ldr	r1, [r7, #4]
 8003f6c:	4613      	mov	r3, r2
 8003f6e:	011b      	lsls	r3, r3, #4
 8003f70:	1a9b      	subs	r3, r3, r2
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	440b      	add	r3, r1
 8003f76:	3344      	adds	r3, #68	@ 0x44
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	1c59      	adds	r1, r3, #1
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	4613      	mov	r3, r2
 8003f80:	011b      	lsls	r3, r3, #4
 8003f82:	1a9b      	subs	r3, r3, r2
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	4403      	add	r3, r0
 8003f88:	3344      	adds	r3, #68	@ 0x44
 8003f8a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003f8c:	78fa      	ldrb	r2, [r7, #3]
 8003f8e:	6879      	ldr	r1, [r7, #4]
 8003f90:	4613      	mov	r3, r2
 8003f92:	011b      	lsls	r3, r3, #4
 8003f94:	1a9b      	subs	r3, r3, r2
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	440b      	add	r3, r1
 8003f9a:	3344      	adds	r3, #68	@ 0x44
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	2b02      	cmp	r3, #2
 8003fa0:	d914      	bls.n	8003fcc <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003fa2:	78fa      	ldrb	r2, [r7, #3]
 8003fa4:	6879      	ldr	r1, [r7, #4]
 8003fa6:	4613      	mov	r3, r2
 8003fa8:	011b      	lsls	r3, r3, #4
 8003faa:	1a9b      	subs	r3, r3, r2
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	440b      	add	r3, r1
 8003fb0:	3344      	adds	r3, #68	@ 0x44
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003fb6:	78fa      	ldrb	r2, [r7, #3]
 8003fb8:	6879      	ldr	r1, [r7, #4]
 8003fba:	4613      	mov	r3, r2
 8003fbc:	011b      	lsls	r3, r3, #4
 8003fbe:	1a9b      	subs	r3, r3, r2
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	440b      	add	r3, r1
 8003fc4:	334c      	adds	r3, #76	@ 0x4c
 8003fc6:	2204      	movs	r2, #4
 8003fc8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003fca:	e022      	b.n	8004012 <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003fcc:	78fa      	ldrb	r2, [r7, #3]
 8003fce:	6879      	ldr	r1, [r7, #4]
 8003fd0:	4613      	mov	r3, r2
 8003fd2:	011b      	lsls	r3, r3, #4
 8003fd4:	1a9b      	subs	r3, r3, r2
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	440b      	add	r3, r1
 8003fda:	334c      	adds	r3, #76	@ 0x4c
 8003fdc:	2202      	movs	r2, #2
 8003fde:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003fe0:	78fb      	ldrb	r3, [r7, #3]
 8003fe2:	015a      	lsls	r2, r3, #5
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	4413      	add	r3, r2
 8003fe8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003ff6:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003ffe:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004000:	78fb      	ldrb	r3, [r7, #3]
 8004002:	015a      	lsls	r2, r3, #5
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	4413      	add	r3, r2
 8004008:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800400c:	461a      	mov	r2, r3
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004012:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004014:	78fa      	ldrb	r2, [r7, #3]
 8004016:	6879      	ldr	r1, [r7, #4]
 8004018:	4613      	mov	r3, r2
 800401a:	011b      	lsls	r3, r3, #4
 800401c:	1a9b      	subs	r3, r3, r2
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	440b      	add	r3, r1
 8004022:	334c      	adds	r3, #76	@ 0x4c
 8004024:	781a      	ldrb	r2, [r3, #0]
 8004026:	78fb      	ldrb	r3, [r7, #3]
 8004028:	4619      	mov	r1, r3
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f009 fafe 	bl	800d62c <HAL_HCD_HC_NotifyURBChange_Callback>
 8004030:	e002      	b.n	8004038 <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8004032:	bf00      	nop
 8004034:	e000      	b.n	8004038 <HCD_HC_OUT_IRQHandler+0x944>
      return;
 8004036:	bf00      	nop
  }
}
 8004038:	3718      	adds	r7, #24
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}

0800403e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800403e:	b580      	push	{r7, lr}
 8004040:	b08a      	sub	sp, #40	@ 0x28
 8004042:	af00      	add	r7, sp, #0
 8004044:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800404c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800404e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	6a1b      	ldr	r3, [r3, #32]
 8004056:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004058:	69fb      	ldr	r3, [r7, #28]
 800405a:	f003 030f 	and.w	r3, r3, #15
 800405e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	0c5b      	lsrs	r3, r3, #17
 8004064:	f003 030f 	and.w	r3, r3, #15
 8004068:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800406a:	69fb      	ldr	r3, [r7, #28]
 800406c:	091b      	lsrs	r3, r3, #4
 800406e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004072:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	2b02      	cmp	r3, #2
 8004078:	d004      	beq.n	8004084 <HCD_RXQLVL_IRQHandler+0x46>
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	2b05      	cmp	r3, #5
 800407e:	f000 80b6 	beq.w	80041ee <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004082:	e0b7      	b.n	80041f4 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	2b00      	cmp	r3, #0
 8004088:	f000 80b3 	beq.w	80041f2 <HCD_RXQLVL_IRQHandler+0x1b4>
 800408c:	6879      	ldr	r1, [r7, #4]
 800408e:	69ba      	ldr	r2, [r7, #24]
 8004090:	4613      	mov	r3, r2
 8004092:	011b      	lsls	r3, r3, #4
 8004094:	1a9b      	subs	r3, r3, r2
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	440b      	add	r3, r1
 800409a:	332c      	adds	r3, #44	@ 0x2c
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	f000 80a7 	beq.w	80041f2 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80040a4:	6879      	ldr	r1, [r7, #4]
 80040a6:	69ba      	ldr	r2, [r7, #24]
 80040a8:	4613      	mov	r3, r2
 80040aa:	011b      	lsls	r3, r3, #4
 80040ac:	1a9b      	subs	r3, r3, r2
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	440b      	add	r3, r1
 80040b2:	3338      	adds	r3, #56	@ 0x38
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	18d1      	adds	r1, r2, r3
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	69ba      	ldr	r2, [r7, #24]
 80040be:	4613      	mov	r3, r2
 80040c0:	011b      	lsls	r3, r3, #4
 80040c2:	1a9b      	subs	r3, r3, r2
 80040c4:	009b      	lsls	r3, r3, #2
 80040c6:	4403      	add	r3, r0
 80040c8:	3334      	adds	r3, #52	@ 0x34
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4299      	cmp	r1, r3
 80040ce:	f200 8083 	bhi.w	80041d8 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6818      	ldr	r0, [r3, #0]
 80040d6:	6879      	ldr	r1, [r7, #4]
 80040d8:	69ba      	ldr	r2, [r7, #24]
 80040da:	4613      	mov	r3, r2
 80040dc:	011b      	lsls	r3, r3, #4
 80040de:	1a9b      	subs	r3, r3, r2
 80040e0:	009b      	lsls	r3, r3, #2
 80040e2:	440b      	add	r3, r1
 80040e4:	332c      	adds	r3, #44	@ 0x2c
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	693a      	ldr	r2, [r7, #16]
 80040ea:	b292      	uxth	r2, r2
 80040ec:	4619      	mov	r1, r3
 80040ee:	f002 fed7 	bl	8006ea0 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80040f2:	6879      	ldr	r1, [r7, #4]
 80040f4:	69ba      	ldr	r2, [r7, #24]
 80040f6:	4613      	mov	r3, r2
 80040f8:	011b      	lsls	r3, r3, #4
 80040fa:	1a9b      	subs	r3, r3, r2
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	440b      	add	r3, r1
 8004100:	332c      	adds	r3, #44	@ 0x2c
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	18d1      	adds	r1, r2, r3
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	69ba      	ldr	r2, [r7, #24]
 800410c:	4613      	mov	r3, r2
 800410e:	011b      	lsls	r3, r3, #4
 8004110:	1a9b      	subs	r3, r3, r2
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	4403      	add	r3, r0
 8004116:	332c      	adds	r3, #44	@ 0x2c
 8004118:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 800411a:	6879      	ldr	r1, [r7, #4]
 800411c:	69ba      	ldr	r2, [r7, #24]
 800411e:	4613      	mov	r3, r2
 8004120:	011b      	lsls	r3, r3, #4
 8004122:	1a9b      	subs	r3, r3, r2
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	440b      	add	r3, r1
 8004128:	3338      	adds	r3, #56	@ 0x38
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	18d1      	adds	r1, r2, r3
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	69ba      	ldr	r2, [r7, #24]
 8004134:	4613      	mov	r3, r2
 8004136:	011b      	lsls	r3, r3, #4
 8004138:	1a9b      	subs	r3, r3, r2
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	4403      	add	r3, r0
 800413e:	3338      	adds	r3, #56	@ 0x38
 8004140:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004142:	69bb      	ldr	r3, [r7, #24]
 8004144:	015a      	lsls	r2, r3, #5
 8004146:	6a3b      	ldr	r3, [r7, #32]
 8004148:	4413      	add	r3, r2
 800414a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800414e:	691b      	ldr	r3, [r3, #16]
 8004150:	0cdb      	lsrs	r3, r3, #19
 8004152:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004156:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004158:	6879      	ldr	r1, [r7, #4]
 800415a:	69ba      	ldr	r2, [r7, #24]
 800415c:	4613      	mov	r3, r2
 800415e:	011b      	lsls	r3, r3, #4
 8004160:	1a9b      	subs	r3, r3, r2
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	440b      	add	r3, r1
 8004166:	3328      	adds	r3, #40	@ 0x28
 8004168:	881b      	ldrh	r3, [r3, #0]
 800416a:	461a      	mov	r2, r3
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	4293      	cmp	r3, r2
 8004170:	d13f      	bne.n	80041f2 <HCD_RXQLVL_IRQHandler+0x1b4>
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d03c      	beq.n	80041f2 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8004178:	69bb      	ldr	r3, [r7, #24]
 800417a:	015a      	lsls	r2, r3, #5
 800417c:	6a3b      	ldr	r3, [r7, #32]
 800417e:	4413      	add	r3, r2
 8004180:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800418e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004196:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8004198:	69bb      	ldr	r3, [r7, #24]
 800419a:	015a      	lsls	r2, r3, #5
 800419c:	6a3b      	ldr	r3, [r7, #32]
 800419e:	4413      	add	r3, r2
 80041a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041a4:	461a      	mov	r2, r3
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80041aa:	6879      	ldr	r1, [r7, #4]
 80041ac:	69ba      	ldr	r2, [r7, #24]
 80041ae:	4613      	mov	r3, r2
 80041b0:	011b      	lsls	r3, r3, #4
 80041b2:	1a9b      	subs	r3, r3, r2
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	440b      	add	r3, r1
 80041b8:	333c      	adds	r3, #60	@ 0x3c
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	f083 0301 	eor.w	r3, r3, #1
 80041c0:	b2d8      	uxtb	r0, r3
 80041c2:	6879      	ldr	r1, [r7, #4]
 80041c4:	69ba      	ldr	r2, [r7, #24]
 80041c6:	4613      	mov	r3, r2
 80041c8:	011b      	lsls	r3, r3, #4
 80041ca:	1a9b      	subs	r3, r3, r2
 80041cc:	009b      	lsls	r3, r3, #2
 80041ce:	440b      	add	r3, r1
 80041d0:	333c      	adds	r3, #60	@ 0x3c
 80041d2:	4602      	mov	r2, r0
 80041d4:	701a      	strb	r2, [r3, #0]
      break;
 80041d6:	e00c      	b.n	80041f2 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80041d8:	6879      	ldr	r1, [r7, #4]
 80041da:	69ba      	ldr	r2, [r7, #24]
 80041dc:	4613      	mov	r3, r2
 80041de:	011b      	lsls	r3, r3, #4
 80041e0:	1a9b      	subs	r3, r3, r2
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	440b      	add	r3, r1
 80041e6:	334c      	adds	r3, #76	@ 0x4c
 80041e8:	2204      	movs	r2, #4
 80041ea:	701a      	strb	r2, [r3, #0]
      break;
 80041ec:	e001      	b.n	80041f2 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80041ee:	bf00      	nop
 80041f0:	e000      	b.n	80041f4 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80041f2:	bf00      	nop
  }
}
 80041f4:	bf00      	nop
 80041f6:	3728      	adds	r7, #40	@ 0x28
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}

080041fc <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b086      	sub	sp, #24
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8004228:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	f003 0302 	and.w	r3, r3, #2
 8004230:	2b02      	cmp	r3, #2
 8004232:	d10b      	bne.n	800424c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f003 0301 	and.w	r3, r3, #1
 800423a:	2b01      	cmp	r3, #1
 800423c:	d102      	bne.n	8004244 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f009 f9d8 	bl	800d5f4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	f043 0302 	orr.w	r3, r3, #2
 800424a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f003 0308 	and.w	r3, r3, #8
 8004252:	2b08      	cmp	r3, #8
 8004254:	d132      	bne.n	80042bc <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	f043 0308 	orr.w	r3, r3, #8
 800425c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	f003 0304 	and.w	r3, r3, #4
 8004264:	2b04      	cmp	r3, #4
 8004266:	d126      	bne.n	80042b6 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	7a5b      	ldrb	r3, [r3, #9]
 800426c:	2b02      	cmp	r3, #2
 800426e:	d113      	bne.n	8004298 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8004276:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800427a:	d106      	bne.n	800428a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	2102      	movs	r1, #2
 8004282:	4618      	mov	r0, r3
 8004284:	f002 ff9c 	bl	80071c0 <USB_InitFSLSPClkSel>
 8004288:	e011      	b.n	80042ae <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	2101      	movs	r1, #1
 8004290:	4618      	mov	r0, r3
 8004292:	f002 ff95 	bl	80071c0 <USB_InitFSLSPClkSel>
 8004296:	e00a      	b.n	80042ae <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	79db      	ldrb	r3, [r3, #7]
 800429c:	2b01      	cmp	r3, #1
 800429e:	d106      	bne.n	80042ae <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80042a6:	461a      	mov	r2, r3
 80042a8:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80042ac:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f009 f9ce 	bl	800d650 <HAL_HCD_PortEnabled_Callback>
 80042b4:	e002      	b.n	80042bc <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f009 f9d8 	bl	800d66c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f003 0320 	and.w	r3, r3, #32
 80042c2:	2b20      	cmp	r3, #32
 80042c4:	d103      	bne.n	80042ce <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	f043 0320 	orr.w	r3, r3, #32
 80042cc:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80042d4:	461a      	mov	r2, r3
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	6013      	str	r3, [r2, #0]
}
 80042da:	bf00      	nop
 80042dc:	3718      	adds	r7, #24
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
	...

080042e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b084      	sub	sp, #16
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d101      	bne.n	80042f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e12b      	b.n	800454e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d106      	bne.n	8004310 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f7fc fd86 	bl	8000e1c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2224      	movs	r2, #36	@ 0x24
 8004314:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f022 0201 	bic.w	r2, r2, #1
 8004326:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004336:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004346:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004348:	f001 f964 	bl	8005614 <HAL_RCC_GetPCLK1Freq>
 800434c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	4a81      	ldr	r2, [pc, #516]	@ (8004558 <HAL_I2C_Init+0x274>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d807      	bhi.n	8004368 <HAL_I2C_Init+0x84>
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	4a80      	ldr	r2, [pc, #512]	@ (800455c <HAL_I2C_Init+0x278>)
 800435c:	4293      	cmp	r3, r2
 800435e:	bf94      	ite	ls
 8004360:	2301      	movls	r3, #1
 8004362:	2300      	movhi	r3, #0
 8004364:	b2db      	uxtb	r3, r3
 8004366:	e006      	b.n	8004376 <HAL_I2C_Init+0x92>
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	4a7d      	ldr	r2, [pc, #500]	@ (8004560 <HAL_I2C_Init+0x27c>)
 800436c:	4293      	cmp	r3, r2
 800436e:	bf94      	ite	ls
 8004370:	2301      	movls	r3, #1
 8004372:	2300      	movhi	r3, #0
 8004374:	b2db      	uxtb	r3, r3
 8004376:	2b00      	cmp	r3, #0
 8004378:	d001      	beq.n	800437e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e0e7      	b.n	800454e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	4a78      	ldr	r2, [pc, #480]	@ (8004564 <HAL_I2C_Init+0x280>)
 8004382:	fba2 2303 	umull	r2, r3, r2, r3
 8004386:	0c9b      	lsrs	r3, r3, #18
 8004388:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	68ba      	ldr	r2, [r7, #8]
 800439a:	430a      	orrs	r2, r1
 800439c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	6a1b      	ldr	r3, [r3, #32]
 80043a4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	4a6a      	ldr	r2, [pc, #424]	@ (8004558 <HAL_I2C_Init+0x274>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d802      	bhi.n	80043b8 <HAL_I2C_Init+0xd4>
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	3301      	adds	r3, #1
 80043b6:	e009      	b.n	80043cc <HAL_I2C_Init+0xe8>
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80043be:	fb02 f303 	mul.w	r3, r2, r3
 80043c2:	4a69      	ldr	r2, [pc, #420]	@ (8004568 <HAL_I2C_Init+0x284>)
 80043c4:	fba2 2303 	umull	r2, r3, r2, r3
 80043c8:	099b      	lsrs	r3, r3, #6
 80043ca:	3301      	adds	r3, #1
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	6812      	ldr	r2, [r2, #0]
 80043d0:	430b      	orrs	r3, r1
 80043d2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	69db      	ldr	r3, [r3, #28]
 80043da:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80043de:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	495c      	ldr	r1, [pc, #368]	@ (8004558 <HAL_I2C_Init+0x274>)
 80043e8:	428b      	cmp	r3, r1
 80043ea:	d819      	bhi.n	8004420 <HAL_I2C_Init+0x13c>
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	1e59      	subs	r1, r3, #1
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	005b      	lsls	r3, r3, #1
 80043f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80043fa:	1c59      	adds	r1, r3, #1
 80043fc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004400:	400b      	ands	r3, r1
 8004402:	2b00      	cmp	r3, #0
 8004404:	d00a      	beq.n	800441c <HAL_I2C_Init+0x138>
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	1e59      	subs	r1, r3, #1
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	005b      	lsls	r3, r3, #1
 8004410:	fbb1 f3f3 	udiv	r3, r1, r3
 8004414:	3301      	adds	r3, #1
 8004416:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800441a:	e051      	b.n	80044c0 <HAL_I2C_Init+0x1dc>
 800441c:	2304      	movs	r3, #4
 800441e:	e04f      	b.n	80044c0 <HAL_I2C_Init+0x1dc>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d111      	bne.n	800444c <HAL_I2C_Init+0x168>
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	1e58      	subs	r0, r3, #1
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6859      	ldr	r1, [r3, #4]
 8004430:	460b      	mov	r3, r1
 8004432:	005b      	lsls	r3, r3, #1
 8004434:	440b      	add	r3, r1
 8004436:	fbb0 f3f3 	udiv	r3, r0, r3
 800443a:	3301      	adds	r3, #1
 800443c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004440:	2b00      	cmp	r3, #0
 8004442:	bf0c      	ite	eq
 8004444:	2301      	moveq	r3, #1
 8004446:	2300      	movne	r3, #0
 8004448:	b2db      	uxtb	r3, r3
 800444a:	e012      	b.n	8004472 <HAL_I2C_Init+0x18e>
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	1e58      	subs	r0, r3, #1
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6859      	ldr	r1, [r3, #4]
 8004454:	460b      	mov	r3, r1
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	440b      	add	r3, r1
 800445a:	0099      	lsls	r1, r3, #2
 800445c:	440b      	add	r3, r1
 800445e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004462:	3301      	adds	r3, #1
 8004464:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004468:	2b00      	cmp	r3, #0
 800446a:	bf0c      	ite	eq
 800446c:	2301      	moveq	r3, #1
 800446e:	2300      	movne	r3, #0
 8004470:	b2db      	uxtb	r3, r3
 8004472:	2b00      	cmp	r3, #0
 8004474:	d001      	beq.n	800447a <HAL_I2C_Init+0x196>
 8004476:	2301      	movs	r3, #1
 8004478:	e022      	b.n	80044c0 <HAL_I2C_Init+0x1dc>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d10e      	bne.n	80044a0 <HAL_I2C_Init+0x1bc>
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	1e58      	subs	r0, r3, #1
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6859      	ldr	r1, [r3, #4]
 800448a:	460b      	mov	r3, r1
 800448c:	005b      	lsls	r3, r3, #1
 800448e:	440b      	add	r3, r1
 8004490:	fbb0 f3f3 	udiv	r3, r0, r3
 8004494:	3301      	adds	r3, #1
 8004496:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800449a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800449e:	e00f      	b.n	80044c0 <HAL_I2C_Init+0x1dc>
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	1e58      	subs	r0, r3, #1
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6859      	ldr	r1, [r3, #4]
 80044a8:	460b      	mov	r3, r1
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	440b      	add	r3, r1
 80044ae:	0099      	lsls	r1, r3, #2
 80044b0:	440b      	add	r3, r1
 80044b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80044b6:	3301      	adds	r3, #1
 80044b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044bc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80044c0:	6879      	ldr	r1, [r7, #4]
 80044c2:	6809      	ldr	r1, [r1, #0]
 80044c4:	4313      	orrs	r3, r2
 80044c6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	69da      	ldr	r2, [r3, #28]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6a1b      	ldr	r3, [r3, #32]
 80044da:	431a      	orrs	r2, r3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	430a      	orrs	r2, r1
 80044e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80044ee:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	6911      	ldr	r1, [r2, #16]
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	68d2      	ldr	r2, [r2, #12]
 80044fa:	4311      	orrs	r1, r2
 80044fc:	687a      	ldr	r2, [r7, #4]
 80044fe:	6812      	ldr	r2, [r2, #0]
 8004500:	430b      	orrs	r3, r1
 8004502:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	68db      	ldr	r3, [r3, #12]
 800450a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	695a      	ldr	r2, [r3, #20]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	699b      	ldr	r3, [r3, #24]
 8004516:	431a      	orrs	r2, r3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	430a      	orrs	r2, r1
 800451e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f042 0201 	orr.w	r2, r2, #1
 800452e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2200      	movs	r2, #0
 8004534:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2220      	movs	r2, #32
 800453a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2200      	movs	r2, #0
 8004548:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800454c:	2300      	movs	r3, #0
}
 800454e:	4618      	mov	r0, r3
 8004550:	3710      	adds	r7, #16
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}
 8004556:	bf00      	nop
 8004558:	000186a0 	.word	0x000186a0
 800455c:	001e847f 	.word	0x001e847f
 8004560:	003d08ff 	.word	0x003d08ff
 8004564:	431bde83 	.word	0x431bde83
 8004568:	10624dd3 	.word	0x10624dd3

0800456c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800456c:	b480      	push	{r7}
 800456e:	b083      	sub	sp, #12
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800457c:	b2db      	uxtb	r3, r3
 800457e:	2b20      	cmp	r3, #32
 8004580:	d129      	bne.n	80045d6 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2224      	movs	r2, #36	@ 0x24
 8004586:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f022 0201 	bic.w	r2, r2, #1
 8004598:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f022 0210 	bic.w	r2, r2, #16
 80045a8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	683a      	ldr	r2, [r7, #0]
 80045b6:	430a      	orrs	r2, r1
 80045b8:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f042 0201 	orr.w	r2, r2, #1
 80045c8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2220      	movs	r2, #32
 80045ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80045d2:	2300      	movs	r3, #0
 80045d4:	e000      	b.n	80045d8 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80045d6:	2302      	movs	r3, #2
  }
}
 80045d8:	4618      	mov	r0, r3
 80045da:	370c      	adds	r7, #12
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr

080045e4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b085      	sub	sp, #20
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
 80045ec:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80045ee:	2300      	movs	r3, #0
 80045f0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	2b20      	cmp	r3, #32
 80045fc:	d12a      	bne.n	8004654 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2224      	movs	r2, #36	@ 0x24
 8004602:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f022 0201 	bic.w	r2, r2, #1
 8004614:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800461c:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800461e:	89fb      	ldrh	r3, [r7, #14]
 8004620:	f023 030f 	bic.w	r3, r3, #15
 8004624:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	b29a      	uxth	r2, r3
 800462a:	89fb      	ldrh	r3, [r7, #14]
 800462c:	4313      	orrs	r3, r2
 800462e:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	89fa      	ldrh	r2, [r7, #14]
 8004636:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f042 0201 	orr.w	r2, r2, #1
 8004646:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2220      	movs	r2, #32
 800464c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8004650:	2300      	movs	r3, #0
 8004652:	e000      	b.n	8004656 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004654:	2302      	movs	r3, #2
  }
}
 8004656:	4618      	mov	r0, r3
 8004658:	3714      	adds	r7, #20
 800465a:	46bd      	mov	sp, r7
 800465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004660:	4770      	bx	lr
	...

08004664 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b084      	sub	sp, #16
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d101      	bne.n	8004676 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	e0bf      	b.n	80047f6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 800467c:	b2db      	uxtb	r3, r3
 800467e:	2b00      	cmp	r3, #0
 8004680:	d106      	bne.n	8004690 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2200      	movs	r2, #0
 8004686:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f7fc fc30 	bl	8000ef0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2202      	movs	r2, #2
 8004694:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	699a      	ldr	r2, [r3, #24]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 80046a6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	6999      	ldr	r1, [r3, #24]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	685a      	ldr	r2, [r3, #4]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80046bc:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	691b      	ldr	r3, [r3, #16]
 80046c2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	430a      	orrs	r2, r1
 80046ca:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	6899      	ldr	r1, [r3, #8]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	4b4a      	ldr	r3, [pc, #296]	@ (8004800 <HAL_LTDC_Init+0x19c>)
 80046d8:	400b      	ands	r3, r1
 80046da:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	695b      	ldr	r3, [r3, #20]
 80046e0:	041b      	lsls	r3, r3, #16
 80046e2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	6899      	ldr	r1, [r3, #8]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	699a      	ldr	r2, [r3, #24]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	431a      	orrs	r2, r3
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	430a      	orrs	r2, r1
 80046f8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	68d9      	ldr	r1, [r3, #12]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	4b3e      	ldr	r3, [pc, #248]	@ (8004800 <HAL_LTDC_Init+0x19c>)
 8004706:	400b      	ands	r3, r1
 8004708:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	69db      	ldr	r3, [r3, #28]
 800470e:	041b      	lsls	r3, r3, #16
 8004710:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	68d9      	ldr	r1, [r3, #12]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6a1a      	ldr	r2, [r3, #32]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	431a      	orrs	r2, r3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	430a      	orrs	r2, r1
 8004726:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	6919      	ldr	r1, [r3, #16]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	4b33      	ldr	r3, [pc, #204]	@ (8004800 <HAL_LTDC_Init+0x19c>)
 8004734:	400b      	ands	r3, r1
 8004736:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800473c:	041b      	lsls	r3, r3, #16
 800473e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	6919      	ldr	r1, [r3, #16]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	431a      	orrs	r2, r3
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	430a      	orrs	r2, r1
 8004754:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	6959      	ldr	r1, [r3, #20]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	4b27      	ldr	r3, [pc, #156]	@ (8004800 <HAL_LTDC_Init+0x19c>)
 8004762:	400b      	ands	r3, r1
 8004764:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800476a:	041b      	lsls	r3, r3, #16
 800476c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	6959      	ldr	r1, [r3, #20]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	431a      	orrs	r2, r3
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	430a      	orrs	r2, r1
 8004782:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800478a:	021b      	lsls	r3, r3, #8
 800478c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8004794:	041b      	lsls	r3, r3, #16
 8004796:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 80047a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80047ae:	68ba      	ldr	r2, [r7, #8]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	687a      	ldr	r2, [r7, #4]
 80047b6:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 80047ba:	431a      	orrs	r2, r3
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	430a      	orrs	r2, r1
 80047c2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f042 0206 	orr.w	r2, r2, #6
 80047d2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	699a      	ldr	r2, [r3, #24]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f042 0201 	orr.w	r2, r2, #1
 80047e2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2200      	movs	r2, #0
 80047e8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2201      	movs	r2, #1
 80047f0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 80047f4:	2300      	movs	r3, #0
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3710      	adds	r7, #16
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	bf00      	nop
 8004800:	f000f800 	.word	0xf000f800

08004804 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b084      	sub	sp, #16
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004812:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800481a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f003 0304 	and.w	r3, r3, #4
 8004822:	2b00      	cmp	r3, #0
 8004824:	d023      	beq.n	800486e <HAL_LTDC_IRQHandler+0x6a>
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	f003 0304 	and.w	r3, r3, #4
 800482c:	2b00      	cmp	r3, #0
 800482e:	d01e      	beq.n	800486e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f022 0204 	bic.w	r2, r2, #4
 800483e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2204      	movs	r2, #4
 8004846:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800484e:	f043 0201 	orr.w	r2, r3, #1
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2204      	movs	r2, #4
 800485c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2200      	movs	r2, #0
 8004864:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f000 f86f 	bl	800494c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	f003 0302 	and.w	r3, r3, #2
 8004874:	2b00      	cmp	r3, #0
 8004876:	d023      	beq.n	80048c0 <HAL_LTDC_IRQHandler+0xbc>
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	f003 0302 	and.w	r3, r3, #2
 800487e:	2b00      	cmp	r3, #0
 8004880:	d01e      	beq.n	80048c0 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f022 0202 	bic.w	r2, r2, #2
 8004890:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	2202      	movs	r2, #2
 8004898:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80048a0:	f043 0202 	orr.w	r2, r3, #2
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2204      	movs	r2, #4
 80048ae:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2200      	movs	r2, #0
 80048b6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f000 f846 	bl	800494c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f003 0301 	and.w	r3, r3, #1
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d01b      	beq.n	8004902 <HAL_LTDC_IRQHandler+0xfe>
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	f003 0301 	and.w	r3, r3, #1
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d016      	beq.n	8004902 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f022 0201 	bic.w	r2, r2, #1
 80048e2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	2201      	movs	r2, #1
 80048ea:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f000 f82f 	bl	8004960 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	f003 0308 	and.w	r3, r3, #8
 8004908:	2b00      	cmp	r3, #0
 800490a:	d01b      	beq.n	8004944 <HAL_LTDC_IRQHandler+0x140>
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	f003 0308 	and.w	r3, r3, #8
 8004912:	2b00      	cmp	r3, #0
 8004914:	d016      	beq.n	8004944 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f022 0208 	bic.w	r2, r2, #8
 8004924:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	2208      	movs	r2, #8
 800492c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2201      	movs	r2, #1
 8004932:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f000 f818 	bl	8004974 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8004944:	bf00      	nop
 8004946:	3710      	adds	r7, #16
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}

0800494c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800494c:	b480      	push	{r7}
 800494e:	b083      	sub	sp, #12
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8004954:	bf00      	nop
 8004956:	370c      	adds	r7, #12
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr

08004960 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8004960:	b480      	push	{r7}
 8004962:	b083      	sub	sp, #12
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8004968:	bf00      	nop
 800496a:	370c      	adds	r7, #12
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr

08004974 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8004974:	b480      	push	{r7}
 8004976:	b083      	sub	sp, #12
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800497c:	bf00      	nop
 800497e:	370c      	adds	r7, #12
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr

08004988 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004988:	b5b0      	push	{r4, r5, r7, lr}
 800498a:	b084      	sub	sp, #16
 800498c:	af00      	add	r7, sp, #0
 800498e:	60f8      	str	r0, [r7, #12]
 8004990:	60b9      	str	r1, [r7, #8]
 8004992:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800499a:	2b01      	cmp	r3, #1
 800499c:	d101      	bne.n	80049a2 <HAL_LTDC_ConfigLayer+0x1a>
 800499e:	2302      	movs	r3, #2
 80049a0:	e02c      	b.n	80049fc <HAL_LTDC_ConfigLayer+0x74>
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2201      	movs	r2, #1
 80049a6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2202      	movs	r2, #2
 80049ae:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80049b2:	68fa      	ldr	r2, [r7, #12]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2134      	movs	r1, #52	@ 0x34
 80049b8:	fb01 f303 	mul.w	r3, r1, r3
 80049bc:	4413      	add	r3, r2
 80049be:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	4614      	mov	r4, r2
 80049c6:	461d      	mov	r5, r3
 80049c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80049ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80049cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80049ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80049d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80049d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80049d4:	682b      	ldr	r3, [r5, #0]
 80049d6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80049d8:	687a      	ldr	r2, [r7, #4]
 80049da:	68b9      	ldr	r1, [r7, #8]
 80049dc:	68f8      	ldr	r0, [r7, #12]
 80049de:	f000 f811 	bl	8004a04 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	2201      	movs	r2, #1
 80049e8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2201      	movs	r2, #1
 80049ee:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2200      	movs	r2, #0
 80049f6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80049fa:	2300      	movs	r3, #0
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3710      	adds	r7, #16
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bdb0      	pop	{r4, r5, r7, pc}

08004a04 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b089      	sub	sp, #36	@ 0x24
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	60f8      	str	r0, [r7, #12]
 8004a0c:	60b9      	str	r1, [r7, #8]
 8004a0e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	685a      	ldr	r2, [r3, #4]
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	0c1b      	lsrs	r3, r3, #16
 8004a1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a20:	4413      	add	r3, r2
 8004a22:	041b      	lsls	r3, r3, #16
 8004a24:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	461a      	mov	r2, r3
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	01db      	lsls	r3, r3, #7
 8004a30:	4413      	add	r3, r2
 8004a32:	3384      	adds	r3, #132	@ 0x84
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	68fa      	ldr	r2, [r7, #12]
 8004a38:	6812      	ldr	r2, [r2, #0]
 8004a3a:	4611      	mov	r1, r2
 8004a3c:	687a      	ldr	r2, [r7, #4]
 8004a3e:	01d2      	lsls	r2, r2, #7
 8004a40:	440a      	add	r2, r1
 8004a42:	3284      	adds	r2, #132	@ 0x84
 8004a44:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004a48:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	0c1b      	lsrs	r3, r3, #16
 8004a56:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004a5a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004a5c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4619      	mov	r1, r3
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	01db      	lsls	r3, r3, #7
 8004a68:	440b      	add	r3, r1
 8004a6a:	3384      	adds	r3, #132	@ 0x84
 8004a6c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004a6e:	69fb      	ldr	r3, [r7, #28]
 8004a70:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004a72:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	68da      	ldr	r2, [r3, #12]
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a82:	4413      	add	r3, r2
 8004a84:	041b      	lsls	r3, r3, #16
 8004a86:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	01db      	lsls	r3, r3, #7
 8004a92:	4413      	add	r3, r2
 8004a94:	3384      	adds	r3, #132	@ 0x84
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	68fa      	ldr	r2, [r7, #12]
 8004a9a:	6812      	ldr	r2, [r2, #0]
 8004a9c:	4611      	mov	r1, r2
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	01d2      	lsls	r2, r2, #7
 8004aa2:	440a      	add	r2, r1
 8004aa4:	3284      	adds	r2, #132	@ 0x84
 8004aa6:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004aaa:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	689a      	ldr	r2, [r3, #8]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004aba:	4413      	add	r3, r2
 8004abc:	1c5a      	adds	r2, r3, #1
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4619      	mov	r1, r3
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	01db      	lsls	r3, r3, #7
 8004ac8:	440b      	add	r3, r1
 8004aca:	3384      	adds	r3, #132	@ 0x84
 8004acc:	4619      	mov	r1, r3
 8004ace:	69fb      	ldr	r3, [r7, #28]
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	461a      	mov	r2, r3
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	01db      	lsls	r3, r3, #7
 8004ade:	4413      	add	r3, r2
 8004ae0:	3384      	adds	r3, #132	@ 0x84
 8004ae2:	691b      	ldr	r3, [r3, #16]
 8004ae4:	68fa      	ldr	r2, [r7, #12]
 8004ae6:	6812      	ldr	r2, [r2, #0]
 8004ae8:	4611      	mov	r1, r2
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	01d2      	lsls	r2, r2, #7
 8004aee:	440a      	add	r2, r1
 8004af0:	3284      	adds	r2, #132	@ 0x84
 8004af2:	f023 0307 	bic.w	r3, r3, #7
 8004af6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	461a      	mov	r2, r3
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	01db      	lsls	r3, r3, #7
 8004b02:	4413      	add	r3, r2
 8004b04:	3384      	adds	r3, #132	@ 0x84
 8004b06:	461a      	mov	r2, r3
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	691b      	ldr	r3, [r3, #16]
 8004b0c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004b14:	021b      	lsls	r3, r3, #8
 8004b16:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004b1e:	041b      	lsls	r3, r3, #16
 8004b20:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	699b      	ldr	r3, [r3, #24]
 8004b26:	061b      	lsls	r3, r3, #24
 8004b28:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	461a      	mov	r2, r3
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	01db      	lsls	r3, r3, #7
 8004b34:	4413      	add	r3, r2
 8004b36:	3384      	adds	r3, #132	@ 0x84
 8004b38:	699b      	ldr	r3, [r3, #24]
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	461a      	mov	r2, r3
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	01db      	lsls	r3, r3, #7
 8004b44:	4413      	add	r3, r2
 8004b46:	3384      	adds	r3, #132	@ 0x84
 8004b48:	461a      	mov	r2, r3
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004b54:	461a      	mov	r2, r3
 8004b56:	69fb      	ldr	r3, [r7, #28]
 8004b58:	431a      	orrs	r2, r3
 8004b5a:	69bb      	ldr	r3, [r7, #24]
 8004b5c:	431a      	orrs	r2, r3
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4619      	mov	r1, r3
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	01db      	lsls	r3, r3, #7
 8004b68:	440b      	add	r3, r1
 8004b6a:	3384      	adds	r3, #132	@ 0x84
 8004b6c:	4619      	mov	r1, r3
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	4313      	orrs	r3, r2
 8004b72:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	461a      	mov	r2, r3
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	01db      	lsls	r3, r3, #7
 8004b7e:	4413      	add	r3, r2
 8004b80:	3384      	adds	r3, #132	@ 0x84
 8004b82:	695b      	ldr	r3, [r3, #20]
 8004b84:	68fa      	ldr	r2, [r7, #12]
 8004b86:	6812      	ldr	r2, [r2, #0]
 8004b88:	4611      	mov	r1, r2
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	01d2      	lsls	r2, r2, #7
 8004b8e:	440a      	add	r2, r1
 8004b90:	3284      	adds	r2, #132	@ 0x84
 8004b92:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004b96:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	461a      	mov	r2, r3
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	01db      	lsls	r3, r3, #7
 8004ba2:	4413      	add	r3, r2
 8004ba4:	3384      	adds	r3, #132	@ 0x84
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	695b      	ldr	r3, [r3, #20]
 8004bac:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	01db      	lsls	r3, r3, #7
 8004bb8:	4413      	add	r3, r2
 8004bba:	3384      	adds	r3, #132	@ 0x84
 8004bbc:	69db      	ldr	r3, [r3, #28]
 8004bbe:	68fa      	ldr	r2, [r7, #12]
 8004bc0:	6812      	ldr	r2, [r2, #0]
 8004bc2:	4611      	mov	r1, r2
 8004bc4:	687a      	ldr	r2, [r7, #4]
 8004bc6:	01d2      	lsls	r2, r2, #7
 8004bc8:	440a      	add	r2, r1
 8004bca:	3284      	adds	r2, #132	@ 0x84
 8004bcc:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004bd0:	f023 0307 	bic.w	r3, r3, #7
 8004bd4:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	69da      	ldr	r2, [r3, #28]
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	6a1b      	ldr	r3, [r3, #32]
 8004bde:	68f9      	ldr	r1, [r7, #12]
 8004be0:	6809      	ldr	r1, [r1, #0]
 8004be2:	4608      	mov	r0, r1
 8004be4:	6879      	ldr	r1, [r7, #4]
 8004be6:	01c9      	lsls	r1, r1, #7
 8004be8:	4401      	add	r1, r0
 8004bea:	3184      	adds	r1, #132	@ 0x84
 8004bec:	4313      	orrs	r3, r2
 8004bee:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	461a      	mov	r2, r3
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	01db      	lsls	r3, r3, #7
 8004bfa:	4413      	add	r3, r2
 8004bfc:	3384      	adds	r3, #132	@ 0x84
 8004bfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	461a      	mov	r2, r3
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	01db      	lsls	r3, r3, #7
 8004c0a:	4413      	add	r3, r2
 8004c0c:	3384      	adds	r3, #132	@ 0x84
 8004c0e:	461a      	mov	r2, r3
 8004c10:	2300      	movs	r3, #0
 8004c12:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	461a      	mov	r2, r3
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	01db      	lsls	r3, r3, #7
 8004c1e:	4413      	add	r3, r2
 8004c20:	3384      	adds	r3, #132	@ 0x84
 8004c22:	461a      	mov	r2, r3
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c28:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	691b      	ldr	r3, [r3, #16]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d102      	bne.n	8004c38 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8004c32:	2304      	movs	r3, #4
 8004c34:	61fb      	str	r3, [r7, #28]
 8004c36:	e01b      	b.n	8004c70 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	691b      	ldr	r3, [r3, #16]
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d102      	bne.n	8004c46 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004c40:	2303      	movs	r3, #3
 8004c42:	61fb      	str	r3, [r7, #28]
 8004c44:	e014      	b.n	8004c70 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	691b      	ldr	r3, [r3, #16]
 8004c4a:	2b04      	cmp	r3, #4
 8004c4c:	d00b      	beq.n	8004c66 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004c52:	2b02      	cmp	r3, #2
 8004c54:	d007      	beq.n	8004c66 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004c5a:	2b03      	cmp	r3, #3
 8004c5c:	d003      	beq.n	8004c66 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004c62:	2b07      	cmp	r3, #7
 8004c64:	d102      	bne.n	8004c6c <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8004c66:	2302      	movs	r3, #2
 8004c68:	61fb      	str	r3, [r7, #28]
 8004c6a:	e001      	b.n	8004c70 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	461a      	mov	r2, r3
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	01db      	lsls	r3, r3, #7
 8004c7a:	4413      	add	r3, r2
 8004c7c:	3384      	adds	r3, #132	@ 0x84
 8004c7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c80:	68fa      	ldr	r2, [r7, #12]
 8004c82:	6812      	ldr	r2, [r2, #0]
 8004c84:	4611      	mov	r1, r2
 8004c86:	687a      	ldr	r2, [r7, #4]
 8004c88:	01d2      	lsls	r2, r2, #7
 8004c8a:	440a      	add	r2, r1
 8004c8c:	3284      	adds	r2, #132	@ 0x84
 8004c8e:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8004c92:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c98:	69fa      	ldr	r2, [r7, #28]
 8004c9a:	fb02 f303 	mul.w	r3, r2, r3
 8004c9e:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	6859      	ldr	r1, [r3, #4]
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	1acb      	subs	r3, r1, r3
 8004caa:	69f9      	ldr	r1, [r7, #28]
 8004cac:	fb01 f303 	mul.w	r3, r1, r3
 8004cb0:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004cb2:	68f9      	ldr	r1, [r7, #12]
 8004cb4:	6809      	ldr	r1, [r1, #0]
 8004cb6:	4608      	mov	r0, r1
 8004cb8:	6879      	ldr	r1, [r7, #4]
 8004cba:	01c9      	lsls	r1, r1, #7
 8004cbc:	4401      	add	r1, r0
 8004cbe:	3184      	adds	r1, #132	@ 0x84
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	461a      	mov	r2, r3
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	01db      	lsls	r3, r3, #7
 8004cce:	4413      	add	r3, r2
 8004cd0:	3384      	adds	r3, #132	@ 0x84
 8004cd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cd4:	68fa      	ldr	r2, [r7, #12]
 8004cd6:	6812      	ldr	r2, [r2, #0]
 8004cd8:	4611      	mov	r1, r2
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	01d2      	lsls	r2, r2, #7
 8004cde:	440a      	add	r2, r1
 8004ce0:	3284      	adds	r2, #132	@ 0x84
 8004ce2:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004ce6:	f023 0307 	bic.w	r3, r3, #7
 8004cea:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	461a      	mov	r2, r3
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	01db      	lsls	r3, r3, #7
 8004cf6:	4413      	add	r3, r2
 8004cf8:	3384      	adds	r3, #132	@ 0x84
 8004cfa:	461a      	mov	r2, r3
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d00:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	461a      	mov	r2, r3
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	01db      	lsls	r3, r3, #7
 8004d0c:	4413      	add	r3, r2
 8004d0e:	3384      	adds	r3, #132	@ 0x84
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	68fa      	ldr	r2, [r7, #12]
 8004d14:	6812      	ldr	r2, [r2, #0]
 8004d16:	4611      	mov	r1, r2
 8004d18:	687a      	ldr	r2, [r7, #4]
 8004d1a:	01d2      	lsls	r2, r2, #7
 8004d1c:	440a      	add	r2, r1
 8004d1e:	3284      	adds	r2, #132	@ 0x84
 8004d20:	f043 0301 	orr.w	r3, r3, #1
 8004d24:	6013      	str	r3, [r2, #0]
}
 8004d26:	bf00      	nop
 8004d28:	3724      	adds	r7, #36	@ 0x24
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr
	...

08004d34 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b086      	sub	sp, #24
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d101      	bne.n	8004d46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e267      	b.n	8005216 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 0301 	and.w	r3, r3, #1
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d075      	beq.n	8004e3e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004d52:	4b88      	ldr	r3, [pc, #544]	@ (8004f74 <HAL_RCC_OscConfig+0x240>)
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	f003 030c 	and.w	r3, r3, #12
 8004d5a:	2b04      	cmp	r3, #4
 8004d5c:	d00c      	beq.n	8004d78 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d5e:	4b85      	ldr	r3, [pc, #532]	@ (8004f74 <HAL_RCC_OscConfig+0x240>)
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004d66:	2b08      	cmp	r3, #8
 8004d68:	d112      	bne.n	8004d90 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d6a:	4b82      	ldr	r3, [pc, #520]	@ (8004f74 <HAL_RCC_OscConfig+0x240>)
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d72:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004d76:	d10b      	bne.n	8004d90 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d78:	4b7e      	ldr	r3, [pc, #504]	@ (8004f74 <HAL_RCC_OscConfig+0x240>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d05b      	beq.n	8004e3c <HAL_RCC_OscConfig+0x108>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d157      	bne.n	8004e3c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	e242      	b.n	8005216 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d98:	d106      	bne.n	8004da8 <HAL_RCC_OscConfig+0x74>
 8004d9a:	4b76      	ldr	r3, [pc, #472]	@ (8004f74 <HAL_RCC_OscConfig+0x240>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a75      	ldr	r2, [pc, #468]	@ (8004f74 <HAL_RCC_OscConfig+0x240>)
 8004da0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004da4:	6013      	str	r3, [r2, #0]
 8004da6:	e01d      	b.n	8004de4 <HAL_RCC_OscConfig+0xb0>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004db0:	d10c      	bne.n	8004dcc <HAL_RCC_OscConfig+0x98>
 8004db2:	4b70      	ldr	r3, [pc, #448]	@ (8004f74 <HAL_RCC_OscConfig+0x240>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a6f      	ldr	r2, [pc, #444]	@ (8004f74 <HAL_RCC_OscConfig+0x240>)
 8004db8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004dbc:	6013      	str	r3, [r2, #0]
 8004dbe:	4b6d      	ldr	r3, [pc, #436]	@ (8004f74 <HAL_RCC_OscConfig+0x240>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a6c      	ldr	r2, [pc, #432]	@ (8004f74 <HAL_RCC_OscConfig+0x240>)
 8004dc4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004dc8:	6013      	str	r3, [r2, #0]
 8004dca:	e00b      	b.n	8004de4 <HAL_RCC_OscConfig+0xb0>
 8004dcc:	4b69      	ldr	r3, [pc, #420]	@ (8004f74 <HAL_RCC_OscConfig+0x240>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a68      	ldr	r2, [pc, #416]	@ (8004f74 <HAL_RCC_OscConfig+0x240>)
 8004dd2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004dd6:	6013      	str	r3, [r2, #0]
 8004dd8:	4b66      	ldr	r3, [pc, #408]	@ (8004f74 <HAL_RCC_OscConfig+0x240>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a65      	ldr	r2, [pc, #404]	@ (8004f74 <HAL_RCC_OscConfig+0x240>)
 8004dde:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004de2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d013      	beq.n	8004e14 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dec:	f7fc fc66 	bl	80016bc <HAL_GetTick>
 8004df0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004df2:	e008      	b.n	8004e06 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004df4:	f7fc fc62 	bl	80016bc <HAL_GetTick>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	1ad3      	subs	r3, r2, r3
 8004dfe:	2b64      	cmp	r3, #100	@ 0x64
 8004e00:	d901      	bls.n	8004e06 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004e02:	2303      	movs	r3, #3
 8004e04:	e207      	b.n	8005216 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e06:	4b5b      	ldr	r3, [pc, #364]	@ (8004f74 <HAL_RCC_OscConfig+0x240>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d0f0      	beq.n	8004df4 <HAL_RCC_OscConfig+0xc0>
 8004e12:	e014      	b.n	8004e3e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e14:	f7fc fc52 	bl	80016bc <HAL_GetTick>
 8004e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e1a:	e008      	b.n	8004e2e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e1c:	f7fc fc4e 	bl	80016bc <HAL_GetTick>
 8004e20:	4602      	mov	r2, r0
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	1ad3      	subs	r3, r2, r3
 8004e26:	2b64      	cmp	r3, #100	@ 0x64
 8004e28:	d901      	bls.n	8004e2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004e2a:	2303      	movs	r3, #3
 8004e2c:	e1f3      	b.n	8005216 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e2e:	4b51      	ldr	r3, [pc, #324]	@ (8004f74 <HAL_RCC_OscConfig+0x240>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d1f0      	bne.n	8004e1c <HAL_RCC_OscConfig+0xe8>
 8004e3a:	e000      	b.n	8004e3e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f003 0302 	and.w	r3, r3, #2
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d063      	beq.n	8004f12 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004e4a:	4b4a      	ldr	r3, [pc, #296]	@ (8004f74 <HAL_RCC_OscConfig+0x240>)
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	f003 030c 	and.w	r3, r3, #12
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d00b      	beq.n	8004e6e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e56:	4b47      	ldr	r3, [pc, #284]	@ (8004f74 <HAL_RCC_OscConfig+0x240>)
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004e5e:	2b08      	cmp	r3, #8
 8004e60:	d11c      	bne.n	8004e9c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e62:	4b44      	ldr	r3, [pc, #272]	@ (8004f74 <HAL_RCC_OscConfig+0x240>)
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d116      	bne.n	8004e9c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e6e:	4b41      	ldr	r3, [pc, #260]	@ (8004f74 <HAL_RCC_OscConfig+0x240>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f003 0302 	and.w	r3, r3, #2
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d005      	beq.n	8004e86 <HAL_RCC_OscConfig+0x152>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	68db      	ldr	r3, [r3, #12]
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d001      	beq.n	8004e86 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	e1c7      	b.n	8005216 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e86:	4b3b      	ldr	r3, [pc, #236]	@ (8004f74 <HAL_RCC_OscConfig+0x240>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	691b      	ldr	r3, [r3, #16]
 8004e92:	00db      	lsls	r3, r3, #3
 8004e94:	4937      	ldr	r1, [pc, #220]	@ (8004f74 <HAL_RCC_OscConfig+0x240>)
 8004e96:	4313      	orrs	r3, r2
 8004e98:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e9a:	e03a      	b.n	8004f12 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	68db      	ldr	r3, [r3, #12]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d020      	beq.n	8004ee6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ea4:	4b34      	ldr	r3, [pc, #208]	@ (8004f78 <HAL_RCC_OscConfig+0x244>)
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eaa:	f7fc fc07 	bl	80016bc <HAL_GetTick>
 8004eae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004eb0:	e008      	b.n	8004ec4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004eb2:	f7fc fc03 	bl	80016bc <HAL_GetTick>
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	1ad3      	subs	r3, r2, r3
 8004ebc:	2b02      	cmp	r3, #2
 8004ebe:	d901      	bls.n	8004ec4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004ec0:	2303      	movs	r3, #3
 8004ec2:	e1a8      	b.n	8005216 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ec4:	4b2b      	ldr	r3, [pc, #172]	@ (8004f74 <HAL_RCC_OscConfig+0x240>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 0302 	and.w	r3, r3, #2
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d0f0      	beq.n	8004eb2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ed0:	4b28      	ldr	r3, [pc, #160]	@ (8004f74 <HAL_RCC_OscConfig+0x240>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	691b      	ldr	r3, [r3, #16]
 8004edc:	00db      	lsls	r3, r3, #3
 8004ede:	4925      	ldr	r1, [pc, #148]	@ (8004f74 <HAL_RCC_OscConfig+0x240>)
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	600b      	str	r3, [r1, #0]
 8004ee4:	e015      	b.n	8004f12 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ee6:	4b24      	ldr	r3, [pc, #144]	@ (8004f78 <HAL_RCC_OscConfig+0x244>)
 8004ee8:	2200      	movs	r2, #0
 8004eea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eec:	f7fc fbe6 	bl	80016bc <HAL_GetTick>
 8004ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ef2:	e008      	b.n	8004f06 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ef4:	f7fc fbe2 	bl	80016bc <HAL_GetTick>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	1ad3      	subs	r3, r2, r3
 8004efe:	2b02      	cmp	r3, #2
 8004f00:	d901      	bls.n	8004f06 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004f02:	2303      	movs	r3, #3
 8004f04:	e187      	b.n	8005216 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f06:	4b1b      	ldr	r3, [pc, #108]	@ (8004f74 <HAL_RCC_OscConfig+0x240>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f003 0302 	and.w	r3, r3, #2
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d1f0      	bne.n	8004ef4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 0308 	and.w	r3, r3, #8
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d036      	beq.n	8004f8c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	695b      	ldr	r3, [r3, #20]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d016      	beq.n	8004f54 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f26:	4b15      	ldr	r3, [pc, #84]	@ (8004f7c <HAL_RCC_OscConfig+0x248>)
 8004f28:	2201      	movs	r2, #1
 8004f2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f2c:	f7fc fbc6 	bl	80016bc <HAL_GetTick>
 8004f30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f32:	e008      	b.n	8004f46 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f34:	f7fc fbc2 	bl	80016bc <HAL_GetTick>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	1ad3      	subs	r3, r2, r3
 8004f3e:	2b02      	cmp	r3, #2
 8004f40:	d901      	bls.n	8004f46 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004f42:	2303      	movs	r3, #3
 8004f44:	e167      	b.n	8005216 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f46:	4b0b      	ldr	r3, [pc, #44]	@ (8004f74 <HAL_RCC_OscConfig+0x240>)
 8004f48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f4a:	f003 0302 	and.w	r3, r3, #2
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d0f0      	beq.n	8004f34 <HAL_RCC_OscConfig+0x200>
 8004f52:	e01b      	b.n	8004f8c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f54:	4b09      	ldr	r3, [pc, #36]	@ (8004f7c <HAL_RCC_OscConfig+0x248>)
 8004f56:	2200      	movs	r2, #0
 8004f58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f5a:	f7fc fbaf 	bl	80016bc <HAL_GetTick>
 8004f5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f60:	e00e      	b.n	8004f80 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f62:	f7fc fbab 	bl	80016bc <HAL_GetTick>
 8004f66:	4602      	mov	r2, r0
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	1ad3      	subs	r3, r2, r3
 8004f6c:	2b02      	cmp	r3, #2
 8004f6e:	d907      	bls.n	8004f80 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004f70:	2303      	movs	r3, #3
 8004f72:	e150      	b.n	8005216 <HAL_RCC_OscConfig+0x4e2>
 8004f74:	40023800 	.word	0x40023800
 8004f78:	42470000 	.word	0x42470000
 8004f7c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f80:	4b88      	ldr	r3, [pc, #544]	@ (80051a4 <HAL_RCC_OscConfig+0x470>)
 8004f82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f84:	f003 0302 	and.w	r3, r3, #2
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d1ea      	bne.n	8004f62 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 0304 	and.w	r3, r3, #4
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	f000 8097 	beq.w	80050c8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f9e:	4b81      	ldr	r3, [pc, #516]	@ (80051a4 <HAL_RCC_OscConfig+0x470>)
 8004fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fa2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d10f      	bne.n	8004fca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004faa:	2300      	movs	r3, #0
 8004fac:	60bb      	str	r3, [r7, #8]
 8004fae:	4b7d      	ldr	r3, [pc, #500]	@ (80051a4 <HAL_RCC_OscConfig+0x470>)
 8004fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fb2:	4a7c      	ldr	r2, [pc, #496]	@ (80051a4 <HAL_RCC_OscConfig+0x470>)
 8004fb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004fb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8004fba:	4b7a      	ldr	r3, [pc, #488]	@ (80051a4 <HAL_RCC_OscConfig+0x470>)
 8004fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fc2:	60bb      	str	r3, [r7, #8]
 8004fc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fca:	4b77      	ldr	r3, [pc, #476]	@ (80051a8 <HAL_RCC_OscConfig+0x474>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d118      	bne.n	8005008 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004fd6:	4b74      	ldr	r3, [pc, #464]	@ (80051a8 <HAL_RCC_OscConfig+0x474>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a73      	ldr	r2, [pc, #460]	@ (80051a8 <HAL_RCC_OscConfig+0x474>)
 8004fdc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fe0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fe2:	f7fc fb6b 	bl	80016bc <HAL_GetTick>
 8004fe6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fe8:	e008      	b.n	8004ffc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fea:	f7fc fb67 	bl	80016bc <HAL_GetTick>
 8004fee:	4602      	mov	r2, r0
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	1ad3      	subs	r3, r2, r3
 8004ff4:	2b02      	cmp	r3, #2
 8004ff6:	d901      	bls.n	8004ffc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004ff8:	2303      	movs	r3, #3
 8004ffa:	e10c      	b.n	8005216 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ffc:	4b6a      	ldr	r3, [pc, #424]	@ (80051a8 <HAL_RCC_OscConfig+0x474>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005004:	2b00      	cmp	r3, #0
 8005006:	d0f0      	beq.n	8004fea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	2b01      	cmp	r3, #1
 800500e:	d106      	bne.n	800501e <HAL_RCC_OscConfig+0x2ea>
 8005010:	4b64      	ldr	r3, [pc, #400]	@ (80051a4 <HAL_RCC_OscConfig+0x470>)
 8005012:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005014:	4a63      	ldr	r2, [pc, #396]	@ (80051a4 <HAL_RCC_OscConfig+0x470>)
 8005016:	f043 0301 	orr.w	r3, r3, #1
 800501a:	6713      	str	r3, [r2, #112]	@ 0x70
 800501c:	e01c      	b.n	8005058 <HAL_RCC_OscConfig+0x324>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	2b05      	cmp	r3, #5
 8005024:	d10c      	bne.n	8005040 <HAL_RCC_OscConfig+0x30c>
 8005026:	4b5f      	ldr	r3, [pc, #380]	@ (80051a4 <HAL_RCC_OscConfig+0x470>)
 8005028:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800502a:	4a5e      	ldr	r2, [pc, #376]	@ (80051a4 <HAL_RCC_OscConfig+0x470>)
 800502c:	f043 0304 	orr.w	r3, r3, #4
 8005030:	6713      	str	r3, [r2, #112]	@ 0x70
 8005032:	4b5c      	ldr	r3, [pc, #368]	@ (80051a4 <HAL_RCC_OscConfig+0x470>)
 8005034:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005036:	4a5b      	ldr	r2, [pc, #364]	@ (80051a4 <HAL_RCC_OscConfig+0x470>)
 8005038:	f043 0301 	orr.w	r3, r3, #1
 800503c:	6713      	str	r3, [r2, #112]	@ 0x70
 800503e:	e00b      	b.n	8005058 <HAL_RCC_OscConfig+0x324>
 8005040:	4b58      	ldr	r3, [pc, #352]	@ (80051a4 <HAL_RCC_OscConfig+0x470>)
 8005042:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005044:	4a57      	ldr	r2, [pc, #348]	@ (80051a4 <HAL_RCC_OscConfig+0x470>)
 8005046:	f023 0301 	bic.w	r3, r3, #1
 800504a:	6713      	str	r3, [r2, #112]	@ 0x70
 800504c:	4b55      	ldr	r3, [pc, #340]	@ (80051a4 <HAL_RCC_OscConfig+0x470>)
 800504e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005050:	4a54      	ldr	r2, [pc, #336]	@ (80051a4 <HAL_RCC_OscConfig+0x470>)
 8005052:	f023 0304 	bic.w	r3, r3, #4
 8005056:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d015      	beq.n	800508c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005060:	f7fc fb2c 	bl	80016bc <HAL_GetTick>
 8005064:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005066:	e00a      	b.n	800507e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005068:	f7fc fb28 	bl	80016bc <HAL_GetTick>
 800506c:	4602      	mov	r2, r0
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	1ad3      	subs	r3, r2, r3
 8005072:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005076:	4293      	cmp	r3, r2
 8005078:	d901      	bls.n	800507e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800507a:	2303      	movs	r3, #3
 800507c:	e0cb      	b.n	8005216 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800507e:	4b49      	ldr	r3, [pc, #292]	@ (80051a4 <HAL_RCC_OscConfig+0x470>)
 8005080:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005082:	f003 0302 	and.w	r3, r3, #2
 8005086:	2b00      	cmp	r3, #0
 8005088:	d0ee      	beq.n	8005068 <HAL_RCC_OscConfig+0x334>
 800508a:	e014      	b.n	80050b6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800508c:	f7fc fb16 	bl	80016bc <HAL_GetTick>
 8005090:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005092:	e00a      	b.n	80050aa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005094:	f7fc fb12 	bl	80016bc <HAL_GetTick>
 8005098:	4602      	mov	r2, r0
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	1ad3      	subs	r3, r2, r3
 800509e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d901      	bls.n	80050aa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80050a6:	2303      	movs	r3, #3
 80050a8:	e0b5      	b.n	8005216 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050aa:	4b3e      	ldr	r3, [pc, #248]	@ (80051a4 <HAL_RCC_OscConfig+0x470>)
 80050ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050ae:	f003 0302 	and.w	r3, r3, #2
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d1ee      	bne.n	8005094 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80050b6:	7dfb      	ldrb	r3, [r7, #23]
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d105      	bne.n	80050c8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050bc:	4b39      	ldr	r3, [pc, #228]	@ (80051a4 <HAL_RCC_OscConfig+0x470>)
 80050be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050c0:	4a38      	ldr	r2, [pc, #224]	@ (80051a4 <HAL_RCC_OscConfig+0x470>)
 80050c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80050c6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	699b      	ldr	r3, [r3, #24]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	f000 80a1 	beq.w	8005214 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80050d2:	4b34      	ldr	r3, [pc, #208]	@ (80051a4 <HAL_RCC_OscConfig+0x470>)
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	f003 030c 	and.w	r3, r3, #12
 80050da:	2b08      	cmp	r3, #8
 80050dc:	d05c      	beq.n	8005198 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	699b      	ldr	r3, [r3, #24]
 80050e2:	2b02      	cmp	r3, #2
 80050e4:	d141      	bne.n	800516a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050e6:	4b31      	ldr	r3, [pc, #196]	@ (80051ac <HAL_RCC_OscConfig+0x478>)
 80050e8:	2200      	movs	r2, #0
 80050ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050ec:	f7fc fae6 	bl	80016bc <HAL_GetTick>
 80050f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050f2:	e008      	b.n	8005106 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050f4:	f7fc fae2 	bl	80016bc <HAL_GetTick>
 80050f8:	4602      	mov	r2, r0
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	2b02      	cmp	r3, #2
 8005100:	d901      	bls.n	8005106 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005102:	2303      	movs	r3, #3
 8005104:	e087      	b.n	8005216 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005106:	4b27      	ldr	r3, [pc, #156]	@ (80051a4 <HAL_RCC_OscConfig+0x470>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800510e:	2b00      	cmp	r3, #0
 8005110:	d1f0      	bne.n	80050f4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	69da      	ldr	r2, [r3, #28]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6a1b      	ldr	r3, [r3, #32]
 800511a:	431a      	orrs	r2, r3
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005120:	019b      	lsls	r3, r3, #6
 8005122:	431a      	orrs	r2, r3
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005128:	085b      	lsrs	r3, r3, #1
 800512a:	3b01      	subs	r3, #1
 800512c:	041b      	lsls	r3, r3, #16
 800512e:	431a      	orrs	r2, r3
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005134:	061b      	lsls	r3, r3, #24
 8005136:	491b      	ldr	r1, [pc, #108]	@ (80051a4 <HAL_RCC_OscConfig+0x470>)
 8005138:	4313      	orrs	r3, r2
 800513a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800513c:	4b1b      	ldr	r3, [pc, #108]	@ (80051ac <HAL_RCC_OscConfig+0x478>)
 800513e:	2201      	movs	r2, #1
 8005140:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005142:	f7fc fabb 	bl	80016bc <HAL_GetTick>
 8005146:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005148:	e008      	b.n	800515c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800514a:	f7fc fab7 	bl	80016bc <HAL_GetTick>
 800514e:	4602      	mov	r2, r0
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	1ad3      	subs	r3, r2, r3
 8005154:	2b02      	cmp	r3, #2
 8005156:	d901      	bls.n	800515c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005158:	2303      	movs	r3, #3
 800515a:	e05c      	b.n	8005216 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800515c:	4b11      	ldr	r3, [pc, #68]	@ (80051a4 <HAL_RCC_OscConfig+0x470>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005164:	2b00      	cmp	r3, #0
 8005166:	d0f0      	beq.n	800514a <HAL_RCC_OscConfig+0x416>
 8005168:	e054      	b.n	8005214 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800516a:	4b10      	ldr	r3, [pc, #64]	@ (80051ac <HAL_RCC_OscConfig+0x478>)
 800516c:	2200      	movs	r2, #0
 800516e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005170:	f7fc faa4 	bl	80016bc <HAL_GetTick>
 8005174:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005176:	e008      	b.n	800518a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005178:	f7fc faa0 	bl	80016bc <HAL_GetTick>
 800517c:	4602      	mov	r2, r0
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	1ad3      	subs	r3, r2, r3
 8005182:	2b02      	cmp	r3, #2
 8005184:	d901      	bls.n	800518a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005186:	2303      	movs	r3, #3
 8005188:	e045      	b.n	8005216 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800518a:	4b06      	ldr	r3, [pc, #24]	@ (80051a4 <HAL_RCC_OscConfig+0x470>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005192:	2b00      	cmp	r3, #0
 8005194:	d1f0      	bne.n	8005178 <HAL_RCC_OscConfig+0x444>
 8005196:	e03d      	b.n	8005214 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	699b      	ldr	r3, [r3, #24]
 800519c:	2b01      	cmp	r3, #1
 800519e:	d107      	bne.n	80051b0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80051a0:	2301      	movs	r3, #1
 80051a2:	e038      	b.n	8005216 <HAL_RCC_OscConfig+0x4e2>
 80051a4:	40023800 	.word	0x40023800
 80051a8:	40007000 	.word	0x40007000
 80051ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80051b0:	4b1b      	ldr	r3, [pc, #108]	@ (8005220 <HAL_RCC_OscConfig+0x4ec>)
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	699b      	ldr	r3, [r3, #24]
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d028      	beq.n	8005210 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d121      	bne.n	8005210 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051d6:	429a      	cmp	r2, r3
 80051d8:	d11a      	bne.n	8005210 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80051da:	68fa      	ldr	r2, [r7, #12]
 80051dc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80051e0:	4013      	ands	r3, r2
 80051e2:	687a      	ldr	r2, [r7, #4]
 80051e4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80051e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d111      	bne.n	8005210 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051f6:	085b      	lsrs	r3, r3, #1
 80051f8:	3b01      	subs	r3, #1
 80051fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d107      	bne.n	8005210 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800520a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800520c:	429a      	cmp	r2, r3
 800520e:	d001      	beq.n	8005214 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005210:	2301      	movs	r3, #1
 8005212:	e000      	b.n	8005216 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005214:	2300      	movs	r3, #0
}
 8005216:	4618      	mov	r0, r3
 8005218:	3718      	adds	r7, #24
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}
 800521e:	bf00      	nop
 8005220:	40023800 	.word	0x40023800

08005224 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b084      	sub	sp, #16
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d101      	bne.n	8005238 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	e0cc      	b.n	80053d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005238:	4b68      	ldr	r3, [pc, #416]	@ (80053dc <HAL_RCC_ClockConfig+0x1b8>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f003 030f 	and.w	r3, r3, #15
 8005240:	683a      	ldr	r2, [r7, #0]
 8005242:	429a      	cmp	r2, r3
 8005244:	d90c      	bls.n	8005260 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005246:	4b65      	ldr	r3, [pc, #404]	@ (80053dc <HAL_RCC_ClockConfig+0x1b8>)
 8005248:	683a      	ldr	r2, [r7, #0]
 800524a:	b2d2      	uxtb	r2, r2
 800524c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800524e:	4b63      	ldr	r3, [pc, #396]	@ (80053dc <HAL_RCC_ClockConfig+0x1b8>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 030f 	and.w	r3, r3, #15
 8005256:	683a      	ldr	r2, [r7, #0]
 8005258:	429a      	cmp	r2, r3
 800525a:	d001      	beq.n	8005260 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	e0b8      	b.n	80053d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f003 0302 	and.w	r3, r3, #2
 8005268:	2b00      	cmp	r3, #0
 800526a:	d020      	beq.n	80052ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 0304 	and.w	r3, r3, #4
 8005274:	2b00      	cmp	r3, #0
 8005276:	d005      	beq.n	8005284 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005278:	4b59      	ldr	r3, [pc, #356]	@ (80053e0 <HAL_RCC_ClockConfig+0x1bc>)
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	4a58      	ldr	r2, [pc, #352]	@ (80053e0 <HAL_RCC_ClockConfig+0x1bc>)
 800527e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005282:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f003 0308 	and.w	r3, r3, #8
 800528c:	2b00      	cmp	r3, #0
 800528e:	d005      	beq.n	800529c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005290:	4b53      	ldr	r3, [pc, #332]	@ (80053e0 <HAL_RCC_ClockConfig+0x1bc>)
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	4a52      	ldr	r2, [pc, #328]	@ (80053e0 <HAL_RCC_ClockConfig+0x1bc>)
 8005296:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800529a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800529c:	4b50      	ldr	r3, [pc, #320]	@ (80053e0 <HAL_RCC_ClockConfig+0x1bc>)
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	494d      	ldr	r1, [pc, #308]	@ (80053e0 <HAL_RCC_ClockConfig+0x1bc>)
 80052aa:	4313      	orrs	r3, r2
 80052ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f003 0301 	and.w	r3, r3, #1
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d044      	beq.n	8005344 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	2b01      	cmp	r3, #1
 80052c0:	d107      	bne.n	80052d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052c2:	4b47      	ldr	r3, [pc, #284]	@ (80053e0 <HAL_RCC_ClockConfig+0x1bc>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d119      	bne.n	8005302 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e07f      	b.n	80053d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	2b02      	cmp	r3, #2
 80052d8:	d003      	beq.n	80052e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80052de:	2b03      	cmp	r3, #3
 80052e0:	d107      	bne.n	80052f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052e2:	4b3f      	ldr	r3, [pc, #252]	@ (80053e0 <HAL_RCC_ClockConfig+0x1bc>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d109      	bne.n	8005302 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052ee:	2301      	movs	r3, #1
 80052f0:	e06f      	b.n	80053d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052f2:	4b3b      	ldr	r3, [pc, #236]	@ (80053e0 <HAL_RCC_ClockConfig+0x1bc>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f003 0302 	and.w	r3, r3, #2
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d101      	bne.n	8005302 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	e067      	b.n	80053d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005302:	4b37      	ldr	r3, [pc, #220]	@ (80053e0 <HAL_RCC_ClockConfig+0x1bc>)
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	f023 0203 	bic.w	r2, r3, #3
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	4934      	ldr	r1, [pc, #208]	@ (80053e0 <HAL_RCC_ClockConfig+0x1bc>)
 8005310:	4313      	orrs	r3, r2
 8005312:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005314:	f7fc f9d2 	bl	80016bc <HAL_GetTick>
 8005318:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800531a:	e00a      	b.n	8005332 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800531c:	f7fc f9ce 	bl	80016bc <HAL_GetTick>
 8005320:	4602      	mov	r2, r0
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	1ad3      	subs	r3, r2, r3
 8005326:	f241 3288 	movw	r2, #5000	@ 0x1388
 800532a:	4293      	cmp	r3, r2
 800532c:	d901      	bls.n	8005332 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800532e:	2303      	movs	r3, #3
 8005330:	e04f      	b.n	80053d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005332:	4b2b      	ldr	r3, [pc, #172]	@ (80053e0 <HAL_RCC_ClockConfig+0x1bc>)
 8005334:	689b      	ldr	r3, [r3, #8]
 8005336:	f003 020c 	and.w	r2, r3, #12
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	009b      	lsls	r3, r3, #2
 8005340:	429a      	cmp	r2, r3
 8005342:	d1eb      	bne.n	800531c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005344:	4b25      	ldr	r3, [pc, #148]	@ (80053dc <HAL_RCC_ClockConfig+0x1b8>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f003 030f 	and.w	r3, r3, #15
 800534c:	683a      	ldr	r2, [r7, #0]
 800534e:	429a      	cmp	r2, r3
 8005350:	d20c      	bcs.n	800536c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005352:	4b22      	ldr	r3, [pc, #136]	@ (80053dc <HAL_RCC_ClockConfig+0x1b8>)
 8005354:	683a      	ldr	r2, [r7, #0]
 8005356:	b2d2      	uxtb	r2, r2
 8005358:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800535a:	4b20      	ldr	r3, [pc, #128]	@ (80053dc <HAL_RCC_ClockConfig+0x1b8>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f003 030f 	and.w	r3, r3, #15
 8005362:	683a      	ldr	r2, [r7, #0]
 8005364:	429a      	cmp	r2, r3
 8005366:	d001      	beq.n	800536c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	e032      	b.n	80053d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f003 0304 	and.w	r3, r3, #4
 8005374:	2b00      	cmp	r3, #0
 8005376:	d008      	beq.n	800538a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005378:	4b19      	ldr	r3, [pc, #100]	@ (80053e0 <HAL_RCC_ClockConfig+0x1bc>)
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	68db      	ldr	r3, [r3, #12]
 8005384:	4916      	ldr	r1, [pc, #88]	@ (80053e0 <HAL_RCC_ClockConfig+0x1bc>)
 8005386:	4313      	orrs	r3, r2
 8005388:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f003 0308 	and.w	r3, r3, #8
 8005392:	2b00      	cmp	r3, #0
 8005394:	d009      	beq.n	80053aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005396:	4b12      	ldr	r3, [pc, #72]	@ (80053e0 <HAL_RCC_ClockConfig+0x1bc>)
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	691b      	ldr	r3, [r3, #16]
 80053a2:	00db      	lsls	r3, r3, #3
 80053a4:	490e      	ldr	r1, [pc, #56]	@ (80053e0 <HAL_RCC_ClockConfig+0x1bc>)
 80053a6:	4313      	orrs	r3, r2
 80053a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80053aa:	f000 f821 	bl	80053f0 <HAL_RCC_GetSysClockFreq>
 80053ae:	4602      	mov	r2, r0
 80053b0:	4b0b      	ldr	r3, [pc, #44]	@ (80053e0 <HAL_RCC_ClockConfig+0x1bc>)
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	091b      	lsrs	r3, r3, #4
 80053b6:	f003 030f 	and.w	r3, r3, #15
 80053ba:	490a      	ldr	r1, [pc, #40]	@ (80053e4 <HAL_RCC_ClockConfig+0x1c0>)
 80053bc:	5ccb      	ldrb	r3, [r1, r3]
 80053be:	fa22 f303 	lsr.w	r3, r2, r3
 80053c2:	4a09      	ldr	r2, [pc, #36]	@ (80053e8 <HAL_RCC_ClockConfig+0x1c4>)
 80053c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80053c6:	4b09      	ldr	r3, [pc, #36]	@ (80053ec <HAL_RCC_ClockConfig+0x1c8>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4618      	mov	r0, r3
 80053cc:	f7fc f80e 	bl	80013ec <HAL_InitTick>

  return HAL_OK;
 80053d0:	2300      	movs	r3, #0
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3710      	adds	r7, #16
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}
 80053da:	bf00      	nop
 80053dc:	40023c00 	.word	0x40023c00
 80053e0:	40023800 	.word	0x40023800
 80053e4:	0800deac 	.word	0x0800deac
 80053e8:	20000000 	.word	0x20000000
 80053ec:	20000004 	.word	0x20000004

080053f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80053f4:	b094      	sub	sp, #80	@ 0x50
 80053f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80053f8:	2300      	movs	r3, #0
 80053fa:	647b      	str	r3, [r7, #68]	@ 0x44
 80053fc:	2300      	movs	r3, #0
 80053fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005400:	2300      	movs	r3, #0
 8005402:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005404:	2300      	movs	r3, #0
 8005406:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005408:	4b79      	ldr	r3, [pc, #484]	@ (80055f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	f003 030c 	and.w	r3, r3, #12
 8005410:	2b08      	cmp	r3, #8
 8005412:	d00d      	beq.n	8005430 <HAL_RCC_GetSysClockFreq+0x40>
 8005414:	2b08      	cmp	r3, #8
 8005416:	f200 80e1 	bhi.w	80055dc <HAL_RCC_GetSysClockFreq+0x1ec>
 800541a:	2b00      	cmp	r3, #0
 800541c:	d002      	beq.n	8005424 <HAL_RCC_GetSysClockFreq+0x34>
 800541e:	2b04      	cmp	r3, #4
 8005420:	d003      	beq.n	800542a <HAL_RCC_GetSysClockFreq+0x3a>
 8005422:	e0db      	b.n	80055dc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005424:	4b73      	ldr	r3, [pc, #460]	@ (80055f4 <HAL_RCC_GetSysClockFreq+0x204>)
 8005426:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8005428:	e0db      	b.n	80055e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800542a:	4b73      	ldr	r3, [pc, #460]	@ (80055f8 <HAL_RCC_GetSysClockFreq+0x208>)
 800542c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800542e:	e0d8      	b.n	80055e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005430:	4b6f      	ldr	r3, [pc, #444]	@ (80055f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005438:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800543a:	4b6d      	ldr	r3, [pc, #436]	@ (80055f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005442:	2b00      	cmp	r3, #0
 8005444:	d063      	beq.n	800550e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005446:	4b6a      	ldr	r3, [pc, #424]	@ (80055f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	099b      	lsrs	r3, r3, #6
 800544c:	2200      	movs	r2, #0
 800544e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005450:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005452:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005454:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005458:	633b      	str	r3, [r7, #48]	@ 0x30
 800545a:	2300      	movs	r3, #0
 800545c:	637b      	str	r3, [r7, #52]	@ 0x34
 800545e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005462:	4622      	mov	r2, r4
 8005464:	462b      	mov	r3, r5
 8005466:	f04f 0000 	mov.w	r0, #0
 800546a:	f04f 0100 	mov.w	r1, #0
 800546e:	0159      	lsls	r1, r3, #5
 8005470:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005474:	0150      	lsls	r0, r2, #5
 8005476:	4602      	mov	r2, r0
 8005478:	460b      	mov	r3, r1
 800547a:	4621      	mov	r1, r4
 800547c:	1a51      	subs	r1, r2, r1
 800547e:	6139      	str	r1, [r7, #16]
 8005480:	4629      	mov	r1, r5
 8005482:	eb63 0301 	sbc.w	r3, r3, r1
 8005486:	617b      	str	r3, [r7, #20]
 8005488:	f04f 0200 	mov.w	r2, #0
 800548c:	f04f 0300 	mov.w	r3, #0
 8005490:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005494:	4659      	mov	r1, fp
 8005496:	018b      	lsls	r3, r1, #6
 8005498:	4651      	mov	r1, sl
 800549a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800549e:	4651      	mov	r1, sl
 80054a0:	018a      	lsls	r2, r1, #6
 80054a2:	4651      	mov	r1, sl
 80054a4:	ebb2 0801 	subs.w	r8, r2, r1
 80054a8:	4659      	mov	r1, fp
 80054aa:	eb63 0901 	sbc.w	r9, r3, r1
 80054ae:	f04f 0200 	mov.w	r2, #0
 80054b2:	f04f 0300 	mov.w	r3, #0
 80054b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80054ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80054be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80054c2:	4690      	mov	r8, r2
 80054c4:	4699      	mov	r9, r3
 80054c6:	4623      	mov	r3, r4
 80054c8:	eb18 0303 	adds.w	r3, r8, r3
 80054cc:	60bb      	str	r3, [r7, #8]
 80054ce:	462b      	mov	r3, r5
 80054d0:	eb49 0303 	adc.w	r3, r9, r3
 80054d4:	60fb      	str	r3, [r7, #12]
 80054d6:	f04f 0200 	mov.w	r2, #0
 80054da:	f04f 0300 	mov.w	r3, #0
 80054de:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80054e2:	4629      	mov	r1, r5
 80054e4:	024b      	lsls	r3, r1, #9
 80054e6:	4621      	mov	r1, r4
 80054e8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80054ec:	4621      	mov	r1, r4
 80054ee:	024a      	lsls	r2, r1, #9
 80054f0:	4610      	mov	r0, r2
 80054f2:	4619      	mov	r1, r3
 80054f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80054f6:	2200      	movs	r2, #0
 80054f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80054fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80054fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005500:	f7fa fe76 	bl	80001f0 <__aeabi_uldivmod>
 8005504:	4602      	mov	r2, r0
 8005506:	460b      	mov	r3, r1
 8005508:	4613      	mov	r3, r2
 800550a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800550c:	e058      	b.n	80055c0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800550e:	4b38      	ldr	r3, [pc, #224]	@ (80055f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	099b      	lsrs	r3, r3, #6
 8005514:	2200      	movs	r2, #0
 8005516:	4618      	mov	r0, r3
 8005518:	4611      	mov	r1, r2
 800551a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800551e:	623b      	str	r3, [r7, #32]
 8005520:	2300      	movs	r3, #0
 8005522:	627b      	str	r3, [r7, #36]	@ 0x24
 8005524:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005528:	4642      	mov	r2, r8
 800552a:	464b      	mov	r3, r9
 800552c:	f04f 0000 	mov.w	r0, #0
 8005530:	f04f 0100 	mov.w	r1, #0
 8005534:	0159      	lsls	r1, r3, #5
 8005536:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800553a:	0150      	lsls	r0, r2, #5
 800553c:	4602      	mov	r2, r0
 800553e:	460b      	mov	r3, r1
 8005540:	4641      	mov	r1, r8
 8005542:	ebb2 0a01 	subs.w	sl, r2, r1
 8005546:	4649      	mov	r1, r9
 8005548:	eb63 0b01 	sbc.w	fp, r3, r1
 800554c:	f04f 0200 	mov.w	r2, #0
 8005550:	f04f 0300 	mov.w	r3, #0
 8005554:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005558:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800555c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005560:	ebb2 040a 	subs.w	r4, r2, sl
 8005564:	eb63 050b 	sbc.w	r5, r3, fp
 8005568:	f04f 0200 	mov.w	r2, #0
 800556c:	f04f 0300 	mov.w	r3, #0
 8005570:	00eb      	lsls	r3, r5, #3
 8005572:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005576:	00e2      	lsls	r2, r4, #3
 8005578:	4614      	mov	r4, r2
 800557a:	461d      	mov	r5, r3
 800557c:	4643      	mov	r3, r8
 800557e:	18e3      	adds	r3, r4, r3
 8005580:	603b      	str	r3, [r7, #0]
 8005582:	464b      	mov	r3, r9
 8005584:	eb45 0303 	adc.w	r3, r5, r3
 8005588:	607b      	str	r3, [r7, #4]
 800558a:	f04f 0200 	mov.w	r2, #0
 800558e:	f04f 0300 	mov.w	r3, #0
 8005592:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005596:	4629      	mov	r1, r5
 8005598:	028b      	lsls	r3, r1, #10
 800559a:	4621      	mov	r1, r4
 800559c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80055a0:	4621      	mov	r1, r4
 80055a2:	028a      	lsls	r2, r1, #10
 80055a4:	4610      	mov	r0, r2
 80055a6:	4619      	mov	r1, r3
 80055a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80055aa:	2200      	movs	r2, #0
 80055ac:	61bb      	str	r3, [r7, #24]
 80055ae:	61fa      	str	r2, [r7, #28]
 80055b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80055b4:	f7fa fe1c 	bl	80001f0 <__aeabi_uldivmod>
 80055b8:	4602      	mov	r2, r0
 80055ba:	460b      	mov	r3, r1
 80055bc:	4613      	mov	r3, r2
 80055be:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80055c0:	4b0b      	ldr	r3, [pc, #44]	@ (80055f0 <HAL_RCC_GetSysClockFreq+0x200>)
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	0c1b      	lsrs	r3, r3, #16
 80055c6:	f003 0303 	and.w	r3, r3, #3
 80055ca:	3301      	adds	r3, #1
 80055cc:	005b      	lsls	r3, r3, #1
 80055ce:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80055d0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80055d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80055d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80055d8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80055da:	e002      	b.n	80055e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80055dc:	4b05      	ldr	r3, [pc, #20]	@ (80055f4 <HAL_RCC_GetSysClockFreq+0x204>)
 80055de:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80055e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80055e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3750      	adds	r7, #80	@ 0x50
 80055e8:	46bd      	mov	sp, r7
 80055ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80055ee:	bf00      	nop
 80055f0:	40023800 	.word	0x40023800
 80055f4:	00f42400 	.word	0x00f42400
 80055f8:	007a1200 	.word	0x007a1200

080055fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80055fc:	b480      	push	{r7}
 80055fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005600:	4b03      	ldr	r3, [pc, #12]	@ (8005610 <HAL_RCC_GetHCLKFreq+0x14>)
 8005602:	681b      	ldr	r3, [r3, #0]
}
 8005604:	4618      	mov	r0, r3
 8005606:	46bd      	mov	sp, r7
 8005608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560c:	4770      	bx	lr
 800560e:	bf00      	nop
 8005610:	20000000 	.word	0x20000000

08005614 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005618:	f7ff fff0 	bl	80055fc <HAL_RCC_GetHCLKFreq>
 800561c:	4602      	mov	r2, r0
 800561e:	4b05      	ldr	r3, [pc, #20]	@ (8005634 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005620:	689b      	ldr	r3, [r3, #8]
 8005622:	0a9b      	lsrs	r3, r3, #10
 8005624:	f003 0307 	and.w	r3, r3, #7
 8005628:	4903      	ldr	r1, [pc, #12]	@ (8005638 <HAL_RCC_GetPCLK1Freq+0x24>)
 800562a:	5ccb      	ldrb	r3, [r1, r3]
 800562c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005630:	4618      	mov	r0, r3
 8005632:	bd80      	pop	{r7, pc}
 8005634:	40023800 	.word	0x40023800
 8005638:	0800debc 	.word	0x0800debc

0800563c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005640:	f7ff ffdc 	bl	80055fc <HAL_RCC_GetHCLKFreq>
 8005644:	4602      	mov	r2, r0
 8005646:	4b05      	ldr	r3, [pc, #20]	@ (800565c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	0b5b      	lsrs	r3, r3, #13
 800564c:	f003 0307 	and.w	r3, r3, #7
 8005650:	4903      	ldr	r1, [pc, #12]	@ (8005660 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005652:	5ccb      	ldrb	r3, [r1, r3]
 8005654:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005658:	4618      	mov	r0, r3
 800565a:	bd80      	pop	{r7, pc}
 800565c:	40023800 	.word	0x40023800
 8005660:	0800debc 	.word	0x0800debc

08005664 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005664:	b480      	push	{r7}
 8005666:	b083      	sub	sp, #12
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	220f      	movs	r2, #15
 8005672:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005674:	4b12      	ldr	r3, [pc, #72]	@ (80056c0 <HAL_RCC_GetClockConfig+0x5c>)
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	f003 0203 	and.w	r2, r3, #3
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005680:	4b0f      	ldr	r3, [pc, #60]	@ (80056c0 <HAL_RCC_GetClockConfig+0x5c>)
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800568c:	4b0c      	ldr	r3, [pc, #48]	@ (80056c0 <HAL_RCC_GetClockConfig+0x5c>)
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005698:	4b09      	ldr	r3, [pc, #36]	@ (80056c0 <HAL_RCC_GetClockConfig+0x5c>)
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	08db      	lsrs	r3, r3, #3
 800569e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80056a6:	4b07      	ldr	r3, [pc, #28]	@ (80056c4 <HAL_RCC_GetClockConfig+0x60>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f003 020f 	and.w	r2, r3, #15
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	601a      	str	r2, [r3, #0]
}
 80056b2:	bf00      	nop
 80056b4:	370c      	adds	r7, #12
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr
 80056be:	bf00      	nop
 80056c0:	40023800 	.word	0x40023800
 80056c4:	40023c00 	.word	0x40023c00

080056c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b086      	sub	sp, #24
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80056d0:	2300      	movs	r3, #0
 80056d2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80056d4:	2300      	movs	r3, #0
 80056d6:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f003 0301 	and.w	r3, r3, #1
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d10b      	bne.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d105      	bne.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d075      	beq.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80056fc:	4b91      	ldr	r3, [pc, #580]	@ (8005944 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80056fe:	2200      	movs	r2, #0
 8005700:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005702:	f7fb ffdb 	bl	80016bc <HAL_GetTick>
 8005706:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005708:	e008      	b.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800570a:	f7fb ffd7 	bl	80016bc <HAL_GetTick>
 800570e:	4602      	mov	r2, r0
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	1ad3      	subs	r3, r2, r3
 8005714:	2b02      	cmp	r3, #2
 8005716:	d901      	bls.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005718:	2303      	movs	r3, #3
 800571a:	e189      	b.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800571c:	4b8a      	ldr	r3, [pc, #552]	@ (8005948 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005724:	2b00      	cmp	r3, #0
 8005726:	d1f0      	bne.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f003 0301 	and.w	r3, r3, #1
 8005730:	2b00      	cmp	r3, #0
 8005732:	d009      	beq.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	019a      	lsls	r2, r3, #6
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	071b      	lsls	r3, r3, #28
 8005740:	4981      	ldr	r1, [pc, #516]	@ (8005948 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005742:	4313      	orrs	r3, r2
 8005744:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f003 0302 	and.w	r3, r3, #2
 8005750:	2b00      	cmp	r3, #0
 8005752:	d01f      	beq.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005754:	4b7c      	ldr	r3, [pc, #496]	@ (8005948 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005756:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800575a:	0f1b      	lsrs	r3, r3, #28
 800575c:	f003 0307 	and.w	r3, r3, #7
 8005760:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	019a      	lsls	r2, r3, #6
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	68db      	ldr	r3, [r3, #12]
 800576c:	061b      	lsls	r3, r3, #24
 800576e:	431a      	orrs	r2, r3
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	071b      	lsls	r3, r3, #28
 8005774:	4974      	ldr	r1, [pc, #464]	@ (8005948 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005776:	4313      	orrs	r3, r2
 8005778:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800577c:	4b72      	ldr	r3, [pc, #456]	@ (8005948 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800577e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005782:	f023 021f 	bic.w	r2, r3, #31
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	69db      	ldr	r3, [r3, #28]
 800578a:	3b01      	subs	r3, #1
 800578c:	496e      	ldr	r1, [pc, #440]	@ (8005948 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800578e:	4313      	orrs	r3, r2
 8005790:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800579c:	2b00      	cmp	r3, #0
 800579e:	d00d      	beq.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	019a      	lsls	r2, r3, #6
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	68db      	ldr	r3, [r3, #12]
 80057aa:	061b      	lsls	r3, r3, #24
 80057ac:	431a      	orrs	r2, r3
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	071b      	lsls	r3, r3, #28
 80057b4:	4964      	ldr	r1, [pc, #400]	@ (8005948 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80057b6:	4313      	orrs	r3, r2
 80057b8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80057bc:	4b61      	ldr	r3, [pc, #388]	@ (8005944 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80057be:	2201      	movs	r2, #1
 80057c0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80057c2:	f7fb ff7b 	bl	80016bc <HAL_GetTick>
 80057c6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80057c8:	e008      	b.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80057ca:	f7fb ff77 	bl	80016bc <HAL_GetTick>
 80057ce:	4602      	mov	r2, r0
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	1ad3      	subs	r3, r2, r3
 80057d4:	2b02      	cmp	r3, #2
 80057d6:	d901      	bls.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80057d8:	2303      	movs	r3, #3
 80057da:	e129      	b.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80057dc:	4b5a      	ldr	r3, [pc, #360]	@ (8005948 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d0f0      	beq.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f003 0304 	and.w	r3, r3, #4
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d105      	bne.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d079      	beq.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005800:	4b52      	ldr	r3, [pc, #328]	@ (800594c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005802:	2200      	movs	r2, #0
 8005804:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005806:	f7fb ff59 	bl	80016bc <HAL_GetTick>
 800580a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800580c:	e008      	b.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800580e:	f7fb ff55 	bl	80016bc <HAL_GetTick>
 8005812:	4602      	mov	r2, r0
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	1ad3      	subs	r3, r2, r3
 8005818:	2b02      	cmp	r3, #2
 800581a:	d901      	bls.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800581c:	2303      	movs	r3, #3
 800581e:	e107      	b.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005820:	4b49      	ldr	r3, [pc, #292]	@ (8005948 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005828:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800582c:	d0ef      	beq.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f003 0304 	and.w	r3, r3, #4
 8005836:	2b00      	cmp	r3, #0
 8005838:	d020      	beq.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800583a:	4b43      	ldr	r3, [pc, #268]	@ (8005948 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800583c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005840:	0f1b      	lsrs	r3, r3, #28
 8005842:	f003 0307 	and.w	r3, r3, #7
 8005846:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	691b      	ldr	r3, [r3, #16]
 800584c:	019a      	lsls	r2, r3, #6
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	695b      	ldr	r3, [r3, #20]
 8005852:	061b      	lsls	r3, r3, #24
 8005854:	431a      	orrs	r2, r3
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	071b      	lsls	r3, r3, #28
 800585a:	493b      	ldr	r1, [pc, #236]	@ (8005948 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800585c:	4313      	orrs	r3, r2
 800585e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005862:	4b39      	ldr	r3, [pc, #228]	@ (8005948 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005864:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005868:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6a1b      	ldr	r3, [r3, #32]
 8005870:	3b01      	subs	r3, #1
 8005872:	021b      	lsls	r3, r3, #8
 8005874:	4934      	ldr	r1, [pc, #208]	@ (8005948 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005876:	4313      	orrs	r3, r2
 8005878:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f003 0308 	and.w	r3, r3, #8
 8005884:	2b00      	cmp	r3, #0
 8005886:	d01e      	beq.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005888:	4b2f      	ldr	r3, [pc, #188]	@ (8005948 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800588a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800588e:	0e1b      	lsrs	r3, r3, #24
 8005890:	f003 030f 	and.w	r3, r3, #15
 8005894:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	691b      	ldr	r3, [r3, #16]
 800589a:	019a      	lsls	r2, r3, #6
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	061b      	lsls	r3, r3, #24
 80058a0:	431a      	orrs	r2, r3
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	699b      	ldr	r3, [r3, #24]
 80058a6:	071b      	lsls	r3, r3, #28
 80058a8:	4927      	ldr	r1, [pc, #156]	@ (8005948 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80058aa:	4313      	orrs	r3, r2
 80058ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80058b0:	4b25      	ldr	r3, [pc, #148]	@ (8005948 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80058b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80058b6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058be:	4922      	ldr	r1, [pc, #136]	@ (8005948 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80058c0:	4313      	orrs	r3, r2
 80058c2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80058c6:	4b21      	ldr	r3, [pc, #132]	@ (800594c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80058c8:	2201      	movs	r2, #1
 80058ca:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80058cc:	f7fb fef6 	bl	80016bc <HAL_GetTick>
 80058d0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80058d2:	e008      	b.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80058d4:	f7fb fef2 	bl	80016bc <HAL_GetTick>
 80058d8:	4602      	mov	r2, r0
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	1ad3      	subs	r3, r2, r3
 80058de:	2b02      	cmp	r3, #2
 80058e0:	d901      	bls.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80058e2:	2303      	movs	r3, #3
 80058e4:	e0a4      	b.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80058e6:	4b18      	ldr	r3, [pc, #96]	@ (8005948 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80058ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80058f2:	d1ef      	bne.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f003 0320 	and.w	r3, r3, #32
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	f000 808b 	beq.w	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005902:	2300      	movs	r3, #0
 8005904:	60fb      	str	r3, [r7, #12]
 8005906:	4b10      	ldr	r3, [pc, #64]	@ (8005948 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800590a:	4a0f      	ldr	r2, [pc, #60]	@ (8005948 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800590c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005910:	6413      	str	r3, [r2, #64]	@ 0x40
 8005912:	4b0d      	ldr	r3, [pc, #52]	@ (8005948 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005916:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800591a:	60fb      	str	r3, [r7, #12]
 800591c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800591e:	4b0c      	ldr	r3, [pc, #48]	@ (8005950 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a0b      	ldr	r2, [pc, #44]	@ (8005950 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005924:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005928:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800592a:	f7fb fec7 	bl	80016bc <HAL_GetTick>
 800592e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005930:	e010      	b.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005932:	f7fb fec3 	bl	80016bc <HAL_GetTick>
 8005936:	4602      	mov	r2, r0
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	1ad3      	subs	r3, r2, r3
 800593c:	2b02      	cmp	r3, #2
 800593e:	d909      	bls.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8005940:	2303      	movs	r3, #3
 8005942:	e075      	b.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005944:	42470068 	.word	0x42470068
 8005948:	40023800 	.word	0x40023800
 800594c:	42470070 	.word	0x42470070
 8005950:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005954:	4b38      	ldr	r3, [pc, #224]	@ (8005a38 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800595c:	2b00      	cmp	r3, #0
 800595e:	d0e8      	beq.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005960:	4b36      	ldr	r3, [pc, #216]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005962:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005964:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005968:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d02f      	beq.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005974:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005978:	693a      	ldr	r2, [r7, #16]
 800597a:	429a      	cmp	r2, r3
 800597c:	d028      	beq.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800597e:	4b2f      	ldr	r3, [pc, #188]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005980:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005982:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005986:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005988:	4b2d      	ldr	r3, [pc, #180]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800598a:	2201      	movs	r2, #1
 800598c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800598e:	4b2c      	ldr	r3, [pc, #176]	@ (8005a40 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005990:	2200      	movs	r2, #0
 8005992:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005994:	4a29      	ldr	r2, [pc, #164]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800599a:	4b28      	ldr	r3, [pc, #160]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800599c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800599e:	f003 0301 	and.w	r3, r3, #1
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d114      	bne.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80059a6:	f7fb fe89 	bl	80016bc <HAL_GetTick>
 80059aa:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059ac:	e00a      	b.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059ae:	f7fb fe85 	bl	80016bc <HAL_GetTick>
 80059b2:	4602      	mov	r2, r0
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	1ad3      	subs	r3, r2, r3
 80059b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80059bc:	4293      	cmp	r3, r2
 80059be:	d901      	bls.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80059c0:	2303      	movs	r3, #3
 80059c2:	e035      	b.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059c4:	4b1d      	ldr	r3, [pc, #116]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80059c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059c8:	f003 0302 	and.w	r3, r3, #2
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d0ee      	beq.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059d4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80059d8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80059dc:	d10d      	bne.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x332>
 80059de:	4b17      	ldr	r3, [pc, #92]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059ea:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80059ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059f2:	4912      	ldr	r1, [pc, #72]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80059f4:	4313      	orrs	r3, r2
 80059f6:	608b      	str	r3, [r1, #8]
 80059f8:	e005      	b.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80059fa:	4b10      	ldr	r3, [pc, #64]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	4a0f      	ldr	r2, [pc, #60]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005a00:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005a04:	6093      	str	r3, [r2, #8]
 8005a06:	4b0d      	ldr	r3, [pc, #52]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005a08:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a12:	490a      	ldr	r1, [pc, #40]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005a14:	4313      	orrs	r3, r2
 8005a16:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f003 0310 	and.w	r3, r3, #16
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d004      	beq.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8005a2a:	4b06      	ldr	r3, [pc, #24]	@ (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005a2c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005a2e:	2300      	movs	r3, #0
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	3718      	adds	r7, #24
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}
 8005a38:	40007000 	.word	0x40007000
 8005a3c:	40023800 	.word	0x40023800
 8005a40:	42470e40 	.word	0x42470e40
 8005a44:	424711e0 	.word	0x424711e0

08005a48 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b082      	sub	sp, #8
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
 8005a50:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d101      	bne.n	8005a5c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	e025      	b.n	8005aa8 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005a62:	b2db      	uxtb	r3, r3
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d106      	bne.n	8005a76 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	f7fb fcb1 	bl	80013d8 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2202      	movs	r2, #2
 8005a7a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681a      	ldr	r2, [r3, #0]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	3304      	adds	r3, #4
 8005a86:	4619      	mov	r1, r3
 8005a88:	4610      	mov	r0, r2
 8005a8a:	f000 ffd3 	bl	8006a34 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6818      	ldr	r0, [r3, #0]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	461a      	mov	r2, r3
 8005a98:	6839      	ldr	r1, [r7, #0]
 8005a9a:	f001 f828 	bl	8006aee <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8005aa6:	2300      	movs	r3, #0
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3708      	adds	r7, #8
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}

08005ab0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b082      	sub	sp, #8
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d101      	bne.n	8005ac2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e07b      	b.n	8005bba <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d108      	bne.n	8005adc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005ad2:	d009      	beq.n	8005ae8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	61da      	str	r2, [r3, #28]
 8005ada:	e005      	b.n	8005ae8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2200      	movs	r2, #0
 8005aec:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005af4:	b2db      	uxtb	r3, r3
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d106      	bne.n	8005b08 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2200      	movs	r2, #0
 8005afe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f7fb fb24 	bl	8001150 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2202      	movs	r2, #2
 8005b0c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005b1e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	689b      	ldr	r3, [r3, #8]
 8005b2c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005b30:	431a      	orrs	r2, r3
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	68db      	ldr	r3, [r3, #12]
 8005b36:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b3a:	431a      	orrs	r2, r3
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	691b      	ldr	r3, [r3, #16]
 8005b40:	f003 0302 	and.w	r3, r3, #2
 8005b44:	431a      	orrs	r2, r3
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	695b      	ldr	r3, [r3, #20]
 8005b4a:	f003 0301 	and.w	r3, r3, #1
 8005b4e:	431a      	orrs	r2, r3
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	699b      	ldr	r3, [r3, #24]
 8005b54:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005b58:	431a      	orrs	r2, r3
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	69db      	ldr	r3, [r3, #28]
 8005b5e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005b62:	431a      	orrs	r2, r3
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6a1b      	ldr	r3, [r3, #32]
 8005b68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b6c:	ea42 0103 	orr.w	r1, r2, r3
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b74:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	430a      	orrs	r2, r1
 8005b7e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	699b      	ldr	r3, [r3, #24]
 8005b84:	0c1b      	lsrs	r3, r3, #16
 8005b86:	f003 0104 	and.w	r1, r3, #4
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b8e:	f003 0210 	and.w	r2, r3, #16
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	430a      	orrs	r2, r1
 8005b98:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	69da      	ldr	r2, [r3, #28]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005ba8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2200      	movs	r2, #0
 8005bae:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005bb8:	2300      	movs	r3, #0
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3708      	adds	r7, #8
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}

08005bc2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005bc2:	b580      	push	{r7, lr}
 8005bc4:	b082      	sub	sp, #8
 8005bc6:	af00      	add	r7, sp, #0
 8005bc8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d101      	bne.n	8005bd4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	e041      	b.n	8005c58 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005bda:	b2db      	uxtb	r3, r3
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d106      	bne.n	8005bee <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2200      	movs	r2, #0
 8005be4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f7fb faf9 	bl	80011e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2202      	movs	r2, #2
 8005bf2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	3304      	adds	r3, #4
 8005bfe:	4619      	mov	r1, r3
 8005c00:	4610      	mov	r0, r2
 8005c02:	f000 fa7d 	bl	8006100 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2201      	movs	r2, #1
 8005c0a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2201      	movs	r2, #1
 8005c12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2201      	movs	r2, #1
 8005c1a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2201      	movs	r2, #1
 8005c22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2201      	movs	r2, #1
 8005c2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2201      	movs	r2, #1
 8005c32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2201      	movs	r2, #1
 8005c3a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2201      	movs	r2, #1
 8005c42:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2201      	movs	r2, #1
 8005c4a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2201      	movs	r2, #1
 8005c52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005c56:	2300      	movs	r3, #0
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	3708      	adds	r7, #8
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}

08005c60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b085      	sub	sp, #20
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c6e:	b2db      	uxtb	r3, r3
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	d001      	beq.n	8005c78 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005c74:	2301      	movs	r3, #1
 8005c76:	e04e      	b.n	8005d16 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2202      	movs	r2, #2
 8005c7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	68da      	ldr	r2, [r3, #12]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f042 0201 	orr.w	r2, r2, #1
 8005c8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a23      	ldr	r2, [pc, #140]	@ (8005d24 <HAL_TIM_Base_Start_IT+0xc4>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d022      	beq.n	8005ce0 <HAL_TIM_Base_Start_IT+0x80>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ca2:	d01d      	beq.n	8005ce0 <HAL_TIM_Base_Start_IT+0x80>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a1f      	ldr	r2, [pc, #124]	@ (8005d28 <HAL_TIM_Base_Start_IT+0xc8>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d018      	beq.n	8005ce0 <HAL_TIM_Base_Start_IT+0x80>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a1e      	ldr	r2, [pc, #120]	@ (8005d2c <HAL_TIM_Base_Start_IT+0xcc>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d013      	beq.n	8005ce0 <HAL_TIM_Base_Start_IT+0x80>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a1c      	ldr	r2, [pc, #112]	@ (8005d30 <HAL_TIM_Base_Start_IT+0xd0>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d00e      	beq.n	8005ce0 <HAL_TIM_Base_Start_IT+0x80>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a1b      	ldr	r2, [pc, #108]	@ (8005d34 <HAL_TIM_Base_Start_IT+0xd4>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d009      	beq.n	8005ce0 <HAL_TIM_Base_Start_IT+0x80>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a19      	ldr	r2, [pc, #100]	@ (8005d38 <HAL_TIM_Base_Start_IT+0xd8>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d004      	beq.n	8005ce0 <HAL_TIM_Base_Start_IT+0x80>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a18      	ldr	r2, [pc, #96]	@ (8005d3c <HAL_TIM_Base_Start_IT+0xdc>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d111      	bne.n	8005d04 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	689b      	ldr	r3, [r3, #8]
 8005ce6:	f003 0307 	and.w	r3, r3, #7
 8005cea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2b06      	cmp	r3, #6
 8005cf0:	d010      	beq.n	8005d14 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	681a      	ldr	r2, [r3, #0]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f042 0201 	orr.w	r2, r2, #1
 8005d00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d02:	e007      	b.n	8005d14 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	681a      	ldr	r2, [r3, #0]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f042 0201 	orr.w	r2, r2, #1
 8005d12:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005d14:	2300      	movs	r3, #0
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3714      	adds	r7, #20
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr
 8005d22:	bf00      	nop
 8005d24:	40010000 	.word	0x40010000
 8005d28:	40000400 	.word	0x40000400
 8005d2c:	40000800 	.word	0x40000800
 8005d30:	40000c00 	.word	0x40000c00
 8005d34:	40010400 	.word	0x40010400
 8005d38:	40014000 	.word	0x40014000
 8005d3c:	40001800 	.word	0x40001800

08005d40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b084      	sub	sp, #16
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	68db      	ldr	r3, [r3, #12]
 8005d4e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	691b      	ldr	r3, [r3, #16]
 8005d56:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	f003 0302 	and.w	r3, r3, #2
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d020      	beq.n	8005da4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	f003 0302 	and.w	r3, r3, #2
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d01b      	beq.n	8005da4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f06f 0202 	mvn.w	r2, #2
 8005d74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2201      	movs	r2, #1
 8005d7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	699b      	ldr	r3, [r3, #24]
 8005d82:	f003 0303 	and.w	r3, r3, #3
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d003      	beq.n	8005d92 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f000 f999 	bl	80060c2 <HAL_TIM_IC_CaptureCallback>
 8005d90:	e005      	b.n	8005d9e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f000 f98b 	bl	80060ae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	f000 f99c 	bl	80060d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2200      	movs	r2, #0
 8005da2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	f003 0304 	and.w	r3, r3, #4
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d020      	beq.n	8005df0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	f003 0304 	and.w	r3, r3, #4
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d01b      	beq.n	8005df0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f06f 0204 	mvn.w	r2, #4
 8005dc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2202      	movs	r2, #2
 8005dc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	699b      	ldr	r3, [r3, #24]
 8005dce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d003      	beq.n	8005dde <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f000 f973 	bl	80060c2 <HAL_TIM_IC_CaptureCallback>
 8005ddc:	e005      	b.n	8005dea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f000 f965 	bl	80060ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f000 f976 	bl	80060d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2200      	movs	r2, #0
 8005dee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	f003 0308 	and.w	r3, r3, #8
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d020      	beq.n	8005e3c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	f003 0308 	and.w	r3, r3, #8
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d01b      	beq.n	8005e3c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f06f 0208 	mvn.w	r2, #8
 8005e0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2204      	movs	r2, #4
 8005e12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	69db      	ldr	r3, [r3, #28]
 8005e1a:	f003 0303 	and.w	r3, r3, #3
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d003      	beq.n	8005e2a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f000 f94d 	bl	80060c2 <HAL_TIM_IC_CaptureCallback>
 8005e28:	e005      	b.n	8005e36 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f000 f93f 	bl	80060ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	f000 f950 	bl	80060d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	f003 0310 	and.w	r3, r3, #16
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d020      	beq.n	8005e88 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	f003 0310 	and.w	r3, r3, #16
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d01b      	beq.n	8005e88 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f06f 0210 	mvn.w	r2, #16
 8005e58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2208      	movs	r2, #8
 8005e5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	69db      	ldr	r3, [r3, #28]
 8005e66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d003      	beq.n	8005e76 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f000 f927 	bl	80060c2 <HAL_TIM_IC_CaptureCallback>
 8005e74:	e005      	b.n	8005e82 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f000 f919 	bl	80060ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	f000 f92a 	bl	80060d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2200      	movs	r2, #0
 8005e86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	f003 0301 	and.w	r3, r3, #1
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d00c      	beq.n	8005eac <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	f003 0301 	and.w	r3, r3, #1
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d007      	beq.n	8005eac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f06f 0201 	mvn.w	r2, #1
 8005ea4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f7fa ff2a 	bl	8000d00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d00c      	beq.n	8005ed0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d007      	beq.n	8005ed0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005ec8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f000 fae4 	bl	8006498 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d00c      	beq.n	8005ef4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d007      	beq.n	8005ef4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005eec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f000 f8fb 	bl	80060ea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	f003 0320 	and.w	r3, r3, #32
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d00c      	beq.n	8005f18 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	f003 0320 	and.w	r3, r3, #32
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d007      	beq.n	8005f18 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f06f 0220 	mvn.w	r2, #32
 8005f10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f000 fab6 	bl	8006484 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f18:	bf00      	nop
 8005f1a:	3710      	adds	r7, #16
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}

08005f20 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b084      	sub	sp, #16
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
 8005f28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	d101      	bne.n	8005f3c <HAL_TIM_ConfigClockSource+0x1c>
 8005f38:	2302      	movs	r3, #2
 8005f3a:	e0b4      	b.n	80060a6 <HAL_TIM_ConfigClockSource+0x186>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2201      	movs	r2, #1
 8005f40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2202      	movs	r2, #2
 8005f48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005f5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005f62:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	68ba      	ldr	r2, [r7, #8]
 8005f6a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f74:	d03e      	beq.n	8005ff4 <HAL_TIM_ConfigClockSource+0xd4>
 8005f76:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f7a:	f200 8087 	bhi.w	800608c <HAL_TIM_ConfigClockSource+0x16c>
 8005f7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f82:	f000 8086 	beq.w	8006092 <HAL_TIM_ConfigClockSource+0x172>
 8005f86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f8a:	d87f      	bhi.n	800608c <HAL_TIM_ConfigClockSource+0x16c>
 8005f8c:	2b70      	cmp	r3, #112	@ 0x70
 8005f8e:	d01a      	beq.n	8005fc6 <HAL_TIM_ConfigClockSource+0xa6>
 8005f90:	2b70      	cmp	r3, #112	@ 0x70
 8005f92:	d87b      	bhi.n	800608c <HAL_TIM_ConfigClockSource+0x16c>
 8005f94:	2b60      	cmp	r3, #96	@ 0x60
 8005f96:	d050      	beq.n	800603a <HAL_TIM_ConfigClockSource+0x11a>
 8005f98:	2b60      	cmp	r3, #96	@ 0x60
 8005f9a:	d877      	bhi.n	800608c <HAL_TIM_ConfigClockSource+0x16c>
 8005f9c:	2b50      	cmp	r3, #80	@ 0x50
 8005f9e:	d03c      	beq.n	800601a <HAL_TIM_ConfigClockSource+0xfa>
 8005fa0:	2b50      	cmp	r3, #80	@ 0x50
 8005fa2:	d873      	bhi.n	800608c <HAL_TIM_ConfigClockSource+0x16c>
 8005fa4:	2b40      	cmp	r3, #64	@ 0x40
 8005fa6:	d058      	beq.n	800605a <HAL_TIM_ConfigClockSource+0x13a>
 8005fa8:	2b40      	cmp	r3, #64	@ 0x40
 8005faa:	d86f      	bhi.n	800608c <HAL_TIM_ConfigClockSource+0x16c>
 8005fac:	2b30      	cmp	r3, #48	@ 0x30
 8005fae:	d064      	beq.n	800607a <HAL_TIM_ConfigClockSource+0x15a>
 8005fb0:	2b30      	cmp	r3, #48	@ 0x30
 8005fb2:	d86b      	bhi.n	800608c <HAL_TIM_ConfigClockSource+0x16c>
 8005fb4:	2b20      	cmp	r3, #32
 8005fb6:	d060      	beq.n	800607a <HAL_TIM_ConfigClockSource+0x15a>
 8005fb8:	2b20      	cmp	r3, #32
 8005fba:	d867      	bhi.n	800608c <HAL_TIM_ConfigClockSource+0x16c>
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d05c      	beq.n	800607a <HAL_TIM_ConfigClockSource+0x15a>
 8005fc0:	2b10      	cmp	r3, #16
 8005fc2:	d05a      	beq.n	800607a <HAL_TIM_ConfigClockSource+0x15a>
 8005fc4:	e062      	b.n	800608c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005fd6:	f000 f9b9 	bl	800634c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	689b      	ldr	r3, [r3, #8]
 8005fe0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005fe8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	68ba      	ldr	r2, [r7, #8]
 8005ff0:	609a      	str	r2, [r3, #8]
      break;
 8005ff2:	e04f      	b.n	8006094 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006004:	f000 f9a2 	bl	800634c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	689a      	ldr	r2, [r3, #8]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006016:	609a      	str	r2, [r3, #8]
      break;
 8006018:	e03c      	b.n	8006094 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006026:	461a      	mov	r2, r3
 8006028:	f000 f916 	bl	8006258 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	2150      	movs	r1, #80	@ 0x50
 8006032:	4618      	mov	r0, r3
 8006034:	f000 f96f 	bl	8006316 <TIM_ITRx_SetConfig>
      break;
 8006038:	e02c      	b.n	8006094 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006046:	461a      	mov	r2, r3
 8006048:	f000 f935 	bl	80062b6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	2160      	movs	r1, #96	@ 0x60
 8006052:	4618      	mov	r0, r3
 8006054:	f000 f95f 	bl	8006316 <TIM_ITRx_SetConfig>
      break;
 8006058:	e01c      	b.n	8006094 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006066:	461a      	mov	r2, r3
 8006068:	f000 f8f6 	bl	8006258 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	2140      	movs	r1, #64	@ 0x40
 8006072:	4618      	mov	r0, r3
 8006074:	f000 f94f 	bl	8006316 <TIM_ITRx_SetConfig>
      break;
 8006078:	e00c      	b.n	8006094 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4619      	mov	r1, r3
 8006084:	4610      	mov	r0, r2
 8006086:	f000 f946 	bl	8006316 <TIM_ITRx_SetConfig>
      break;
 800608a:	e003      	b.n	8006094 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800608c:	2301      	movs	r3, #1
 800608e:	73fb      	strb	r3, [r7, #15]
      break;
 8006090:	e000      	b.n	8006094 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006092:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2201      	movs	r2, #1
 8006098:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2200      	movs	r2, #0
 80060a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80060a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3710      	adds	r7, #16
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}

080060ae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80060ae:	b480      	push	{r7}
 80060b0:	b083      	sub	sp, #12
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80060b6:	bf00      	nop
 80060b8:	370c      	adds	r7, #12
 80060ba:	46bd      	mov	sp, r7
 80060bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c0:	4770      	bx	lr

080060c2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80060c2:	b480      	push	{r7}
 80060c4:	b083      	sub	sp, #12
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80060ca:	bf00      	nop
 80060cc:	370c      	adds	r7, #12
 80060ce:	46bd      	mov	sp, r7
 80060d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d4:	4770      	bx	lr

080060d6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80060d6:	b480      	push	{r7}
 80060d8:	b083      	sub	sp, #12
 80060da:	af00      	add	r7, sp, #0
 80060dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80060de:	bf00      	nop
 80060e0:	370c      	adds	r7, #12
 80060e2:	46bd      	mov	sp, r7
 80060e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e8:	4770      	bx	lr

080060ea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80060ea:	b480      	push	{r7}
 80060ec:	b083      	sub	sp, #12
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80060f2:	bf00      	nop
 80060f4:	370c      	adds	r7, #12
 80060f6:	46bd      	mov	sp, r7
 80060f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fc:	4770      	bx	lr
	...

08006100 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006100:	b480      	push	{r7}
 8006102:	b085      	sub	sp, #20
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
 8006108:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	4a46      	ldr	r2, [pc, #280]	@ (800622c <TIM_Base_SetConfig+0x12c>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d013      	beq.n	8006140 <TIM_Base_SetConfig+0x40>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800611e:	d00f      	beq.n	8006140 <TIM_Base_SetConfig+0x40>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	4a43      	ldr	r2, [pc, #268]	@ (8006230 <TIM_Base_SetConfig+0x130>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d00b      	beq.n	8006140 <TIM_Base_SetConfig+0x40>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	4a42      	ldr	r2, [pc, #264]	@ (8006234 <TIM_Base_SetConfig+0x134>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d007      	beq.n	8006140 <TIM_Base_SetConfig+0x40>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	4a41      	ldr	r2, [pc, #260]	@ (8006238 <TIM_Base_SetConfig+0x138>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d003      	beq.n	8006140 <TIM_Base_SetConfig+0x40>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	4a40      	ldr	r2, [pc, #256]	@ (800623c <TIM_Base_SetConfig+0x13c>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d108      	bne.n	8006152 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006146:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	68fa      	ldr	r2, [r7, #12]
 800614e:	4313      	orrs	r3, r2
 8006150:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	4a35      	ldr	r2, [pc, #212]	@ (800622c <TIM_Base_SetConfig+0x12c>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d02b      	beq.n	80061b2 <TIM_Base_SetConfig+0xb2>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006160:	d027      	beq.n	80061b2 <TIM_Base_SetConfig+0xb2>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	4a32      	ldr	r2, [pc, #200]	@ (8006230 <TIM_Base_SetConfig+0x130>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d023      	beq.n	80061b2 <TIM_Base_SetConfig+0xb2>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	4a31      	ldr	r2, [pc, #196]	@ (8006234 <TIM_Base_SetConfig+0x134>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d01f      	beq.n	80061b2 <TIM_Base_SetConfig+0xb2>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	4a30      	ldr	r2, [pc, #192]	@ (8006238 <TIM_Base_SetConfig+0x138>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d01b      	beq.n	80061b2 <TIM_Base_SetConfig+0xb2>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	4a2f      	ldr	r2, [pc, #188]	@ (800623c <TIM_Base_SetConfig+0x13c>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d017      	beq.n	80061b2 <TIM_Base_SetConfig+0xb2>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	4a2e      	ldr	r2, [pc, #184]	@ (8006240 <TIM_Base_SetConfig+0x140>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d013      	beq.n	80061b2 <TIM_Base_SetConfig+0xb2>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	4a2d      	ldr	r2, [pc, #180]	@ (8006244 <TIM_Base_SetConfig+0x144>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d00f      	beq.n	80061b2 <TIM_Base_SetConfig+0xb2>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	4a2c      	ldr	r2, [pc, #176]	@ (8006248 <TIM_Base_SetConfig+0x148>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d00b      	beq.n	80061b2 <TIM_Base_SetConfig+0xb2>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	4a2b      	ldr	r2, [pc, #172]	@ (800624c <TIM_Base_SetConfig+0x14c>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d007      	beq.n	80061b2 <TIM_Base_SetConfig+0xb2>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	4a2a      	ldr	r2, [pc, #168]	@ (8006250 <TIM_Base_SetConfig+0x150>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d003      	beq.n	80061b2 <TIM_Base_SetConfig+0xb2>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	4a29      	ldr	r2, [pc, #164]	@ (8006254 <TIM_Base_SetConfig+0x154>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d108      	bne.n	80061c4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	68db      	ldr	r3, [r3, #12]
 80061be:	68fa      	ldr	r2, [r7, #12]
 80061c0:	4313      	orrs	r3, r2
 80061c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	695b      	ldr	r3, [r3, #20]
 80061ce:	4313      	orrs	r3, r2
 80061d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	68fa      	ldr	r2, [r7, #12]
 80061d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	689a      	ldr	r2, [r3, #8]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	681a      	ldr	r2, [r3, #0]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	4a10      	ldr	r2, [pc, #64]	@ (800622c <TIM_Base_SetConfig+0x12c>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d003      	beq.n	80061f8 <TIM_Base_SetConfig+0xf8>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	4a12      	ldr	r2, [pc, #72]	@ (800623c <TIM_Base_SetConfig+0x13c>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d103      	bne.n	8006200 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	691a      	ldr	r2, [r3, #16]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2201      	movs	r2, #1
 8006204:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	691b      	ldr	r3, [r3, #16]
 800620a:	f003 0301 	and.w	r3, r3, #1
 800620e:	2b01      	cmp	r3, #1
 8006210:	d105      	bne.n	800621e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	691b      	ldr	r3, [r3, #16]
 8006216:	f023 0201 	bic.w	r2, r3, #1
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	611a      	str	r2, [r3, #16]
  }
}
 800621e:	bf00      	nop
 8006220:	3714      	adds	r7, #20
 8006222:	46bd      	mov	sp, r7
 8006224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006228:	4770      	bx	lr
 800622a:	bf00      	nop
 800622c:	40010000 	.word	0x40010000
 8006230:	40000400 	.word	0x40000400
 8006234:	40000800 	.word	0x40000800
 8006238:	40000c00 	.word	0x40000c00
 800623c:	40010400 	.word	0x40010400
 8006240:	40014000 	.word	0x40014000
 8006244:	40014400 	.word	0x40014400
 8006248:	40014800 	.word	0x40014800
 800624c:	40001800 	.word	0x40001800
 8006250:	40001c00 	.word	0x40001c00
 8006254:	40002000 	.word	0x40002000

08006258 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006258:	b480      	push	{r7}
 800625a:	b087      	sub	sp, #28
 800625c:	af00      	add	r7, sp, #0
 800625e:	60f8      	str	r0, [r7, #12]
 8006260:	60b9      	str	r1, [r7, #8]
 8006262:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	6a1b      	ldr	r3, [r3, #32]
 8006268:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	6a1b      	ldr	r3, [r3, #32]
 800626e:	f023 0201 	bic.w	r2, r3, #1
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	699b      	ldr	r3, [r3, #24]
 800627a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006282:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	011b      	lsls	r3, r3, #4
 8006288:	693a      	ldr	r2, [r7, #16]
 800628a:	4313      	orrs	r3, r2
 800628c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	f023 030a 	bic.w	r3, r3, #10
 8006294:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006296:	697a      	ldr	r2, [r7, #20]
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	4313      	orrs	r3, r2
 800629c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	693a      	ldr	r2, [r7, #16]
 80062a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	697a      	ldr	r2, [r7, #20]
 80062a8:	621a      	str	r2, [r3, #32]
}
 80062aa:	bf00      	nop
 80062ac:	371c      	adds	r7, #28
 80062ae:	46bd      	mov	sp, r7
 80062b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b4:	4770      	bx	lr

080062b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062b6:	b480      	push	{r7}
 80062b8:	b087      	sub	sp, #28
 80062ba:	af00      	add	r7, sp, #0
 80062bc:	60f8      	str	r0, [r7, #12]
 80062be:	60b9      	str	r1, [r7, #8]
 80062c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	6a1b      	ldr	r3, [r3, #32]
 80062c6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	6a1b      	ldr	r3, [r3, #32]
 80062cc:	f023 0210 	bic.w	r2, r3, #16
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	699b      	ldr	r3, [r3, #24]
 80062d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80062e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	031b      	lsls	r3, r3, #12
 80062e6:	693a      	ldr	r2, [r7, #16]
 80062e8:	4313      	orrs	r3, r2
 80062ea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80062f2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	011b      	lsls	r3, r3, #4
 80062f8:	697a      	ldr	r2, [r7, #20]
 80062fa:	4313      	orrs	r3, r2
 80062fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	693a      	ldr	r2, [r7, #16]
 8006302:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	697a      	ldr	r2, [r7, #20]
 8006308:	621a      	str	r2, [r3, #32]
}
 800630a:	bf00      	nop
 800630c:	371c      	adds	r7, #28
 800630e:	46bd      	mov	sp, r7
 8006310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006314:	4770      	bx	lr

08006316 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006316:	b480      	push	{r7}
 8006318:	b085      	sub	sp, #20
 800631a:	af00      	add	r7, sp, #0
 800631c:	6078      	str	r0, [r7, #4]
 800631e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800632c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800632e:	683a      	ldr	r2, [r7, #0]
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	4313      	orrs	r3, r2
 8006334:	f043 0307 	orr.w	r3, r3, #7
 8006338:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	68fa      	ldr	r2, [r7, #12]
 800633e:	609a      	str	r2, [r3, #8]
}
 8006340:	bf00      	nop
 8006342:	3714      	adds	r7, #20
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr

0800634c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800634c:	b480      	push	{r7}
 800634e:	b087      	sub	sp, #28
 8006350:	af00      	add	r7, sp, #0
 8006352:	60f8      	str	r0, [r7, #12]
 8006354:	60b9      	str	r1, [r7, #8]
 8006356:	607a      	str	r2, [r7, #4]
 8006358:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	689b      	ldr	r3, [r3, #8]
 800635e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006366:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	021a      	lsls	r2, r3, #8
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	431a      	orrs	r2, r3
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	4313      	orrs	r3, r2
 8006374:	697a      	ldr	r2, [r7, #20]
 8006376:	4313      	orrs	r3, r2
 8006378:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	697a      	ldr	r2, [r7, #20]
 800637e:	609a      	str	r2, [r3, #8]
}
 8006380:	bf00      	nop
 8006382:	371c      	adds	r7, #28
 8006384:	46bd      	mov	sp, r7
 8006386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638a:	4770      	bx	lr

0800638c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800638c:	b480      	push	{r7}
 800638e:	b085      	sub	sp, #20
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
 8006394:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800639c:	2b01      	cmp	r3, #1
 800639e:	d101      	bne.n	80063a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80063a0:	2302      	movs	r3, #2
 80063a2:	e05a      	b.n	800645a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2201      	movs	r2, #1
 80063a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2202      	movs	r2, #2
 80063b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	689b      	ldr	r3, [r3, #8]
 80063c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	68fa      	ldr	r2, [r7, #12]
 80063d2:	4313      	orrs	r3, r2
 80063d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	68fa      	ldr	r2, [r7, #12]
 80063dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a21      	ldr	r2, [pc, #132]	@ (8006468 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d022      	beq.n	800642e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063f0:	d01d      	beq.n	800642e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a1d      	ldr	r2, [pc, #116]	@ (800646c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d018      	beq.n	800642e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a1b      	ldr	r2, [pc, #108]	@ (8006470 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d013      	beq.n	800642e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a1a      	ldr	r2, [pc, #104]	@ (8006474 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d00e      	beq.n	800642e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a18      	ldr	r2, [pc, #96]	@ (8006478 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d009      	beq.n	800642e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a17      	ldr	r2, [pc, #92]	@ (800647c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d004      	beq.n	800642e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a15      	ldr	r2, [pc, #84]	@ (8006480 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d10c      	bne.n	8006448 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006434:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	68ba      	ldr	r2, [r7, #8]
 800643c:	4313      	orrs	r3, r2
 800643e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	68ba      	ldr	r2, [r7, #8]
 8006446:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2201      	movs	r2, #1
 800644c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2200      	movs	r2, #0
 8006454:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006458:	2300      	movs	r3, #0
}
 800645a:	4618      	mov	r0, r3
 800645c:	3714      	adds	r7, #20
 800645e:	46bd      	mov	sp, r7
 8006460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006464:	4770      	bx	lr
 8006466:	bf00      	nop
 8006468:	40010000 	.word	0x40010000
 800646c:	40000400 	.word	0x40000400
 8006470:	40000800 	.word	0x40000800
 8006474:	40000c00 	.word	0x40000c00
 8006478:	40010400 	.word	0x40010400
 800647c:	40014000 	.word	0x40014000
 8006480:	40001800 	.word	0x40001800

08006484 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006484:	b480      	push	{r7}
 8006486:	b083      	sub	sp, #12
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800648c:	bf00      	nop
 800648e:	370c      	adds	r7, #12
 8006490:	46bd      	mov	sp, r7
 8006492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006496:	4770      	bx	lr

08006498 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006498:	b480      	push	{r7}
 800649a:	b083      	sub	sp, #12
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80064a0:	bf00      	nop
 80064a2:	370c      	adds	r7, #12
 80064a4:	46bd      	mov	sp, r7
 80064a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064aa:	4770      	bx	lr

080064ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b082      	sub	sp, #8
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d101      	bne.n	80064be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80064ba:	2301      	movs	r3, #1
 80064bc:	e042      	b.n	8006544 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80064c4:	b2db      	uxtb	r3, r3
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d106      	bne.n	80064d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2200      	movs	r2, #0
 80064ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f7fa fea6 	bl	8001224 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2224      	movs	r2, #36	@ 0x24
 80064dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	68da      	ldr	r2, [r3, #12]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80064ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f000 f82b 	bl	800654c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	691a      	ldr	r2, [r3, #16]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006504:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	695a      	ldr	r2, [r3, #20]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006514:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	68da      	ldr	r2, [r3, #12]
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006524:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2200      	movs	r2, #0
 800652a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2220      	movs	r2, #32
 8006530:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2220      	movs	r2, #32
 8006538:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2200      	movs	r2, #0
 8006540:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006542:	2300      	movs	r3, #0
}
 8006544:	4618      	mov	r0, r3
 8006546:	3708      	adds	r7, #8
 8006548:	46bd      	mov	sp, r7
 800654a:	bd80      	pop	{r7, pc}

0800654c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800654c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006550:	b0c0      	sub	sp, #256	@ 0x100
 8006552:	af00      	add	r7, sp, #0
 8006554:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	691b      	ldr	r3, [r3, #16]
 8006560:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006568:	68d9      	ldr	r1, [r3, #12]
 800656a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800656e:	681a      	ldr	r2, [r3, #0]
 8006570:	ea40 0301 	orr.w	r3, r0, r1
 8006574:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006576:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800657a:	689a      	ldr	r2, [r3, #8]
 800657c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006580:	691b      	ldr	r3, [r3, #16]
 8006582:	431a      	orrs	r2, r3
 8006584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006588:	695b      	ldr	r3, [r3, #20]
 800658a:	431a      	orrs	r2, r3
 800658c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006590:	69db      	ldr	r3, [r3, #28]
 8006592:	4313      	orrs	r3, r2
 8006594:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	68db      	ldr	r3, [r3, #12]
 80065a0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80065a4:	f021 010c 	bic.w	r1, r1, #12
 80065a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065ac:	681a      	ldr	r2, [r3, #0]
 80065ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80065b2:	430b      	orrs	r3, r1
 80065b4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80065b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	695b      	ldr	r3, [r3, #20]
 80065be:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80065c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065c6:	6999      	ldr	r1, [r3, #24]
 80065c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065cc:	681a      	ldr	r2, [r3, #0]
 80065ce:	ea40 0301 	orr.w	r3, r0, r1
 80065d2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80065d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065d8:	681a      	ldr	r2, [r3, #0]
 80065da:	4b8f      	ldr	r3, [pc, #572]	@ (8006818 <UART_SetConfig+0x2cc>)
 80065dc:	429a      	cmp	r2, r3
 80065de:	d005      	beq.n	80065ec <UART_SetConfig+0xa0>
 80065e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065e4:	681a      	ldr	r2, [r3, #0]
 80065e6:	4b8d      	ldr	r3, [pc, #564]	@ (800681c <UART_SetConfig+0x2d0>)
 80065e8:	429a      	cmp	r2, r3
 80065ea:	d104      	bne.n	80065f6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80065ec:	f7ff f826 	bl	800563c <HAL_RCC_GetPCLK2Freq>
 80065f0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80065f4:	e003      	b.n	80065fe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80065f6:	f7ff f80d 	bl	8005614 <HAL_RCC_GetPCLK1Freq>
 80065fa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80065fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006602:	69db      	ldr	r3, [r3, #28]
 8006604:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006608:	f040 810c 	bne.w	8006824 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800660c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006610:	2200      	movs	r2, #0
 8006612:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006616:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800661a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800661e:	4622      	mov	r2, r4
 8006620:	462b      	mov	r3, r5
 8006622:	1891      	adds	r1, r2, r2
 8006624:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006626:	415b      	adcs	r3, r3
 8006628:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800662a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800662e:	4621      	mov	r1, r4
 8006630:	eb12 0801 	adds.w	r8, r2, r1
 8006634:	4629      	mov	r1, r5
 8006636:	eb43 0901 	adc.w	r9, r3, r1
 800663a:	f04f 0200 	mov.w	r2, #0
 800663e:	f04f 0300 	mov.w	r3, #0
 8006642:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006646:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800664a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800664e:	4690      	mov	r8, r2
 8006650:	4699      	mov	r9, r3
 8006652:	4623      	mov	r3, r4
 8006654:	eb18 0303 	adds.w	r3, r8, r3
 8006658:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800665c:	462b      	mov	r3, r5
 800665e:	eb49 0303 	adc.w	r3, r9, r3
 8006662:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006666:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800666a:	685b      	ldr	r3, [r3, #4]
 800666c:	2200      	movs	r2, #0
 800666e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006672:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006676:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800667a:	460b      	mov	r3, r1
 800667c:	18db      	adds	r3, r3, r3
 800667e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006680:	4613      	mov	r3, r2
 8006682:	eb42 0303 	adc.w	r3, r2, r3
 8006686:	657b      	str	r3, [r7, #84]	@ 0x54
 8006688:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800668c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006690:	f7f9 fdae 	bl	80001f0 <__aeabi_uldivmod>
 8006694:	4602      	mov	r2, r0
 8006696:	460b      	mov	r3, r1
 8006698:	4b61      	ldr	r3, [pc, #388]	@ (8006820 <UART_SetConfig+0x2d4>)
 800669a:	fba3 2302 	umull	r2, r3, r3, r2
 800669e:	095b      	lsrs	r3, r3, #5
 80066a0:	011c      	lsls	r4, r3, #4
 80066a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80066a6:	2200      	movs	r2, #0
 80066a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80066ac:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80066b0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80066b4:	4642      	mov	r2, r8
 80066b6:	464b      	mov	r3, r9
 80066b8:	1891      	adds	r1, r2, r2
 80066ba:	64b9      	str	r1, [r7, #72]	@ 0x48
 80066bc:	415b      	adcs	r3, r3
 80066be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80066c0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80066c4:	4641      	mov	r1, r8
 80066c6:	eb12 0a01 	adds.w	sl, r2, r1
 80066ca:	4649      	mov	r1, r9
 80066cc:	eb43 0b01 	adc.w	fp, r3, r1
 80066d0:	f04f 0200 	mov.w	r2, #0
 80066d4:	f04f 0300 	mov.w	r3, #0
 80066d8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80066dc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80066e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80066e4:	4692      	mov	sl, r2
 80066e6:	469b      	mov	fp, r3
 80066e8:	4643      	mov	r3, r8
 80066ea:	eb1a 0303 	adds.w	r3, sl, r3
 80066ee:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80066f2:	464b      	mov	r3, r9
 80066f4:	eb4b 0303 	adc.w	r3, fp, r3
 80066f8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80066fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	2200      	movs	r2, #0
 8006704:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006708:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800670c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006710:	460b      	mov	r3, r1
 8006712:	18db      	adds	r3, r3, r3
 8006714:	643b      	str	r3, [r7, #64]	@ 0x40
 8006716:	4613      	mov	r3, r2
 8006718:	eb42 0303 	adc.w	r3, r2, r3
 800671c:	647b      	str	r3, [r7, #68]	@ 0x44
 800671e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006722:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006726:	f7f9 fd63 	bl	80001f0 <__aeabi_uldivmod>
 800672a:	4602      	mov	r2, r0
 800672c:	460b      	mov	r3, r1
 800672e:	4611      	mov	r1, r2
 8006730:	4b3b      	ldr	r3, [pc, #236]	@ (8006820 <UART_SetConfig+0x2d4>)
 8006732:	fba3 2301 	umull	r2, r3, r3, r1
 8006736:	095b      	lsrs	r3, r3, #5
 8006738:	2264      	movs	r2, #100	@ 0x64
 800673a:	fb02 f303 	mul.w	r3, r2, r3
 800673e:	1acb      	subs	r3, r1, r3
 8006740:	00db      	lsls	r3, r3, #3
 8006742:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006746:	4b36      	ldr	r3, [pc, #216]	@ (8006820 <UART_SetConfig+0x2d4>)
 8006748:	fba3 2302 	umull	r2, r3, r3, r2
 800674c:	095b      	lsrs	r3, r3, #5
 800674e:	005b      	lsls	r3, r3, #1
 8006750:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006754:	441c      	add	r4, r3
 8006756:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800675a:	2200      	movs	r2, #0
 800675c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006760:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006764:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006768:	4642      	mov	r2, r8
 800676a:	464b      	mov	r3, r9
 800676c:	1891      	adds	r1, r2, r2
 800676e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006770:	415b      	adcs	r3, r3
 8006772:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006774:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006778:	4641      	mov	r1, r8
 800677a:	1851      	adds	r1, r2, r1
 800677c:	6339      	str	r1, [r7, #48]	@ 0x30
 800677e:	4649      	mov	r1, r9
 8006780:	414b      	adcs	r3, r1
 8006782:	637b      	str	r3, [r7, #52]	@ 0x34
 8006784:	f04f 0200 	mov.w	r2, #0
 8006788:	f04f 0300 	mov.w	r3, #0
 800678c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006790:	4659      	mov	r1, fp
 8006792:	00cb      	lsls	r3, r1, #3
 8006794:	4651      	mov	r1, sl
 8006796:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800679a:	4651      	mov	r1, sl
 800679c:	00ca      	lsls	r2, r1, #3
 800679e:	4610      	mov	r0, r2
 80067a0:	4619      	mov	r1, r3
 80067a2:	4603      	mov	r3, r0
 80067a4:	4642      	mov	r2, r8
 80067a6:	189b      	adds	r3, r3, r2
 80067a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80067ac:	464b      	mov	r3, r9
 80067ae:	460a      	mov	r2, r1
 80067b0:	eb42 0303 	adc.w	r3, r2, r3
 80067b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80067b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	2200      	movs	r2, #0
 80067c0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80067c4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80067c8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80067cc:	460b      	mov	r3, r1
 80067ce:	18db      	adds	r3, r3, r3
 80067d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80067d2:	4613      	mov	r3, r2
 80067d4:	eb42 0303 	adc.w	r3, r2, r3
 80067d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80067da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80067de:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80067e2:	f7f9 fd05 	bl	80001f0 <__aeabi_uldivmod>
 80067e6:	4602      	mov	r2, r0
 80067e8:	460b      	mov	r3, r1
 80067ea:	4b0d      	ldr	r3, [pc, #52]	@ (8006820 <UART_SetConfig+0x2d4>)
 80067ec:	fba3 1302 	umull	r1, r3, r3, r2
 80067f0:	095b      	lsrs	r3, r3, #5
 80067f2:	2164      	movs	r1, #100	@ 0x64
 80067f4:	fb01 f303 	mul.w	r3, r1, r3
 80067f8:	1ad3      	subs	r3, r2, r3
 80067fa:	00db      	lsls	r3, r3, #3
 80067fc:	3332      	adds	r3, #50	@ 0x32
 80067fe:	4a08      	ldr	r2, [pc, #32]	@ (8006820 <UART_SetConfig+0x2d4>)
 8006800:	fba2 2303 	umull	r2, r3, r2, r3
 8006804:	095b      	lsrs	r3, r3, #5
 8006806:	f003 0207 	and.w	r2, r3, #7
 800680a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4422      	add	r2, r4
 8006812:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006814:	e106      	b.n	8006a24 <UART_SetConfig+0x4d8>
 8006816:	bf00      	nop
 8006818:	40011000 	.word	0x40011000
 800681c:	40011400 	.word	0x40011400
 8006820:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006824:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006828:	2200      	movs	r2, #0
 800682a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800682e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006832:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006836:	4642      	mov	r2, r8
 8006838:	464b      	mov	r3, r9
 800683a:	1891      	adds	r1, r2, r2
 800683c:	6239      	str	r1, [r7, #32]
 800683e:	415b      	adcs	r3, r3
 8006840:	627b      	str	r3, [r7, #36]	@ 0x24
 8006842:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006846:	4641      	mov	r1, r8
 8006848:	1854      	adds	r4, r2, r1
 800684a:	4649      	mov	r1, r9
 800684c:	eb43 0501 	adc.w	r5, r3, r1
 8006850:	f04f 0200 	mov.w	r2, #0
 8006854:	f04f 0300 	mov.w	r3, #0
 8006858:	00eb      	lsls	r3, r5, #3
 800685a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800685e:	00e2      	lsls	r2, r4, #3
 8006860:	4614      	mov	r4, r2
 8006862:	461d      	mov	r5, r3
 8006864:	4643      	mov	r3, r8
 8006866:	18e3      	adds	r3, r4, r3
 8006868:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800686c:	464b      	mov	r3, r9
 800686e:	eb45 0303 	adc.w	r3, r5, r3
 8006872:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006876:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	2200      	movs	r2, #0
 800687e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006882:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006886:	f04f 0200 	mov.w	r2, #0
 800688a:	f04f 0300 	mov.w	r3, #0
 800688e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006892:	4629      	mov	r1, r5
 8006894:	008b      	lsls	r3, r1, #2
 8006896:	4621      	mov	r1, r4
 8006898:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800689c:	4621      	mov	r1, r4
 800689e:	008a      	lsls	r2, r1, #2
 80068a0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80068a4:	f7f9 fca4 	bl	80001f0 <__aeabi_uldivmod>
 80068a8:	4602      	mov	r2, r0
 80068aa:	460b      	mov	r3, r1
 80068ac:	4b60      	ldr	r3, [pc, #384]	@ (8006a30 <UART_SetConfig+0x4e4>)
 80068ae:	fba3 2302 	umull	r2, r3, r3, r2
 80068b2:	095b      	lsrs	r3, r3, #5
 80068b4:	011c      	lsls	r4, r3, #4
 80068b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80068ba:	2200      	movs	r2, #0
 80068bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80068c0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80068c4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80068c8:	4642      	mov	r2, r8
 80068ca:	464b      	mov	r3, r9
 80068cc:	1891      	adds	r1, r2, r2
 80068ce:	61b9      	str	r1, [r7, #24]
 80068d0:	415b      	adcs	r3, r3
 80068d2:	61fb      	str	r3, [r7, #28]
 80068d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80068d8:	4641      	mov	r1, r8
 80068da:	1851      	adds	r1, r2, r1
 80068dc:	6139      	str	r1, [r7, #16]
 80068de:	4649      	mov	r1, r9
 80068e0:	414b      	adcs	r3, r1
 80068e2:	617b      	str	r3, [r7, #20]
 80068e4:	f04f 0200 	mov.w	r2, #0
 80068e8:	f04f 0300 	mov.w	r3, #0
 80068ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80068f0:	4659      	mov	r1, fp
 80068f2:	00cb      	lsls	r3, r1, #3
 80068f4:	4651      	mov	r1, sl
 80068f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80068fa:	4651      	mov	r1, sl
 80068fc:	00ca      	lsls	r2, r1, #3
 80068fe:	4610      	mov	r0, r2
 8006900:	4619      	mov	r1, r3
 8006902:	4603      	mov	r3, r0
 8006904:	4642      	mov	r2, r8
 8006906:	189b      	adds	r3, r3, r2
 8006908:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800690c:	464b      	mov	r3, r9
 800690e:	460a      	mov	r2, r1
 8006910:	eb42 0303 	adc.w	r3, r2, r3
 8006914:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	2200      	movs	r2, #0
 8006920:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006922:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006924:	f04f 0200 	mov.w	r2, #0
 8006928:	f04f 0300 	mov.w	r3, #0
 800692c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006930:	4649      	mov	r1, r9
 8006932:	008b      	lsls	r3, r1, #2
 8006934:	4641      	mov	r1, r8
 8006936:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800693a:	4641      	mov	r1, r8
 800693c:	008a      	lsls	r2, r1, #2
 800693e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006942:	f7f9 fc55 	bl	80001f0 <__aeabi_uldivmod>
 8006946:	4602      	mov	r2, r0
 8006948:	460b      	mov	r3, r1
 800694a:	4611      	mov	r1, r2
 800694c:	4b38      	ldr	r3, [pc, #224]	@ (8006a30 <UART_SetConfig+0x4e4>)
 800694e:	fba3 2301 	umull	r2, r3, r3, r1
 8006952:	095b      	lsrs	r3, r3, #5
 8006954:	2264      	movs	r2, #100	@ 0x64
 8006956:	fb02 f303 	mul.w	r3, r2, r3
 800695a:	1acb      	subs	r3, r1, r3
 800695c:	011b      	lsls	r3, r3, #4
 800695e:	3332      	adds	r3, #50	@ 0x32
 8006960:	4a33      	ldr	r2, [pc, #204]	@ (8006a30 <UART_SetConfig+0x4e4>)
 8006962:	fba2 2303 	umull	r2, r3, r2, r3
 8006966:	095b      	lsrs	r3, r3, #5
 8006968:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800696c:	441c      	add	r4, r3
 800696e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006972:	2200      	movs	r2, #0
 8006974:	673b      	str	r3, [r7, #112]	@ 0x70
 8006976:	677a      	str	r2, [r7, #116]	@ 0x74
 8006978:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800697c:	4642      	mov	r2, r8
 800697e:	464b      	mov	r3, r9
 8006980:	1891      	adds	r1, r2, r2
 8006982:	60b9      	str	r1, [r7, #8]
 8006984:	415b      	adcs	r3, r3
 8006986:	60fb      	str	r3, [r7, #12]
 8006988:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800698c:	4641      	mov	r1, r8
 800698e:	1851      	adds	r1, r2, r1
 8006990:	6039      	str	r1, [r7, #0]
 8006992:	4649      	mov	r1, r9
 8006994:	414b      	adcs	r3, r1
 8006996:	607b      	str	r3, [r7, #4]
 8006998:	f04f 0200 	mov.w	r2, #0
 800699c:	f04f 0300 	mov.w	r3, #0
 80069a0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80069a4:	4659      	mov	r1, fp
 80069a6:	00cb      	lsls	r3, r1, #3
 80069a8:	4651      	mov	r1, sl
 80069aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80069ae:	4651      	mov	r1, sl
 80069b0:	00ca      	lsls	r2, r1, #3
 80069b2:	4610      	mov	r0, r2
 80069b4:	4619      	mov	r1, r3
 80069b6:	4603      	mov	r3, r0
 80069b8:	4642      	mov	r2, r8
 80069ba:	189b      	adds	r3, r3, r2
 80069bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80069be:	464b      	mov	r3, r9
 80069c0:	460a      	mov	r2, r1
 80069c2:	eb42 0303 	adc.w	r3, r2, r3
 80069c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80069c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	2200      	movs	r2, #0
 80069d0:	663b      	str	r3, [r7, #96]	@ 0x60
 80069d2:	667a      	str	r2, [r7, #100]	@ 0x64
 80069d4:	f04f 0200 	mov.w	r2, #0
 80069d8:	f04f 0300 	mov.w	r3, #0
 80069dc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80069e0:	4649      	mov	r1, r9
 80069e2:	008b      	lsls	r3, r1, #2
 80069e4:	4641      	mov	r1, r8
 80069e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80069ea:	4641      	mov	r1, r8
 80069ec:	008a      	lsls	r2, r1, #2
 80069ee:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80069f2:	f7f9 fbfd 	bl	80001f0 <__aeabi_uldivmod>
 80069f6:	4602      	mov	r2, r0
 80069f8:	460b      	mov	r3, r1
 80069fa:	4b0d      	ldr	r3, [pc, #52]	@ (8006a30 <UART_SetConfig+0x4e4>)
 80069fc:	fba3 1302 	umull	r1, r3, r3, r2
 8006a00:	095b      	lsrs	r3, r3, #5
 8006a02:	2164      	movs	r1, #100	@ 0x64
 8006a04:	fb01 f303 	mul.w	r3, r1, r3
 8006a08:	1ad3      	subs	r3, r2, r3
 8006a0a:	011b      	lsls	r3, r3, #4
 8006a0c:	3332      	adds	r3, #50	@ 0x32
 8006a0e:	4a08      	ldr	r2, [pc, #32]	@ (8006a30 <UART_SetConfig+0x4e4>)
 8006a10:	fba2 2303 	umull	r2, r3, r2, r3
 8006a14:	095b      	lsrs	r3, r3, #5
 8006a16:	f003 020f 	and.w	r2, r3, #15
 8006a1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4422      	add	r2, r4
 8006a22:	609a      	str	r2, [r3, #8]
}
 8006a24:	bf00      	nop
 8006a26:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a30:	51eb851f 	.word	0x51eb851f

08006a34 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b083      	sub	sp, #12
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
 8006a3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d123      	bne.n	8006a8e <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8006a4e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006a52:	683a      	ldr	r2, [r7, #0]
 8006a54:	6851      	ldr	r1, [r2, #4]
 8006a56:	683a      	ldr	r2, [r7, #0]
 8006a58:	6892      	ldr	r2, [r2, #8]
 8006a5a:	4311      	orrs	r1, r2
 8006a5c:	683a      	ldr	r2, [r7, #0]
 8006a5e:	68d2      	ldr	r2, [r2, #12]
 8006a60:	4311      	orrs	r1, r2
 8006a62:	683a      	ldr	r2, [r7, #0]
 8006a64:	6912      	ldr	r2, [r2, #16]
 8006a66:	4311      	orrs	r1, r2
 8006a68:	683a      	ldr	r2, [r7, #0]
 8006a6a:	6952      	ldr	r2, [r2, #20]
 8006a6c:	4311      	orrs	r1, r2
 8006a6e:	683a      	ldr	r2, [r7, #0]
 8006a70:	6992      	ldr	r2, [r2, #24]
 8006a72:	4311      	orrs	r1, r2
 8006a74:	683a      	ldr	r2, [r7, #0]
 8006a76:	69d2      	ldr	r2, [r2, #28]
 8006a78:	4311      	orrs	r1, r2
 8006a7a:	683a      	ldr	r2, [r7, #0]
 8006a7c:	6a12      	ldr	r2, [r2, #32]
 8006a7e:	4311      	orrs	r1, r2
 8006a80:	683a      	ldr	r2, [r7, #0]
 8006a82:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006a84:	430a      	orrs	r2, r1
 8006a86:	431a      	orrs	r2, r3
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	601a      	str	r2, [r3, #0]
 8006a8c:	e028      	b.n	8006ae0 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	69d9      	ldr	r1, [r3, #28]
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	6a1b      	ldr	r3, [r3, #32]
 8006a9e:	4319      	orrs	r1, r3
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aa4:	430b      	orrs	r3, r1
 8006aa6:	431a      	orrs	r2, r3
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8006ab4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006ab8:	683a      	ldr	r2, [r7, #0]
 8006aba:	6851      	ldr	r1, [r2, #4]
 8006abc:	683a      	ldr	r2, [r7, #0]
 8006abe:	6892      	ldr	r2, [r2, #8]
 8006ac0:	4311      	orrs	r1, r2
 8006ac2:	683a      	ldr	r2, [r7, #0]
 8006ac4:	68d2      	ldr	r2, [r2, #12]
 8006ac6:	4311      	orrs	r1, r2
 8006ac8:	683a      	ldr	r2, [r7, #0]
 8006aca:	6912      	ldr	r2, [r2, #16]
 8006acc:	4311      	orrs	r1, r2
 8006ace:	683a      	ldr	r2, [r7, #0]
 8006ad0:	6952      	ldr	r2, [r2, #20]
 8006ad2:	4311      	orrs	r1, r2
 8006ad4:	683a      	ldr	r2, [r7, #0]
 8006ad6:	6992      	ldr	r2, [r2, #24]
 8006ad8:	430a      	orrs	r2, r1
 8006ada:	431a      	orrs	r2, r3
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8006ae0:	2300      	movs	r3, #0
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	370c      	adds	r7, #12
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aec:	4770      	bx	lr

08006aee <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006aee:	b480      	push	{r7}
 8006af0:	b085      	sub	sp, #20
 8006af2:	af00      	add	r7, sp, #0
 8006af4:	60f8      	str	r0, [r7, #12]
 8006af6:	60b9      	str	r1, [r7, #8]
 8006af8:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d128      	bne.n	8006b52 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	689b      	ldr	r3, [r3, #8]
 8006b04:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	1e59      	subs	r1, r3, #1
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	685b      	ldr	r3, [r3, #4]
 8006b12:	3b01      	subs	r3, #1
 8006b14:	011b      	lsls	r3, r3, #4
 8006b16:	4319      	orrs	r1, r3
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	689b      	ldr	r3, [r3, #8]
 8006b1c:	3b01      	subs	r3, #1
 8006b1e:	021b      	lsls	r3, r3, #8
 8006b20:	4319      	orrs	r1, r3
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	68db      	ldr	r3, [r3, #12]
 8006b26:	3b01      	subs	r3, #1
 8006b28:	031b      	lsls	r3, r3, #12
 8006b2a:	4319      	orrs	r1, r3
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	691b      	ldr	r3, [r3, #16]
 8006b30:	3b01      	subs	r3, #1
 8006b32:	041b      	lsls	r3, r3, #16
 8006b34:	4319      	orrs	r1, r3
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	695b      	ldr	r3, [r3, #20]
 8006b3a:	3b01      	subs	r3, #1
 8006b3c:	051b      	lsls	r3, r3, #20
 8006b3e:	4319      	orrs	r1, r3
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	699b      	ldr	r3, [r3, #24]
 8006b44:	3b01      	subs	r3, #1
 8006b46:	061b      	lsls	r3, r3, #24
 8006b48:	430b      	orrs	r3, r1
 8006b4a:	431a      	orrs	r2, r3
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	609a      	str	r2, [r3, #8]
 8006b50:	e02f      	b.n	8006bb2 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	689b      	ldr	r3, [r3, #8]
 8006b56:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006b5a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006b5e:	68ba      	ldr	r2, [r7, #8]
 8006b60:	68d2      	ldr	r2, [r2, #12]
 8006b62:	3a01      	subs	r2, #1
 8006b64:	0311      	lsls	r1, r2, #12
 8006b66:	68ba      	ldr	r2, [r7, #8]
 8006b68:	6952      	ldr	r2, [r2, #20]
 8006b6a:	3a01      	subs	r2, #1
 8006b6c:	0512      	lsls	r2, r2, #20
 8006b6e:	430a      	orrs	r2, r1
 8006b70:	431a      	orrs	r2, r3
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	68db      	ldr	r3, [r3, #12]
 8006b7a:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	1e59      	subs	r1, r3, #1
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	3b01      	subs	r3, #1
 8006b8a:	011b      	lsls	r3, r3, #4
 8006b8c:	4319      	orrs	r1, r3
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	689b      	ldr	r3, [r3, #8]
 8006b92:	3b01      	subs	r3, #1
 8006b94:	021b      	lsls	r3, r3, #8
 8006b96:	4319      	orrs	r1, r3
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	691b      	ldr	r3, [r3, #16]
 8006b9c:	3b01      	subs	r3, #1
 8006b9e:	041b      	lsls	r3, r3, #16
 8006ba0:	4319      	orrs	r1, r3
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	699b      	ldr	r3, [r3, #24]
 8006ba6:	3b01      	subs	r3, #1
 8006ba8:	061b      	lsls	r3, r3, #24
 8006baa:	430b      	orrs	r3, r1
 8006bac:	431a      	orrs	r2, r3
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8006bb2:	2300      	movs	r3, #0
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	3714      	adds	r7, #20
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbe:	4770      	bx	lr

08006bc0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006bc0:	b084      	sub	sp, #16
 8006bc2:	b580      	push	{r7, lr}
 8006bc4:	b084      	sub	sp, #16
 8006bc6:	af00      	add	r7, sp, #0
 8006bc8:	6078      	str	r0, [r7, #4]
 8006bca:	f107 001c 	add.w	r0, r7, #28
 8006bce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006bd2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006bd6:	2b01      	cmp	r3, #1
 8006bd8:	d123      	bne.n	8006c22 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bde:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	68db      	ldr	r3, [r3, #12]
 8006bea:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006bee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006bf2:	687a      	ldr	r2, [r7, #4]
 8006bf4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	68db      	ldr	r3, [r3, #12]
 8006bfa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006c02:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006c06:	2b01      	cmp	r3, #1
 8006c08:	d105      	bne.n	8006c16 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	68db      	ldr	r3, [r3, #12]
 8006c0e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f000 f9dc 	bl	8006fd4 <USB_CoreReset>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	73fb      	strb	r3, [r7, #15]
 8006c20:	e01b      	b.n	8006c5a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	68db      	ldr	r3, [r3, #12]
 8006c26:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f000 f9d0 	bl	8006fd4 <USB_CoreReset>
 8006c34:	4603      	mov	r3, r0
 8006c36:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006c38:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d106      	bne.n	8006c4e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c44:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	639a      	str	r2, [r3, #56]	@ 0x38
 8006c4c:	e005      	b.n	8006c5a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c52:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006c5a:	7fbb      	ldrb	r3, [r7, #30]
 8006c5c:	2b01      	cmp	r3, #1
 8006c5e:	d10b      	bne.n	8006c78 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	689b      	ldr	r3, [r3, #8]
 8006c64:	f043 0206 	orr.w	r2, r3, #6
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	689b      	ldr	r3, [r3, #8]
 8006c70:	f043 0220 	orr.w	r2, r3, #32
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3710      	adds	r7, #16
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006c84:	b004      	add	sp, #16
 8006c86:	4770      	bx	lr

08006c88 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b083      	sub	sp, #12
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	689b      	ldr	r3, [r3, #8]
 8006c94:	f043 0201 	orr.w	r2, r3, #1
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006c9c:	2300      	movs	r3, #0
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	370c      	adds	r7, #12
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca8:	4770      	bx	lr

08006caa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006caa:	b480      	push	{r7}
 8006cac:	b083      	sub	sp, #12
 8006cae:	af00      	add	r7, sp, #0
 8006cb0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	689b      	ldr	r3, [r3, #8]
 8006cb6:	f023 0201 	bic.w	r2, r3, #1
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006cbe:	2300      	movs	r3, #0
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	370c      	adds	r7, #12
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cca:	4770      	bx	lr

08006ccc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b084      	sub	sp, #16
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
 8006cd4:	460b      	mov	r3, r1
 8006cd6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006cd8:	2300      	movs	r3, #0
 8006cda:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	68db      	ldr	r3, [r3, #12]
 8006ce0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006ce8:	78fb      	ldrb	r3, [r7, #3]
 8006cea:	2b01      	cmp	r3, #1
 8006cec:	d115      	bne.n	8006d1a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	68db      	ldr	r3, [r3, #12]
 8006cf2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006cfa:	200a      	movs	r0, #10
 8006cfc:	f7fa fcea 	bl	80016d4 <HAL_Delay>
      ms += 10U;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	330a      	adds	r3, #10
 8006d04:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f000 f956 	bl	8006fb8 <USB_GetMode>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	2b01      	cmp	r3, #1
 8006d10:	d01e      	beq.n	8006d50 <USB_SetCurrentMode+0x84>
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2bc7      	cmp	r3, #199	@ 0xc7
 8006d16:	d9f0      	bls.n	8006cfa <USB_SetCurrentMode+0x2e>
 8006d18:	e01a      	b.n	8006d50 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006d1a:	78fb      	ldrb	r3, [r7, #3]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d115      	bne.n	8006d4c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	68db      	ldr	r3, [r3, #12]
 8006d24:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006d2c:	200a      	movs	r0, #10
 8006d2e:	f7fa fcd1 	bl	80016d4 <HAL_Delay>
      ms += 10U;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	330a      	adds	r3, #10
 8006d36:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	f000 f93d 	bl	8006fb8 <USB_GetMode>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d005      	beq.n	8006d50 <USB_SetCurrentMode+0x84>
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2bc7      	cmp	r3, #199	@ 0xc7
 8006d48:	d9f0      	bls.n	8006d2c <USB_SetCurrentMode+0x60>
 8006d4a:	e001      	b.n	8006d50 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	e005      	b.n	8006d5c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	2bc8      	cmp	r3, #200	@ 0xc8
 8006d54:	d101      	bne.n	8006d5a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006d56:	2301      	movs	r3, #1
 8006d58:	e000      	b.n	8006d5c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006d5a:	2300      	movs	r3, #0
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	3710      	adds	r7, #16
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bd80      	pop	{r7, pc}

08006d64 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006d64:	b480      	push	{r7}
 8006d66:	b085      	sub	sp, #20
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
 8006d6c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	3301      	adds	r3, #1
 8006d76:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006d7e:	d901      	bls.n	8006d84 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006d80:	2303      	movs	r3, #3
 8006d82:	e01b      	b.n	8006dbc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	691b      	ldr	r3, [r3, #16]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	daf2      	bge.n	8006d72 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	019b      	lsls	r3, r3, #6
 8006d94:	f043 0220 	orr.w	r2, r3, #32
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	3301      	adds	r3, #1
 8006da0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006da8:	d901      	bls.n	8006dae <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006daa:	2303      	movs	r3, #3
 8006dac:	e006      	b.n	8006dbc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	691b      	ldr	r3, [r3, #16]
 8006db2:	f003 0320 	and.w	r3, r3, #32
 8006db6:	2b20      	cmp	r3, #32
 8006db8:	d0f0      	beq.n	8006d9c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006dba:	2300      	movs	r3, #0
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	3714      	adds	r7, #20
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc6:	4770      	bx	lr

08006dc8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b085      	sub	sp, #20
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	3301      	adds	r3, #1
 8006dd8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006de0:	d901      	bls.n	8006de6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006de2:	2303      	movs	r3, #3
 8006de4:	e018      	b.n	8006e18 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	691b      	ldr	r3, [r3, #16]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	daf2      	bge.n	8006dd4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006dee:	2300      	movs	r3, #0
 8006df0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2210      	movs	r2, #16
 8006df6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	3301      	adds	r3, #1
 8006dfc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006e04:	d901      	bls.n	8006e0a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006e06:	2303      	movs	r3, #3
 8006e08:	e006      	b.n	8006e18 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	691b      	ldr	r3, [r3, #16]
 8006e0e:	f003 0310 	and.w	r3, r3, #16
 8006e12:	2b10      	cmp	r3, #16
 8006e14:	d0f0      	beq.n	8006df8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006e16:	2300      	movs	r3, #0
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	3714      	adds	r7, #20
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e22:	4770      	bx	lr

08006e24 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006e24:	b480      	push	{r7}
 8006e26:	b089      	sub	sp, #36	@ 0x24
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	60f8      	str	r0, [r7, #12]
 8006e2c:	60b9      	str	r1, [r7, #8]
 8006e2e:	4611      	mov	r1, r2
 8006e30:	461a      	mov	r2, r3
 8006e32:	460b      	mov	r3, r1
 8006e34:	71fb      	strb	r3, [r7, #7]
 8006e36:	4613      	mov	r3, r2
 8006e38:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006e42:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d123      	bne.n	8006e92 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006e4a:	88bb      	ldrh	r3, [r7, #4]
 8006e4c:	3303      	adds	r3, #3
 8006e4e:	089b      	lsrs	r3, r3, #2
 8006e50:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006e52:	2300      	movs	r3, #0
 8006e54:	61bb      	str	r3, [r7, #24]
 8006e56:	e018      	b.n	8006e8a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006e58:	79fb      	ldrb	r3, [r7, #7]
 8006e5a:	031a      	lsls	r2, r3, #12
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	4413      	add	r3, r2
 8006e60:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e64:	461a      	mov	r2, r3
 8006e66:	69fb      	ldr	r3, [r7, #28]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006e6c:	69fb      	ldr	r3, [r7, #28]
 8006e6e:	3301      	adds	r3, #1
 8006e70:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006e72:	69fb      	ldr	r3, [r7, #28]
 8006e74:	3301      	adds	r3, #1
 8006e76:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006e78:	69fb      	ldr	r3, [r7, #28]
 8006e7a:	3301      	adds	r3, #1
 8006e7c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006e7e:	69fb      	ldr	r3, [r7, #28]
 8006e80:	3301      	adds	r3, #1
 8006e82:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006e84:	69bb      	ldr	r3, [r7, #24]
 8006e86:	3301      	adds	r3, #1
 8006e88:	61bb      	str	r3, [r7, #24]
 8006e8a:	69ba      	ldr	r2, [r7, #24]
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	429a      	cmp	r2, r3
 8006e90:	d3e2      	bcc.n	8006e58 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006e92:	2300      	movs	r3, #0
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	3724      	adds	r7, #36	@ 0x24
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9e:	4770      	bx	lr

08006ea0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b08b      	sub	sp, #44	@ 0x2c
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	60f8      	str	r0, [r7, #12]
 8006ea8:	60b9      	str	r1, [r7, #8]
 8006eaa:	4613      	mov	r3, r2
 8006eac:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006eb6:	88fb      	ldrh	r3, [r7, #6]
 8006eb8:	089b      	lsrs	r3, r3, #2
 8006eba:	b29b      	uxth	r3, r3
 8006ebc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006ebe:	88fb      	ldrh	r3, [r7, #6]
 8006ec0:	f003 0303 	and.w	r3, r3, #3
 8006ec4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	623b      	str	r3, [r7, #32]
 8006eca:	e014      	b.n	8006ef6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006ecc:	69bb      	ldr	r3, [r7, #24]
 8006ece:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ed2:	681a      	ldr	r2, [r3, #0]
 8006ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ed6:	601a      	str	r2, [r3, #0]
    pDest++;
 8006ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eda:	3301      	adds	r3, #1
 8006edc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ee0:	3301      	adds	r3, #1
 8006ee2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ee6:	3301      	adds	r3, #1
 8006ee8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eec:	3301      	adds	r3, #1
 8006eee:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006ef0:	6a3b      	ldr	r3, [r7, #32]
 8006ef2:	3301      	adds	r3, #1
 8006ef4:	623b      	str	r3, [r7, #32]
 8006ef6:	6a3a      	ldr	r2, [r7, #32]
 8006ef8:	697b      	ldr	r3, [r7, #20]
 8006efa:	429a      	cmp	r2, r3
 8006efc:	d3e6      	bcc.n	8006ecc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006efe:	8bfb      	ldrh	r3, [r7, #30]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d01e      	beq.n	8006f42 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006f04:	2300      	movs	r3, #0
 8006f06:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006f08:	69bb      	ldr	r3, [r7, #24]
 8006f0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f0e:	461a      	mov	r2, r3
 8006f10:	f107 0310 	add.w	r3, r7, #16
 8006f14:	6812      	ldr	r2, [r2, #0]
 8006f16:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006f18:	693a      	ldr	r2, [r7, #16]
 8006f1a:	6a3b      	ldr	r3, [r7, #32]
 8006f1c:	b2db      	uxtb	r3, r3
 8006f1e:	00db      	lsls	r3, r3, #3
 8006f20:	fa22 f303 	lsr.w	r3, r2, r3
 8006f24:	b2da      	uxtb	r2, r3
 8006f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f28:	701a      	strb	r2, [r3, #0]
      i++;
 8006f2a:	6a3b      	ldr	r3, [r7, #32]
 8006f2c:	3301      	adds	r3, #1
 8006f2e:	623b      	str	r3, [r7, #32]
      pDest++;
 8006f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f32:	3301      	adds	r3, #1
 8006f34:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006f36:	8bfb      	ldrh	r3, [r7, #30]
 8006f38:	3b01      	subs	r3, #1
 8006f3a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006f3c:	8bfb      	ldrh	r3, [r7, #30]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d1ea      	bne.n	8006f18 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	372c      	adds	r7, #44	@ 0x2c
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4e:	4770      	bx	lr

08006f50 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006f50:	b480      	push	{r7}
 8006f52:	b085      	sub	sp, #20
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	695b      	ldr	r3, [r3, #20]
 8006f5c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	699b      	ldr	r3, [r3, #24]
 8006f62:	68fa      	ldr	r2, [r7, #12]
 8006f64:	4013      	ands	r3, r2
 8006f66:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006f68:	68fb      	ldr	r3, [r7, #12]
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3714      	adds	r7, #20
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f74:	4770      	bx	lr

08006f76 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8006f76:	b480      	push	{r7}
 8006f78:	b085      	sub	sp, #20
 8006f7a:	af00      	add	r7, sp, #0
 8006f7c:	6078      	str	r0, [r7, #4]
 8006f7e:	460b      	mov	r3, r1
 8006f80:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8006f86:	78fb      	ldrb	r3, [r7, #3]
 8006f88:	015a      	lsls	r2, r3, #5
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	4413      	add	r3, r2
 8006f8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f92:	689b      	ldr	r3, [r3, #8]
 8006f94:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8006f96:	78fb      	ldrb	r3, [r7, #3]
 8006f98:	015a      	lsls	r2, r3, #5
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	4413      	add	r3, r2
 8006f9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006fa2:	68db      	ldr	r3, [r3, #12]
 8006fa4:	68ba      	ldr	r2, [r7, #8]
 8006fa6:	4013      	ands	r3, r2
 8006fa8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006faa:	68bb      	ldr	r3, [r7, #8]
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	3714      	adds	r7, #20
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb6:	4770      	bx	lr

08006fb8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b083      	sub	sp, #12
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	695b      	ldr	r3, [r3, #20]
 8006fc4:	f003 0301 	and.w	r3, r3, #1
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	370c      	adds	r7, #12
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd2:	4770      	bx	lr

08006fd4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b085      	sub	sp, #20
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006fdc:	2300      	movs	r3, #0
 8006fde:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	3301      	adds	r3, #1
 8006fe4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006fec:	d901      	bls.n	8006ff2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006fee:	2303      	movs	r3, #3
 8006ff0:	e01b      	b.n	800702a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	691b      	ldr	r3, [r3, #16]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	daf2      	bge.n	8006fe0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	691b      	ldr	r3, [r3, #16]
 8007002:	f043 0201 	orr.w	r2, r3, #1
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	3301      	adds	r3, #1
 800700e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007016:	d901      	bls.n	800701c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007018:	2303      	movs	r3, #3
 800701a:	e006      	b.n	800702a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	691b      	ldr	r3, [r3, #16]
 8007020:	f003 0301 	and.w	r3, r3, #1
 8007024:	2b01      	cmp	r3, #1
 8007026:	d0f0      	beq.n	800700a <USB_CoreReset+0x36>

  return HAL_OK;
 8007028:	2300      	movs	r3, #0
}
 800702a:	4618      	mov	r0, r3
 800702c:	3714      	adds	r7, #20
 800702e:	46bd      	mov	sp, r7
 8007030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007034:	4770      	bx	lr
	...

08007038 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007038:	b084      	sub	sp, #16
 800703a:	b580      	push	{r7, lr}
 800703c:	b086      	sub	sp, #24
 800703e:	af00      	add	r7, sp, #0
 8007040:	6078      	str	r0, [r7, #4]
 8007042:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007046:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800704a:	2300      	movs	r3, #0
 800704c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007058:	461a      	mov	r2, r3
 800705a:	2300      	movs	r3, #0
 800705c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007062:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800706e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800707a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	68db      	ldr	r3, [r3, #12]
 8007086:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800708a:	2b00      	cmp	r3, #0
 800708c:	d119      	bne.n	80070c2 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800708e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007092:	2b01      	cmp	r3, #1
 8007094:	d10a      	bne.n	80070ac <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	68fa      	ldr	r2, [r7, #12]
 80070a0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80070a4:	f043 0304 	orr.w	r3, r3, #4
 80070a8:	6013      	str	r3, [r2, #0]
 80070aa:	e014      	b.n	80070d6 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	68fa      	ldr	r2, [r7, #12]
 80070b6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80070ba:	f023 0304 	bic.w	r3, r3, #4
 80070be:	6013      	str	r3, [r2, #0]
 80070c0:	e009      	b.n	80070d6 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	68fa      	ldr	r2, [r7, #12]
 80070cc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80070d0:	f023 0304 	bic.w	r3, r3, #4
 80070d4:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80070d6:	2110      	movs	r1, #16
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f7ff fe43 	bl	8006d64 <USB_FlushTxFifo>
 80070de:	4603      	mov	r3, r0
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d001      	beq.n	80070e8 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 80070e4:	2301      	movs	r3, #1
 80070e6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f7ff fe6d 	bl	8006dc8 <USB_FlushRxFifo>
 80070ee:	4603      	mov	r3, r0
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d001      	beq.n	80070f8 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 80070f4:	2301      	movs	r3, #1
 80070f6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80070f8:	2300      	movs	r3, #0
 80070fa:	613b      	str	r3, [r7, #16]
 80070fc:	e015      	b.n	800712a <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 80070fe:	693b      	ldr	r3, [r7, #16]
 8007100:	015a      	lsls	r2, r3, #5
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	4413      	add	r3, r2
 8007106:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800710a:	461a      	mov	r2, r3
 800710c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007110:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	015a      	lsls	r2, r3, #5
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	4413      	add	r3, r2
 800711a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800711e:	461a      	mov	r2, r3
 8007120:	2300      	movs	r3, #0
 8007122:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007124:	693b      	ldr	r3, [r7, #16]
 8007126:	3301      	adds	r3, #1
 8007128:	613b      	str	r3, [r7, #16]
 800712a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800712e:	461a      	mov	r2, r3
 8007130:	693b      	ldr	r3, [r7, #16]
 8007132:	4293      	cmp	r3, r2
 8007134:	d3e3      	bcc.n	80070fe <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2200      	movs	r2, #0
 800713a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007142:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	4a18      	ldr	r2, [pc, #96]	@ (80071a8 <USB_HostInit+0x170>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d10b      	bne.n	8007164 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007152:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	4a15      	ldr	r2, [pc, #84]	@ (80071ac <USB_HostInit+0x174>)
 8007158:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	4a14      	ldr	r2, [pc, #80]	@ (80071b0 <USB_HostInit+0x178>)
 800715e:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8007162:	e009      	b.n	8007178 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2280      	movs	r2, #128	@ 0x80
 8007168:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	4a11      	ldr	r2, [pc, #68]	@ (80071b4 <USB_HostInit+0x17c>)
 800716e:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	4a11      	ldr	r2, [pc, #68]	@ (80071b8 <USB_HostInit+0x180>)
 8007174:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007178:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800717c:	2b00      	cmp	r3, #0
 800717e:	d105      	bne.n	800718c <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	699b      	ldr	r3, [r3, #24]
 8007184:	f043 0210 	orr.w	r2, r3, #16
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	699a      	ldr	r2, [r3, #24]
 8007190:	4b0a      	ldr	r3, [pc, #40]	@ (80071bc <USB_HostInit+0x184>)
 8007192:	4313      	orrs	r3, r2
 8007194:	687a      	ldr	r2, [r7, #4]
 8007196:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8007198:	7dfb      	ldrb	r3, [r7, #23]
}
 800719a:	4618      	mov	r0, r3
 800719c:	3718      	adds	r7, #24
 800719e:	46bd      	mov	sp, r7
 80071a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80071a4:	b004      	add	sp, #16
 80071a6:	4770      	bx	lr
 80071a8:	40040000 	.word	0x40040000
 80071ac:	01000200 	.word	0x01000200
 80071b0:	00e00300 	.word	0x00e00300
 80071b4:	00600080 	.word	0x00600080
 80071b8:	004000e0 	.word	0x004000e0
 80071bc:	a3200008 	.word	0xa3200008

080071c0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80071c0:	b480      	push	{r7}
 80071c2:	b085      	sub	sp, #20
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
 80071c8:	460b      	mov	r3, r1
 80071ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	68fa      	ldr	r2, [r7, #12]
 80071da:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80071de:	f023 0303 	bic.w	r3, r3, #3
 80071e2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80071ea:	681a      	ldr	r2, [r3, #0]
 80071ec:	78fb      	ldrb	r3, [r7, #3]
 80071ee:	f003 0303 	and.w	r3, r3, #3
 80071f2:	68f9      	ldr	r1, [r7, #12]
 80071f4:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80071f8:	4313      	orrs	r3, r2
 80071fa:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80071fc:	78fb      	ldrb	r3, [r7, #3]
 80071fe:	2b01      	cmp	r3, #1
 8007200:	d107      	bne.n	8007212 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007208:	461a      	mov	r2, r3
 800720a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800720e:	6053      	str	r3, [r2, #4]
 8007210:	e00c      	b.n	800722c <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8007212:	78fb      	ldrb	r3, [r7, #3]
 8007214:	2b02      	cmp	r3, #2
 8007216:	d107      	bne.n	8007228 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800721e:	461a      	mov	r2, r3
 8007220:	f241 7370 	movw	r3, #6000	@ 0x1770
 8007224:	6053      	str	r3, [r2, #4]
 8007226:	e001      	b.n	800722c <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8007228:	2301      	movs	r3, #1
 800722a:	e000      	b.n	800722e <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800722c:	2300      	movs	r3, #0
}
 800722e:	4618      	mov	r0, r3
 8007230:	3714      	adds	r7, #20
 8007232:	46bd      	mov	sp, r7
 8007234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007238:	4770      	bx	lr

0800723a <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800723a:	b580      	push	{r7, lr}
 800723c:	b084      	sub	sp, #16
 800723e:	af00      	add	r7, sp, #0
 8007240:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007246:	2300      	movs	r3, #0
 8007248:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800725a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	68fa      	ldr	r2, [r7, #12]
 8007260:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007264:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007268:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800726a:	2064      	movs	r0, #100	@ 0x64
 800726c:	f7fa fa32 	bl	80016d4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	68fa      	ldr	r2, [r7, #12]
 8007274:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007278:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800727c:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800727e:	200a      	movs	r0, #10
 8007280:	f7fa fa28 	bl	80016d4 <HAL_Delay>

  return HAL_OK;
 8007284:	2300      	movs	r3, #0
}
 8007286:	4618      	mov	r0, r3
 8007288:	3710      	adds	r7, #16
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}

0800728e <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800728e:	b480      	push	{r7}
 8007290:	b085      	sub	sp, #20
 8007292:	af00      	add	r7, sp, #0
 8007294:	6078      	str	r0, [r7, #4]
 8007296:	460b      	mov	r3, r1
 8007298:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800729e:	2300      	movs	r3, #0
 80072a0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80072b2:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d109      	bne.n	80072d2 <USB_DriveVbus+0x44>
 80072be:	78fb      	ldrb	r3, [r7, #3]
 80072c0:	2b01      	cmp	r3, #1
 80072c2:	d106      	bne.n	80072d2 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	68fa      	ldr	r2, [r7, #12]
 80072c8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80072cc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80072d0:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80072d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072dc:	d109      	bne.n	80072f2 <USB_DriveVbus+0x64>
 80072de:	78fb      	ldrb	r3, [r7, #3]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d106      	bne.n	80072f2 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	68fa      	ldr	r2, [r7, #12]
 80072e8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80072ec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80072f0:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80072f2:	2300      	movs	r3, #0
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	3714      	adds	r7, #20
 80072f8:	46bd      	mov	sp, r7
 80072fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fe:	4770      	bx	lr

08007300 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8007300:	b480      	push	{r7}
 8007302:	b085      	sub	sp, #20
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800730c:	2300      	movs	r3, #0
 800730e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	0c5b      	lsrs	r3, r3, #17
 800731e:	f003 0303 	and.w	r3, r3, #3
}
 8007322:	4618      	mov	r0, r3
 8007324:	3714      	adds	r7, #20
 8007326:	46bd      	mov	sp, r7
 8007328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732c:	4770      	bx	lr

0800732e <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800732e:	b480      	push	{r7}
 8007330:	b085      	sub	sp, #20
 8007332:	af00      	add	r7, sp, #0
 8007334:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007340:	689b      	ldr	r3, [r3, #8]
 8007342:	b29b      	uxth	r3, r3
}
 8007344:	4618      	mov	r0, r3
 8007346:	3714      	adds	r7, #20
 8007348:	46bd      	mov	sp, r7
 800734a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734e:	4770      	bx	lr

08007350 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b088      	sub	sp, #32
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
 8007358:	4608      	mov	r0, r1
 800735a:	4611      	mov	r1, r2
 800735c:	461a      	mov	r2, r3
 800735e:	4603      	mov	r3, r0
 8007360:	70fb      	strb	r3, [r7, #3]
 8007362:	460b      	mov	r3, r1
 8007364:	70bb      	strb	r3, [r7, #2]
 8007366:	4613      	mov	r3, r2
 8007368:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800736a:	2300      	movs	r3, #0
 800736c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8007372:	78fb      	ldrb	r3, [r7, #3]
 8007374:	015a      	lsls	r2, r3, #5
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	4413      	add	r3, r2
 800737a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800737e:	461a      	mov	r2, r3
 8007380:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007384:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8007386:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800738a:	2b03      	cmp	r3, #3
 800738c:	d87c      	bhi.n	8007488 <USB_HC_Init+0x138>
 800738e:	a201      	add	r2, pc, #4	@ (adr r2, 8007394 <USB_HC_Init+0x44>)
 8007390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007394:	080073a5 	.word	0x080073a5
 8007398:	0800744b 	.word	0x0800744b
 800739c:	080073a5 	.word	0x080073a5
 80073a0:	0800740d 	.word	0x0800740d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80073a4:	78fb      	ldrb	r3, [r7, #3]
 80073a6:	015a      	lsls	r2, r3, #5
 80073a8:	693b      	ldr	r3, [r7, #16]
 80073aa:	4413      	add	r3, r2
 80073ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80073b0:	461a      	mov	r2, r3
 80073b2:	f240 439d 	movw	r3, #1181	@ 0x49d
 80073b6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80073b8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	da10      	bge.n	80073e2 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80073c0:	78fb      	ldrb	r3, [r7, #3]
 80073c2:	015a      	lsls	r2, r3, #5
 80073c4:	693b      	ldr	r3, [r7, #16]
 80073c6:	4413      	add	r3, r2
 80073c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80073cc:	68db      	ldr	r3, [r3, #12]
 80073ce:	78fa      	ldrb	r2, [r7, #3]
 80073d0:	0151      	lsls	r1, r2, #5
 80073d2:	693a      	ldr	r2, [r7, #16]
 80073d4:	440a      	add	r2, r1
 80073d6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80073da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80073de:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 80073e0:	e055      	b.n	800748e <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	4a6f      	ldr	r2, [pc, #444]	@ (80075a4 <USB_HC_Init+0x254>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d151      	bne.n	800748e <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80073ea:	78fb      	ldrb	r3, [r7, #3]
 80073ec:	015a      	lsls	r2, r3, #5
 80073ee:	693b      	ldr	r3, [r7, #16]
 80073f0:	4413      	add	r3, r2
 80073f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80073f6:	68db      	ldr	r3, [r3, #12]
 80073f8:	78fa      	ldrb	r2, [r7, #3]
 80073fa:	0151      	lsls	r1, r2, #5
 80073fc:	693a      	ldr	r2, [r7, #16]
 80073fe:	440a      	add	r2, r1
 8007400:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007404:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007408:	60d3      	str	r3, [r2, #12]
      break;
 800740a:	e040      	b.n	800748e <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800740c:	78fb      	ldrb	r3, [r7, #3]
 800740e:	015a      	lsls	r2, r3, #5
 8007410:	693b      	ldr	r3, [r7, #16]
 8007412:	4413      	add	r3, r2
 8007414:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007418:	461a      	mov	r2, r3
 800741a:	f240 639d 	movw	r3, #1693	@ 0x69d
 800741e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007420:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007424:	2b00      	cmp	r3, #0
 8007426:	da34      	bge.n	8007492 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007428:	78fb      	ldrb	r3, [r7, #3]
 800742a:	015a      	lsls	r2, r3, #5
 800742c:	693b      	ldr	r3, [r7, #16]
 800742e:	4413      	add	r3, r2
 8007430:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007434:	68db      	ldr	r3, [r3, #12]
 8007436:	78fa      	ldrb	r2, [r7, #3]
 8007438:	0151      	lsls	r1, r2, #5
 800743a:	693a      	ldr	r2, [r7, #16]
 800743c:	440a      	add	r2, r1
 800743e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007442:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007446:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007448:	e023      	b.n	8007492 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800744a:	78fb      	ldrb	r3, [r7, #3]
 800744c:	015a      	lsls	r2, r3, #5
 800744e:	693b      	ldr	r3, [r7, #16]
 8007450:	4413      	add	r3, r2
 8007452:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007456:	461a      	mov	r2, r3
 8007458:	f240 2325 	movw	r3, #549	@ 0x225
 800745c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800745e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007462:	2b00      	cmp	r3, #0
 8007464:	da17      	bge.n	8007496 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8007466:	78fb      	ldrb	r3, [r7, #3]
 8007468:	015a      	lsls	r2, r3, #5
 800746a:	693b      	ldr	r3, [r7, #16]
 800746c:	4413      	add	r3, r2
 800746e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007472:	68db      	ldr	r3, [r3, #12]
 8007474:	78fa      	ldrb	r2, [r7, #3]
 8007476:	0151      	lsls	r1, r2, #5
 8007478:	693a      	ldr	r2, [r7, #16]
 800747a:	440a      	add	r2, r1
 800747c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007480:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8007484:	60d3      	str	r3, [r2, #12]
      }
      break;
 8007486:	e006      	b.n	8007496 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8007488:	2301      	movs	r3, #1
 800748a:	77fb      	strb	r3, [r7, #31]
      break;
 800748c:	e004      	b.n	8007498 <USB_HC_Init+0x148>
      break;
 800748e:	bf00      	nop
 8007490:	e002      	b.n	8007498 <USB_HC_Init+0x148>
      break;
 8007492:	bf00      	nop
 8007494:	e000      	b.n	8007498 <USB_HC_Init+0x148>
      break;
 8007496:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8007498:	78fb      	ldrb	r3, [r7, #3]
 800749a:	015a      	lsls	r2, r3, #5
 800749c:	693b      	ldr	r3, [r7, #16]
 800749e:	4413      	add	r3, r2
 80074a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80074a4:	461a      	mov	r2, r3
 80074a6:	2300      	movs	r3, #0
 80074a8:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80074aa:	78fb      	ldrb	r3, [r7, #3]
 80074ac:	015a      	lsls	r2, r3, #5
 80074ae:	693b      	ldr	r3, [r7, #16]
 80074b0:	4413      	add	r3, r2
 80074b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80074b6:	68db      	ldr	r3, [r3, #12]
 80074b8:	78fa      	ldrb	r2, [r7, #3]
 80074ba:	0151      	lsls	r1, r2, #5
 80074bc:	693a      	ldr	r2, [r7, #16]
 80074be:	440a      	add	r2, r1
 80074c0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80074c4:	f043 0302 	orr.w	r3, r3, #2
 80074c8:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80074ca:	693b      	ldr	r3, [r7, #16]
 80074cc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80074d0:	699a      	ldr	r2, [r3, #24]
 80074d2:	78fb      	ldrb	r3, [r7, #3]
 80074d4:	f003 030f 	and.w	r3, r3, #15
 80074d8:	2101      	movs	r1, #1
 80074da:	fa01 f303 	lsl.w	r3, r1, r3
 80074de:	6939      	ldr	r1, [r7, #16]
 80074e0:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80074e4:	4313      	orrs	r3, r2
 80074e6:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	699b      	ldr	r3, [r3, #24]
 80074ec:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80074f4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	da03      	bge.n	8007504 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80074fc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007500:	61bb      	str	r3, [r7, #24]
 8007502:	e001      	b.n	8007508 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8007504:	2300      	movs	r3, #0
 8007506:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	f7ff fef9 	bl	8007300 <USB_GetHostSpeed>
 800750e:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8007510:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007514:	2b02      	cmp	r3, #2
 8007516:	d106      	bne.n	8007526 <USB_HC_Init+0x1d6>
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	2b02      	cmp	r3, #2
 800751c:	d003      	beq.n	8007526 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800751e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8007522:	617b      	str	r3, [r7, #20]
 8007524:	e001      	b.n	800752a <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007526:	2300      	movs	r3, #0
 8007528:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800752a:	787b      	ldrb	r3, [r7, #1]
 800752c:	059b      	lsls	r3, r3, #22
 800752e:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007532:	78bb      	ldrb	r3, [r7, #2]
 8007534:	02db      	lsls	r3, r3, #11
 8007536:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800753a:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800753c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007540:	049b      	lsls	r3, r3, #18
 8007542:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007546:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8007548:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800754a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800754e:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8007550:	69bb      	ldr	r3, [r7, #24]
 8007552:	431a      	orrs	r2, r3
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007558:	78fa      	ldrb	r2, [r7, #3]
 800755a:	0151      	lsls	r1, r2, #5
 800755c:	693a      	ldr	r2, [r7, #16]
 800755e:	440a      	add	r2, r1
 8007560:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8007564:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007568:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800756a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800756e:	2b03      	cmp	r3, #3
 8007570:	d003      	beq.n	800757a <USB_HC_Init+0x22a>
 8007572:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007576:	2b01      	cmp	r3, #1
 8007578:	d10f      	bne.n	800759a <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800757a:	78fb      	ldrb	r3, [r7, #3]
 800757c:	015a      	lsls	r2, r3, #5
 800757e:	693b      	ldr	r3, [r7, #16]
 8007580:	4413      	add	r3, r2
 8007582:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	78fa      	ldrb	r2, [r7, #3]
 800758a:	0151      	lsls	r1, r2, #5
 800758c:	693a      	ldr	r2, [r7, #16]
 800758e:	440a      	add	r2, r1
 8007590:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007594:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007598:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800759a:	7ffb      	ldrb	r3, [r7, #31]
}
 800759c:	4618      	mov	r0, r3
 800759e:	3720      	adds	r7, #32
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd80      	pop	{r7, pc}
 80075a4:	40040000 	.word	0x40040000

080075a8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b08c      	sub	sp, #48	@ 0x30
 80075ac:	af02      	add	r7, sp, #8
 80075ae:	60f8      	str	r0, [r7, #12]
 80075b0:	60b9      	str	r1, [r7, #8]
 80075b2:	4613      	mov	r3, r2
 80075b4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	785b      	ldrb	r3, [r3, #1]
 80075be:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 80075c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80075c4:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	4a5d      	ldr	r2, [pc, #372]	@ (8007740 <USB_HC_StartXfer+0x198>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d12f      	bne.n	800762e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 80075ce:	79fb      	ldrb	r3, [r7, #7]
 80075d0:	2b01      	cmp	r3, #1
 80075d2:	d11c      	bne.n	800760e <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	7c9b      	ldrb	r3, [r3, #18]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d003      	beq.n	80075e4 <USB_HC_StartXfer+0x3c>
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	7c9b      	ldrb	r3, [r3, #18]
 80075e0:	2b02      	cmp	r3, #2
 80075e2:	d124      	bne.n	800762e <USB_HC_StartXfer+0x86>
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	799b      	ldrb	r3, [r3, #6]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d120      	bne.n	800762e <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80075ec:	69fb      	ldr	r3, [r7, #28]
 80075ee:	015a      	lsls	r2, r3, #5
 80075f0:	6a3b      	ldr	r3, [r7, #32]
 80075f2:	4413      	add	r3, r2
 80075f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80075f8:	68db      	ldr	r3, [r3, #12]
 80075fa:	69fa      	ldr	r2, [r7, #28]
 80075fc:	0151      	lsls	r1, r2, #5
 80075fe:	6a3a      	ldr	r2, [r7, #32]
 8007600:	440a      	add	r2, r1
 8007602:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007606:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800760a:	60d3      	str	r3, [r2, #12]
 800760c:	e00f      	b.n	800762e <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	791b      	ldrb	r3, [r3, #4]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d10b      	bne.n	800762e <USB_HC_StartXfer+0x86>
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	795b      	ldrb	r3, [r3, #5]
 800761a:	2b01      	cmp	r3, #1
 800761c:	d107      	bne.n	800762e <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	785b      	ldrb	r3, [r3, #1]
 8007622:	4619      	mov	r1, r3
 8007624:	68f8      	ldr	r0, [r7, #12]
 8007626:	f000 fb6b 	bl	8007d00 <USB_DoPing>
        return HAL_OK;
 800762a:	2300      	movs	r3, #0
 800762c:	e232      	b.n	8007a94 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	799b      	ldrb	r3, [r3, #6]
 8007632:	2b01      	cmp	r3, #1
 8007634:	d158      	bne.n	80076e8 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8007636:	2301      	movs	r3, #1
 8007638:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	78db      	ldrb	r3, [r3, #3]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d007      	beq.n	8007652 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007642:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007644:	68ba      	ldr	r2, [r7, #8]
 8007646:	8a92      	ldrh	r2, [r2, #20]
 8007648:	fb03 f202 	mul.w	r2, r3, r2
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	61da      	str	r2, [r3, #28]
 8007650:	e07c      	b.n	800774c <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	7c9b      	ldrb	r3, [r3, #18]
 8007656:	2b01      	cmp	r3, #1
 8007658:	d130      	bne.n	80076bc <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	6a1b      	ldr	r3, [r3, #32]
 800765e:	2bbc      	cmp	r3, #188	@ 0xbc
 8007660:	d918      	bls.n	8007694 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	8a9b      	ldrh	r3, [r3, #20]
 8007666:	461a      	mov	r2, r3
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	69da      	ldr	r2, [r3, #28]
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	68db      	ldr	r3, [r3, #12]
 8007678:	2b01      	cmp	r3, #1
 800767a:	d003      	beq.n	8007684 <USB_HC_StartXfer+0xdc>
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	68db      	ldr	r3, [r3, #12]
 8007680:	2b02      	cmp	r3, #2
 8007682:	d103      	bne.n	800768c <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	2202      	movs	r2, #2
 8007688:	60da      	str	r2, [r3, #12]
 800768a:	e05f      	b.n	800774c <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	2201      	movs	r2, #1
 8007690:	60da      	str	r2, [r3, #12]
 8007692:	e05b      	b.n	800774c <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	6a1a      	ldr	r2, [r3, #32]
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	68db      	ldr	r3, [r3, #12]
 80076a0:	2b01      	cmp	r3, #1
 80076a2:	d007      	beq.n	80076b4 <USB_HC_StartXfer+0x10c>
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	68db      	ldr	r3, [r3, #12]
 80076a8:	2b02      	cmp	r3, #2
 80076aa:	d003      	beq.n	80076b4 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	2204      	movs	r2, #4
 80076b0:	60da      	str	r2, [r3, #12]
 80076b2:	e04b      	b.n	800774c <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	2203      	movs	r2, #3
 80076b8:	60da      	str	r2, [r3, #12]
 80076ba:	e047      	b.n	800774c <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 80076bc:	79fb      	ldrb	r3, [r7, #7]
 80076be:	2b01      	cmp	r3, #1
 80076c0:	d10d      	bne.n	80076de <USB_HC_StartXfer+0x136>
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	6a1b      	ldr	r3, [r3, #32]
 80076c6:	68ba      	ldr	r2, [r7, #8]
 80076c8:	8a92      	ldrh	r2, [r2, #20]
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d907      	bls.n	80076de <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80076ce:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80076d0:	68ba      	ldr	r2, [r7, #8]
 80076d2:	8a92      	ldrh	r2, [r2, #20]
 80076d4:	fb03 f202 	mul.w	r2, r3, r2
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	61da      	str	r2, [r3, #28]
 80076dc:	e036      	b.n	800774c <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	6a1a      	ldr	r2, [r3, #32]
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	61da      	str	r2, [r3, #28]
 80076e6:	e031      	b.n	800774c <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	6a1b      	ldr	r3, [r3, #32]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d018      	beq.n	8007722 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	6a1b      	ldr	r3, [r3, #32]
 80076f4:	68ba      	ldr	r2, [r7, #8]
 80076f6:	8a92      	ldrh	r2, [r2, #20]
 80076f8:	4413      	add	r3, r2
 80076fa:	3b01      	subs	r3, #1
 80076fc:	68ba      	ldr	r2, [r7, #8]
 80076fe:	8a92      	ldrh	r2, [r2, #20]
 8007700:	fbb3 f3f2 	udiv	r3, r3, r2
 8007704:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8007706:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8007708:	8b7b      	ldrh	r3, [r7, #26]
 800770a:	429a      	cmp	r2, r3
 800770c:	d90b      	bls.n	8007726 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 800770e:	8b7b      	ldrh	r3, [r7, #26]
 8007710:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007712:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007714:	68ba      	ldr	r2, [r7, #8]
 8007716:	8a92      	ldrh	r2, [r2, #20]
 8007718:	fb03 f202 	mul.w	r2, r3, r2
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	61da      	str	r2, [r3, #28]
 8007720:	e001      	b.n	8007726 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8007722:	2301      	movs	r3, #1
 8007724:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	78db      	ldrb	r3, [r3, #3]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d00a      	beq.n	8007744 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800772e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007730:	68ba      	ldr	r2, [r7, #8]
 8007732:	8a92      	ldrh	r2, [r2, #20]
 8007734:	fb03 f202 	mul.w	r2, r3, r2
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	61da      	str	r2, [r3, #28]
 800773c:	e006      	b.n	800774c <USB_HC_StartXfer+0x1a4>
 800773e:	bf00      	nop
 8007740:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	6a1a      	ldr	r2, [r3, #32]
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	69db      	ldr	r3, [r3, #28]
 8007750:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007754:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007756:	04d9      	lsls	r1, r3, #19
 8007758:	4ba3      	ldr	r3, [pc, #652]	@ (80079e8 <USB_HC_StartXfer+0x440>)
 800775a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800775c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	7d9b      	ldrb	r3, [r3, #22]
 8007762:	075b      	lsls	r3, r3, #29
 8007764:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007768:	69f9      	ldr	r1, [r7, #28]
 800776a:	0148      	lsls	r0, r1, #5
 800776c:	6a39      	ldr	r1, [r7, #32]
 800776e:	4401      	add	r1, r0
 8007770:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007774:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007776:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007778:	79fb      	ldrb	r3, [r7, #7]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d009      	beq.n	8007792 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	6999      	ldr	r1, [r3, #24]
 8007782:	69fb      	ldr	r3, [r7, #28]
 8007784:	015a      	lsls	r2, r3, #5
 8007786:	6a3b      	ldr	r3, [r7, #32]
 8007788:	4413      	add	r3, r2
 800778a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800778e:	460a      	mov	r2, r1
 8007790:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8007792:	6a3b      	ldr	r3, [r7, #32]
 8007794:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007798:	689b      	ldr	r3, [r3, #8]
 800779a:	f003 0301 	and.w	r3, r3, #1
 800779e:	2b00      	cmp	r3, #0
 80077a0:	bf0c      	ite	eq
 80077a2:	2301      	moveq	r3, #1
 80077a4:	2300      	movne	r3, #0
 80077a6:	b2db      	uxtb	r3, r3
 80077a8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80077aa:	69fb      	ldr	r3, [r7, #28]
 80077ac:	015a      	lsls	r2, r3, #5
 80077ae:	6a3b      	ldr	r3, [r7, #32]
 80077b0:	4413      	add	r3, r2
 80077b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	69fa      	ldr	r2, [r7, #28]
 80077ba:	0151      	lsls	r1, r2, #5
 80077bc:	6a3a      	ldr	r2, [r7, #32]
 80077be:	440a      	add	r2, r1
 80077c0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80077c4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80077c8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80077ca:	69fb      	ldr	r3, [r7, #28]
 80077cc:	015a      	lsls	r2, r3, #5
 80077ce:	6a3b      	ldr	r3, [r7, #32]
 80077d0:	4413      	add	r3, r2
 80077d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80077d6:	681a      	ldr	r2, [r3, #0]
 80077d8:	7e7b      	ldrb	r3, [r7, #25]
 80077da:	075b      	lsls	r3, r3, #29
 80077dc:	69f9      	ldr	r1, [r7, #28]
 80077de:	0148      	lsls	r0, r1, #5
 80077e0:	6a39      	ldr	r1, [r7, #32]
 80077e2:	4401      	add	r1, r0
 80077e4:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 80077e8:	4313      	orrs	r3, r2
 80077ea:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	799b      	ldrb	r3, [r3, #6]
 80077f0:	2b01      	cmp	r3, #1
 80077f2:	f040 80c3 	bne.w	800797c <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	7c5b      	ldrb	r3, [r3, #17]
 80077fa:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80077fc:	68ba      	ldr	r2, [r7, #8]
 80077fe:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007800:	4313      	orrs	r3, r2
 8007802:	69fa      	ldr	r2, [r7, #28]
 8007804:	0151      	lsls	r1, r2, #5
 8007806:	6a3a      	ldr	r2, [r7, #32]
 8007808:	440a      	add	r2, r1
 800780a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800780e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007812:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8007814:	69fb      	ldr	r3, [r7, #28]
 8007816:	015a      	lsls	r2, r3, #5
 8007818:	6a3b      	ldr	r3, [r7, #32]
 800781a:	4413      	add	r3, r2
 800781c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007820:	68db      	ldr	r3, [r3, #12]
 8007822:	69fa      	ldr	r2, [r7, #28]
 8007824:	0151      	lsls	r1, r2, #5
 8007826:	6a3a      	ldr	r2, [r7, #32]
 8007828:	440a      	add	r2, r1
 800782a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800782e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007832:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	79db      	ldrb	r3, [r3, #7]
 8007838:	2b01      	cmp	r3, #1
 800783a:	d123      	bne.n	8007884 <USB_HC_StartXfer+0x2dc>
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	78db      	ldrb	r3, [r3, #3]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d11f      	bne.n	8007884 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8007844:	69fb      	ldr	r3, [r7, #28]
 8007846:	015a      	lsls	r2, r3, #5
 8007848:	6a3b      	ldr	r3, [r7, #32]
 800784a:	4413      	add	r3, r2
 800784c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007850:	685b      	ldr	r3, [r3, #4]
 8007852:	69fa      	ldr	r2, [r7, #28]
 8007854:	0151      	lsls	r1, r2, #5
 8007856:	6a3a      	ldr	r2, [r7, #32]
 8007858:	440a      	add	r2, r1
 800785a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800785e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007862:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8007864:	69fb      	ldr	r3, [r7, #28]
 8007866:	015a      	lsls	r2, r3, #5
 8007868:	6a3b      	ldr	r3, [r7, #32]
 800786a:	4413      	add	r3, r2
 800786c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007870:	68db      	ldr	r3, [r3, #12]
 8007872:	69fa      	ldr	r2, [r7, #28]
 8007874:	0151      	lsls	r1, r2, #5
 8007876:	6a3a      	ldr	r2, [r7, #32]
 8007878:	440a      	add	r2, r1
 800787a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800787e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007882:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	7c9b      	ldrb	r3, [r3, #18]
 8007888:	2b01      	cmp	r3, #1
 800788a:	d003      	beq.n	8007894 <USB_HC_StartXfer+0x2ec>
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	7c9b      	ldrb	r3, [r3, #18]
 8007890:	2b03      	cmp	r3, #3
 8007892:	d117      	bne.n	80078c4 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8007898:	2b01      	cmp	r3, #1
 800789a:	d113      	bne.n	80078c4 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	78db      	ldrb	r3, [r3, #3]
 80078a0:	2b01      	cmp	r3, #1
 80078a2:	d10f      	bne.n	80078c4 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80078a4:	69fb      	ldr	r3, [r7, #28]
 80078a6:	015a      	lsls	r2, r3, #5
 80078a8:	6a3b      	ldr	r3, [r7, #32]
 80078aa:	4413      	add	r3, r2
 80078ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80078b0:	685b      	ldr	r3, [r3, #4]
 80078b2:	69fa      	ldr	r2, [r7, #28]
 80078b4:	0151      	lsls	r1, r2, #5
 80078b6:	6a3a      	ldr	r2, [r7, #32]
 80078b8:	440a      	add	r2, r1
 80078ba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80078be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80078c2:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	7c9b      	ldrb	r3, [r3, #18]
 80078c8:	2b01      	cmp	r3, #1
 80078ca:	d162      	bne.n	8007992 <USB_HC_StartXfer+0x3ea>
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	78db      	ldrb	r3, [r3, #3]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d15e      	bne.n	8007992 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	68db      	ldr	r3, [r3, #12]
 80078d8:	3b01      	subs	r3, #1
 80078da:	2b03      	cmp	r3, #3
 80078dc:	d858      	bhi.n	8007990 <USB_HC_StartXfer+0x3e8>
 80078de:	a201      	add	r2, pc, #4	@ (adr r2, 80078e4 <USB_HC_StartXfer+0x33c>)
 80078e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078e4:	080078f5 	.word	0x080078f5
 80078e8:	08007917 	.word	0x08007917
 80078ec:	08007939 	.word	0x08007939
 80078f0:	0800795b 	.word	0x0800795b
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 80078f4:	69fb      	ldr	r3, [r7, #28]
 80078f6:	015a      	lsls	r2, r3, #5
 80078f8:	6a3b      	ldr	r3, [r7, #32]
 80078fa:	4413      	add	r3, r2
 80078fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007900:	685b      	ldr	r3, [r3, #4]
 8007902:	69fa      	ldr	r2, [r7, #28]
 8007904:	0151      	lsls	r1, r2, #5
 8007906:	6a3a      	ldr	r2, [r7, #32]
 8007908:	440a      	add	r2, r1
 800790a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800790e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007912:	6053      	str	r3, [r2, #4]
          break;
 8007914:	e03d      	b.n	8007992 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8007916:	69fb      	ldr	r3, [r7, #28]
 8007918:	015a      	lsls	r2, r3, #5
 800791a:	6a3b      	ldr	r3, [r7, #32]
 800791c:	4413      	add	r3, r2
 800791e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007922:	685b      	ldr	r3, [r3, #4]
 8007924:	69fa      	ldr	r2, [r7, #28]
 8007926:	0151      	lsls	r1, r2, #5
 8007928:	6a3a      	ldr	r2, [r7, #32]
 800792a:	440a      	add	r2, r1
 800792c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007930:	f043 030e 	orr.w	r3, r3, #14
 8007934:	6053      	str	r3, [r2, #4]
          break;
 8007936:	e02c      	b.n	8007992 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8007938:	69fb      	ldr	r3, [r7, #28]
 800793a:	015a      	lsls	r2, r3, #5
 800793c:	6a3b      	ldr	r3, [r7, #32]
 800793e:	4413      	add	r3, r2
 8007940:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007944:	685b      	ldr	r3, [r3, #4]
 8007946:	69fa      	ldr	r2, [r7, #28]
 8007948:	0151      	lsls	r1, r2, #5
 800794a:	6a3a      	ldr	r2, [r7, #32]
 800794c:	440a      	add	r2, r1
 800794e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007952:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007956:	6053      	str	r3, [r2, #4]
          break;
 8007958:	e01b      	b.n	8007992 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800795a:	69fb      	ldr	r3, [r7, #28]
 800795c:	015a      	lsls	r2, r3, #5
 800795e:	6a3b      	ldr	r3, [r7, #32]
 8007960:	4413      	add	r3, r2
 8007962:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007966:	685b      	ldr	r3, [r3, #4]
 8007968:	69fa      	ldr	r2, [r7, #28]
 800796a:	0151      	lsls	r1, r2, #5
 800796c:	6a3a      	ldr	r2, [r7, #32]
 800796e:	440a      	add	r2, r1
 8007970:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007974:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007978:	6053      	str	r3, [r2, #4]
          break;
 800797a:	e00a      	b.n	8007992 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800797c:	69fb      	ldr	r3, [r7, #28]
 800797e:	015a      	lsls	r2, r3, #5
 8007980:	6a3b      	ldr	r3, [r7, #32]
 8007982:	4413      	add	r3, r2
 8007984:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007988:	461a      	mov	r2, r3
 800798a:	2300      	movs	r3, #0
 800798c:	6053      	str	r3, [r2, #4]
 800798e:	e000      	b.n	8007992 <USB_HC_StartXfer+0x3ea>
          break;
 8007990:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007992:	69fb      	ldr	r3, [r7, #28]
 8007994:	015a      	lsls	r2, r3, #5
 8007996:	6a3b      	ldr	r3, [r7, #32]
 8007998:	4413      	add	r3, r2
 800799a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80079a2:	693b      	ldr	r3, [r7, #16]
 80079a4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80079a8:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	78db      	ldrb	r3, [r3, #3]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d004      	beq.n	80079bc <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80079b2:	693b      	ldr	r3, [r7, #16]
 80079b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80079b8:	613b      	str	r3, [r7, #16]
 80079ba:	e003      	b.n	80079c4 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80079bc:	693b      	ldr	r3, [r7, #16]
 80079be:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80079c2:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80079c4:	693b      	ldr	r3, [r7, #16]
 80079c6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80079ca:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80079cc:	69fb      	ldr	r3, [r7, #28]
 80079ce:	015a      	lsls	r2, r3, #5
 80079d0:	6a3b      	ldr	r3, [r7, #32]
 80079d2:	4413      	add	r3, r2
 80079d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80079d8:	461a      	mov	r2, r3
 80079da:	693b      	ldr	r3, [r7, #16]
 80079dc:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80079de:	79fb      	ldrb	r3, [r7, #7]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d003      	beq.n	80079ec <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 80079e4:	2300      	movs	r3, #0
 80079e6:	e055      	b.n	8007a94 <USB_HC_StartXfer+0x4ec>
 80079e8:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	78db      	ldrb	r3, [r3, #3]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d14e      	bne.n	8007a92 <USB_HC_StartXfer+0x4ea>
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	6a1b      	ldr	r3, [r3, #32]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d04a      	beq.n	8007a92 <USB_HC_StartXfer+0x4ea>
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	79db      	ldrb	r3, [r3, #7]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d146      	bne.n	8007a92 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	7c9b      	ldrb	r3, [r3, #18]
 8007a08:	2b03      	cmp	r3, #3
 8007a0a:	d831      	bhi.n	8007a70 <USB_HC_StartXfer+0x4c8>
 8007a0c:	a201      	add	r2, pc, #4	@ (adr r2, 8007a14 <USB_HC_StartXfer+0x46c>)
 8007a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a12:	bf00      	nop
 8007a14:	08007a25 	.word	0x08007a25
 8007a18:	08007a49 	.word	0x08007a49
 8007a1c:	08007a25 	.word	0x08007a25
 8007a20:	08007a49 	.word	0x08007a49
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	6a1b      	ldr	r3, [r3, #32]
 8007a28:	3303      	adds	r3, #3
 8007a2a:	089b      	lsrs	r3, r3, #2
 8007a2c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007a2e:	8afa      	ldrh	r2, [r7, #22]
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a34:	b29b      	uxth	r3, r3
 8007a36:	429a      	cmp	r2, r3
 8007a38:	d91c      	bls.n	8007a74 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	699b      	ldr	r3, [r3, #24]
 8007a3e:	f043 0220 	orr.w	r2, r3, #32
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	619a      	str	r2, [r3, #24]
        }
        break;
 8007a46:	e015      	b.n	8007a74 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	6a1b      	ldr	r3, [r3, #32]
 8007a4c:	3303      	adds	r3, #3
 8007a4e:	089b      	lsrs	r3, r3, #2
 8007a50:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007a52:	8afa      	ldrh	r2, [r7, #22]
 8007a54:	6a3b      	ldr	r3, [r7, #32]
 8007a56:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007a5a:	691b      	ldr	r3, [r3, #16]
 8007a5c:	b29b      	uxth	r3, r3
 8007a5e:	429a      	cmp	r2, r3
 8007a60:	d90a      	bls.n	8007a78 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	699b      	ldr	r3, [r3, #24]
 8007a66:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	619a      	str	r2, [r3, #24]
        }
        break;
 8007a6e:	e003      	b.n	8007a78 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8007a70:	bf00      	nop
 8007a72:	e002      	b.n	8007a7a <USB_HC_StartXfer+0x4d2>
        break;
 8007a74:	bf00      	nop
 8007a76:	e000      	b.n	8007a7a <USB_HC_StartXfer+0x4d2>
        break;
 8007a78:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	6999      	ldr	r1, [r3, #24]
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	785a      	ldrb	r2, [r3, #1]
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	6a1b      	ldr	r3, [r3, #32]
 8007a86:	b29b      	uxth	r3, r3
 8007a88:	2000      	movs	r0, #0
 8007a8a:	9000      	str	r0, [sp, #0]
 8007a8c:	68f8      	ldr	r0, [r7, #12]
 8007a8e:	f7ff f9c9 	bl	8006e24 <USB_WritePacket>
  }

  return HAL_OK;
 8007a92:	2300      	movs	r3, #0
}
 8007a94:	4618      	mov	r0, r3
 8007a96:	3728      	adds	r7, #40	@ 0x28
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bd80      	pop	{r7, pc}

08007a9c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	b085      	sub	sp, #20
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007aae:	695b      	ldr	r3, [r3, #20]
 8007ab0:	b29b      	uxth	r3, r3
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	3714      	adds	r7, #20
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abc:	4770      	bx	lr

08007abe <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007abe:	b480      	push	{r7}
 8007ac0:	b089      	sub	sp, #36	@ 0x24
 8007ac2:	af00      	add	r7, sp, #0
 8007ac4:	6078      	str	r0, [r7, #4]
 8007ac6:	460b      	mov	r3, r1
 8007ac8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8007ace:	78fb      	ldrb	r3, [r7, #3]
 8007ad0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007ad6:	69bb      	ldr	r3, [r7, #24]
 8007ad8:	015a      	lsls	r2, r3, #5
 8007ada:	69fb      	ldr	r3, [r7, #28]
 8007adc:	4413      	add	r3, r2
 8007ade:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	0c9b      	lsrs	r3, r3, #18
 8007ae6:	f003 0303 	and.w	r3, r3, #3
 8007aea:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007aec:	69bb      	ldr	r3, [r7, #24]
 8007aee:	015a      	lsls	r2, r3, #5
 8007af0:	69fb      	ldr	r3, [r7, #28]
 8007af2:	4413      	add	r3, r2
 8007af4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	0fdb      	lsrs	r3, r3, #31
 8007afc:	f003 0301 	and.w	r3, r3, #1
 8007b00:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8007b02:	69bb      	ldr	r3, [r7, #24]
 8007b04:	015a      	lsls	r2, r3, #5
 8007b06:	69fb      	ldr	r3, [r7, #28]
 8007b08:	4413      	add	r3, r2
 8007b0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b0e:	685b      	ldr	r3, [r3, #4]
 8007b10:	0fdb      	lsrs	r3, r3, #31
 8007b12:	f003 0301 	and.w	r3, r3, #1
 8007b16:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	689b      	ldr	r3, [r3, #8]
 8007b1c:	f003 0320 	and.w	r3, r3, #32
 8007b20:	2b20      	cmp	r3, #32
 8007b22:	d10d      	bne.n	8007b40 <USB_HC_Halt+0x82>
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d10a      	bne.n	8007b40 <USB_HC_Halt+0x82>
 8007b2a:	693b      	ldr	r3, [r7, #16]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d005      	beq.n	8007b3c <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8007b30:	697b      	ldr	r3, [r7, #20]
 8007b32:	2b01      	cmp	r3, #1
 8007b34:	d002      	beq.n	8007b3c <USB_HC_Halt+0x7e>
 8007b36:	697b      	ldr	r3, [r7, #20]
 8007b38:	2b03      	cmp	r3, #3
 8007b3a:	d101      	bne.n	8007b40 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	e0d8      	b.n	8007cf2 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d002      	beq.n	8007b4c <USB_HC_Halt+0x8e>
 8007b46:	697b      	ldr	r3, [r7, #20]
 8007b48:	2b02      	cmp	r3, #2
 8007b4a:	d173      	bne.n	8007c34 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007b4c:	69bb      	ldr	r3, [r7, #24]
 8007b4e:	015a      	lsls	r2, r3, #5
 8007b50:	69fb      	ldr	r3, [r7, #28]
 8007b52:	4413      	add	r3, r2
 8007b54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	69ba      	ldr	r2, [r7, #24]
 8007b5c:	0151      	lsls	r1, r2, #5
 8007b5e:	69fa      	ldr	r2, [r7, #28]
 8007b60:	440a      	add	r2, r1
 8007b62:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007b66:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007b6a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	689b      	ldr	r3, [r3, #8]
 8007b70:	f003 0320 	and.w	r3, r3, #32
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d14a      	bne.n	8007c0e <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b7c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d133      	bne.n	8007bec <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007b84:	69bb      	ldr	r3, [r7, #24]
 8007b86:	015a      	lsls	r2, r3, #5
 8007b88:	69fb      	ldr	r3, [r7, #28]
 8007b8a:	4413      	add	r3, r2
 8007b8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	69ba      	ldr	r2, [r7, #24]
 8007b94:	0151      	lsls	r1, r2, #5
 8007b96:	69fa      	ldr	r2, [r7, #28]
 8007b98:	440a      	add	r2, r1
 8007b9a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007b9e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007ba2:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007ba4:	69bb      	ldr	r3, [r7, #24]
 8007ba6:	015a      	lsls	r2, r3, #5
 8007ba8:	69fb      	ldr	r3, [r7, #28]
 8007baa:	4413      	add	r3, r2
 8007bac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	69ba      	ldr	r2, [r7, #24]
 8007bb4:	0151      	lsls	r1, r2, #5
 8007bb6:	69fa      	ldr	r2, [r7, #28]
 8007bb8:	440a      	add	r2, r1
 8007bba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007bbe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007bc2:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	3301      	adds	r3, #1
 8007bc8:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8007bca:	68bb      	ldr	r3, [r7, #8]
 8007bcc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007bd0:	d82e      	bhi.n	8007c30 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007bd2:	69bb      	ldr	r3, [r7, #24]
 8007bd4:	015a      	lsls	r2, r3, #5
 8007bd6:	69fb      	ldr	r3, [r7, #28]
 8007bd8:	4413      	add	r3, r2
 8007bda:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007be4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007be8:	d0ec      	beq.n	8007bc4 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007bea:	e081      	b.n	8007cf0 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007bec:	69bb      	ldr	r3, [r7, #24]
 8007bee:	015a      	lsls	r2, r3, #5
 8007bf0:	69fb      	ldr	r3, [r7, #28]
 8007bf2:	4413      	add	r3, r2
 8007bf4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	69ba      	ldr	r2, [r7, #24]
 8007bfc:	0151      	lsls	r1, r2, #5
 8007bfe:	69fa      	ldr	r2, [r7, #28]
 8007c00:	440a      	add	r2, r1
 8007c02:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007c06:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007c0a:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007c0c:	e070      	b.n	8007cf0 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007c0e:	69bb      	ldr	r3, [r7, #24]
 8007c10:	015a      	lsls	r2, r3, #5
 8007c12:	69fb      	ldr	r3, [r7, #28]
 8007c14:	4413      	add	r3, r2
 8007c16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	69ba      	ldr	r2, [r7, #24]
 8007c1e:	0151      	lsls	r1, r2, #5
 8007c20:	69fa      	ldr	r2, [r7, #28]
 8007c22:	440a      	add	r2, r1
 8007c24:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007c28:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007c2c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007c2e:	e05f      	b.n	8007cf0 <USB_HC_Halt+0x232>
            break;
 8007c30:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007c32:	e05d      	b.n	8007cf0 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007c34:	69bb      	ldr	r3, [r7, #24]
 8007c36:	015a      	lsls	r2, r3, #5
 8007c38:	69fb      	ldr	r3, [r7, #28]
 8007c3a:	4413      	add	r3, r2
 8007c3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	69ba      	ldr	r2, [r7, #24]
 8007c44:	0151      	lsls	r1, r2, #5
 8007c46:	69fa      	ldr	r2, [r7, #28]
 8007c48:	440a      	add	r2, r1
 8007c4a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007c4e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007c52:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007c54:	69fb      	ldr	r3, [r7, #28]
 8007c56:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007c5a:	691b      	ldr	r3, [r3, #16]
 8007c5c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d133      	bne.n	8007ccc <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007c64:	69bb      	ldr	r3, [r7, #24]
 8007c66:	015a      	lsls	r2, r3, #5
 8007c68:	69fb      	ldr	r3, [r7, #28]
 8007c6a:	4413      	add	r3, r2
 8007c6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	69ba      	ldr	r2, [r7, #24]
 8007c74:	0151      	lsls	r1, r2, #5
 8007c76:	69fa      	ldr	r2, [r7, #28]
 8007c78:	440a      	add	r2, r1
 8007c7a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007c7e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007c82:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007c84:	69bb      	ldr	r3, [r7, #24]
 8007c86:	015a      	lsls	r2, r3, #5
 8007c88:	69fb      	ldr	r3, [r7, #28]
 8007c8a:	4413      	add	r3, r2
 8007c8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	69ba      	ldr	r2, [r7, #24]
 8007c94:	0151      	lsls	r1, r2, #5
 8007c96:	69fa      	ldr	r2, [r7, #28]
 8007c98:	440a      	add	r2, r1
 8007c9a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007c9e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007ca2:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	3301      	adds	r3, #1
 8007ca8:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007cb0:	d81d      	bhi.n	8007cee <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007cb2:	69bb      	ldr	r3, [r7, #24]
 8007cb4:	015a      	lsls	r2, r3, #5
 8007cb6:	69fb      	ldr	r3, [r7, #28]
 8007cb8:	4413      	add	r3, r2
 8007cba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007cc4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007cc8:	d0ec      	beq.n	8007ca4 <USB_HC_Halt+0x1e6>
 8007cca:	e011      	b.n	8007cf0 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007ccc:	69bb      	ldr	r3, [r7, #24]
 8007cce:	015a      	lsls	r2, r3, #5
 8007cd0:	69fb      	ldr	r3, [r7, #28]
 8007cd2:	4413      	add	r3, r2
 8007cd4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	69ba      	ldr	r2, [r7, #24]
 8007cdc:	0151      	lsls	r1, r2, #5
 8007cde:	69fa      	ldr	r2, [r7, #28]
 8007ce0:	440a      	add	r2, r1
 8007ce2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007ce6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007cea:	6013      	str	r3, [r2, #0]
 8007cec:	e000      	b.n	8007cf0 <USB_HC_Halt+0x232>
          break;
 8007cee:	bf00      	nop
    }
  }

  return HAL_OK;
 8007cf0:	2300      	movs	r3, #0
}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	3724      	adds	r7, #36	@ 0x24
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfc:	4770      	bx	lr
	...

08007d00 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007d00:	b480      	push	{r7}
 8007d02:	b087      	sub	sp, #28
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
 8007d08:	460b      	mov	r3, r1
 8007d0a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007d10:	78fb      	ldrb	r3, [r7, #3]
 8007d12:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007d14:	2301      	movs	r3, #1
 8007d16:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	04da      	lsls	r2, r3, #19
 8007d1c:	4b15      	ldr	r3, [pc, #84]	@ (8007d74 <USB_DoPing+0x74>)
 8007d1e:	4013      	ands	r3, r2
 8007d20:	693a      	ldr	r2, [r7, #16]
 8007d22:	0151      	lsls	r1, r2, #5
 8007d24:	697a      	ldr	r2, [r7, #20]
 8007d26:	440a      	add	r2, r1
 8007d28:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007d2c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007d30:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8007d32:	693b      	ldr	r3, [r7, #16]
 8007d34:	015a      	lsls	r2, r3, #5
 8007d36:	697b      	ldr	r3, [r7, #20]
 8007d38:	4413      	add	r3, r2
 8007d3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007d48:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007d50:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8007d52:	693b      	ldr	r3, [r7, #16]
 8007d54:	015a      	lsls	r2, r3, #5
 8007d56:	697b      	ldr	r3, [r7, #20]
 8007d58:	4413      	add	r3, r2
 8007d5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d5e:	461a      	mov	r2, r3
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007d64:	2300      	movs	r3, #0
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	371c      	adds	r7, #28
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d70:	4770      	bx	lr
 8007d72:	bf00      	nop
 8007d74:	1ff80000 	.word	0x1ff80000

08007d78 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b088      	sub	sp, #32
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007d80:	2300      	movs	r3, #0
 8007d82:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8007d88:	2300      	movs	r3, #0
 8007d8a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f7fe ff8c 	bl	8006caa <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007d92:	2110      	movs	r1, #16
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f7fe ffe5 	bl	8006d64 <USB_FlushTxFifo>
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d001      	beq.n	8007da4 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8007da0:	2301      	movs	r3, #1
 8007da2:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f7ff f80f 	bl	8006dc8 <USB_FlushRxFifo>
 8007daa:	4603      	mov	r3, r0
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d001      	beq.n	8007db4 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8007db0:	2301      	movs	r3, #1
 8007db2:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007db4:	2300      	movs	r3, #0
 8007db6:	61bb      	str	r3, [r7, #24]
 8007db8:	e01f      	b.n	8007dfa <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8007dba:	69bb      	ldr	r3, [r7, #24]
 8007dbc:	015a      	lsls	r2, r3, #5
 8007dbe:	697b      	ldr	r3, [r7, #20]
 8007dc0:	4413      	add	r3, r2
 8007dc2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007dca:	693b      	ldr	r3, [r7, #16]
 8007dcc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007dd0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007dd2:	693b      	ldr	r3, [r7, #16]
 8007dd4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007dd8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007dda:	693b      	ldr	r3, [r7, #16]
 8007ddc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007de0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007de2:	69bb      	ldr	r3, [r7, #24]
 8007de4:	015a      	lsls	r2, r3, #5
 8007de6:	697b      	ldr	r3, [r7, #20]
 8007de8:	4413      	add	r3, r2
 8007dea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007dee:	461a      	mov	r2, r3
 8007df0:	693b      	ldr	r3, [r7, #16]
 8007df2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007df4:	69bb      	ldr	r3, [r7, #24]
 8007df6:	3301      	adds	r3, #1
 8007df8:	61bb      	str	r3, [r7, #24]
 8007dfa:	69bb      	ldr	r3, [r7, #24]
 8007dfc:	2b0f      	cmp	r3, #15
 8007dfe:	d9dc      	bls.n	8007dba <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007e00:	2300      	movs	r3, #0
 8007e02:	61bb      	str	r3, [r7, #24]
 8007e04:	e034      	b.n	8007e70 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8007e06:	69bb      	ldr	r3, [r7, #24]
 8007e08:	015a      	lsls	r2, r3, #5
 8007e0a:	697b      	ldr	r3, [r7, #20]
 8007e0c:	4413      	add	r3, r2
 8007e0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007e16:	693b      	ldr	r3, [r7, #16]
 8007e18:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007e1c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8007e1e:	693b      	ldr	r3, [r7, #16]
 8007e20:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007e24:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007e26:	693b      	ldr	r3, [r7, #16]
 8007e28:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007e2c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007e2e:	69bb      	ldr	r3, [r7, #24]
 8007e30:	015a      	lsls	r2, r3, #5
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	4413      	add	r3, r2
 8007e36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e3a:	461a      	mov	r2, r3
 8007e3c:	693b      	ldr	r3, [r7, #16]
 8007e3e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	3301      	adds	r3, #1
 8007e44:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007e4c:	d80c      	bhi.n	8007e68 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007e4e:	69bb      	ldr	r3, [r7, #24]
 8007e50:	015a      	lsls	r2, r3, #5
 8007e52:	697b      	ldr	r3, [r7, #20]
 8007e54:	4413      	add	r3, r2
 8007e56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007e60:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007e64:	d0ec      	beq.n	8007e40 <USB_StopHost+0xc8>
 8007e66:	e000      	b.n	8007e6a <USB_StopHost+0xf2>
        break;
 8007e68:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8007e6a:	69bb      	ldr	r3, [r7, #24]
 8007e6c:	3301      	adds	r3, #1
 8007e6e:	61bb      	str	r3, [r7, #24]
 8007e70:	69bb      	ldr	r3, [r7, #24]
 8007e72:	2b0f      	cmp	r3, #15
 8007e74:	d9c7      	bls.n	8007e06 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007e7c:	461a      	mov	r2, r3
 8007e7e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007e82:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007e8a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	f7fe fefb 	bl	8006c88 <USB_EnableGlobalInt>

  return ret;
 8007e92:	7ffb      	ldrb	r3, [r7, #31]
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	3720      	adds	r7, #32
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}

08007e9c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007e9c:	b590      	push	{r4, r7, lr}
 8007e9e:	b089      	sub	sp, #36	@ 0x24
 8007ea0:	af04      	add	r7, sp, #16
 8007ea2:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	2202      	movs	r2, #2
 8007ea8:	2102      	movs	r1, #2
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f000 fcd1 	bl	8008852 <USBH_FindInterface>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007eb4:	7bfb      	ldrb	r3, [r7, #15]
 8007eb6:	2bff      	cmp	r3, #255	@ 0xff
 8007eb8:	d002      	beq.n	8007ec0 <USBH_CDC_InterfaceInit+0x24>
 8007eba:	7bfb      	ldrb	r3, [r7, #15]
 8007ebc:	2b01      	cmp	r3, #1
 8007ebe:	d901      	bls.n	8007ec4 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007ec0:	2302      	movs	r3, #2
 8007ec2:	e13d      	b.n	8008140 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007ec4:	7bfb      	ldrb	r3, [r7, #15]
 8007ec6:	4619      	mov	r1, r3
 8007ec8:	6878      	ldr	r0, [r7, #4]
 8007eca:	f000 fca6 	bl	800881a <USBH_SelectInterface>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007ed2:	7bbb      	ldrb	r3, [r7, #14]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d001      	beq.n	8007edc <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007ed8:	2302      	movs	r3, #2
 8007eda:	e131      	b.n	8008140 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8007ee2:	2050      	movs	r0, #80	@ 0x50
 8007ee4:	f005 fdd0 	bl	800da88 <malloc>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007ef2:	69db      	ldr	r3, [r3, #28]
 8007ef4:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d101      	bne.n	8007f00 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8007efc:	2302      	movs	r3, #2
 8007efe:	e11f      	b.n	8008140 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007f00:	2250      	movs	r2, #80	@ 0x50
 8007f02:	2100      	movs	r1, #0
 8007f04:	68b8      	ldr	r0, [r7, #8]
 8007f06:	f005 fe7d 	bl	800dc04 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007f0a:	7bfb      	ldrb	r3, [r7, #15]
 8007f0c:	687a      	ldr	r2, [r7, #4]
 8007f0e:	211a      	movs	r1, #26
 8007f10:	fb01 f303 	mul.w	r3, r1, r3
 8007f14:	4413      	add	r3, r2
 8007f16:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007f1a:	781b      	ldrb	r3, [r3, #0]
 8007f1c:	b25b      	sxtb	r3, r3
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	da15      	bge.n	8007f4e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007f22:	7bfb      	ldrb	r3, [r7, #15]
 8007f24:	687a      	ldr	r2, [r7, #4]
 8007f26:	211a      	movs	r1, #26
 8007f28:	fb01 f303 	mul.w	r3, r1, r3
 8007f2c:	4413      	add	r3, r2
 8007f2e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007f32:	781a      	ldrb	r2, [r3, #0]
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007f38:	7bfb      	ldrb	r3, [r7, #15]
 8007f3a:	687a      	ldr	r2, [r7, #4]
 8007f3c:	211a      	movs	r1, #26
 8007f3e:	fb01 f303 	mul.w	r3, r1, r3
 8007f42:	4413      	add	r3, r2
 8007f44:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007f48:	881a      	ldrh	r2, [r3, #0]
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8007f4e:	68bb      	ldr	r3, [r7, #8]
 8007f50:	785b      	ldrb	r3, [r3, #1]
 8007f52:	4619      	mov	r1, r3
 8007f54:	6878      	ldr	r0, [r7, #4]
 8007f56:	f002 fa18 	bl	800a38a <USBH_AllocPipe>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	461a      	mov	r2, r3
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	7819      	ldrb	r1, [r3, #0]
 8007f66:	68bb      	ldr	r3, [r7, #8]
 8007f68:	7858      	ldrb	r0, [r3, #1]
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007f76:	68ba      	ldr	r2, [r7, #8]
 8007f78:	8952      	ldrh	r2, [r2, #10]
 8007f7a:	9202      	str	r2, [sp, #8]
 8007f7c:	2203      	movs	r2, #3
 8007f7e:	9201      	str	r2, [sp, #4]
 8007f80:	9300      	str	r3, [sp, #0]
 8007f82:	4623      	mov	r3, r4
 8007f84:	4602      	mov	r2, r0
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f002 f9d0 	bl	800a32c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	781b      	ldrb	r3, [r3, #0]
 8007f90:	2200      	movs	r2, #0
 8007f92:	4619      	mov	r1, r3
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	f005 fcf1 	bl	800d97c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	210a      	movs	r1, #10
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f000 fc56 	bl	8008852 <USBH_FindInterface>
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007faa:	7bfb      	ldrb	r3, [r7, #15]
 8007fac:	2bff      	cmp	r3, #255	@ 0xff
 8007fae:	d002      	beq.n	8007fb6 <USBH_CDC_InterfaceInit+0x11a>
 8007fb0:	7bfb      	ldrb	r3, [r7, #15]
 8007fb2:	2b01      	cmp	r3, #1
 8007fb4:	d901      	bls.n	8007fba <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007fb6:	2302      	movs	r3, #2
 8007fb8:	e0c2      	b.n	8008140 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007fba:	7bfb      	ldrb	r3, [r7, #15]
 8007fbc:	687a      	ldr	r2, [r7, #4]
 8007fbe:	211a      	movs	r1, #26
 8007fc0:	fb01 f303 	mul.w	r3, r1, r3
 8007fc4:	4413      	add	r3, r2
 8007fc6:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007fca:	781b      	ldrb	r3, [r3, #0]
 8007fcc:	b25b      	sxtb	r3, r3
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	da16      	bge.n	8008000 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007fd2:	7bfb      	ldrb	r3, [r7, #15]
 8007fd4:	687a      	ldr	r2, [r7, #4]
 8007fd6:	211a      	movs	r1, #26
 8007fd8:	fb01 f303 	mul.w	r3, r1, r3
 8007fdc:	4413      	add	r3, r2
 8007fde:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007fe2:	781a      	ldrb	r2, [r3, #0]
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007fe8:	7bfb      	ldrb	r3, [r7, #15]
 8007fea:	687a      	ldr	r2, [r7, #4]
 8007fec:	211a      	movs	r1, #26
 8007fee:	fb01 f303 	mul.w	r3, r1, r3
 8007ff2:	4413      	add	r3, r2
 8007ff4:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007ff8:	881a      	ldrh	r2, [r3, #0]
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	835a      	strh	r2, [r3, #26]
 8007ffe:	e015      	b.n	800802c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008000:	7bfb      	ldrb	r3, [r7, #15]
 8008002:	687a      	ldr	r2, [r7, #4]
 8008004:	211a      	movs	r1, #26
 8008006:	fb01 f303 	mul.w	r3, r1, r3
 800800a:	4413      	add	r3, r2
 800800c:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008010:	781a      	ldrb	r2, [r3, #0]
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008016:	7bfb      	ldrb	r3, [r7, #15]
 8008018:	687a      	ldr	r2, [r7, #4]
 800801a:	211a      	movs	r1, #26
 800801c:	fb01 f303 	mul.w	r3, r1, r3
 8008020:	4413      	add	r3, r2
 8008022:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008026:	881a      	ldrh	r2, [r3, #0]
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800802c:	7bfb      	ldrb	r3, [r7, #15]
 800802e:	687a      	ldr	r2, [r7, #4]
 8008030:	211a      	movs	r1, #26
 8008032:	fb01 f303 	mul.w	r3, r1, r3
 8008036:	4413      	add	r3, r2
 8008038:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800803c:	781b      	ldrb	r3, [r3, #0]
 800803e:	b25b      	sxtb	r3, r3
 8008040:	2b00      	cmp	r3, #0
 8008042:	da16      	bge.n	8008072 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008044:	7bfb      	ldrb	r3, [r7, #15]
 8008046:	687a      	ldr	r2, [r7, #4]
 8008048:	211a      	movs	r1, #26
 800804a:	fb01 f303 	mul.w	r3, r1, r3
 800804e:	4413      	add	r3, r2
 8008050:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8008054:	781a      	ldrb	r2, [r3, #0]
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800805a:	7bfb      	ldrb	r3, [r7, #15]
 800805c:	687a      	ldr	r2, [r7, #4]
 800805e:	211a      	movs	r1, #26
 8008060:	fb01 f303 	mul.w	r3, r1, r3
 8008064:	4413      	add	r3, r2
 8008066:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800806a:	881a      	ldrh	r2, [r3, #0]
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	835a      	strh	r2, [r3, #26]
 8008070:	e015      	b.n	800809e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008072:	7bfb      	ldrb	r3, [r7, #15]
 8008074:	687a      	ldr	r2, [r7, #4]
 8008076:	211a      	movs	r1, #26
 8008078:	fb01 f303 	mul.w	r3, r1, r3
 800807c:	4413      	add	r3, r2
 800807e:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8008082:	781a      	ldrb	r2, [r3, #0]
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008088:	7bfb      	ldrb	r3, [r7, #15]
 800808a:	687a      	ldr	r2, [r7, #4]
 800808c:	211a      	movs	r1, #26
 800808e:	fb01 f303 	mul.w	r3, r1, r3
 8008092:	4413      	add	r3, r2
 8008094:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8008098:	881a      	ldrh	r2, [r3, #0]
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800809e:	68bb      	ldr	r3, [r7, #8]
 80080a0:	7b9b      	ldrb	r3, [r3, #14]
 80080a2:	4619      	mov	r1, r3
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f002 f970 	bl	800a38a <USBH_AllocPipe>
 80080aa:	4603      	mov	r3, r0
 80080ac:	461a      	mov	r2, r3
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	7bdb      	ldrb	r3, [r3, #15]
 80080b6:	4619      	mov	r1, r3
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	f002 f966 	bl	800a38a <USBH_AllocPipe>
 80080be:	4603      	mov	r3, r0
 80080c0:	461a      	mov	r2, r3
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80080c6:	68bb      	ldr	r3, [r7, #8]
 80080c8:	7b59      	ldrb	r1, [r3, #13]
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	7b98      	ldrb	r0, [r3, #14]
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80080da:	68ba      	ldr	r2, [r7, #8]
 80080dc:	8b12      	ldrh	r2, [r2, #24]
 80080de:	9202      	str	r2, [sp, #8]
 80080e0:	2202      	movs	r2, #2
 80080e2:	9201      	str	r2, [sp, #4]
 80080e4:	9300      	str	r3, [sp, #0]
 80080e6:	4623      	mov	r3, r4
 80080e8:	4602      	mov	r2, r0
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f002 f91e 	bl	800a32c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	7b19      	ldrb	r1, [r3, #12]
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	7bd8      	ldrb	r0, [r3, #15]
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008104:	68ba      	ldr	r2, [r7, #8]
 8008106:	8b52      	ldrh	r2, [r2, #26]
 8008108:	9202      	str	r2, [sp, #8]
 800810a:	2202      	movs	r2, #2
 800810c:	9201      	str	r2, [sp, #4]
 800810e:	9300      	str	r3, [sp, #0]
 8008110:	4623      	mov	r3, r4
 8008112:	4602      	mov	r2, r0
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f002 f909 	bl	800a32c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800811a:	68bb      	ldr	r3, [r7, #8]
 800811c:	2200      	movs	r2, #0
 800811e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	7b5b      	ldrb	r3, [r3, #13]
 8008126:	2200      	movs	r2, #0
 8008128:	4619      	mov	r1, r3
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f005 fc26 	bl	800d97c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	7b1b      	ldrb	r3, [r3, #12]
 8008134:	2200      	movs	r2, #0
 8008136:	4619      	mov	r1, r3
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f005 fc1f 	bl	800d97c <USBH_LL_SetToggle>

  return USBH_OK;
 800813e:	2300      	movs	r3, #0
}
 8008140:	4618      	mov	r0, r3
 8008142:	3714      	adds	r7, #20
 8008144:	46bd      	mov	sp, r7
 8008146:	bd90      	pop	{r4, r7, pc}

08008148 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b084      	sub	sp, #16
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008156:	69db      	ldr	r3, [r3, #28]
 8008158:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	781b      	ldrb	r3, [r3, #0]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d00e      	beq.n	8008180 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	781b      	ldrb	r3, [r3, #0]
 8008166:	4619      	mov	r1, r3
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	f002 f8fe 	bl	800a36a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	781b      	ldrb	r3, [r3, #0]
 8008172:	4619      	mov	r1, r3
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	f002 f929 	bl	800a3cc <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	2200      	movs	r2, #0
 800817e:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	7b1b      	ldrb	r3, [r3, #12]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d00e      	beq.n	80081a6 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	7b1b      	ldrb	r3, [r3, #12]
 800818c:	4619      	mov	r1, r3
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f002 f8eb 	bl	800a36a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	7b1b      	ldrb	r3, [r3, #12]
 8008198:	4619      	mov	r1, r3
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	f002 f916 	bl	800a3cc <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	2200      	movs	r2, #0
 80081a4:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	7b5b      	ldrb	r3, [r3, #13]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d00e      	beq.n	80081cc <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	7b5b      	ldrb	r3, [r3, #13]
 80081b2:	4619      	mov	r1, r3
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f002 f8d8 	bl	800a36a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	7b5b      	ldrb	r3, [r3, #13]
 80081be:	4619      	mov	r1, r3
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f002 f903 	bl	800a3cc <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	2200      	movs	r2, #0
 80081ca:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80081d2:	69db      	ldr	r3, [r3, #28]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d00b      	beq.n	80081f0 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80081de:	69db      	ldr	r3, [r3, #28]
 80081e0:	4618      	mov	r0, r3
 80081e2:	f005 fc59 	bl	800da98 <free>
    phost->pActiveClass->pData = 0U;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80081ec:	2200      	movs	r2, #0
 80081ee:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80081f0:	2300      	movs	r3, #0
}
 80081f2:	4618      	mov	r0, r3
 80081f4:	3710      	adds	r7, #16
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}

080081fa <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80081fa:	b580      	push	{r7, lr}
 80081fc:	b084      	sub	sp, #16
 80081fe:	af00      	add	r7, sp, #0
 8008200:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008208:	69db      	ldr	r3, [r3, #28]
 800820a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	3340      	adds	r3, #64	@ 0x40
 8008210:	4619      	mov	r1, r3
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f000 f8b1 	bl	800837a <GetLineCoding>
 8008218:	4603      	mov	r3, r0
 800821a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800821c:	7afb      	ldrb	r3, [r7, #11]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d105      	bne.n	800822e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008228:	2102      	movs	r1, #2
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800822e:	7afb      	ldrb	r3, [r7, #11]
}
 8008230:	4618      	mov	r0, r3
 8008232:	3710      	adds	r7, #16
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}

08008238 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b084      	sub	sp, #16
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008240:	2301      	movs	r3, #1
 8008242:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8008244:	2300      	movs	r3, #0
 8008246:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800824e:	69db      	ldr	r3, [r3, #28]
 8008250:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8008252:	68bb      	ldr	r3, [r7, #8]
 8008254:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8008258:	2b04      	cmp	r3, #4
 800825a:	d877      	bhi.n	800834c <USBH_CDC_Process+0x114>
 800825c:	a201      	add	r2, pc, #4	@ (adr r2, 8008264 <USBH_CDC_Process+0x2c>)
 800825e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008262:	bf00      	nop
 8008264:	08008279 	.word	0x08008279
 8008268:	0800827f 	.word	0x0800827f
 800826c:	080082af 	.word	0x080082af
 8008270:	08008323 	.word	0x08008323
 8008274:	08008331 	.word	0x08008331
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8008278:	2300      	movs	r3, #0
 800827a:	73fb      	strb	r3, [r7, #15]
      break;
 800827c:	e06d      	b.n	800835a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008282:	4619      	mov	r1, r3
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f000 f897 	bl	80083b8 <SetLineCoding>
 800828a:	4603      	mov	r3, r0
 800828c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800828e:	7bbb      	ldrb	r3, [r7, #14]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d104      	bne.n	800829e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	2202      	movs	r2, #2
 8008298:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800829c:	e058      	b.n	8008350 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800829e:	7bbb      	ldrb	r3, [r7, #14]
 80082a0:	2b01      	cmp	r3, #1
 80082a2:	d055      	beq.n	8008350 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	2204      	movs	r2, #4
 80082a8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80082ac:	e050      	b.n	8008350 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80082ae:	68bb      	ldr	r3, [r7, #8]
 80082b0:	3340      	adds	r3, #64	@ 0x40
 80082b2:	4619      	mov	r1, r3
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	f000 f860 	bl	800837a <GetLineCoding>
 80082ba:	4603      	mov	r3, r0
 80082bc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80082be:	7bbb      	ldrb	r3, [r7, #14]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d126      	bne.n	8008312 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	2200      	movs	r2, #0
 80082c8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 80082d2:	68bb      	ldr	r3, [r7, #8]
 80082d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80082d6:	791b      	ldrb	r3, [r3, #4]
 80082d8:	429a      	cmp	r2, r3
 80082da:	d13b      	bne.n	8008354 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 80082e2:	68bb      	ldr	r3, [r7, #8]
 80082e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80082e6:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80082e8:	429a      	cmp	r2, r3
 80082ea:	d133      	bne.n	8008354 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80082ec:	68bb      	ldr	r3, [r7, #8]
 80082ee:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 80082f2:	68bb      	ldr	r3, [r7, #8]
 80082f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80082f6:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80082f8:	429a      	cmp	r2, r3
 80082fa:	d12b      	bne.n	8008354 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008304:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008306:	429a      	cmp	r2, r3
 8008308:	d124      	bne.n	8008354 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f000 f982 	bl	8008614 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008310:	e020      	b.n	8008354 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8008312:	7bbb      	ldrb	r3, [r7, #14]
 8008314:	2b01      	cmp	r3, #1
 8008316:	d01d      	beq.n	8008354 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	2204      	movs	r2, #4
 800831c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8008320:	e018      	b.n	8008354 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	f000 f867 	bl	80083f6 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	f000 f8f6 	bl	800851a <CDC_ProcessReception>
      break;
 800832e:	e014      	b.n	800835a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8008330:	2100      	movs	r1, #0
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f001 f984 	bl	8009640 <USBH_ClrFeature>
 8008338:	4603      	mov	r3, r0
 800833a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800833c:	7bbb      	ldrb	r3, [r7, #14]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d10a      	bne.n	8008358 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	2200      	movs	r2, #0
 8008346:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 800834a:	e005      	b.n	8008358 <USBH_CDC_Process+0x120>

    default:
      break;
 800834c:	bf00      	nop
 800834e:	e004      	b.n	800835a <USBH_CDC_Process+0x122>
      break;
 8008350:	bf00      	nop
 8008352:	e002      	b.n	800835a <USBH_CDC_Process+0x122>
      break;
 8008354:	bf00      	nop
 8008356:	e000      	b.n	800835a <USBH_CDC_Process+0x122>
      break;
 8008358:	bf00      	nop

  }

  return status;
 800835a:	7bfb      	ldrb	r3, [r7, #15]
}
 800835c:	4618      	mov	r0, r3
 800835e:	3710      	adds	r7, #16
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}

08008364 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8008364:	b480      	push	{r7}
 8008366:	b083      	sub	sp, #12
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800836c:	2300      	movs	r3, #0
}
 800836e:	4618      	mov	r0, r3
 8008370:	370c      	adds	r7, #12
 8008372:	46bd      	mov	sp, r7
 8008374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008378:	4770      	bx	lr

0800837a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800837a:	b580      	push	{r7, lr}
 800837c:	b082      	sub	sp, #8
 800837e:	af00      	add	r7, sp, #0
 8008380:	6078      	str	r0, [r7, #4]
 8008382:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	22a1      	movs	r2, #161	@ 0xa1
 8008388:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2221      	movs	r2, #33	@ 0x21
 800838e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2200      	movs	r2, #0
 8008394:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2200      	movs	r2, #0
 800839a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2207      	movs	r2, #7
 80083a0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	2207      	movs	r2, #7
 80083a6:	4619      	mov	r1, r3
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	f001 fc7e 	bl	8009caa <USBH_CtlReq>
 80083ae:	4603      	mov	r3, r0
}
 80083b0:	4618      	mov	r0, r3
 80083b2:	3708      	adds	r7, #8
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bd80      	pop	{r7, pc}

080083b8 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b082      	sub	sp, #8
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
 80083c0:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2221      	movs	r2, #33	@ 0x21
 80083c6:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2220      	movs	r2, #32
 80083cc:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	2200      	movs	r2, #0
 80083d2:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2200      	movs	r2, #0
 80083d8:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2207      	movs	r2, #7
 80083de:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	2207      	movs	r2, #7
 80083e4:	4619      	mov	r1, r3
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f001 fc5f 	bl	8009caa <USBH_CtlReq>
 80083ec:	4603      	mov	r3, r0
}
 80083ee:	4618      	mov	r0, r3
 80083f0:	3708      	adds	r7, #8
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd80      	pop	{r7, pc}

080083f6 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80083f6:	b580      	push	{r7, lr}
 80083f8:	b086      	sub	sp, #24
 80083fa:	af02      	add	r7, sp, #8
 80083fc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008404:	69db      	ldr	r3, [r3, #28]
 8008406:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008408:	2300      	movs	r3, #0
 800840a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8008412:	2b01      	cmp	r3, #1
 8008414:	d002      	beq.n	800841c <CDC_ProcessTransmission+0x26>
 8008416:	2b02      	cmp	r3, #2
 8008418:	d023      	beq.n	8008462 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800841a:	e07a      	b.n	8008512 <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008420:	68fa      	ldr	r2, [r7, #12]
 8008422:	8b12      	ldrh	r2, [r2, #24]
 8008424:	4293      	cmp	r3, r2
 8008426:	d90b      	bls.n	8008440 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	69d9      	ldr	r1, [r3, #28]
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	8b1a      	ldrh	r2, [r3, #24]
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	7b5b      	ldrb	r3, [r3, #13]
 8008434:	2001      	movs	r0, #1
 8008436:	9000      	str	r0, [sp, #0]
 8008438:	6878      	ldr	r0, [r7, #4]
 800843a:	f001 ff34 	bl	800a2a6 <USBH_BulkSendData>
 800843e:	e00b      	b.n	8008458 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8008448:	b29a      	uxth	r2, r3
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	7b5b      	ldrb	r3, [r3, #13]
 800844e:	2001      	movs	r0, #1
 8008450:	9000      	str	r0, [sp, #0]
 8008452:	6878      	ldr	r0, [r7, #4]
 8008454:	f001 ff27 	bl	800a2a6 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	2202      	movs	r2, #2
 800845c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8008460:	e057      	b.n	8008512 <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	7b5b      	ldrb	r3, [r3, #13]
 8008466:	4619      	mov	r1, r3
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	f005 fa5d 	bl	800d928 <USBH_LL_GetURBState>
 800846e:	4603      	mov	r3, r0
 8008470:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8008472:	7afb      	ldrb	r3, [r7, #11]
 8008474:	2b01      	cmp	r3, #1
 8008476:	d136      	bne.n	80084e6 <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800847c:	68fa      	ldr	r2, [r7, #12]
 800847e:	8b12      	ldrh	r2, [r2, #24]
 8008480:	4293      	cmp	r3, r2
 8008482:	d90e      	bls.n	80084a2 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008488:	68fa      	ldr	r2, [r7, #12]
 800848a:	8b12      	ldrh	r2, [r2, #24]
 800848c:	1a9a      	subs	r2, r3, r2
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	69db      	ldr	r3, [r3, #28]
 8008496:	68fa      	ldr	r2, [r7, #12]
 8008498:	8b12      	ldrh	r2, [r2, #24]
 800849a:	441a      	add	r2, r3
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	61da      	str	r2, [r3, #28]
 80084a0:	e002      	b.n	80084a8 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	2200      	movs	r2, #0
 80084a6:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d004      	beq.n	80084ba <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	2201      	movs	r2, #1
 80084b4:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 80084b8:	e006      	b.n	80084c8 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	2200      	movs	r2, #0
 80084be:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f000 f892 	bl	80085ec <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2204      	movs	r2, #4
 80084cc:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80084dc:	2300      	movs	r3, #0
 80084de:	2200      	movs	r2, #0
 80084e0:	f002 f964 	bl	800a7ac <osMessageQueuePut>
      break;
 80084e4:	e014      	b.n	8008510 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 80084e6:	7afb      	ldrb	r3, [r7, #11]
 80084e8:	2b02      	cmp	r3, #2
 80084ea:	d111      	bne.n	8008510 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	2201      	movs	r2, #1
 80084f0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2204      	movs	r2, #4
 80084f8:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008508:	2300      	movs	r3, #0
 800850a:	2200      	movs	r2, #0
 800850c:	f002 f94e 	bl	800a7ac <osMessageQueuePut>
      break;
 8008510:	bf00      	nop
  }
}
 8008512:	bf00      	nop
 8008514:	3710      	adds	r7, #16
 8008516:	46bd      	mov	sp, r7
 8008518:	bd80      	pop	{r7, pc}

0800851a <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800851a:	b580      	push	{r7, lr}
 800851c:	b086      	sub	sp, #24
 800851e:	af00      	add	r7, sp, #0
 8008520:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008528:	69db      	ldr	r3, [r3, #28]
 800852a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800852c:	2300      	movs	r3, #0
 800852e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8008530:	697b      	ldr	r3, [r7, #20]
 8008532:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8008536:	2b03      	cmp	r3, #3
 8008538:	d002      	beq.n	8008540 <CDC_ProcessReception+0x26>
 800853a:	2b04      	cmp	r3, #4
 800853c:	d00e      	beq.n	800855c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800853e:	e051      	b.n	80085e4 <CDC_ProcessReception+0xca>
      (void)USBH_BulkReceiveData(phost,
 8008540:	697b      	ldr	r3, [r7, #20]
 8008542:	6a19      	ldr	r1, [r3, #32]
 8008544:	697b      	ldr	r3, [r7, #20]
 8008546:	8b5a      	ldrh	r2, [r3, #26]
 8008548:	697b      	ldr	r3, [r7, #20]
 800854a:	7b1b      	ldrb	r3, [r3, #12]
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f001 fecf 	bl	800a2f0 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8008552:	697b      	ldr	r3, [r7, #20]
 8008554:	2204      	movs	r2, #4
 8008556:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800855a:	e043      	b.n	80085e4 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800855c:	697b      	ldr	r3, [r7, #20]
 800855e:	7b1b      	ldrb	r3, [r3, #12]
 8008560:	4619      	mov	r1, r3
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	f005 f9e0 	bl	800d928 <USBH_LL_GetURBState>
 8008568:	4603      	mov	r3, r0
 800856a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800856c:	7cfb      	ldrb	r3, [r7, #19]
 800856e:	2b01      	cmp	r3, #1
 8008570:	d137      	bne.n	80085e2 <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8008572:	697b      	ldr	r3, [r7, #20]
 8008574:	7b1b      	ldrb	r3, [r3, #12]
 8008576:	4619      	mov	r1, r3
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f005 f943 	bl	800d804 <USBH_LL_GetLastXferSize>
 800857e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8008580:	697b      	ldr	r3, [r7, #20]
 8008582:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008584:	68fa      	ldr	r2, [r7, #12]
 8008586:	429a      	cmp	r2, r3
 8008588:	d016      	beq.n	80085b8 <CDC_ProcessReception+0x9e>
 800858a:	697b      	ldr	r3, [r7, #20]
 800858c:	8b5b      	ldrh	r3, [r3, #26]
 800858e:	461a      	mov	r2, r3
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	4293      	cmp	r3, r2
 8008594:	d910      	bls.n	80085b8 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8008596:	697b      	ldr	r3, [r7, #20]
 8008598:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	1ad2      	subs	r2, r2, r3
 800859e:	697b      	ldr	r3, [r7, #20]
 80085a0:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 80085a2:	697b      	ldr	r3, [r7, #20]
 80085a4:	6a1a      	ldr	r2, [r3, #32]
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	441a      	add	r2, r3
 80085aa:	697b      	ldr	r3, [r7, #20]
 80085ac:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80085ae:	697b      	ldr	r3, [r7, #20]
 80085b0:	2203      	movs	r2, #3
 80085b2:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
 80085b6:	e006      	b.n	80085c6 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80085b8:	697b      	ldr	r3, [r7, #20]
 80085ba:	2200      	movs	r2, #0
 80085bc:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	f000 f81d 	bl	8008600 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2204      	movs	r2, #4
 80085ca:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80085da:	2300      	movs	r3, #0
 80085dc:	2200      	movs	r2, #0
 80085de:	f002 f8e5 	bl	800a7ac <osMessageQueuePut>
      break;
 80085e2:	bf00      	nop
  }
}
 80085e4:	bf00      	nop
 80085e6:	3718      	adds	r7, #24
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}

080085ec <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80085ec:	b480      	push	{r7}
 80085ee:	b083      	sub	sp, #12
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80085f4:	bf00      	nop
 80085f6:	370c      	adds	r7, #12
 80085f8:	46bd      	mov	sp, r7
 80085fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fe:	4770      	bx	lr

08008600 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8008600:	b480      	push	{r7}
 8008602:	b083      	sub	sp, #12
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008608:	bf00      	nop
 800860a:	370c      	adds	r7, #12
 800860c:	46bd      	mov	sp, r7
 800860e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008612:	4770      	bx	lr

08008614 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8008614:	b480      	push	{r7}
 8008616:	b083      	sub	sp, #12
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800861c:	bf00      	nop
 800861e:	370c      	adds	r7, #12
 8008620:	46bd      	mov	sp, r7
 8008622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008626:	4770      	bx	lr

08008628 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b084      	sub	sp, #16
 800862c:	af00      	add	r7, sp, #0
 800862e:	60f8      	str	r0, [r7, #12]
 8008630:	60b9      	str	r1, [r7, #8]
 8008632:	4613      	mov	r3, r2
 8008634:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d101      	bne.n	8008640 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800863c:	2302      	movs	r3, #2
 800863e:	e044      	b.n	80086ca <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	79fa      	ldrb	r2, [r7, #7]
 8008644:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	2200      	movs	r2, #0
 800864c:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	2200      	movs	r2, #0
 8008654:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8008658:	68f8      	ldr	r0, [r7, #12]
 800865a:	f000 f841 	bl	80086e0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	2200      	movs	r2, #0
 8008662:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	2200      	movs	r2, #0
 800866a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	2200      	movs	r2, #0
 8008672:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	2200      	movs	r2, #0
 800867a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800867e:	68bb      	ldr	r3, [r7, #8]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d003      	beq.n	800868c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	68ba      	ldr	r2, [r7, #8]
 8008688:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 800868c:	2200      	movs	r2, #0
 800868e:	2104      	movs	r1, #4
 8008690:	2010      	movs	r0, #16
 8008692:	f002 f818 	bl	800a6c6 <osMessageQueueNew>
 8008696:	4602      	mov	r2, r0
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	f8c3 23d8 	str.w	r2, [r3, #984]	@ 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 800869e:	4b0d      	ldr	r3, [pc, #52]	@ (80086d4 <USBH_Init+0xac>)
 80086a0:	4a0d      	ldr	r2, [pc, #52]	@ (80086d8 <USBH_Init+0xb0>)
 80086a2:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 80086a4:	4b0b      	ldr	r3, [pc, #44]	@ (80086d4 <USBH_Init+0xac>)
 80086a6:	2280      	movs	r2, #128	@ 0x80
 80086a8:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 80086aa:	4b0a      	ldr	r3, [pc, #40]	@ (80086d4 <USBH_Init+0xac>)
 80086ac:	2218      	movs	r2, #24
 80086ae:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 80086b0:	4a08      	ldr	r2, [pc, #32]	@ (80086d4 <USBH_Init+0xac>)
 80086b2:	68f9      	ldr	r1, [r7, #12]
 80086b4:	4809      	ldr	r0, [pc, #36]	@ (80086dc <USBH_Init+0xb4>)
 80086b6:	f001 ff59 	bl	800a56c <osThreadNew>
 80086ba:	4602      	mov	r2, r0
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	f8c3 23dc 	str.w	r2, [r3, #988]	@ 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80086c2:	68f8      	ldr	r0, [r7, #12]
 80086c4:	f004 ffe0 	bl	800d688 <USBH_LL_Init>

  return USBH_OK;
 80086c8:	2300      	movs	r3, #0
}
 80086ca:	4618      	mov	r0, r3
 80086cc:	3710      	adds	r7, #16
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd80      	pop	{r7, pc}
 80086d2:	bf00      	nop
 80086d4:	2000035c 	.word	0x2000035c
 80086d8:	0800de1c 	.word	0x0800de1c
 80086dc:	08009391 	.word	0x08009391

080086e0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b084      	sub	sp, #16
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80086e8:	2300      	movs	r3, #0
 80086ea:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80086ec:	2300      	movs	r3, #0
 80086ee:	60fb      	str	r3, [r7, #12]
 80086f0:	e009      	b.n	8008706 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80086f2:	687a      	ldr	r2, [r7, #4]
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	33e0      	adds	r3, #224	@ 0xe0
 80086f8:	009b      	lsls	r3, r3, #2
 80086fa:	4413      	add	r3, r2
 80086fc:	2200      	movs	r2, #0
 80086fe:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	3301      	adds	r3, #1
 8008704:	60fb      	str	r3, [r7, #12]
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	2b0f      	cmp	r3, #15
 800870a:	d9f2      	bls.n	80086f2 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800870c:	2300      	movs	r3, #0
 800870e:	60fb      	str	r3, [r7, #12]
 8008710:	e009      	b.n	8008726 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8008712:	687a      	ldr	r2, [r7, #4]
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	4413      	add	r3, r2
 8008718:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800871c:	2200      	movs	r2, #0
 800871e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	3301      	adds	r3, #1
 8008724:	60fb      	str	r3, [r7, #12]
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800872c:	d3f1      	bcc.n	8008712 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2200      	movs	r2, #0
 8008732:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2200      	movs	r2, #0
 8008738:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2201      	movs	r2, #1
 800873e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2200      	movs	r2, #0
 8008744:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2201      	movs	r2, #1
 800874c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2240      	movs	r2, #64	@ 0x40
 8008752:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2200      	movs	r2, #0
 8008758:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2200      	movs	r2, #0
 800875e:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2201      	movs	r2, #1
 8008766:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2200      	movs	r2, #0
 800876e:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2200      	movs	r2, #0
 8008776:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	331c      	adds	r3, #28
 800877e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008782:	2100      	movs	r1, #0
 8008784:	4618      	mov	r0, r3
 8008786:	f005 fa3d 	bl	800dc04 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008790:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008794:	2100      	movs	r1, #0
 8008796:	4618      	mov	r0, r3
 8008798:	f005 fa34 	bl	800dc04 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f203 3326 	addw	r3, r3, #806	@ 0x326
 80087a2:	2212      	movs	r2, #18
 80087a4:	2100      	movs	r1, #0
 80087a6:	4618      	mov	r0, r3
 80087a8:	f005 fa2c 	bl	800dc04 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80087b2:	223e      	movs	r2, #62	@ 0x3e
 80087b4:	2100      	movs	r1, #0
 80087b6:	4618      	mov	r0, r3
 80087b8:	f005 fa24 	bl	800dc04 <memset>

  return USBH_OK;
 80087bc:	2300      	movs	r3, #0
}
 80087be:	4618      	mov	r0, r3
 80087c0:	3710      	adds	r7, #16
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}

080087c6 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80087c6:	b480      	push	{r7}
 80087c8:	b085      	sub	sp, #20
 80087ca:	af00      	add	r7, sp, #0
 80087cc:	6078      	str	r0, [r7, #4]
 80087ce:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80087d0:	2300      	movs	r3, #0
 80087d2:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d016      	beq.n	8008808 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d10e      	bne.n	8008802 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80087ea:	1c59      	adds	r1, r3, #1
 80087ec:	687a      	ldr	r2, [r7, #4]
 80087ee:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 80087f2:	687a      	ldr	r2, [r7, #4]
 80087f4:	33de      	adds	r3, #222	@ 0xde
 80087f6:	6839      	ldr	r1, [r7, #0]
 80087f8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80087fc:	2300      	movs	r3, #0
 80087fe:	73fb      	strb	r3, [r7, #15]
 8008800:	e004      	b.n	800880c <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8008802:	2302      	movs	r3, #2
 8008804:	73fb      	strb	r3, [r7, #15]
 8008806:	e001      	b.n	800880c <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8008808:	2302      	movs	r3, #2
 800880a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800880c:	7bfb      	ldrb	r3, [r7, #15]
}
 800880e:	4618      	mov	r0, r3
 8008810:	3714      	adds	r7, #20
 8008812:	46bd      	mov	sp, r7
 8008814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008818:	4770      	bx	lr

0800881a <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800881a:	b480      	push	{r7}
 800881c:	b085      	sub	sp, #20
 800881e:	af00      	add	r7, sp, #0
 8008820:	6078      	str	r0, [r7, #4]
 8008822:	460b      	mov	r3, r1
 8008824:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8008826:	2300      	movs	r3, #0
 8008828:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8008830:	78fa      	ldrb	r2, [r7, #3]
 8008832:	429a      	cmp	r2, r3
 8008834:	d204      	bcs.n	8008840 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	78fa      	ldrb	r2, [r7, #3]
 800883a:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800883e:	e001      	b.n	8008844 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8008840:	2302      	movs	r3, #2
 8008842:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008844:	7bfb      	ldrb	r3, [r7, #15]
}
 8008846:	4618      	mov	r0, r3
 8008848:	3714      	adds	r7, #20
 800884a:	46bd      	mov	sp, r7
 800884c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008850:	4770      	bx	lr

08008852 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008852:	b480      	push	{r7}
 8008854:	b087      	sub	sp, #28
 8008856:	af00      	add	r7, sp, #0
 8008858:	6078      	str	r0, [r7, #4]
 800885a:	4608      	mov	r0, r1
 800885c:	4611      	mov	r1, r2
 800885e:	461a      	mov	r2, r3
 8008860:	4603      	mov	r3, r0
 8008862:	70fb      	strb	r3, [r7, #3]
 8008864:	460b      	mov	r3, r1
 8008866:	70bb      	strb	r3, [r7, #2]
 8008868:	4613      	mov	r3, r2
 800886a:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800886c:	2300      	movs	r3, #0
 800886e:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008870:	2300      	movs	r3, #0
 8008872:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800887a:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800887c:	e025      	b.n	80088ca <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800887e:	7dfb      	ldrb	r3, [r7, #23]
 8008880:	221a      	movs	r2, #26
 8008882:	fb02 f303 	mul.w	r3, r2, r3
 8008886:	3308      	adds	r3, #8
 8008888:	68fa      	ldr	r2, [r7, #12]
 800888a:	4413      	add	r3, r2
 800888c:	3302      	adds	r3, #2
 800888e:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008890:	693b      	ldr	r3, [r7, #16]
 8008892:	795b      	ldrb	r3, [r3, #5]
 8008894:	78fa      	ldrb	r2, [r7, #3]
 8008896:	429a      	cmp	r2, r3
 8008898:	d002      	beq.n	80088a0 <USBH_FindInterface+0x4e>
 800889a:	78fb      	ldrb	r3, [r7, #3]
 800889c:	2bff      	cmp	r3, #255	@ 0xff
 800889e:	d111      	bne.n	80088c4 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80088a0:	693b      	ldr	r3, [r7, #16]
 80088a2:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80088a4:	78ba      	ldrb	r2, [r7, #2]
 80088a6:	429a      	cmp	r2, r3
 80088a8:	d002      	beq.n	80088b0 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80088aa:	78bb      	ldrb	r3, [r7, #2]
 80088ac:	2bff      	cmp	r3, #255	@ 0xff
 80088ae:	d109      	bne.n	80088c4 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80088b0:	693b      	ldr	r3, [r7, #16]
 80088b2:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80088b4:	787a      	ldrb	r2, [r7, #1]
 80088b6:	429a      	cmp	r2, r3
 80088b8:	d002      	beq.n	80088c0 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80088ba:	787b      	ldrb	r3, [r7, #1]
 80088bc:	2bff      	cmp	r3, #255	@ 0xff
 80088be:	d101      	bne.n	80088c4 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80088c0:	7dfb      	ldrb	r3, [r7, #23]
 80088c2:	e006      	b.n	80088d2 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80088c4:	7dfb      	ldrb	r3, [r7, #23]
 80088c6:	3301      	adds	r3, #1
 80088c8:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80088ca:	7dfb      	ldrb	r3, [r7, #23]
 80088cc:	2b01      	cmp	r3, #1
 80088ce:	d9d6      	bls.n	800887e <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80088d0:	23ff      	movs	r3, #255	@ 0xff
}
 80088d2:	4618      	mov	r0, r3
 80088d4:	371c      	adds	r7, #28
 80088d6:	46bd      	mov	sp, r7
 80088d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088dc:	4770      	bx	lr

080088de <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 80088de:	b580      	push	{r7, lr}
 80088e0:	b082      	sub	sp, #8
 80088e2:	af00      	add	r7, sp, #0
 80088e4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f004 ff14 	bl	800d714 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80088ec:	2101      	movs	r1, #1
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f005 f82d 	bl	800d94e <USBH_LL_DriverVBUS>

  return USBH_OK;
 80088f4:	2300      	movs	r3, #0
}
 80088f6:	4618      	mov	r0, r3
 80088f8:	3708      	adds	r7, #8
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bd80      	pop	{r7, pc}
	...

08008900 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b088      	sub	sp, #32
 8008904:	af04      	add	r7, sp, #16
 8008906:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008908:	2302      	movs	r3, #2
 800890a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800890c:	2300      	movs	r3, #0
 800890e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8008916:	b2db      	uxtb	r3, r3
 8008918:	2b01      	cmp	r3, #1
 800891a:	d102      	bne.n	8008922 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2203      	movs	r2, #3
 8008920:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	781b      	ldrb	r3, [r3, #0]
 8008926:	b2db      	uxtb	r3, r3
 8008928:	2b0b      	cmp	r3, #11
 800892a:	f200 8244 	bhi.w	8008db6 <USBH_Process+0x4b6>
 800892e:	a201      	add	r2, pc, #4	@ (adr r2, 8008934 <USBH_Process+0x34>)
 8008930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008934:	08008965 	.word	0x08008965
 8008938:	080089b3 	.word	0x080089b3
 800893c:	08008a37 	.word	0x08008a37
 8008940:	08008d35 	.word	0x08008d35
 8008944:	08008db7 	.word	0x08008db7
 8008948:	08008af3 	.word	0x08008af3
 800894c:	08008cbf 	.word	0x08008cbf
 8008950:	08008b45 	.word	0x08008b45
 8008954:	08008b81 	.word	0x08008b81
 8008958:	08008bb9 	.word	0x08008bb9
 800895c:	08008c17 	.word	0x08008c17
 8008960:	08008d1d 	.word	0x08008d1d
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800896a:	b2db      	uxtb	r3, r3
 800896c:	2b00      	cmp	r3, #0
 800896e:	f000 8224 	beq.w	8008dba <USBH_Process+0x4ba>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2201      	movs	r2, #1
 8008976:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008978:	20c8      	movs	r0, #200	@ 0xc8
 800897a:	f005 f832 	bl	800d9e2 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f004 ff25 	bl	800d7ce <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2200      	movs	r2, #0
 8008988:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2200      	movs	r2, #0
 8008990:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2201      	movs	r2, #1
 8008998:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80089a8:	2300      	movs	r3, #0
 80089aa:	2200      	movs	r2, #0
 80089ac:	f001 fefe 	bl	800a7ac <osMessageQueuePut>
#endif
#endif
      }
      break;
 80089b0:	e203      	b.n	8008dba <USBH_Process+0x4ba>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 80089b8:	2b01      	cmp	r3, #1
 80089ba:	d107      	bne.n	80089cc <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2200      	movs	r2, #0
 80089c0:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2202      	movs	r2, #2
 80089c8:	701a      	strb	r2, [r3, #0]
 80089ca:	e025      	b.n	8008a18 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 80089d2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80089d6:	d914      	bls.n	8008a02 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80089de:	3301      	adds	r3, #1
 80089e0:	b2da      	uxtb	r2, r3
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80089ee:	2b03      	cmp	r3, #3
 80089f0:	d903      	bls.n	80089fa <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	220d      	movs	r2, #13
 80089f6:	701a      	strb	r2, [r3, #0]
 80089f8:	e00e      	b.n	8008a18 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2200      	movs	r2, #0
 80089fe:	701a      	strb	r2, [r3, #0]
 8008a00:	e00a      	b.n	8008a18 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8008a08:	f103 020a 	add.w	r2, r3, #10
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8008a12:	200a      	movs	r0, #10
 8008a14:	f004 ffe5 	bl	800d9e2 <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2201      	movs	r2, #1
 8008a1c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	2200      	movs	r2, #0
 8008a30:	f001 febc 	bl	800a7ac <osMessageQueuePut>
#endif
#endif
      break;
 8008a34:	e1c8      	b.n	8008dc8 <USBH_Process+0x4c8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d005      	beq.n	8008a4c <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008a46:	2104      	movs	r1, #4
 8008a48:	6878      	ldr	r0, [r7, #4]
 8008a4a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008a4c:	2064      	movs	r0, #100	@ 0x64
 8008a4e:	f004 ffc8 	bl	800d9e2 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	f004 fe94 	bl	800d780 <USBH_LL_GetSpeed>
 8008a58:	4603      	mov	r3, r0
 8008a5a:	461a      	mov	r2, r3
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2205      	movs	r2, #5
 8008a66:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8008a68:	2100      	movs	r1, #0
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f001 fc8d 	bl	800a38a <USBH_AllocPipe>
 8008a70:	4603      	mov	r3, r0
 8008a72:	461a      	mov	r2, r3
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008a78:	2180      	movs	r1, #128	@ 0x80
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	f001 fc85 	bl	800a38a <USBH_AllocPipe>
 8008a80:	4603      	mov	r3, r0
 8008a82:	461a      	mov	r2, r3
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	7919      	ldrb	r1, [r3, #4]
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008a98:	687a      	ldr	r2, [r7, #4]
 8008a9a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008a9c:	9202      	str	r2, [sp, #8]
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	9201      	str	r2, [sp, #4]
 8008aa2:	9300      	str	r3, [sp, #0]
 8008aa4:	4603      	mov	r3, r0
 8008aa6:	2280      	movs	r2, #128	@ 0x80
 8008aa8:	6878      	ldr	r0, [r7, #4]
 8008aaa:	f001 fc3f 	bl	800a32c <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	7959      	ldrb	r1, [r3, #5]
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008abe:	687a      	ldr	r2, [r7, #4]
 8008ac0:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008ac2:	9202      	str	r2, [sp, #8]
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	9201      	str	r2, [sp, #4]
 8008ac8:	9300      	str	r3, [sp, #0]
 8008aca:	4603      	mov	r3, r0
 8008acc:	2200      	movs	r2, #0
 8008ace:	6878      	ldr	r0, [r7, #4]
 8008ad0:	f001 fc2c 	bl	800a32c <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2201      	movs	r2, #1
 8008ad8:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008ae8:	2300      	movs	r3, #0
 8008aea:	2200      	movs	r2, #0
 8008aec:	f001 fe5e 	bl	800a7ac <osMessageQueuePut>
#endif
#endif
      break;
 8008af0:	e16a      	b.n	8008dc8 <USBH_Process+0x4c8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	f000 f96e 	bl	8008dd4 <USBH_HandleEnum>
 8008af8:	4603      	mov	r3, r0
 8008afa:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008afc:	7bbb      	ldrb	r3, [r7, #14]
 8008afe:	b2db      	uxtb	r3, r3
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	f040 815c 	bne.w	8008dbe <USBH_Process+0x4be>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2200      	movs	r2, #0
 8008b0a:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8008b14:	2b01      	cmp	r3, #1
 8008b16:	d103      	bne.n	8008b20 <USBH_Process+0x220>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2208      	movs	r2, #8
 8008b1c:	701a      	strb	r2, [r3, #0]
 8008b1e:	e002      	b.n	8008b26 <USBH_Process+0x226>
        }
        else
        {
          phost->gState = HOST_INPUT;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2207      	movs	r2, #7
 8008b24:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2205      	movs	r2, #5
 8008b2a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	f001 fe35 	bl	800a7ac <osMessageQueuePut>
#endif
#endif
      }
      break;
 8008b42:	e13c      	b.n	8008dbe <USBH_Process+0x4be>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	f000 8139 	beq.w	8008dc2 <USBH_Process+0x4c2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008b56:	2101      	movs	r1, #1
 8008b58:	6878      	ldr	r0, [r7, #4]
 8008b5a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2208      	movs	r2, #8
 8008b60:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2205      	movs	r2, #5
 8008b66:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008b76:	2300      	movs	r3, #0
 8008b78:	2200      	movs	r2, #0
 8008b7a:	f001 fe17 	bl	800a7ac <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 8008b7e:	e120      	b.n	8008dc2 <USBH_Process+0x4c2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8008b86:	4619      	mov	r1, r3
 8008b88:	6878      	ldr	r0, [r7, #4]
 8008b8a:	f000 fd12 	bl	80095b2 <USBH_SetCfg>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d102      	bne.n	8008b9a <USBH_Process+0x29a>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2209      	movs	r2, #9
 8008b98:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2201      	movs	r2, #1
 8008b9e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008bae:	2300      	movs	r3, #0
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	f001 fdfb 	bl	800a7ac <osMessageQueuePut>
#endif
#endif
      break;
 8008bb6:	e107      	b.n	8008dc8 <USBH_Process+0x4c8>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8008bbe:	f003 0320 	and.w	r3, r3, #32
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d015      	beq.n	8008bf2 <USBH_Process+0x2f2>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8008bc6:	2101      	movs	r1, #1
 8008bc8:	6878      	ldr	r0, [r7, #4]
 8008bca:	f000 fd15 	bl	80095f8 <USBH_SetFeature>
 8008bce:	4603      	mov	r3, r0
 8008bd0:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008bd2:	7bbb      	ldrb	r3, [r7, #14]
 8008bd4:	b2db      	uxtb	r3, r3
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d103      	bne.n	8008be2 <USBH_Process+0x2e2>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	220a      	movs	r2, #10
 8008bde:	701a      	strb	r2, [r3, #0]
 8008be0:	e00a      	b.n	8008bf8 <USBH_Process+0x2f8>
        }
        else if (status == USBH_NOT_SUPPORTED)
 8008be2:	7bbb      	ldrb	r3, [r7, #14]
 8008be4:	b2db      	uxtb	r3, r3
 8008be6:	2b03      	cmp	r3, #3
 8008be8:	d106      	bne.n	8008bf8 <USBH_Process+0x2f8>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	220a      	movs	r2, #10
 8008bee:	701a      	strb	r2, [r3, #0]
 8008bf0:	e002      	b.n	8008bf8 <USBH_Process+0x2f8>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	220a      	movs	r2, #10
 8008bf6:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2201      	movs	r2, #1
 8008bfc:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	2200      	movs	r2, #0
 8008c10:	f001 fdcc 	bl	800a7ac <osMessageQueuePut>
#endif
#endif
      break;
 8008c14:	e0d8      	b.n	8008dc8 <USBH_Process+0x4c8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d03f      	beq.n	8008ca0 <USBH_Process+0x3a0>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2200      	movs	r2, #0
 8008c24:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008c28:	2300      	movs	r3, #0
 8008c2a:	73fb      	strb	r3, [r7, #15]
 8008c2c:	e016      	b.n	8008c5c <USBH_Process+0x35c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8008c2e:	7bfa      	ldrb	r2, [r7, #15]
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	32de      	adds	r2, #222	@ 0xde
 8008c34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c38:	791a      	ldrb	r2, [r3, #4]
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8008c40:	429a      	cmp	r2, r3
 8008c42:	d108      	bne.n	8008c56 <USBH_Process+0x356>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008c44:	7bfa      	ldrb	r2, [r7, #15]
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	32de      	adds	r2, #222	@ 0xde
 8008c4a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8008c54:	e005      	b.n	8008c62 <USBH_Process+0x362>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008c56:	7bfb      	ldrb	r3, [r7, #15]
 8008c58:	3301      	adds	r3, #1
 8008c5a:	73fb      	strb	r3, [r7, #15]
 8008c5c:	7bfb      	ldrb	r3, [r7, #15]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d0e5      	beq.n	8008c2e <USBH_Process+0x32e>
          }
        }

        if (phost->pActiveClass != NULL)
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d016      	beq.n	8008c9a <USBH_Process+0x39a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008c72:	689b      	ldr	r3, [r3, #8]
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	4798      	blx	r3
 8008c78:	4603      	mov	r3, r0
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d109      	bne.n	8008c92 <USBH_Process+0x392>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2206      	movs	r2, #6
 8008c82:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008c8a:	2103      	movs	r1, #3
 8008c8c:	6878      	ldr	r0, [r7, #4]
 8008c8e:	4798      	blx	r3
 8008c90:	e006      	b.n	8008ca0 <USBH_Process+0x3a0>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	220d      	movs	r2, #13
 8008c96:	701a      	strb	r2, [r3, #0]
 8008c98:	e002      	b.n	8008ca0 <USBH_Process+0x3a0>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	220d      	movs	r2, #13
 8008c9e:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2205      	movs	r2, #5
 8008ca4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	f001 fd78 	bl	800a7ac <osMessageQueuePut>
#endif
#endif
      break;
 8008cbc:	e084      	b.n	8008dc8 <USBH_Process+0x4c8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d017      	beq.n	8008cf8 <USBH_Process+0x3f8>
      {
        status = phost->pActiveClass->Requests(phost);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008cce:	691b      	ldr	r3, [r3, #16]
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	4798      	blx	r3
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008cd8:	7bbb      	ldrb	r3, [r7, #14]
 8008cda:	b2db      	uxtb	r3, r3
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d103      	bne.n	8008ce8 <USBH_Process+0x3e8>
        {
          phost->gState = HOST_CLASS;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	220b      	movs	r2, #11
 8008ce4:	701a      	strb	r2, [r3, #0]
 8008ce6:	e00a      	b.n	8008cfe <USBH_Process+0x3fe>
        }
        else if (status == USBH_FAIL)
 8008ce8:	7bbb      	ldrb	r3, [r7, #14]
 8008cea:	b2db      	uxtb	r3, r3
 8008cec:	2b02      	cmp	r3, #2
 8008cee:	d106      	bne.n	8008cfe <USBH_Process+0x3fe>
        {
          phost->gState = HOST_ABORT_STATE;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	220d      	movs	r2, #13
 8008cf4:	701a      	strb	r2, [r3, #0]
 8008cf6:	e002      	b.n	8008cfe <USBH_Process+0x3fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	220d      	movs	r2, #13
 8008cfc:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	2205      	movs	r2, #5
 8008d02:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008d12:	2300      	movs	r3, #0
 8008d14:	2200      	movs	r2, #0
 8008d16:	f001 fd49 	bl	800a7ac <osMessageQueuePut>
#endif
#endif
      break;
 8008d1a:	e055      	b.n	8008dc8 <USBH_Process+0x4c8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d04f      	beq.n	8008dc6 <USBH_Process+0x4c6>
      {
        phost->pActiveClass->BgndProcess(phost);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008d2c:	695b      	ldr	r3, [r3, #20]
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	4798      	blx	r3
      }
      break;
 8008d32:	e048      	b.n	8008dc6 <USBH_Process+0x4c6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2200      	movs	r2, #0
 8008d38:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	f7ff fccf 	bl	80086e0 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d009      	beq.n	8008d60 <USBH_Process+0x460>
      {
        phost->pActiveClass->DeInit(phost);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008d52:	68db      	ldr	r3, [r3, #12]
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d005      	beq.n	8008d76 <USBH_Process+0x476>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008d70:	2105      	movs	r1, #5
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8008d7c:	b2db      	uxtb	r3, r3
 8008d7e:	2b01      	cmp	r3, #1
 8008d80:	d107      	bne.n	8008d92 <USBH_Process+0x492>
      {
        phost->device.is_ReEnumerated = 0U;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2200      	movs	r2, #0
 8008d86:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	f7ff fda7 	bl	80088de <USBH_Start>
 8008d90:	e002      	b.n	8008d98 <USBH_Process+0x498>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f004 fcbe 	bl	800d714 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2201      	movs	r2, #1
 8008d9c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008dac:	2300      	movs	r3, #0
 8008dae:	2200      	movs	r2, #0
 8008db0:	f001 fcfc 	bl	800a7ac <osMessageQueuePut>
#endif
#endif
      break;
 8008db4:	e008      	b.n	8008dc8 <USBH_Process+0x4c8>

    case HOST_ABORT_STATE:
    default :
      break;
 8008db6:	bf00      	nop
 8008db8:	e006      	b.n	8008dc8 <USBH_Process+0x4c8>
      break;
 8008dba:	bf00      	nop
 8008dbc:	e004      	b.n	8008dc8 <USBH_Process+0x4c8>
      break;
 8008dbe:	bf00      	nop
 8008dc0:	e002      	b.n	8008dc8 <USBH_Process+0x4c8>
    break;
 8008dc2:	bf00      	nop
 8008dc4:	e000      	b.n	8008dc8 <USBH_Process+0x4c8>
      break;
 8008dc6:	bf00      	nop
  }
  return USBH_OK;
 8008dc8:	2300      	movs	r3, #0
}
 8008dca:	4618      	mov	r0, r3
 8008dcc:	3710      	adds	r7, #16
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}
 8008dd2:	bf00      	nop

08008dd4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b088      	sub	sp, #32
 8008dd8:	af04      	add	r7, sp, #16
 8008dda:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008ddc:	2301      	movs	r3, #1
 8008dde:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8008de0:	2301      	movs	r3, #1
 8008de2:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	785b      	ldrb	r3, [r3, #1]
 8008de8:	2b07      	cmp	r3, #7
 8008dea:	f200 8204 	bhi.w	80091f6 <USBH_HandleEnum+0x422>
 8008dee:	a201      	add	r2, pc, #4	@ (adr r2, 8008df4 <USBH_HandleEnum+0x20>)
 8008df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008df4:	08008e15 	.word	0x08008e15
 8008df8:	08008ecf 	.word	0x08008ecf
 8008dfc:	08008f39 	.word	0x08008f39
 8008e00:	08008fc3 	.word	0x08008fc3
 8008e04:	0800902d 	.word	0x0800902d
 8008e08:	0800909d 	.word	0x0800909d
 8008e0c:	08009139 	.word	0x08009139
 8008e10:	080091b7 	.word	0x080091b7
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008e14:	2108      	movs	r1, #8
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	f000 fae8 	bl	80093ec <USBH_Get_DevDesc>
 8008e1c:	4603      	mov	r3, r0
 8008e1e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008e20:	7bbb      	ldrb	r3, [r7, #14]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d12e      	bne.n	8008e84 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2201      	movs	r2, #1
 8008e34:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	7919      	ldrb	r1, [r3, #4]
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008e46:	687a      	ldr	r2, [r7, #4]
 8008e48:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008e4a:	9202      	str	r2, [sp, #8]
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	9201      	str	r2, [sp, #4]
 8008e50:	9300      	str	r3, [sp, #0]
 8008e52:	4603      	mov	r3, r0
 8008e54:	2280      	movs	r2, #128	@ 0x80
 8008e56:	6878      	ldr	r0, [r7, #4]
 8008e58:	f001 fa68 	bl	800a32c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	7959      	ldrb	r1, [r3, #5]
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008e6c:	687a      	ldr	r2, [r7, #4]
 8008e6e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008e70:	9202      	str	r2, [sp, #8]
 8008e72:	2200      	movs	r2, #0
 8008e74:	9201      	str	r2, [sp, #4]
 8008e76:	9300      	str	r3, [sp, #0]
 8008e78:	4603      	mov	r3, r0
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	6878      	ldr	r0, [r7, #4]
 8008e7e:	f001 fa55 	bl	800a32c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008e82:	e1ba      	b.n	80091fa <USBH_HandleEnum+0x426>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008e84:	7bbb      	ldrb	r3, [r7, #14]
 8008e86:	2b03      	cmp	r3, #3
 8008e88:	f040 81b7 	bne.w	80091fa <USBH_HandleEnum+0x426>
        phost->device.EnumCnt++;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008e92:	3301      	adds	r3, #1
 8008e94:	b2da      	uxtb	r2, r3
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008ea2:	2b03      	cmp	r3, #3
 8008ea4:	d903      	bls.n	8008eae <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	220d      	movs	r2, #13
 8008eaa:	701a      	strb	r2, [r3, #0]
      break;
 8008eac:	e1a5      	b.n	80091fa <USBH_HandleEnum+0x426>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	795b      	ldrb	r3, [r3, #5]
 8008eb2:	4619      	mov	r1, r3
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	f001 fa89 	bl	800a3cc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	791b      	ldrb	r3, [r3, #4]
 8008ebe:	4619      	mov	r1, r3
 8008ec0:	6878      	ldr	r0, [r7, #4]
 8008ec2:	f001 fa83 	bl	800a3cc <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2200      	movs	r2, #0
 8008eca:	701a      	strb	r2, [r3, #0]
      break;
 8008ecc:	e195      	b.n	80091fa <USBH_HandleEnum+0x426>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8008ece:	2112      	movs	r1, #18
 8008ed0:	6878      	ldr	r0, [r7, #4]
 8008ed2:	f000 fa8b 	bl	80093ec <USBH_Get_DevDesc>
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008eda:	7bbb      	ldrb	r3, [r7, #14]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d103      	bne.n	8008ee8 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2202      	movs	r2, #2
 8008ee4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008ee6:	e18a      	b.n	80091fe <USBH_HandleEnum+0x42a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008ee8:	7bbb      	ldrb	r3, [r7, #14]
 8008eea:	2b03      	cmp	r3, #3
 8008eec:	f040 8187 	bne.w	80091fe <USBH_HandleEnum+0x42a>
        phost->device.EnumCnt++;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008ef6:	3301      	adds	r3, #1
 8008ef8:	b2da      	uxtb	r2, r3
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008f06:	2b03      	cmp	r3, #3
 8008f08:	d903      	bls.n	8008f12 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	220d      	movs	r2, #13
 8008f0e:	701a      	strb	r2, [r3, #0]
      break;
 8008f10:	e175      	b.n	80091fe <USBH_HandleEnum+0x42a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	795b      	ldrb	r3, [r3, #5]
 8008f16:	4619      	mov	r1, r3
 8008f18:	6878      	ldr	r0, [r7, #4]
 8008f1a:	f001 fa57 	bl	800a3cc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	791b      	ldrb	r3, [r3, #4]
 8008f22:	4619      	mov	r1, r3
 8008f24:	6878      	ldr	r0, [r7, #4]
 8008f26:	f001 fa51 	bl	800a3cc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2200      	movs	r2, #0
 8008f34:	701a      	strb	r2, [r3, #0]
      break;
 8008f36:	e162      	b.n	80091fe <USBH_HandleEnum+0x42a>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8008f38:	2101      	movs	r1, #1
 8008f3a:	6878      	ldr	r0, [r7, #4]
 8008f3c:	f000 fb15 	bl	800956a <USBH_SetAddress>
 8008f40:	4603      	mov	r3, r0
 8008f42:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008f44:	7bbb      	ldrb	r3, [r7, #14]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d130      	bne.n	8008fac <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8008f4a:	2002      	movs	r0, #2
 8008f4c:	f004 fd49 	bl	800d9e2 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2201      	movs	r2, #1
 8008f54:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2203      	movs	r2, #3
 8008f5c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	7919      	ldrb	r1, [r3, #4]
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008f6e:	687a      	ldr	r2, [r7, #4]
 8008f70:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008f72:	9202      	str	r2, [sp, #8]
 8008f74:	2200      	movs	r2, #0
 8008f76:	9201      	str	r2, [sp, #4]
 8008f78:	9300      	str	r3, [sp, #0]
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	2280      	movs	r2, #128	@ 0x80
 8008f7e:	6878      	ldr	r0, [r7, #4]
 8008f80:	f001 f9d4 	bl	800a32c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	7959      	ldrb	r1, [r3, #5]
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008f94:	687a      	ldr	r2, [r7, #4]
 8008f96:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008f98:	9202      	str	r2, [sp, #8]
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	9201      	str	r2, [sp, #4]
 8008f9e:	9300      	str	r3, [sp, #0]
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	6878      	ldr	r0, [r7, #4]
 8008fa6:	f001 f9c1 	bl	800a32c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008faa:	e12a      	b.n	8009202 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008fac:	7bbb      	ldrb	r3, [r7, #14]
 8008fae:	2b03      	cmp	r3, #3
 8008fb0:	f040 8127 	bne.w	8009202 <USBH_HandleEnum+0x42e>
        phost->gState = HOST_ABORT_STATE;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	220d      	movs	r2, #13
 8008fb8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	705a      	strb	r2, [r3, #1]
      break;
 8008fc0:	e11f      	b.n	8009202 <USBH_HandleEnum+0x42e>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8008fc2:	2109      	movs	r1, #9
 8008fc4:	6878      	ldr	r0, [r7, #4]
 8008fc6:	f000 fa3d 	bl	8009444 <USBH_Get_CfgDesc>
 8008fca:	4603      	mov	r3, r0
 8008fcc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008fce:	7bbb      	ldrb	r3, [r7, #14]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d103      	bne.n	8008fdc <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2204      	movs	r2, #4
 8008fd8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008fda:	e114      	b.n	8009206 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008fdc:	7bbb      	ldrb	r3, [r7, #14]
 8008fde:	2b03      	cmp	r3, #3
 8008fe0:	f040 8111 	bne.w	8009206 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008fea:	3301      	adds	r3, #1
 8008fec:	b2da      	uxtb	r2, r3
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008ffa:	2b03      	cmp	r3, #3
 8008ffc:	d903      	bls.n	8009006 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	220d      	movs	r2, #13
 8009002:	701a      	strb	r2, [r3, #0]
      break;
 8009004:	e0ff      	b.n	8009206 <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	795b      	ldrb	r3, [r3, #5]
 800900a:	4619      	mov	r1, r3
 800900c:	6878      	ldr	r0, [r7, #4]
 800900e:	f001 f9dd 	bl	800a3cc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	791b      	ldrb	r3, [r3, #4]
 8009016:	4619      	mov	r1, r3
 8009018:	6878      	ldr	r0, [r7, #4]
 800901a:	f001 f9d7 	bl	800a3cc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	2200      	movs	r2, #0
 8009022:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2200      	movs	r2, #0
 8009028:	701a      	strb	r2, [r3, #0]
      break;
 800902a:	e0ec      	b.n	8009206 <USBH_HandleEnum+0x432>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8009032:	4619      	mov	r1, r3
 8009034:	6878      	ldr	r0, [r7, #4]
 8009036:	f000 fa05 	bl	8009444 <USBH_Get_CfgDesc>
 800903a:	4603      	mov	r3, r0
 800903c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800903e:	7bbb      	ldrb	r3, [r7, #14]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d103      	bne.n	800904c <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2205      	movs	r2, #5
 8009048:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800904a:	e0de      	b.n	800920a <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800904c:	7bbb      	ldrb	r3, [r7, #14]
 800904e:	2b03      	cmp	r3, #3
 8009050:	f040 80db 	bne.w	800920a <USBH_HandleEnum+0x436>
        phost->device.EnumCnt++;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800905a:	3301      	adds	r3, #1
 800905c:	b2da      	uxtb	r2, r3
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800906a:	2b03      	cmp	r3, #3
 800906c:	d903      	bls.n	8009076 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	220d      	movs	r2, #13
 8009072:	701a      	strb	r2, [r3, #0]
      break;
 8009074:	e0c9      	b.n	800920a <USBH_HandleEnum+0x436>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	795b      	ldrb	r3, [r3, #5]
 800907a:	4619      	mov	r1, r3
 800907c:	6878      	ldr	r0, [r7, #4]
 800907e:	f001 f9a5 	bl	800a3cc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	791b      	ldrb	r3, [r3, #4]
 8009086:	4619      	mov	r1, r3
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f001 f99f 	bl	800a3cc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2200      	movs	r2, #0
 8009092:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2200      	movs	r2, #0
 8009098:	701a      	strb	r2, [r3, #0]
      break;
 800909a:	e0b6      	b.n	800920a <USBH_HandleEnum+0x436>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d036      	beq.n	8009114 <USBH_HandleEnum+0x340>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80090b2:	23ff      	movs	r3, #255	@ 0xff
 80090b4:	6878      	ldr	r0, [r7, #4]
 80090b6:	f000 f9ef 	bl	8009498 <USBH_Get_StringDesc>
 80090ba:	4603      	mov	r3, r0
 80090bc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80090be:	7bbb      	ldrb	r3, [r7, #14]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d111      	bne.n	80090e8 <USBH_HandleEnum+0x314>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2206      	movs	r2, #6
 80090c8:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2205      	movs	r2, #5
 80090ce:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80090de:	2300      	movs	r3, #0
 80090e0:	2200      	movs	r2, #0
 80090e2:	f001 fb63 	bl	800a7ac <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80090e6:	e092      	b.n	800920e <USBH_HandleEnum+0x43a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80090e8:	7bbb      	ldrb	r3, [r7, #14]
 80090ea:	2b03      	cmp	r3, #3
 80090ec:	f040 808f 	bne.w	800920e <USBH_HandleEnum+0x43a>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2206      	movs	r2, #6
 80090f4:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	2205      	movs	r2, #5
 80090fa:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800910a:	2300      	movs	r3, #0
 800910c:	2200      	movs	r2, #0
 800910e:	f001 fb4d 	bl	800a7ac <osMessageQueuePut>
      break;
 8009112:	e07c      	b.n	800920e <USBH_HandleEnum+0x43a>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2206      	movs	r2, #6
 8009118:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	2205      	movs	r2, #5
 800911e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800912e:	2300      	movs	r3, #0
 8009130:	2200      	movs	r2, #0
 8009132:	f001 fb3b 	bl	800a7ac <osMessageQueuePut>
      break;
 8009136:	e06a      	b.n	800920e <USBH_HandleEnum+0x43a>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800913e:	2b00      	cmp	r3, #0
 8009140:	d027      	beq.n	8009192 <USBH_HandleEnum+0x3be>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800914e:	23ff      	movs	r3, #255	@ 0xff
 8009150:	6878      	ldr	r0, [r7, #4]
 8009152:	f000 f9a1 	bl	8009498 <USBH_Get_StringDesc>
 8009156:	4603      	mov	r3, r0
 8009158:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800915a:	7bbb      	ldrb	r3, [r7, #14]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d103      	bne.n	8009168 <USBH_HandleEnum+0x394>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2207      	movs	r2, #7
 8009164:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009166:	e054      	b.n	8009212 <USBH_HandleEnum+0x43e>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009168:	7bbb      	ldrb	r3, [r7, #14]
 800916a:	2b03      	cmp	r3, #3
 800916c:	d151      	bne.n	8009212 <USBH_HandleEnum+0x43e>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	2207      	movs	r2, #7
 8009172:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2205      	movs	r2, #5
 8009178:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8009188:	2300      	movs	r3, #0
 800918a:	2200      	movs	r2, #0
 800918c:	f001 fb0e 	bl	800a7ac <osMessageQueuePut>
      break;
 8009190:	e03f      	b.n	8009212 <USBH_HandleEnum+0x43e>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2207      	movs	r2, #7
 8009196:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2205      	movs	r2, #5
 800919c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80091ac:	2300      	movs	r3, #0
 80091ae:	2200      	movs	r2, #0
 80091b0:	f001 fafc 	bl	800a7ac <osMessageQueuePut>
      break;
 80091b4:	e02d      	b.n	8009212 <USBH_HandleEnum+0x43e>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d017      	beq.n	80091f0 <USBH_HandleEnum+0x41c>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80091cc:	23ff      	movs	r3, #255	@ 0xff
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	f000 f962 	bl	8009498 <USBH_Get_StringDesc>
 80091d4:	4603      	mov	r3, r0
 80091d6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80091d8:	7bbb      	ldrb	r3, [r7, #14]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d102      	bne.n	80091e4 <USBH_HandleEnum+0x410>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80091de:	2300      	movs	r3, #0
 80091e0:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80091e2:	e018      	b.n	8009216 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80091e4:	7bbb      	ldrb	r3, [r7, #14]
 80091e6:	2b03      	cmp	r3, #3
 80091e8:	d115      	bne.n	8009216 <USBH_HandleEnum+0x442>
          Status = USBH_OK;
 80091ea:	2300      	movs	r3, #0
 80091ec:	73fb      	strb	r3, [r7, #15]
      break;
 80091ee:	e012      	b.n	8009216 <USBH_HandleEnum+0x442>
        Status = USBH_OK;
 80091f0:	2300      	movs	r3, #0
 80091f2:	73fb      	strb	r3, [r7, #15]
      break;
 80091f4:	e00f      	b.n	8009216 <USBH_HandleEnum+0x442>

    default:
      break;
 80091f6:	bf00      	nop
 80091f8:	e00e      	b.n	8009218 <USBH_HandleEnum+0x444>
      break;
 80091fa:	bf00      	nop
 80091fc:	e00c      	b.n	8009218 <USBH_HandleEnum+0x444>
      break;
 80091fe:	bf00      	nop
 8009200:	e00a      	b.n	8009218 <USBH_HandleEnum+0x444>
      break;
 8009202:	bf00      	nop
 8009204:	e008      	b.n	8009218 <USBH_HandleEnum+0x444>
      break;
 8009206:	bf00      	nop
 8009208:	e006      	b.n	8009218 <USBH_HandleEnum+0x444>
      break;
 800920a:	bf00      	nop
 800920c:	e004      	b.n	8009218 <USBH_HandleEnum+0x444>
      break;
 800920e:	bf00      	nop
 8009210:	e002      	b.n	8009218 <USBH_HandleEnum+0x444>
      break;
 8009212:	bf00      	nop
 8009214:	e000      	b.n	8009218 <USBH_HandleEnum+0x444>
      break;
 8009216:	bf00      	nop
  }
  return Status;
 8009218:	7bfb      	ldrb	r3, [r7, #15]
}
 800921a:	4618      	mov	r0, r3
 800921c:	3710      	adds	r7, #16
 800921e:	46bd      	mov	sp, r7
 8009220:	bd80      	pop	{r7, pc}
 8009222:	bf00      	nop

08009224 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8009224:	b480      	push	{r7}
 8009226:	b083      	sub	sp, #12
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
 800922c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	683a      	ldr	r2, [r7, #0]
 8009232:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8009236:	bf00      	nop
 8009238:	370c      	adds	r7, #12
 800923a:	46bd      	mov	sp, r7
 800923c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009240:	4770      	bx	lr

08009242 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8009242:	b580      	push	{r7, lr}
 8009244:	b082      	sub	sp, #8
 8009246:	af00      	add	r7, sp, #0
 8009248:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009250:	1c5a      	adds	r2, r3, #1
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8009258:	6878      	ldr	r0, [r7, #4]
 800925a:	f000 f804 	bl	8009266 <USBH_HandleSof>
}
 800925e:	bf00      	nop
 8009260:	3708      	adds	r7, #8
 8009262:	46bd      	mov	sp, r7
 8009264:	bd80      	pop	{r7, pc}

08009266 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8009266:	b580      	push	{r7, lr}
 8009268:	b082      	sub	sp, #8
 800926a:	af00      	add	r7, sp, #0
 800926c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	781b      	ldrb	r3, [r3, #0]
 8009272:	b2db      	uxtb	r3, r3
 8009274:	2b0b      	cmp	r3, #11
 8009276:	d10a      	bne.n	800928e <USBH_HandleSof+0x28>
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800927e:	2b00      	cmp	r3, #0
 8009280:	d005      	beq.n	800928e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009288:	699b      	ldr	r3, [r3, #24]
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	4798      	blx	r3
  }
}
 800928e:	bf00      	nop
 8009290:	3708      	adds	r7, #8
 8009292:	46bd      	mov	sp, r7
 8009294:	bd80      	pop	{r7, pc}

08009296 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009296:	b580      	push	{r7, lr}
 8009298:	b082      	sub	sp, #8
 800929a:	af00      	add	r7, sp, #0
 800929c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	2201      	movs	r2, #1
 80092a2:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2201      	movs	r2, #1
 80092aa:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80092ba:	2300      	movs	r3, #0
 80092bc:	2200      	movs	r2, #0
 80092be:	f001 fa75 	bl	800a7ac <osMessageQueuePut>
#endif
#endif

  return;
 80092c2:	bf00      	nop
}
 80092c4:	3708      	adds	r7, #8
 80092c6:	46bd      	mov	sp, r7
 80092c8:	bd80      	pop	{r7, pc}

080092ca <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80092ca:	b480      	push	{r7}
 80092cc:	b083      	sub	sp, #12
 80092ce:	af00      	add	r7, sp, #0
 80092d0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	2200      	movs	r2, #0
 80092d6:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 80092da:	bf00      	nop
}
 80092dc:	370c      	adds	r7, #12
 80092de:	46bd      	mov	sp, r7
 80092e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e4:	4770      	bx	lr

080092e6 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80092e6:	b580      	push	{r7, lr}
 80092e8:	b082      	sub	sp, #8
 80092ea:	af00      	add	r7, sp, #0
 80092ec:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2201      	movs	r2, #1
 80092f2:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	2200      	movs	r2, #0
 80092fa:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	2200      	movs	r2, #0
 8009302:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2201      	movs	r2, #1
 800930a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800931a:	2300      	movs	r3, #0
 800931c:	2200      	movs	r2, #0
 800931e:	f001 fa45 	bl	800a7ac <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 8009322:	2300      	movs	r3, #0
}
 8009324:	4618      	mov	r0, r3
 8009326:	3708      	adds	r7, #8
 8009328:	46bd      	mov	sp, r7
 800932a:	bd80      	pop	{r7, pc}

0800932c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b082      	sub	sp, #8
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2201      	movs	r2, #1
 8009338:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2200      	movs	r2, #0
 8009340:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2200      	movs	r2, #0
 8009348:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800934c:	6878      	ldr	r0, [r7, #4]
 800934e:	f004 f9fc 	bl	800d74a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	791b      	ldrb	r3, [r3, #4]
 8009356:	4619      	mov	r1, r3
 8009358:	6878      	ldr	r0, [r7, #4]
 800935a:	f001 f837 	bl	800a3cc <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	795b      	ldrb	r3, [r3, #5]
 8009362:	4619      	mov	r1, r3
 8009364:	6878      	ldr	r0, [r7, #4]
 8009366:	f001 f831 	bl	800a3cc <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	2201      	movs	r2, #1
 800936e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800937e:	2300      	movs	r3, #0
 8009380:	2200      	movs	r2, #0
 8009382:	f001 fa13 	bl	800a7ac <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 8009386:	2300      	movs	r3, #0
}
 8009388:	4618      	mov	r0, r3
 800938a:	3708      	adds	r7, #8
 800938c:	46bd      	mov	sp, r7
 800938e:	bd80      	pop	{r7, pc}

08009390 <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b084      	sub	sp, #16
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 80093a4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80093a8:	2200      	movs	r2, #0
 80093aa:	f001 fa5f 	bl	800a86c <osMessageQueueGet>
 80093ae:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d1f0      	bne.n	8009398 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 80093b6:	6878      	ldr	r0, [r7, #4]
 80093b8:	f7ff faa2 	bl	8008900 <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 80093bc:	e7ec      	b.n	8009398 <USBH_Process_OS+0x8>

080093be <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 80093be:	b580      	push	{r7, lr}
 80093c0:	b082      	sub	sp, #8
 80093c2:	af00      	add	r7, sp, #0
 80093c4:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	2201      	movs	r2, #1
 80093ca:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80093da:	2300      	movs	r3, #0
 80093dc:	2200      	movs	r2, #0
 80093de:	f001 f9e5 	bl	800a7ac <osMessageQueuePut>
#endif

  return USBH_OK;
 80093e2:	2300      	movs	r3, #0
}
 80093e4:	4618      	mov	r0, r3
 80093e6:	3708      	adds	r7, #8
 80093e8:	46bd      	mov	sp, r7
 80093ea:	bd80      	pop	{r7, pc}

080093ec <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b086      	sub	sp, #24
 80093f0:	af02      	add	r7, sp, #8
 80093f2:	6078      	str	r0, [r7, #4]
 80093f4:	460b      	mov	r3, r1
 80093f6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 80093f8:	887b      	ldrh	r3, [r7, #2]
 80093fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80093fe:	d901      	bls.n	8009404 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009400:	2303      	movs	r3, #3
 8009402:	e01b      	b.n	800943c <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800940a:	887b      	ldrh	r3, [r7, #2]
 800940c:	9300      	str	r3, [sp, #0]
 800940e:	4613      	mov	r3, r2
 8009410:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009414:	2100      	movs	r1, #0
 8009416:	6878      	ldr	r0, [r7, #4]
 8009418:	f000 f872 	bl	8009500 <USBH_GetDescriptor>
 800941c:	4603      	mov	r3, r0
 800941e:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8009420:	7bfb      	ldrb	r3, [r7, #15]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d109      	bne.n	800943a <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800942c:	887a      	ldrh	r2, [r7, #2]
 800942e:	4619      	mov	r1, r3
 8009430:	6878      	ldr	r0, [r7, #4]
 8009432:	f000 f929 	bl	8009688 <USBH_ParseDevDesc>
 8009436:	4603      	mov	r3, r0
 8009438:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800943a:	7bfb      	ldrb	r3, [r7, #15]
}
 800943c:	4618      	mov	r0, r3
 800943e:	3710      	adds	r7, #16
 8009440:	46bd      	mov	sp, r7
 8009442:	bd80      	pop	{r7, pc}

08009444 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b086      	sub	sp, #24
 8009448:	af02      	add	r7, sp, #8
 800944a:	6078      	str	r0, [r7, #4]
 800944c:	460b      	mov	r3, r1
 800944e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	331c      	adds	r3, #28
 8009454:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8009456:	887b      	ldrh	r3, [r7, #2]
 8009458:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800945c:	d901      	bls.n	8009462 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800945e:	2303      	movs	r3, #3
 8009460:	e016      	b.n	8009490 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8009462:	887b      	ldrh	r3, [r7, #2]
 8009464:	9300      	str	r3, [sp, #0]
 8009466:	68bb      	ldr	r3, [r7, #8]
 8009468:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800946c:	2100      	movs	r1, #0
 800946e:	6878      	ldr	r0, [r7, #4]
 8009470:	f000 f846 	bl	8009500 <USBH_GetDescriptor>
 8009474:	4603      	mov	r3, r0
 8009476:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8009478:	7bfb      	ldrb	r3, [r7, #15]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d107      	bne.n	800948e <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800947e:	887b      	ldrh	r3, [r7, #2]
 8009480:	461a      	mov	r2, r3
 8009482:	68b9      	ldr	r1, [r7, #8]
 8009484:	6878      	ldr	r0, [r7, #4]
 8009486:	f000 f9af 	bl	80097e8 <USBH_ParseCfgDesc>
 800948a:	4603      	mov	r3, r0
 800948c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800948e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009490:	4618      	mov	r0, r3
 8009492:	3710      	adds	r7, #16
 8009494:	46bd      	mov	sp, r7
 8009496:	bd80      	pop	{r7, pc}

08009498 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b088      	sub	sp, #32
 800949c:	af02      	add	r7, sp, #8
 800949e:	60f8      	str	r0, [r7, #12]
 80094a0:	607a      	str	r2, [r7, #4]
 80094a2:	461a      	mov	r2, r3
 80094a4:	460b      	mov	r3, r1
 80094a6:	72fb      	strb	r3, [r7, #11]
 80094a8:	4613      	mov	r3, r2
 80094aa:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 80094ac:	893b      	ldrh	r3, [r7, #8]
 80094ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80094b2:	d802      	bhi.n	80094ba <USBH_Get_StringDesc+0x22>
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d101      	bne.n	80094be <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80094ba:	2303      	movs	r3, #3
 80094bc:	e01c      	b.n	80094f8 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 80094be:	7afb      	ldrb	r3, [r7, #11]
 80094c0:	b29b      	uxth	r3, r3
 80094c2:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80094c6:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 80094ce:	893b      	ldrh	r3, [r7, #8]
 80094d0:	9300      	str	r3, [sp, #0]
 80094d2:	460b      	mov	r3, r1
 80094d4:	2100      	movs	r1, #0
 80094d6:	68f8      	ldr	r0, [r7, #12]
 80094d8:	f000 f812 	bl	8009500 <USBH_GetDescriptor>
 80094dc:	4603      	mov	r3, r0
 80094de:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80094e0:	7dfb      	ldrb	r3, [r7, #23]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d107      	bne.n	80094f6 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80094ec:	893a      	ldrh	r2, [r7, #8]
 80094ee:	6879      	ldr	r1, [r7, #4]
 80094f0:	4618      	mov	r0, r3
 80094f2:	f000 fb8d 	bl	8009c10 <USBH_ParseStringDesc>
  }

  return status;
 80094f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80094f8:	4618      	mov	r0, r3
 80094fa:	3718      	adds	r7, #24
 80094fc:	46bd      	mov	sp, r7
 80094fe:	bd80      	pop	{r7, pc}

08009500 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b084      	sub	sp, #16
 8009504:	af00      	add	r7, sp, #0
 8009506:	60f8      	str	r0, [r7, #12]
 8009508:	607b      	str	r3, [r7, #4]
 800950a:	460b      	mov	r3, r1
 800950c:	72fb      	strb	r3, [r7, #11]
 800950e:	4613      	mov	r3, r2
 8009510:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	789b      	ldrb	r3, [r3, #2]
 8009516:	2b01      	cmp	r3, #1
 8009518:	d11c      	bne.n	8009554 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800951a:	7afb      	ldrb	r3, [r7, #11]
 800951c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009520:	b2da      	uxtb	r2, r3
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	2206      	movs	r2, #6
 800952a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	893a      	ldrh	r2, [r7, #8]
 8009530:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8009532:	893b      	ldrh	r3, [r7, #8]
 8009534:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009538:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800953c:	d104      	bne.n	8009548 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	f240 4209 	movw	r2, #1033	@ 0x409
 8009544:	829a      	strh	r2, [r3, #20]
 8009546:	e002      	b.n	800954e <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	2200      	movs	r2, #0
 800954c:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	8b3a      	ldrh	r2, [r7, #24]
 8009552:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8009554:	8b3b      	ldrh	r3, [r7, #24]
 8009556:	461a      	mov	r2, r3
 8009558:	6879      	ldr	r1, [r7, #4]
 800955a:	68f8      	ldr	r0, [r7, #12]
 800955c:	f000 fba5 	bl	8009caa <USBH_CtlReq>
 8009560:	4603      	mov	r3, r0
}
 8009562:	4618      	mov	r0, r3
 8009564:	3710      	adds	r7, #16
 8009566:	46bd      	mov	sp, r7
 8009568:	bd80      	pop	{r7, pc}

0800956a <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800956a:	b580      	push	{r7, lr}
 800956c:	b082      	sub	sp, #8
 800956e:	af00      	add	r7, sp, #0
 8009570:	6078      	str	r0, [r7, #4]
 8009572:	460b      	mov	r3, r1
 8009574:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	789b      	ldrb	r3, [r3, #2]
 800957a:	2b01      	cmp	r3, #1
 800957c:	d10f      	bne.n	800959e <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	2200      	movs	r2, #0
 8009582:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2205      	movs	r2, #5
 8009588:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800958a:	78fb      	ldrb	r3, [r7, #3]
 800958c:	b29a      	uxth	r2, r3
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	2200      	movs	r2, #0
 8009596:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2200      	movs	r2, #0
 800959c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800959e:	2200      	movs	r2, #0
 80095a0:	2100      	movs	r1, #0
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	f000 fb81 	bl	8009caa <USBH_CtlReq>
 80095a8:	4603      	mov	r3, r0
}
 80095aa:	4618      	mov	r0, r3
 80095ac:	3708      	adds	r7, #8
 80095ae:	46bd      	mov	sp, r7
 80095b0:	bd80      	pop	{r7, pc}

080095b2 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80095b2:	b580      	push	{r7, lr}
 80095b4:	b082      	sub	sp, #8
 80095b6:	af00      	add	r7, sp, #0
 80095b8:	6078      	str	r0, [r7, #4]
 80095ba:	460b      	mov	r3, r1
 80095bc:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	789b      	ldrb	r3, [r3, #2]
 80095c2:	2b01      	cmp	r3, #1
 80095c4:	d10e      	bne.n	80095e4 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2200      	movs	r2, #0
 80095ca:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2209      	movs	r2, #9
 80095d0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	887a      	ldrh	r2, [r7, #2]
 80095d6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2200      	movs	r2, #0
 80095dc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	2200      	movs	r2, #0
 80095e2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80095e4:	2200      	movs	r2, #0
 80095e6:	2100      	movs	r1, #0
 80095e8:	6878      	ldr	r0, [r7, #4]
 80095ea:	f000 fb5e 	bl	8009caa <USBH_CtlReq>
 80095ee:	4603      	mov	r3, r0
}
 80095f0:	4618      	mov	r0, r3
 80095f2:	3708      	adds	r7, #8
 80095f4:	46bd      	mov	sp, r7
 80095f6:	bd80      	pop	{r7, pc}

080095f8 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b082      	sub	sp, #8
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
 8009600:	460b      	mov	r3, r1
 8009602:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	789b      	ldrb	r3, [r3, #2]
 8009608:	2b01      	cmp	r3, #1
 800960a:	d10f      	bne.n	800962c <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2200      	movs	r2, #0
 8009610:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	2203      	movs	r2, #3
 8009616:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009618:	78fb      	ldrb	r3, [r7, #3]
 800961a:	b29a      	uxth	r2, r3
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2200      	movs	r2, #0
 8009624:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	2200      	movs	r2, #0
 800962a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800962c:	2200      	movs	r2, #0
 800962e:	2100      	movs	r1, #0
 8009630:	6878      	ldr	r0, [r7, #4]
 8009632:	f000 fb3a 	bl	8009caa <USBH_CtlReq>
 8009636:	4603      	mov	r3, r0
}
 8009638:	4618      	mov	r0, r3
 800963a:	3708      	adds	r7, #8
 800963c:	46bd      	mov	sp, r7
 800963e:	bd80      	pop	{r7, pc}

08009640 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b082      	sub	sp, #8
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
 8009648:	460b      	mov	r3, r1
 800964a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	789b      	ldrb	r3, [r3, #2]
 8009650:	2b01      	cmp	r3, #1
 8009652:	d10f      	bne.n	8009674 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2202      	movs	r2, #2
 8009658:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	2201      	movs	r2, #1
 800965e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2200      	movs	r2, #0
 8009664:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8009666:	78fb      	ldrb	r3, [r7, #3]
 8009668:	b29a      	uxth	r2, r3
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	2200      	movs	r2, #0
 8009672:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009674:	2200      	movs	r2, #0
 8009676:	2100      	movs	r1, #0
 8009678:	6878      	ldr	r0, [r7, #4]
 800967a:	f000 fb16 	bl	8009caa <USBH_CtlReq>
 800967e:	4603      	mov	r3, r0
}
 8009680:	4618      	mov	r0, r3
 8009682:	3708      	adds	r7, #8
 8009684:	46bd      	mov	sp, r7
 8009686:	bd80      	pop	{r7, pc}

08009688 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8009688:	b480      	push	{r7}
 800968a:	b087      	sub	sp, #28
 800968c:	af00      	add	r7, sp, #0
 800968e:	60f8      	str	r0, [r7, #12]
 8009690:	60b9      	str	r1, [r7, #8]
 8009692:	4613      	mov	r3, r2
 8009694:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800969c:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800969e:	2300      	movs	r3, #0
 80096a0:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 80096a2:	68bb      	ldr	r3, [r7, #8]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d101      	bne.n	80096ac <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 80096a8:	2302      	movs	r3, #2
 80096aa:	e094      	b.n	80097d6 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 80096ac:	68bb      	ldr	r3, [r7, #8]
 80096ae:	781a      	ldrb	r2, [r3, #0]
 80096b0:	693b      	ldr	r3, [r7, #16]
 80096b2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 80096b4:	68bb      	ldr	r3, [r7, #8]
 80096b6:	785a      	ldrb	r2, [r3, #1]
 80096b8:	693b      	ldr	r3, [r7, #16]
 80096ba:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 80096bc:	68bb      	ldr	r3, [r7, #8]
 80096be:	3302      	adds	r3, #2
 80096c0:	781b      	ldrb	r3, [r3, #0]
 80096c2:	461a      	mov	r2, r3
 80096c4:	68bb      	ldr	r3, [r7, #8]
 80096c6:	3303      	adds	r3, #3
 80096c8:	781b      	ldrb	r3, [r3, #0]
 80096ca:	021b      	lsls	r3, r3, #8
 80096cc:	b29b      	uxth	r3, r3
 80096ce:	4313      	orrs	r3, r2
 80096d0:	b29a      	uxth	r2, r3
 80096d2:	693b      	ldr	r3, [r7, #16]
 80096d4:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 80096d6:	68bb      	ldr	r3, [r7, #8]
 80096d8:	791a      	ldrb	r2, [r3, #4]
 80096da:	693b      	ldr	r3, [r7, #16]
 80096dc:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 80096de:	68bb      	ldr	r3, [r7, #8]
 80096e0:	795a      	ldrb	r2, [r3, #5]
 80096e2:	693b      	ldr	r3, [r7, #16]
 80096e4:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 80096e6:	68bb      	ldr	r3, [r7, #8]
 80096e8:	799a      	ldrb	r2, [r3, #6]
 80096ea:	693b      	ldr	r3, [r7, #16]
 80096ec:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 80096ee:	68bb      	ldr	r3, [r7, #8]
 80096f0:	79da      	ldrb	r2, [r3, #7]
 80096f2:	693b      	ldr	r3, [r7, #16]
 80096f4:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d004      	beq.n	800970a <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8009706:	2b01      	cmp	r3, #1
 8009708:	d11b      	bne.n	8009742 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800970a:	693b      	ldr	r3, [r7, #16]
 800970c:	79db      	ldrb	r3, [r3, #7]
 800970e:	2b20      	cmp	r3, #32
 8009710:	dc0f      	bgt.n	8009732 <USBH_ParseDevDesc+0xaa>
 8009712:	2b08      	cmp	r3, #8
 8009714:	db0f      	blt.n	8009736 <USBH_ParseDevDesc+0xae>
 8009716:	3b08      	subs	r3, #8
 8009718:	4a32      	ldr	r2, [pc, #200]	@ (80097e4 <USBH_ParseDevDesc+0x15c>)
 800971a:	fa22 f303 	lsr.w	r3, r2, r3
 800971e:	f003 0301 	and.w	r3, r3, #1
 8009722:	2b00      	cmp	r3, #0
 8009724:	bf14      	ite	ne
 8009726:	2301      	movne	r3, #1
 8009728:	2300      	moveq	r3, #0
 800972a:	b2db      	uxtb	r3, r3
 800972c:	2b00      	cmp	r3, #0
 800972e:	d106      	bne.n	800973e <USBH_ParseDevDesc+0xb6>
 8009730:	e001      	b.n	8009736 <USBH_ParseDevDesc+0xae>
 8009732:	2b40      	cmp	r3, #64	@ 0x40
 8009734:	d003      	beq.n	800973e <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8009736:	693b      	ldr	r3, [r7, #16]
 8009738:	2208      	movs	r2, #8
 800973a:	71da      	strb	r2, [r3, #7]
        break;
 800973c:	e000      	b.n	8009740 <USBH_ParseDevDesc+0xb8>
        break;
 800973e:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8009740:	e00e      	b.n	8009760 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009748:	2b02      	cmp	r3, #2
 800974a:	d107      	bne.n	800975c <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800974c:	693b      	ldr	r3, [r7, #16]
 800974e:	79db      	ldrb	r3, [r3, #7]
 8009750:	2b08      	cmp	r3, #8
 8009752:	d005      	beq.n	8009760 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8009754:	693b      	ldr	r3, [r7, #16]
 8009756:	2208      	movs	r2, #8
 8009758:	71da      	strb	r2, [r3, #7]
 800975a:	e001      	b.n	8009760 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800975c:	2303      	movs	r3, #3
 800975e:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8009760:	88fb      	ldrh	r3, [r7, #6]
 8009762:	2b08      	cmp	r3, #8
 8009764:	d936      	bls.n	80097d4 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8009766:	68bb      	ldr	r3, [r7, #8]
 8009768:	3308      	adds	r3, #8
 800976a:	781b      	ldrb	r3, [r3, #0]
 800976c:	461a      	mov	r2, r3
 800976e:	68bb      	ldr	r3, [r7, #8]
 8009770:	3309      	adds	r3, #9
 8009772:	781b      	ldrb	r3, [r3, #0]
 8009774:	021b      	lsls	r3, r3, #8
 8009776:	b29b      	uxth	r3, r3
 8009778:	4313      	orrs	r3, r2
 800977a:	b29a      	uxth	r2, r3
 800977c:	693b      	ldr	r3, [r7, #16]
 800977e:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8009780:	68bb      	ldr	r3, [r7, #8]
 8009782:	330a      	adds	r3, #10
 8009784:	781b      	ldrb	r3, [r3, #0]
 8009786:	461a      	mov	r2, r3
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	330b      	adds	r3, #11
 800978c:	781b      	ldrb	r3, [r3, #0]
 800978e:	021b      	lsls	r3, r3, #8
 8009790:	b29b      	uxth	r3, r3
 8009792:	4313      	orrs	r3, r2
 8009794:	b29a      	uxth	r2, r3
 8009796:	693b      	ldr	r3, [r7, #16]
 8009798:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800979a:	68bb      	ldr	r3, [r7, #8]
 800979c:	330c      	adds	r3, #12
 800979e:	781b      	ldrb	r3, [r3, #0]
 80097a0:	461a      	mov	r2, r3
 80097a2:	68bb      	ldr	r3, [r7, #8]
 80097a4:	330d      	adds	r3, #13
 80097a6:	781b      	ldrb	r3, [r3, #0]
 80097a8:	021b      	lsls	r3, r3, #8
 80097aa:	b29b      	uxth	r3, r3
 80097ac:	4313      	orrs	r3, r2
 80097ae:	b29a      	uxth	r2, r3
 80097b0:	693b      	ldr	r3, [r7, #16]
 80097b2:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 80097b4:	68bb      	ldr	r3, [r7, #8]
 80097b6:	7b9a      	ldrb	r2, [r3, #14]
 80097b8:	693b      	ldr	r3, [r7, #16]
 80097ba:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 80097bc:	68bb      	ldr	r3, [r7, #8]
 80097be:	7bda      	ldrb	r2, [r3, #15]
 80097c0:	693b      	ldr	r3, [r7, #16]
 80097c2:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 80097c4:	68bb      	ldr	r3, [r7, #8]
 80097c6:	7c1a      	ldrb	r2, [r3, #16]
 80097c8:	693b      	ldr	r3, [r7, #16]
 80097ca:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 80097cc:	68bb      	ldr	r3, [r7, #8]
 80097ce:	7c5a      	ldrb	r2, [r3, #17]
 80097d0:	693b      	ldr	r3, [r7, #16]
 80097d2:	745a      	strb	r2, [r3, #17]
  }

  return status;
 80097d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80097d6:	4618      	mov	r0, r3
 80097d8:	371c      	adds	r7, #28
 80097da:	46bd      	mov	sp, r7
 80097dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e0:	4770      	bx	lr
 80097e2:	bf00      	nop
 80097e4:	01000101 	.word	0x01000101

080097e8 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b08c      	sub	sp, #48	@ 0x30
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	60f8      	str	r0, [r7, #12]
 80097f0:	60b9      	str	r1, [r7, #8]
 80097f2:	4613      	mov	r3, r2
 80097f4:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80097fc:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80097fe:	2300      	movs	r3, #0
 8009800:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8009804:	2300      	movs	r3, #0
 8009806:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800980a:	2300      	movs	r3, #0
 800980c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d101      	bne.n	800981a <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8009816:	2302      	movs	r3, #2
 8009818:	e0da      	b.n	80099d0 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800981a:	68bb      	ldr	r3, [r7, #8]
 800981c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800981e:	68bb      	ldr	r3, [r7, #8]
 8009820:	781a      	ldrb	r2, [r3, #0]
 8009822:	6a3b      	ldr	r3, [r7, #32]
 8009824:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8009826:	68bb      	ldr	r3, [r7, #8]
 8009828:	785a      	ldrb	r2, [r3, #1]
 800982a:	6a3b      	ldr	r3, [r7, #32]
 800982c:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800982e:	68bb      	ldr	r3, [r7, #8]
 8009830:	3302      	adds	r3, #2
 8009832:	781b      	ldrb	r3, [r3, #0]
 8009834:	461a      	mov	r2, r3
 8009836:	68bb      	ldr	r3, [r7, #8]
 8009838:	3303      	adds	r3, #3
 800983a:	781b      	ldrb	r3, [r3, #0]
 800983c:	021b      	lsls	r3, r3, #8
 800983e:	b29b      	uxth	r3, r3
 8009840:	4313      	orrs	r3, r2
 8009842:	b29b      	uxth	r3, r3
 8009844:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009848:	bf28      	it	cs
 800984a:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800984e:	b29a      	uxth	r2, r3
 8009850:	6a3b      	ldr	r3, [r7, #32]
 8009852:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8009854:	68bb      	ldr	r3, [r7, #8]
 8009856:	791a      	ldrb	r2, [r3, #4]
 8009858:	6a3b      	ldr	r3, [r7, #32]
 800985a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800985c:	68bb      	ldr	r3, [r7, #8]
 800985e:	795a      	ldrb	r2, [r3, #5]
 8009860:	6a3b      	ldr	r3, [r7, #32]
 8009862:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8009864:	68bb      	ldr	r3, [r7, #8]
 8009866:	799a      	ldrb	r2, [r3, #6]
 8009868:	6a3b      	ldr	r3, [r7, #32]
 800986a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800986c:	68bb      	ldr	r3, [r7, #8]
 800986e:	79da      	ldrb	r2, [r3, #7]
 8009870:	6a3b      	ldr	r3, [r7, #32]
 8009872:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8009874:	68bb      	ldr	r3, [r7, #8]
 8009876:	7a1a      	ldrb	r2, [r3, #8]
 8009878:	6a3b      	ldr	r3, [r7, #32]
 800987a:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800987c:	6a3b      	ldr	r3, [r7, #32]
 800987e:	781b      	ldrb	r3, [r3, #0]
 8009880:	2b09      	cmp	r3, #9
 8009882:	d002      	beq.n	800988a <USBH_ParseCfgDesc+0xa2>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8009884:	6a3b      	ldr	r3, [r7, #32]
 8009886:	2209      	movs	r2, #9
 8009888:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800988a:	88fb      	ldrh	r3, [r7, #6]
 800988c:	2b09      	cmp	r3, #9
 800988e:	f240 809d 	bls.w	80099cc <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 8009892:	2309      	movs	r3, #9
 8009894:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009896:	2300      	movs	r3, #0
 8009898:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800989a:	e081      	b.n	80099a0 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800989c:	f107 0316 	add.w	r3, r7, #22
 80098a0:	4619      	mov	r1, r3
 80098a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80098a4:	f000 f9e7 	bl	8009c76 <USBH_GetNextDesc>
 80098a8:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80098aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098ac:	785b      	ldrb	r3, [r3, #1]
 80098ae:	2b04      	cmp	r3, #4
 80098b0:	d176      	bne.n	80099a0 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80098b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098b4:	781b      	ldrb	r3, [r3, #0]
 80098b6:	2b09      	cmp	r3, #9
 80098b8:	d002      	beq.n	80098c0 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80098ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098bc:	2209      	movs	r2, #9
 80098be:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80098c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80098c4:	221a      	movs	r2, #26
 80098c6:	fb02 f303 	mul.w	r3, r2, r3
 80098ca:	3308      	adds	r3, #8
 80098cc:	6a3a      	ldr	r2, [r7, #32]
 80098ce:	4413      	add	r3, r2
 80098d0:	3302      	adds	r3, #2
 80098d2:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80098d4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80098d6:	69f8      	ldr	r0, [r7, #28]
 80098d8:	f000 f87e 	bl	80099d8 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80098dc:	2300      	movs	r3, #0
 80098de:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80098e2:	2300      	movs	r3, #0
 80098e4:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80098e6:	e043      	b.n	8009970 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80098e8:	f107 0316 	add.w	r3, r7, #22
 80098ec:	4619      	mov	r1, r3
 80098ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80098f0:	f000 f9c1 	bl	8009c76 <USBH_GetNextDesc>
 80098f4:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80098f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098f8:	785b      	ldrb	r3, [r3, #1]
 80098fa:	2b05      	cmp	r3, #5
 80098fc:	d138      	bne.n	8009970 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 80098fe:	69fb      	ldr	r3, [r7, #28]
 8009900:	795b      	ldrb	r3, [r3, #5]
 8009902:	2b01      	cmp	r3, #1
 8009904:	d113      	bne.n	800992e <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8009906:	69fb      	ldr	r3, [r7, #28]
 8009908:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800990a:	2b02      	cmp	r3, #2
 800990c:	d003      	beq.n	8009916 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800990e:	69fb      	ldr	r3, [r7, #28]
 8009910:	799b      	ldrb	r3, [r3, #6]
 8009912:	2b03      	cmp	r3, #3
 8009914:	d10b      	bne.n	800992e <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009916:	69fb      	ldr	r3, [r7, #28]
 8009918:	79db      	ldrb	r3, [r3, #7]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d10b      	bne.n	8009936 <USBH_ParseCfgDesc+0x14e>
 800991e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009920:	781b      	ldrb	r3, [r3, #0]
 8009922:	2b09      	cmp	r3, #9
 8009924:	d007      	beq.n	8009936 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 8009926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009928:	2209      	movs	r2, #9
 800992a:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800992c:	e003      	b.n	8009936 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800992e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009930:	2207      	movs	r2, #7
 8009932:	701a      	strb	r2, [r3, #0]
 8009934:	e000      	b.n	8009938 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009936:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8009938:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800993c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009940:	3201      	adds	r2, #1
 8009942:	00d2      	lsls	r2, r2, #3
 8009944:	211a      	movs	r1, #26
 8009946:	fb01 f303 	mul.w	r3, r1, r3
 800994a:	4413      	add	r3, r2
 800994c:	3308      	adds	r3, #8
 800994e:	6a3a      	ldr	r2, [r7, #32]
 8009950:	4413      	add	r3, r2
 8009952:	3304      	adds	r3, #4
 8009954:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8009956:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009958:	69b9      	ldr	r1, [r7, #24]
 800995a:	68f8      	ldr	r0, [r7, #12]
 800995c:	f000 f870 	bl	8009a40 <USBH_ParseEPDesc>
 8009960:	4603      	mov	r3, r0
 8009962:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8009966:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800996a:	3301      	adds	r3, #1
 800996c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009970:	69fb      	ldr	r3, [r7, #28]
 8009972:	791b      	ldrb	r3, [r3, #4]
 8009974:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009978:	429a      	cmp	r2, r3
 800997a:	d204      	bcs.n	8009986 <USBH_ParseCfgDesc+0x19e>
 800997c:	6a3b      	ldr	r3, [r7, #32]
 800997e:	885a      	ldrh	r2, [r3, #2]
 8009980:	8afb      	ldrh	r3, [r7, #22]
 8009982:	429a      	cmp	r2, r3
 8009984:	d8b0      	bhi.n	80098e8 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8009986:	69fb      	ldr	r3, [r7, #28]
 8009988:	791b      	ldrb	r3, [r3, #4]
 800998a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800998e:	429a      	cmp	r2, r3
 8009990:	d201      	bcs.n	8009996 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 8009992:	2303      	movs	r3, #3
 8009994:	e01c      	b.n	80099d0 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 8009996:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800999a:	3301      	adds	r3, #1
 800999c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80099a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80099a4:	2b01      	cmp	r3, #1
 80099a6:	d805      	bhi.n	80099b4 <USBH_ParseCfgDesc+0x1cc>
 80099a8:	6a3b      	ldr	r3, [r7, #32]
 80099aa:	885a      	ldrh	r2, [r3, #2]
 80099ac:	8afb      	ldrh	r3, [r7, #22]
 80099ae:	429a      	cmp	r2, r3
 80099b0:	f63f af74 	bhi.w	800989c <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80099b4:	6a3b      	ldr	r3, [r7, #32]
 80099b6:	791b      	ldrb	r3, [r3, #4]
 80099b8:	2b02      	cmp	r3, #2
 80099ba:	bf28      	it	cs
 80099bc:	2302      	movcs	r3, #2
 80099be:	b2db      	uxtb	r3, r3
 80099c0:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80099c4:	429a      	cmp	r2, r3
 80099c6:	d201      	bcs.n	80099cc <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 80099c8:	2303      	movs	r3, #3
 80099ca:	e001      	b.n	80099d0 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 80099cc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80099d0:	4618      	mov	r0, r3
 80099d2:	3730      	adds	r7, #48	@ 0x30
 80099d4:	46bd      	mov	sp, r7
 80099d6:	bd80      	pop	{r7, pc}

080099d8 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 80099d8:	b480      	push	{r7}
 80099da:	b083      	sub	sp, #12
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
 80099e0:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 80099e2:	683b      	ldr	r3, [r7, #0]
 80099e4:	781a      	ldrb	r2, [r3, #0]
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	785a      	ldrb	r2, [r3, #1]
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	789a      	ldrb	r2, [r3, #2]
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 80099fa:	683b      	ldr	r3, [r7, #0]
 80099fc:	78da      	ldrb	r2, [r3, #3]
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8009a02:	683b      	ldr	r3, [r7, #0]
 8009a04:	3304      	adds	r3, #4
 8009a06:	781b      	ldrb	r3, [r3, #0]
 8009a08:	2b02      	cmp	r3, #2
 8009a0a:	bf28      	it	cs
 8009a0c:	2302      	movcs	r3, #2
 8009a0e:	b2da      	uxtb	r2, r3
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8009a14:	683b      	ldr	r3, [r7, #0]
 8009a16:	795a      	ldrb	r2, [r3, #5]
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	799a      	ldrb	r2, [r3, #6]
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	79da      	ldrb	r2, [r3, #7]
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	7a1a      	ldrb	r2, [r3, #8]
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	721a      	strb	r2, [r3, #8]
}
 8009a34:	bf00      	nop
 8009a36:	370c      	adds	r7, #12
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3e:	4770      	bx	lr

08009a40 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8009a40:	b480      	push	{r7}
 8009a42:	b087      	sub	sp, #28
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	60f8      	str	r0, [r7, #12]
 8009a48:	60b9      	str	r1, [r7, #8]
 8009a4a:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	781a      	ldrb	r2, [r3, #0]
 8009a54:	68bb      	ldr	r3, [r7, #8]
 8009a56:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	785a      	ldrb	r2, [r3, #1]
 8009a5c:	68bb      	ldr	r3, [r7, #8]
 8009a5e:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	789a      	ldrb	r2, [r3, #2]
 8009a64:	68bb      	ldr	r3, [r7, #8]
 8009a66:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	78da      	ldrb	r2, [r3, #3]
 8009a6c:	68bb      	ldr	r3, [r7, #8]
 8009a6e:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	3304      	adds	r3, #4
 8009a74:	781b      	ldrb	r3, [r3, #0]
 8009a76:	461a      	mov	r2, r3
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	3305      	adds	r3, #5
 8009a7c:	781b      	ldrb	r3, [r3, #0]
 8009a7e:	021b      	lsls	r3, r3, #8
 8009a80:	b29b      	uxth	r3, r3
 8009a82:	4313      	orrs	r3, r2
 8009a84:	b29a      	uxth	r2, r3
 8009a86:	68bb      	ldr	r3, [r7, #8]
 8009a88:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	799a      	ldrb	r2, [r3, #6]
 8009a8e:	68bb      	ldr	r3, [r7, #8]
 8009a90:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8009a92:	68bb      	ldr	r3, [r7, #8]
 8009a94:	889b      	ldrh	r3, [r3, #4]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d009      	beq.n	8009aae <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8009a9a:	68bb      	ldr	r3, [r7, #8]
 8009a9c:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8009a9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009aa2:	d804      	bhi.n	8009aae <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8009aa4:	68bb      	ldr	r3, [r7, #8]
 8009aa6:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8009aa8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009aac:	d901      	bls.n	8009ab2 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8009aae:	2303      	movs	r3, #3
 8009ab0:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d136      	bne.n	8009b2a <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8009abc:	68bb      	ldr	r3, [r7, #8]
 8009abe:	78db      	ldrb	r3, [r3, #3]
 8009ac0:	f003 0303 	and.w	r3, r3, #3
 8009ac4:	2b02      	cmp	r3, #2
 8009ac6:	d108      	bne.n	8009ada <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8009ac8:	68bb      	ldr	r3, [r7, #8]
 8009aca:	889b      	ldrh	r3, [r3, #4]
 8009acc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009ad0:	f240 8097 	bls.w	8009c02 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009ad4:	2303      	movs	r3, #3
 8009ad6:	75fb      	strb	r3, [r7, #23]
 8009ad8:	e093      	b.n	8009c02 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8009ada:	68bb      	ldr	r3, [r7, #8]
 8009adc:	78db      	ldrb	r3, [r3, #3]
 8009ade:	f003 0303 	and.w	r3, r3, #3
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d107      	bne.n	8009af6 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009ae6:	68bb      	ldr	r3, [r7, #8]
 8009ae8:	889b      	ldrh	r3, [r3, #4]
 8009aea:	2b40      	cmp	r3, #64	@ 0x40
 8009aec:	f240 8089 	bls.w	8009c02 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009af0:	2303      	movs	r3, #3
 8009af2:	75fb      	strb	r3, [r7, #23]
 8009af4:	e085      	b.n	8009c02 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009af6:	68bb      	ldr	r3, [r7, #8]
 8009af8:	78db      	ldrb	r3, [r3, #3]
 8009afa:	f003 0303 	and.w	r3, r3, #3
 8009afe:	2b01      	cmp	r3, #1
 8009b00:	d005      	beq.n	8009b0e <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8009b02:	68bb      	ldr	r3, [r7, #8]
 8009b04:	78db      	ldrb	r3, [r3, #3]
 8009b06:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009b0a:	2b03      	cmp	r3, #3
 8009b0c:	d10a      	bne.n	8009b24 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009b0e:	68bb      	ldr	r3, [r7, #8]
 8009b10:	799b      	ldrb	r3, [r3, #6]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d003      	beq.n	8009b1e <USBH_ParseEPDesc+0xde>
 8009b16:	68bb      	ldr	r3, [r7, #8]
 8009b18:	799b      	ldrb	r3, [r3, #6]
 8009b1a:	2b10      	cmp	r3, #16
 8009b1c:	d970      	bls.n	8009c00 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8009b1e:	2303      	movs	r3, #3
 8009b20:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009b22:	e06d      	b.n	8009c00 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009b24:	2303      	movs	r3, #3
 8009b26:	75fb      	strb	r3, [r7, #23]
 8009b28:	e06b      	b.n	8009c02 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009b30:	2b01      	cmp	r3, #1
 8009b32:	d13c      	bne.n	8009bae <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8009b34:	68bb      	ldr	r3, [r7, #8]
 8009b36:	78db      	ldrb	r3, [r3, #3]
 8009b38:	f003 0303 	and.w	r3, r3, #3
 8009b3c:	2b02      	cmp	r3, #2
 8009b3e:	d005      	beq.n	8009b4c <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8009b40:	68bb      	ldr	r3, [r7, #8]
 8009b42:	78db      	ldrb	r3, [r3, #3]
 8009b44:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d106      	bne.n	8009b5a <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009b4c:	68bb      	ldr	r3, [r7, #8]
 8009b4e:	889b      	ldrh	r3, [r3, #4]
 8009b50:	2b40      	cmp	r3, #64	@ 0x40
 8009b52:	d956      	bls.n	8009c02 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009b54:	2303      	movs	r3, #3
 8009b56:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009b58:	e053      	b.n	8009c02 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8009b5a:	68bb      	ldr	r3, [r7, #8]
 8009b5c:	78db      	ldrb	r3, [r3, #3]
 8009b5e:	f003 0303 	and.w	r3, r3, #3
 8009b62:	2b01      	cmp	r3, #1
 8009b64:	d10e      	bne.n	8009b84 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8009b66:	68bb      	ldr	r3, [r7, #8]
 8009b68:	799b      	ldrb	r3, [r3, #6]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d007      	beq.n	8009b7e <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8009b6e:	68bb      	ldr	r3, [r7, #8]
 8009b70:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8009b72:	2b10      	cmp	r3, #16
 8009b74:	d803      	bhi.n	8009b7e <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8009b76:	68bb      	ldr	r3, [r7, #8]
 8009b78:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8009b7a:	2b40      	cmp	r3, #64	@ 0x40
 8009b7c:	d941      	bls.n	8009c02 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009b7e:	2303      	movs	r3, #3
 8009b80:	75fb      	strb	r3, [r7, #23]
 8009b82:	e03e      	b.n	8009c02 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009b84:	68bb      	ldr	r3, [r7, #8]
 8009b86:	78db      	ldrb	r3, [r3, #3]
 8009b88:	f003 0303 	and.w	r3, r3, #3
 8009b8c:	2b03      	cmp	r3, #3
 8009b8e:	d10b      	bne.n	8009ba8 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8009b90:	68bb      	ldr	r3, [r7, #8]
 8009b92:	799b      	ldrb	r3, [r3, #6]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d004      	beq.n	8009ba2 <USBH_ParseEPDesc+0x162>
 8009b98:	68bb      	ldr	r3, [r7, #8]
 8009b9a:	889b      	ldrh	r3, [r3, #4]
 8009b9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009ba0:	d32f      	bcc.n	8009c02 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009ba2:	2303      	movs	r3, #3
 8009ba4:	75fb      	strb	r3, [r7, #23]
 8009ba6:	e02c      	b.n	8009c02 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009ba8:	2303      	movs	r3, #3
 8009baa:	75fb      	strb	r3, [r7, #23]
 8009bac:	e029      	b.n	8009c02 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009bb4:	2b02      	cmp	r3, #2
 8009bb6:	d120      	bne.n	8009bfa <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8009bb8:	68bb      	ldr	r3, [r7, #8]
 8009bba:	78db      	ldrb	r3, [r3, #3]
 8009bbc:	f003 0303 	and.w	r3, r3, #3
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d106      	bne.n	8009bd2 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8009bc4:	68bb      	ldr	r3, [r7, #8]
 8009bc6:	889b      	ldrh	r3, [r3, #4]
 8009bc8:	2b08      	cmp	r3, #8
 8009bca:	d01a      	beq.n	8009c02 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009bcc:	2303      	movs	r3, #3
 8009bce:	75fb      	strb	r3, [r7, #23]
 8009bd0:	e017      	b.n	8009c02 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009bd2:	68bb      	ldr	r3, [r7, #8]
 8009bd4:	78db      	ldrb	r3, [r3, #3]
 8009bd6:	f003 0303 	and.w	r3, r3, #3
 8009bda:	2b03      	cmp	r3, #3
 8009bdc:	d10a      	bne.n	8009bf4 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8009bde:	68bb      	ldr	r3, [r7, #8]
 8009be0:	799b      	ldrb	r3, [r3, #6]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d003      	beq.n	8009bee <USBH_ParseEPDesc+0x1ae>
 8009be6:	68bb      	ldr	r3, [r7, #8]
 8009be8:	889b      	ldrh	r3, [r3, #4]
 8009bea:	2b08      	cmp	r3, #8
 8009bec:	d909      	bls.n	8009c02 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009bee:	2303      	movs	r3, #3
 8009bf0:	75fb      	strb	r3, [r7, #23]
 8009bf2:	e006      	b.n	8009c02 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009bf4:	2303      	movs	r3, #3
 8009bf6:	75fb      	strb	r3, [r7, #23]
 8009bf8:	e003      	b.n	8009c02 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8009bfa:	2303      	movs	r3, #3
 8009bfc:	75fb      	strb	r3, [r7, #23]
 8009bfe:	e000      	b.n	8009c02 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009c00:	bf00      	nop
  }

  return status;
 8009c02:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c04:	4618      	mov	r0, r3
 8009c06:	371c      	adds	r7, #28
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0e:	4770      	bx	lr

08009c10 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8009c10:	b480      	push	{r7}
 8009c12:	b087      	sub	sp, #28
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	60f8      	str	r0, [r7, #12]
 8009c18:	60b9      	str	r1, [r7, #8]
 8009c1a:	4613      	mov	r3, r2
 8009c1c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	3301      	adds	r3, #1
 8009c22:	781b      	ldrb	r3, [r3, #0]
 8009c24:	2b03      	cmp	r3, #3
 8009c26:	d120      	bne.n	8009c6a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	781b      	ldrb	r3, [r3, #0]
 8009c2c:	1e9a      	subs	r2, r3, #2
 8009c2e:	88fb      	ldrh	r3, [r7, #6]
 8009c30:	4293      	cmp	r3, r2
 8009c32:	bf28      	it	cs
 8009c34:	4613      	movcs	r3, r2
 8009c36:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	3302      	adds	r3, #2
 8009c3c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8009c3e:	2300      	movs	r3, #0
 8009c40:	82fb      	strh	r3, [r7, #22]
 8009c42:	e00b      	b.n	8009c5c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8009c44:	8afb      	ldrh	r3, [r7, #22]
 8009c46:	68fa      	ldr	r2, [r7, #12]
 8009c48:	4413      	add	r3, r2
 8009c4a:	781a      	ldrb	r2, [r3, #0]
 8009c4c:	68bb      	ldr	r3, [r7, #8]
 8009c4e:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009c50:	68bb      	ldr	r3, [r7, #8]
 8009c52:	3301      	adds	r3, #1
 8009c54:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8009c56:	8afb      	ldrh	r3, [r7, #22]
 8009c58:	3302      	adds	r3, #2
 8009c5a:	82fb      	strh	r3, [r7, #22]
 8009c5c:	8afa      	ldrh	r2, [r7, #22]
 8009c5e:	8abb      	ldrh	r3, [r7, #20]
 8009c60:	429a      	cmp	r2, r3
 8009c62:	d3ef      	bcc.n	8009c44 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8009c64:	68bb      	ldr	r3, [r7, #8]
 8009c66:	2200      	movs	r2, #0
 8009c68:	701a      	strb	r2, [r3, #0]
  }
}
 8009c6a:	bf00      	nop
 8009c6c:	371c      	adds	r7, #28
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c74:	4770      	bx	lr

08009c76 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009c76:	b480      	push	{r7}
 8009c78:	b085      	sub	sp, #20
 8009c7a:	af00      	add	r7, sp, #0
 8009c7c:	6078      	str	r0, [r7, #4]
 8009c7e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	881b      	ldrh	r3, [r3, #0]
 8009c84:	687a      	ldr	r2, [r7, #4]
 8009c86:	7812      	ldrb	r2, [r2, #0]
 8009c88:	4413      	add	r3, r2
 8009c8a:	b29a      	uxth	r2, r3
 8009c8c:	683b      	ldr	r3, [r7, #0]
 8009c8e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	781b      	ldrb	r3, [r3, #0]
 8009c94:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	4413      	add	r3, r2
 8009c9a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009c9c:	68fb      	ldr	r3, [r7, #12]
}
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	3714      	adds	r7, #20
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca8:	4770      	bx	lr

08009caa <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8009caa:	b580      	push	{r7, lr}
 8009cac:	b086      	sub	sp, #24
 8009cae:	af00      	add	r7, sp, #0
 8009cb0:	60f8      	str	r0, [r7, #12]
 8009cb2:	60b9      	str	r1, [r7, #8]
 8009cb4:	4613      	mov	r3, r2
 8009cb6:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009cb8:	2301      	movs	r3, #1
 8009cba:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	789b      	ldrb	r3, [r3, #2]
 8009cc0:	2b01      	cmp	r3, #1
 8009cc2:	d002      	beq.n	8009cca <USBH_CtlReq+0x20>
 8009cc4:	2b02      	cmp	r3, #2
 8009cc6:	d01d      	beq.n	8009d04 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 8009cc8:	e043      	b.n	8009d52 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	68ba      	ldr	r2, [r7, #8]
 8009cce:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	88fa      	ldrh	r2, [r7, #6]
 8009cd4:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	2201      	movs	r2, #1
 8009cda:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	2202      	movs	r2, #2
 8009ce0:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8009ce2:	2301      	movs	r3, #1
 8009ce4:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	2203      	movs	r2, #3
 8009cea:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	f000 fd55 	bl	800a7ac <osMessageQueuePut>
      break;
 8009d02:	e026      	b.n	8009d52 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 8009d04:	68f8      	ldr	r0, [r7, #12]
 8009d06:	f000 f829 	bl	8009d5c <USBH_HandleControl>
 8009d0a:	4603      	mov	r3, r0
 8009d0c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8009d0e:	7dfb      	ldrb	r3, [r7, #23]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d002      	beq.n	8009d1a <USBH_CtlReq+0x70>
 8009d14:	7dfb      	ldrb	r3, [r7, #23]
 8009d16:	2b03      	cmp	r3, #3
 8009d18:	d106      	bne.n	8009d28 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	2201      	movs	r2, #1
 8009d1e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	2200      	movs	r2, #0
 8009d24:	761a      	strb	r2, [r3, #24]
 8009d26:	e005      	b.n	8009d34 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 8009d28:	7dfb      	ldrb	r3, [r7, #23]
 8009d2a:	2b02      	cmp	r3, #2
 8009d2c:	d102      	bne.n	8009d34 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	2201      	movs	r2, #1
 8009d32:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	2203      	movs	r2, #3
 8009d38:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8009d48:	2300      	movs	r3, #0
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	f000 fd2e 	bl	800a7ac <osMessageQueuePut>
      break;
 8009d50:	bf00      	nop
  }
  return status;
 8009d52:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d54:	4618      	mov	r0, r3
 8009d56:	3718      	adds	r7, #24
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	bd80      	pop	{r7, pc}

08009d5c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b086      	sub	sp, #24
 8009d60:	af02      	add	r7, sp, #8
 8009d62:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8009d64:	2301      	movs	r3, #1
 8009d66:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009d68:	2300      	movs	r3, #0
 8009d6a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	7e1b      	ldrb	r3, [r3, #24]
 8009d70:	3b01      	subs	r3, #1
 8009d72:	2b0a      	cmp	r3, #10
 8009d74:	f200 8229 	bhi.w	800a1ca <USBH_HandleControl+0x46e>
 8009d78:	a201      	add	r2, pc, #4	@ (adr r2, 8009d80 <USBH_HandleControl+0x24>)
 8009d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d7e:	bf00      	nop
 8009d80:	08009dad 	.word	0x08009dad
 8009d84:	08009dc7 	.word	0x08009dc7
 8009d88:	08009e69 	.word	0x08009e69
 8009d8c:	08009e8f 	.word	0x08009e8f
 8009d90:	08009f1b 	.word	0x08009f1b
 8009d94:	08009f45 	.word	0x08009f45
 8009d98:	0800a007 	.word	0x0800a007
 8009d9c:	0800a029 	.word	0x0800a029
 8009da0:	0800a0bb 	.word	0x0800a0bb
 8009da4:	0800a0e1 	.word	0x0800a0e1
 8009da8:	0800a173 	.word	0x0800a173
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	f103 0110 	add.w	r1, r3, #16
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	795b      	ldrb	r3, [r3, #5]
 8009db6:	461a      	mov	r2, r3
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	f000 fa17 	bl	800a1ec <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	2202      	movs	r2, #2
 8009dc2:	761a      	strb	r2, [r3, #24]
      break;
 8009dc4:	e20c      	b.n	800a1e0 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	795b      	ldrb	r3, [r3, #5]
 8009dca:	4619      	mov	r1, r3
 8009dcc:	6878      	ldr	r0, [r7, #4]
 8009dce:	f003 fdab 	bl	800d928 <USBH_LL_GetURBState>
 8009dd2:	4603      	mov	r3, r0
 8009dd4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8009dd6:	7bbb      	ldrb	r3, [r7, #14]
 8009dd8:	2b01      	cmp	r3, #1
 8009dda:	d12c      	bne.n	8009e36 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	7c1b      	ldrb	r3, [r3, #16]
 8009de0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009de4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	8adb      	ldrh	r3, [r3, #22]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d00a      	beq.n	8009e04 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8009dee:	7b7b      	ldrb	r3, [r7, #13]
 8009df0:	2b80      	cmp	r3, #128	@ 0x80
 8009df2:	d103      	bne.n	8009dfc <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2203      	movs	r2, #3
 8009df8:	761a      	strb	r2, [r3, #24]
 8009dfa:	e00d      	b.n	8009e18 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2205      	movs	r2, #5
 8009e00:	761a      	strb	r2, [r3, #24]
 8009e02:	e009      	b.n	8009e18 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 8009e04:	7b7b      	ldrb	r3, [r7, #13]
 8009e06:	2b80      	cmp	r3, #128	@ 0x80
 8009e08:	d103      	bne.n	8009e12 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	2209      	movs	r2, #9
 8009e0e:	761a      	strb	r2, [r3, #24]
 8009e10:	e002      	b.n	8009e18 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	2207      	movs	r2, #7
 8009e16:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	2203      	movs	r2, #3
 8009e1c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	2200      	movs	r2, #0
 8009e30:	f000 fcbc 	bl	800a7ac <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009e34:	e1cb      	b.n	800a1ce <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8009e36:	7bbb      	ldrb	r3, [r7, #14]
 8009e38:	2b04      	cmp	r3, #4
 8009e3a:	d003      	beq.n	8009e44 <USBH_HandleControl+0xe8>
 8009e3c:	7bbb      	ldrb	r3, [r7, #14]
 8009e3e:	2b02      	cmp	r3, #2
 8009e40:	f040 81c5 	bne.w	800a1ce <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	220b      	movs	r2, #11
 8009e48:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	2203      	movs	r2, #3
 8009e4e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8009e5e:	2300      	movs	r3, #0
 8009e60:	2200      	movs	r2, #0
 8009e62:	f000 fca3 	bl	800a7ac <osMessageQueuePut>
      break;
 8009e66:	e1b2      	b.n	800a1ce <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009e6e:	b29a      	uxth	r2, r3
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	6899      	ldr	r1, [r3, #8]
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	899a      	ldrh	r2, [r3, #12]
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	791b      	ldrb	r3, [r3, #4]
 8009e80:	6878      	ldr	r0, [r7, #4]
 8009e82:	f000 f9f2 	bl	800a26a <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	2204      	movs	r2, #4
 8009e8a:	761a      	strb	r2, [r3, #24]
      break;
 8009e8c:	e1a8      	b.n	800a1e0 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	791b      	ldrb	r3, [r3, #4]
 8009e92:	4619      	mov	r1, r3
 8009e94:	6878      	ldr	r0, [r7, #4]
 8009e96:	f003 fd47 	bl	800d928 <USBH_LL_GetURBState>
 8009e9a:	4603      	mov	r3, r0
 8009e9c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8009e9e:	7bbb      	ldrb	r3, [r7, #14]
 8009ea0:	2b01      	cmp	r3, #1
 8009ea2:	d110      	bne.n	8009ec6 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2209      	movs	r2, #9
 8009ea8:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	2203      	movs	r2, #3
 8009eae:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	f000 fc73 	bl	800a7ac <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8009ec6:	7bbb      	ldrb	r3, [r7, #14]
 8009ec8:	2b05      	cmp	r3, #5
 8009eca:	d110      	bne.n	8009eee <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8009ecc:	2303      	movs	r3, #3
 8009ece:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	2203      	movs	r2, #3
 8009ed4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	f000 fc60 	bl	800a7ac <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009eec:	e171      	b.n	800a1d2 <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 8009eee:	7bbb      	ldrb	r3, [r7, #14]
 8009ef0:	2b04      	cmp	r3, #4
 8009ef2:	f040 816e 	bne.w	800a1d2 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	220b      	movs	r2, #11
 8009efa:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2203      	movs	r2, #3
 8009f00:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8009f10:	2300      	movs	r3, #0
 8009f12:	2200      	movs	r2, #0
 8009f14:	f000 fc4a 	bl	800a7ac <osMessageQueuePut>
      break;
 8009f18:	e15b      	b.n	800a1d2 <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	6899      	ldr	r1, [r3, #8]
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	899a      	ldrh	r2, [r3, #12]
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	795b      	ldrb	r3, [r3, #5]
 8009f26:	2001      	movs	r0, #1
 8009f28:	9000      	str	r0, [sp, #0]
 8009f2a:	6878      	ldr	r0, [r7, #4]
 8009f2c:	f000 f978 	bl	800a220 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009f36:	b29a      	uxth	r2, r3
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2206      	movs	r2, #6
 8009f40:	761a      	strb	r2, [r3, #24]
      break;
 8009f42:	e14d      	b.n	800a1e0 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	795b      	ldrb	r3, [r3, #5]
 8009f48:	4619      	mov	r1, r3
 8009f4a:	6878      	ldr	r0, [r7, #4]
 8009f4c:	f003 fcec 	bl	800d928 <USBH_LL_GetURBState>
 8009f50:	4603      	mov	r3, r0
 8009f52:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009f54:	7bbb      	ldrb	r3, [r7, #14]
 8009f56:	2b01      	cmp	r3, #1
 8009f58:	d111      	bne.n	8009f7e <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	2207      	movs	r2, #7
 8009f5e:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2203      	movs	r2, #3
 8009f64:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8009f74:	2300      	movs	r3, #0
 8009f76:	2200      	movs	r2, #0
 8009f78:	f000 fc18 	bl	800a7ac <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009f7c:	e12b      	b.n	800a1d6 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 8009f7e:	7bbb      	ldrb	r3, [r7, #14]
 8009f80:	2b05      	cmp	r3, #5
 8009f82:	d113      	bne.n	8009fac <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	220c      	movs	r2, #12
 8009f88:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8009f8a:	2303      	movs	r3, #3
 8009f8c:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	2203      	movs	r2, #3
 8009f92:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	f000 fc01 	bl	800a7ac <osMessageQueuePut>
      break;
 8009faa:	e114      	b.n	800a1d6 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009fac:	7bbb      	ldrb	r3, [r7, #14]
 8009fae:	2b02      	cmp	r3, #2
 8009fb0:	d111      	bne.n	8009fd6 <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	2205      	movs	r2, #5
 8009fb6:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	2203      	movs	r2, #3
 8009fbc:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8009fcc:	2300      	movs	r3, #0
 8009fce:	2200      	movs	r2, #0
 8009fd0:	f000 fbec 	bl	800a7ac <osMessageQueuePut>
      break;
 8009fd4:	e0ff      	b.n	800a1d6 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 8009fd6:	7bbb      	ldrb	r3, [r7, #14]
 8009fd8:	2b04      	cmp	r3, #4
 8009fda:	f040 80fc 	bne.w	800a1d6 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	220b      	movs	r2, #11
 8009fe2:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009fe4:	2302      	movs	r3, #2
 8009fe6:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	2203      	movs	r2, #3
 8009fec:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	2200      	movs	r2, #0
 800a000:	f000 fbd4 	bl	800a7ac <osMessageQueuePut>
      break;
 800a004:	e0e7      	b.n	800a1d6 <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	791b      	ldrb	r3, [r3, #4]
 800a00a:	2200      	movs	r2, #0
 800a00c:	2100      	movs	r1, #0
 800a00e:	6878      	ldr	r0, [r7, #4]
 800a010:	f000 f92b 	bl	800a26a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a01a:	b29a      	uxth	r2, r3
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	2208      	movs	r2, #8
 800a024:	761a      	strb	r2, [r3, #24]

      break;
 800a026:	e0db      	b.n	800a1e0 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	791b      	ldrb	r3, [r3, #4]
 800a02c:	4619      	mov	r1, r3
 800a02e:	6878      	ldr	r0, [r7, #4]
 800a030:	f003 fc7a 	bl	800d928 <USBH_LL_GetURBState>
 800a034:	4603      	mov	r3, r0
 800a036:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a038:	7bbb      	ldrb	r3, [r7, #14]
 800a03a:	2b01      	cmp	r3, #1
 800a03c:	d113      	bne.n	800a066 <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	220d      	movs	r2, #13
 800a042:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800a044:	2300      	movs	r3, #0
 800a046:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2203      	movs	r2, #3
 800a04c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a05c:	2300      	movs	r3, #0
 800a05e:	2200      	movs	r2, #0
 800a060:	f000 fba4 	bl	800a7ac <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a064:	e0b9      	b.n	800a1da <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 800a066:	7bbb      	ldrb	r3, [r7, #14]
 800a068:	2b04      	cmp	r3, #4
 800a06a:	d111      	bne.n	800a090 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	220b      	movs	r2, #11
 800a070:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	2203      	movs	r2, #3
 800a076:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a086:	2300      	movs	r3, #0
 800a088:	2200      	movs	r2, #0
 800a08a:	f000 fb8f 	bl	800a7ac <osMessageQueuePut>
      break;
 800a08e:	e0a4      	b.n	800a1da <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 800a090:	7bbb      	ldrb	r3, [r7, #14]
 800a092:	2b05      	cmp	r3, #5
 800a094:	f040 80a1 	bne.w	800a1da <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 800a098:	2303      	movs	r3, #3
 800a09a:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	2203      	movs	r2, #3
 800a0a0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	f000 fb7a 	bl	800a7ac <osMessageQueuePut>
      break;
 800a0b8:	e08f      	b.n	800a1da <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	795b      	ldrb	r3, [r3, #5]
 800a0be:	2201      	movs	r2, #1
 800a0c0:	9200      	str	r2, [sp, #0]
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	2100      	movs	r1, #0
 800a0c6:	6878      	ldr	r0, [r7, #4]
 800a0c8:	f000 f8aa 	bl	800a220 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a0d2:	b29a      	uxth	r2, r3
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	220a      	movs	r2, #10
 800a0dc:	761a      	strb	r2, [r3, #24]
      break;
 800a0de:	e07f      	b.n	800a1e0 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	795b      	ldrb	r3, [r3, #5]
 800a0e4:	4619      	mov	r1, r3
 800a0e6:	6878      	ldr	r0, [r7, #4]
 800a0e8:	f003 fc1e 	bl	800d928 <USBH_LL_GetURBState>
 800a0ec:	4603      	mov	r3, r0
 800a0ee:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800a0f0:	7bbb      	ldrb	r3, [r7, #14]
 800a0f2:	2b01      	cmp	r3, #1
 800a0f4:	d113      	bne.n	800a11e <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	220d      	movs	r2, #13
 800a0fe:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	2203      	movs	r2, #3
 800a104:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a114:	2300      	movs	r3, #0
 800a116:	2200      	movs	r2, #0
 800a118:	f000 fb48 	bl	800a7ac <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a11c:	e05f      	b.n	800a1de <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a11e:	7bbb      	ldrb	r3, [r7, #14]
 800a120:	2b02      	cmp	r3, #2
 800a122:	d111      	bne.n	800a148 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2209      	movs	r2, #9
 800a128:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	2203      	movs	r2, #3
 800a12e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a13e:	2300      	movs	r3, #0
 800a140:	2200      	movs	r2, #0
 800a142:	f000 fb33 	bl	800a7ac <osMessageQueuePut>
      break;
 800a146:	e04a      	b.n	800a1de <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 800a148:	7bbb      	ldrb	r3, [r7, #14]
 800a14a:	2b04      	cmp	r3, #4
 800a14c:	d147      	bne.n	800a1de <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	220b      	movs	r2, #11
 800a152:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	2203      	movs	r2, #3
 800a158:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a168:	2300      	movs	r3, #0
 800a16a:	2200      	movs	r2, #0
 800a16c:	f000 fb1e 	bl	800a7ac <osMessageQueuePut>
      break;
 800a170:	e035      	b.n	800a1de <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	7e5b      	ldrb	r3, [r3, #25]
 800a176:	3301      	adds	r3, #1
 800a178:	b2da      	uxtb	r2, r3
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	765a      	strb	r2, [r3, #25]
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	7e5b      	ldrb	r3, [r3, #25]
 800a182:	2b02      	cmp	r3, #2
 800a184:	d806      	bhi.n	800a194 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	2201      	movs	r2, #1
 800a18a:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2201      	movs	r2, #1
 800a190:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800a192:	e025      	b.n	800a1e0 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a19a:	2106      	movs	r1, #6
 800a19c:	6878      	ldr	r0, [r7, #4]
 800a19e:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	795b      	ldrb	r3, [r3, #5]
 800a1aa:	4619      	mov	r1, r3
 800a1ac:	6878      	ldr	r0, [r7, #4]
 800a1ae:	f000 f90d 	bl	800a3cc <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	791b      	ldrb	r3, [r3, #4]
 800a1b6:	4619      	mov	r1, r3
 800a1b8:	6878      	ldr	r0, [r7, #4]
 800a1ba:	f000 f907 	bl	800a3cc <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800a1c4:	2302      	movs	r3, #2
 800a1c6:	73fb      	strb	r3, [r7, #15]
      break;
 800a1c8:	e00a      	b.n	800a1e0 <USBH_HandleControl+0x484>

    default:
      break;
 800a1ca:	bf00      	nop
 800a1cc:	e008      	b.n	800a1e0 <USBH_HandleControl+0x484>
      break;
 800a1ce:	bf00      	nop
 800a1d0:	e006      	b.n	800a1e0 <USBH_HandleControl+0x484>
      break;
 800a1d2:	bf00      	nop
 800a1d4:	e004      	b.n	800a1e0 <USBH_HandleControl+0x484>
      break;
 800a1d6:	bf00      	nop
 800a1d8:	e002      	b.n	800a1e0 <USBH_HandleControl+0x484>
      break;
 800a1da:	bf00      	nop
 800a1dc:	e000      	b.n	800a1e0 <USBH_HandleControl+0x484>
      break;
 800a1de:	bf00      	nop
  }

  return status;
 800a1e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	3710      	adds	r7, #16
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	bd80      	pop	{r7, pc}
 800a1ea:	bf00      	nop

0800a1ec <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b088      	sub	sp, #32
 800a1f0:	af04      	add	r7, sp, #16
 800a1f2:	60f8      	str	r0, [r7, #12]
 800a1f4:	60b9      	str	r1, [r7, #8]
 800a1f6:	4613      	mov	r3, r2
 800a1f8:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a1fa:	79f9      	ldrb	r1, [r7, #7]
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	9303      	str	r3, [sp, #12]
 800a200:	2308      	movs	r3, #8
 800a202:	9302      	str	r3, [sp, #8]
 800a204:	68bb      	ldr	r3, [r7, #8]
 800a206:	9301      	str	r3, [sp, #4]
 800a208:	2300      	movs	r3, #0
 800a20a:	9300      	str	r3, [sp, #0]
 800a20c:	2300      	movs	r3, #0
 800a20e:	2200      	movs	r2, #0
 800a210:	68f8      	ldr	r0, [r7, #12]
 800a212:	f003 fb58 	bl	800d8c6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800a216:	2300      	movs	r3, #0
}
 800a218:	4618      	mov	r0, r3
 800a21a:	3710      	adds	r7, #16
 800a21c:	46bd      	mov	sp, r7
 800a21e:	bd80      	pop	{r7, pc}

0800a220 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800a220:	b580      	push	{r7, lr}
 800a222:	b088      	sub	sp, #32
 800a224:	af04      	add	r7, sp, #16
 800a226:	60f8      	str	r0, [r7, #12]
 800a228:	60b9      	str	r1, [r7, #8]
 800a22a:	4611      	mov	r1, r2
 800a22c:	461a      	mov	r2, r3
 800a22e:	460b      	mov	r3, r1
 800a230:	80fb      	strh	r3, [r7, #6]
 800a232:	4613      	mov	r3, r2
 800a234:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d001      	beq.n	800a244 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800a240:	2300      	movs	r3, #0
 800a242:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a244:	7979      	ldrb	r1, [r7, #5]
 800a246:	7e3b      	ldrb	r3, [r7, #24]
 800a248:	9303      	str	r3, [sp, #12]
 800a24a:	88fb      	ldrh	r3, [r7, #6]
 800a24c:	9302      	str	r3, [sp, #8]
 800a24e:	68bb      	ldr	r3, [r7, #8]
 800a250:	9301      	str	r3, [sp, #4]
 800a252:	2301      	movs	r3, #1
 800a254:	9300      	str	r3, [sp, #0]
 800a256:	2300      	movs	r3, #0
 800a258:	2200      	movs	r2, #0
 800a25a:	68f8      	ldr	r0, [r7, #12]
 800a25c:	f003 fb33 	bl	800d8c6 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800a260:	2300      	movs	r3, #0
}
 800a262:	4618      	mov	r0, r3
 800a264:	3710      	adds	r7, #16
 800a266:	46bd      	mov	sp, r7
 800a268:	bd80      	pop	{r7, pc}

0800a26a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800a26a:	b580      	push	{r7, lr}
 800a26c:	b088      	sub	sp, #32
 800a26e:	af04      	add	r7, sp, #16
 800a270:	60f8      	str	r0, [r7, #12]
 800a272:	60b9      	str	r1, [r7, #8]
 800a274:	4611      	mov	r1, r2
 800a276:	461a      	mov	r2, r3
 800a278:	460b      	mov	r3, r1
 800a27a:	80fb      	strh	r3, [r7, #6]
 800a27c:	4613      	mov	r3, r2
 800a27e:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a280:	7979      	ldrb	r1, [r7, #5]
 800a282:	2300      	movs	r3, #0
 800a284:	9303      	str	r3, [sp, #12]
 800a286:	88fb      	ldrh	r3, [r7, #6]
 800a288:	9302      	str	r3, [sp, #8]
 800a28a:	68bb      	ldr	r3, [r7, #8]
 800a28c:	9301      	str	r3, [sp, #4]
 800a28e:	2301      	movs	r3, #1
 800a290:	9300      	str	r3, [sp, #0]
 800a292:	2300      	movs	r3, #0
 800a294:	2201      	movs	r2, #1
 800a296:	68f8      	ldr	r0, [r7, #12]
 800a298:	f003 fb15 	bl	800d8c6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a29c:	2300      	movs	r3, #0

}
 800a29e:	4618      	mov	r0, r3
 800a2a0:	3710      	adds	r7, #16
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	bd80      	pop	{r7, pc}

0800a2a6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800a2a6:	b580      	push	{r7, lr}
 800a2a8:	b088      	sub	sp, #32
 800a2aa:	af04      	add	r7, sp, #16
 800a2ac:	60f8      	str	r0, [r7, #12]
 800a2ae:	60b9      	str	r1, [r7, #8]
 800a2b0:	4611      	mov	r1, r2
 800a2b2:	461a      	mov	r2, r3
 800a2b4:	460b      	mov	r3, r1
 800a2b6:	80fb      	strh	r3, [r7, #6]
 800a2b8:	4613      	mov	r3, r2
 800a2ba:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d001      	beq.n	800a2ca <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a2ca:	7979      	ldrb	r1, [r7, #5]
 800a2cc:	7e3b      	ldrb	r3, [r7, #24]
 800a2ce:	9303      	str	r3, [sp, #12]
 800a2d0:	88fb      	ldrh	r3, [r7, #6]
 800a2d2:	9302      	str	r3, [sp, #8]
 800a2d4:	68bb      	ldr	r3, [r7, #8]
 800a2d6:	9301      	str	r3, [sp, #4]
 800a2d8:	2301      	movs	r3, #1
 800a2da:	9300      	str	r3, [sp, #0]
 800a2dc:	2302      	movs	r3, #2
 800a2de:	2200      	movs	r2, #0
 800a2e0:	68f8      	ldr	r0, [r7, #12]
 800a2e2:	f003 faf0 	bl	800d8c6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800a2e6:	2300      	movs	r3, #0
}
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	3710      	adds	r7, #16
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	bd80      	pop	{r7, pc}

0800a2f0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b088      	sub	sp, #32
 800a2f4:	af04      	add	r7, sp, #16
 800a2f6:	60f8      	str	r0, [r7, #12]
 800a2f8:	60b9      	str	r1, [r7, #8]
 800a2fa:	4611      	mov	r1, r2
 800a2fc:	461a      	mov	r2, r3
 800a2fe:	460b      	mov	r3, r1
 800a300:	80fb      	strh	r3, [r7, #6]
 800a302:	4613      	mov	r3, r2
 800a304:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a306:	7979      	ldrb	r1, [r7, #5]
 800a308:	2300      	movs	r3, #0
 800a30a:	9303      	str	r3, [sp, #12]
 800a30c:	88fb      	ldrh	r3, [r7, #6]
 800a30e:	9302      	str	r3, [sp, #8]
 800a310:	68bb      	ldr	r3, [r7, #8]
 800a312:	9301      	str	r3, [sp, #4]
 800a314:	2301      	movs	r3, #1
 800a316:	9300      	str	r3, [sp, #0]
 800a318:	2302      	movs	r3, #2
 800a31a:	2201      	movs	r2, #1
 800a31c:	68f8      	ldr	r0, [r7, #12]
 800a31e:	f003 fad2 	bl	800d8c6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a322:	2300      	movs	r3, #0
}
 800a324:	4618      	mov	r0, r3
 800a326:	3710      	adds	r7, #16
 800a328:	46bd      	mov	sp, r7
 800a32a:	bd80      	pop	{r7, pc}

0800a32c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b086      	sub	sp, #24
 800a330:	af04      	add	r7, sp, #16
 800a332:	6078      	str	r0, [r7, #4]
 800a334:	4608      	mov	r0, r1
 800a336:	4611      	mov	r1, r2
 800a338:	461a      	mov	r2, r3
 800a33a:	4603      	mov	r3, r0
 800a33c:	70fb      	strb	r3, [r7, #3]
 800a33e:	460b      	mov	r3, r1
 800a340:	70bb      	strb	r3, [r7, #2]
 800a342:	4613      	mov	r3, r2
 800a344:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800a346:	7878      	ldrb	r0, [r7, #1]
 800a348:	78ba      	ldrb	r2, [r7, #2]
 800a34a:	78f9      	ldrb	r1, [r7, #3]
 800a34c:	8b3b      	ldrh	r3, [r7, #24]
 800a34e:	9302      	str	r3, [sp, #8]
 800a350:	7d3b      	ldrb	r3, [r7, #20]
 800a352:	9301      	str	r3, [sp, #4]
 800a354:	7c3b      	ldrb	r3, [r7, #16]
 800a356:	9300      	str	r3, [sp, #0]
 800a358:	4603      	mov	r3, r0
 800a35a:	6878      	ldr	r0, [r7, #4]
 800a35c:	f003 fa65 	bl	800d82a <USBH_LL_OpenPipe>

  return USBH_OK;
 800a360:	2300      	movs	r3, #0
}
 800a362:	4618      	mov	r0, r3
 800a364:	3708      	adds	r7, #8
 800a366:	46bd      	mov	sp, r7
 800a368:	bd80      	pop	{r7, pc}

0800a36a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800a36a:	b580      	push	{r7, lr}
 800a36c:	b082      	sub	sp, #8
 800a36e:	af00      	add	r7, sp, #0
 800a370:	6078      	str	r0, [r7, #4]
 800a372:	460b      	mov	r3, r1
 800a374:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800a376:	78fb      	ldrb	r3, [r7, #3]
 800a378:	4619      	mov	r1, r3
 800a37a:	6878      	ldr	r0, [r7, #4]
 800a37c:	f003 fa84 	bl	800d888 <USBH_LL_ClosePipe>

  return USBH_OK;
 800a380:	2300      	movs	r3, #0
}
 800a382:	4618      	mov	r0, r3
 800a384:	3708      	adds	r7, #8
 800a386:	46bd      	mov	sp, r7
 800a388:	bd80      	pop	{r7, pc}

0800a38a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a38a:	b580      	push	{r7, lr}
 800a38c:	b084      	sub	sp, #16
 800a38e:	af00      	add	r7, sp, #0
 800a390:	6078      	str	r0, [r7, #4]
 800a392:	460b      	mov	r3, r1
 800a394:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800a396:	6878      	ldr	r0, [r7, #4]
 800a398:	f000 f836 	bl	800a408 <USBH_GetFreePipe>
 800a39c:	4603      	mov	r3, r0
 800a39e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800a3a0:	89fb      	ldrh	r3, [r7, #14]
 800a3a2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a3a6:	4293      	cmp	r3, r2
 800a3a8:	d00a      	beq.n	800a3c0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800a3aa:	78fa      	ldrb	r2, [r7, #3]
 800a3ac:	89fb      	ldrh	r3, [r7, #14]
 800a3ae:	f003 030f 	and.w	r3, r3, #15
 800a3b2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a3b6:	6879      	ldr	r1, [r7, #4]
 800a3b8:	33e0      	adds	r3, #224	@ 0xe0
 800a3ba:	009b      	lsls	r3, r3, #2
 800a3bc:	440b      	add	r3, r1
 800a3be:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800a3c0:	89fb      	ldrh	r3, [r7, #14]
 800a3c2:	b2db      	uxtb	r3, r3
}
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	3710      	adds	r7, #16
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	bd80      	pop	{r7, pc}

0800a3cc <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a3cc:	b480      	push	{r7}
 800a3ce:	b083      	sub	sp, #12
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
 800a3d4:	460b      	mov	r3, r1
 800a3d6:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800a3d8:	78fb      	ldrb	r3, [r7, #3]
 800a3da:	2b0f      	cmp	r3, #15
 800a3dc:	d80d      	bhi.n	800a3fa <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800a3de:	78fb      	ldrb	r3, [r7, #3]
 800a3e0:	687a      	ldr	r2, [r7, #4]
 800a3e2:	33e0      	adds	r3, #224	@ 0xe0
 800a3e4:	009b      	lsls	r3, r3, #2
 800a3e6:	4413      	add	r3, r2
 800a3e8:	685a      	ldr	r2, [r3, #4]
 800a3ea:	78fb      	ldrb	r3, [r7, #3]
 800a3ec:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800a3f0:	6879      	ldr	r1, [r7, #4]
 800a3f2:	33e0      	adds	r3, #224	@ 0xe0
 800a3f4:	009b      	lsls	r3, r3, #2
 800a3f6:	440b      	add	r3, r1
 800a3f8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800a3fa:	2300      	movs	r3, #0
}
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	370c      	adds	r7, #12
 800a400:	46bd      	mov	sp, r7
 800a402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a406:	4770      	bx	lr

0800a408 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800a408:	b480      	push	{r7}
 800a40a:	b085      	sub	sp, #20
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800a410:	2300      	movs	r3, #0
 800a412:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800a414:	2300      	movs	r3, #0
 800a416:	73fb      	strb	r3, [r7, #15]
 800a418:	e00f      	b.n	800a43a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800a41a:	7bfb      	ldrb	r3, [r7, #15]
 800a41c:	687a      	ldr	r2, [r7, #4]
 800a41e:	33e0      	adds	r3, #224	@ 0xe0
 800a420:	009b      	lsls	r3, r3, #2
 800a422:	4413      	add	r3, r2
 800a424:	685b      	ldr	r3, [r3, #4]
 800a426:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d102      	bne.n	800a434 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800a42e:	7bfb      	ldrb	r3, [r7, #15]
 800a430:	b29b      	uxth	r3, r3
 800a432:	e007      	b.n	800a444 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800a434:	7bfb      	ldrb	r3, [r7, #15]
 800a436:	3301      	adds	r3, #1
 800a438:	73fb      	strb	r3, [r7, #15]
 800a43a:	7bfb      	ldrb	r3, [r7, #15]
 800a43c:	2b0f      	cmp	r3, #15
 800a43e:	d9ec      	bls.n	800a41a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800a440:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800a444:	4618      	mov	r0, r3
 800a446:	3714      	adds	r7, #20
 800a448:	46bd      	mov	sp, r7
 800a44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44e:	4770      	bx	lr

0800a450 <__NVIC_SetPriority>:
{
 800a450:	b480      	push	{r7}
 800a452:	b083      	sub	sp, #12
 800a454:	af00      	add	r7, sp, #0
 800a456:	4603      	mov	r3, r0
 800a458:	6039      	str	r1, [r7, #0]
 800a45a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a45c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a460:	2b00      	cmp	r3, #0
 800a462:	db0a      	blt.n	800a47a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a464:	683b      	ldr	r3, [r7, #0]
 800a466:	b2da      	uxtb	r2, r3
 800a468:	490c      	ldr	r1, [pc, #48]	@ (800a49c <__NVIC_SetPriority+0x4c>)
 800a46a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a46e:	0112      	lsls	r2, r2, #4
 800a470:	b2d2      	uxtb	r2, r2
 800a472:	440b      	add	r3, r1
 800a474:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800a478:	e00a      	b.n	800a490 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	b2da      	uxtb	r2, r3
 800a47e:	4908      	ldr	r1, [pc, #32]	@ (800a4a0 <__NVIC_SetPriority+0x50>)
 800a480:	79fb      	ldrb	r3, [r7, #7]
 800a482:	f003 030f 	and.w	r3, r3, #15
 800a486:	3b04      	subs	r3, #4
 800a488:	0112      	lsls	r2, r2, #4
 800a48a:	b2d2      	uxtb	r2, r2
 800a48c:	440b      	add	r3, r1
 800a48e:	761a      	strb	r2, [r3, #24]
}
 800a490:	bf00      	nop
 800a492:	370c      	adds	r7, #12
 800a494:	46bd      	mov	sp, r7
 800a496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49a:	4770      	bx	lr
 800a49c:	e000e100 	.word	0xe000e100
 800a4a0:	e000ed00 	.word	0xe000ed00

0800a4a4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a4a8:	4b05      	ldr	r3, [pc, #20]	@ (800a4c0 <SysTick_Handler+0x1c>)
 800a4aa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a4ac:	f001 ff5c 	bl	800c368 <xTaskGetSchedulerState>
 800a4b0:	4603      	mov	r3, r0
 800a4b2:	2b01      	cmp	r3, #1
 800a4b4:	d001      	beq.n	800a4ba <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a4b6:	f002 fd57 	bl	800cf68 <xPortSysTickHandler>
  }
}
 800a4ba:	bf00      	nop
 800a4bc:	bd80      	pop	{r7, pc}
 800a4be:	bf00      	nop
 800a4c0:	e000e010 	.word	0xe000e010

0800a4c4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a4c8:	2100      	movs	r1, #0
 800a4ca:	f06f 0004 	mvn.w	r0, #4
 800a4ce:	f7ff ffbf 	bl	800a450 <__NVIC_SetPriority>
#endif
}
 800a4d2:	bf00      	nop
 800a4d4:	bd80      	pop	{r7, pc}
	...

0800a4d8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a4d8:	b480      	push	{r7}
 800a4da:	b083      	sub	sp, #12
 800a4dc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a4de:	f3ef 8305 	mrs	r3, IPSR
 800a4e2:	603b      	str	r3, [r7, #0]
  return(result);
 800a4e4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d003      	beq.n	800a4f2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a4ea:	f06f 0305 	mvn.w	r3, #5
 800a4ee:	607b      	str	r3, [r7, #4]
 800a4f0:	e00c      	b.n	800a50c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a4f2:	4b0a      	ldr	r3, [pc, #40]	@ (800a51c <osKernelInitialize+0x44>)
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d105      	bne.n	800a506 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a4fa:	4b08      	ldr	r3, [pc, #32]	@ (800a51c <osKernelInitialize+0x44>)
 800a4fc:	2201      	movs	r2, #1
 800a4fe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a500:	2300      	movs	r3, #0
 800a502:	607b      	str	r3, [r7, #4]
 800a504:	e002      	b.n	800a50c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a506:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a50a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a50c:	687b      	ldr	r3, [r7, #4]
}
 800a50e:	4618      	mov	r0, r3
 800a510:	370c      	adds	r7, #12
 800a512:	46bd      	mov	sp, r7
 800a514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a518:	4770      	bx	lr
 800a51a:	bf00      	nop
 800a51c:	20000380 	.word	0x20000380

0800a520 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a520:	b580      	push	{r7, lr}
 800a522:	b082      	sub	sp, #8
 800a524:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a526:	f3ef 8305 	mrs	r3, IPSR
 800a52a:	603b      	str	r3, [r7, #0]
  return(result);
 800a52c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d003      	beq.n	800a53a <osKernelStart+0x1a>
    stat = osErrorISR;
 800a532:	f06f 0305 	mvn.w	r3, #5
 800a536:	607b      	str	r3, [r7, #4]
 800a538:	e010      	b.n	800a55c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a53a:	4b0b      	ldr	r3, [pc, #44]	@ (800a568 <osKernelStart+0x48>)
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	2b01      	cmp	r3, #1
 800a540:	d109      	bne.n	800a556 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a542:	f7ff ffbf 	bl	800a4c4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a546:	4b08      	ldr	r3, [pc, #32]	@ (800a568 <osKernelStart+0x48>)
 800a548:	2202      	movs	r2, #2
 800a54a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a54c:	f001 fa82 	bl	800ba54 <vTaskStartScheduler>
      stat = osOK;
 800a550:	2300      	movs	r3, #0
 800a552:	607b      	str	r3, [r7, #4]
 800a554:	e002      	b.n	800a55c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a556:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a55a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a55c:	687b      	ldr	r3, [r7, #4]
}
 800a55e:	4618      	mov	r0, r3
 800a560:	3708      	adds	r7, #8
 800a562:	46bd      	mov	sp, r7
 800a564:	bd80      	pop	{r7, pc}
 800a566:	bf00      	nop
 800a568:	20000380 	.word	0x20000380

0800a56c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a56c:	b580      	push	{r7, lr}
 800a56e:	b08e      	sub	sp, #56	@ 0x38
 800a570:	af04      	add	r7, sp, #16
 800a572:	60f8      	str	r0, [r7, #12]
 800a574:	60b9      	str	r1, [r7, #8]
 800a576:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a578:	2300      	movs	r3, #0
 800a57a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a57c:	f3ef 8305 	mrs	r3, IPSR
 800a580:	617b      	str	r3, [r7, #20]
  return(result);
 800a582:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a584:	2b00      	cmp	r3, #0
 800a586:	d17e      	bne.n	800a686 <osThreadNew+0x11a>
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d07b      	beq.n	800a686 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a58e:	2380      	movs	r3, #128	@ 0x80
 800a590:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a592:	2318      	movs	r3, #24
 800a594:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a596:	2300      	movs	r3, #0
 800a598:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800a59a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a59e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d045      	beq.n	800a632 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d002      	beq.n	800a5b4 <osThreadNew+0x48>
        name = attr->name;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	699b      	ldr	r3, [r3, #24]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d002      	beq.n	800a5c2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	699b      	ldr	r3, [r3, #24]
 800a5c0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a5c2:	69fb      	ldr	r3, [r7, #28]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d008      	beq.n	800a5da <osThreadNew+0x6e>
 800a5c8:	69fb      	ldr	r3, [r7, #28]
 800a5ca:	2b38      	cmp	r3, #56	@ 0x38
 800a5cc:	d805      	bhi.n	800a5da <osThreadNew+0x6e>
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	685b      	ldr	r3, [r3, #4]
 800a5d2:	f003 0301 	and.w	r3, r3, #1
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d001      	beq.n	800a5de <osThreadNew+0x72>
        return (NULL);
 800a5da:	2300      	movs	r3, #0
 800a5dc:	e054      	b.n	800a688 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	695b      	ldr	r3, [r3, #20]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d003      	beq.n	800a5ee <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	695b      	ldr	r3, [r3, #20]
 800a5ea:	089b      	lsrs	r3, r3, #2
 800a5ec:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	689b      	ldr	r3, [r3, #8]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d00e      	beq.n	800a614 <osThreadNew+0xa8>
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	68db      	ldr	r3, [r3, #12]
 800a5fa:	2bab      	cmp	r3, #171	@ 0xab
 800a5fc:	d90a      	bls.n	800a614 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a602:	2b00      	cmp	r3, #0
 800a604:	d006      	beq.n	800a614 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	695b      	ldr	r3, [r3, #20]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d002      	beq.n	800a614 <osThreadNew+0xa8>
        mem = 1;
 800a60e:	2301      	movs	r3, #1
 800a610:	61bb      	str	r3, [r7, #24]
 800a612:	e010      	b.n	800a636 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	689b      	ldr	r3, [r3, #8]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d10c      	bne.n	800a636 <osThreadNew+0xca>
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	68db      	ldr	r3, [r3, #12]
 800a620:	2b00      	cmp	r3, #0
 800a622:	d108      	bne.n	800a636 <osThreadNew+0xca>
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	691b      	ldr	r3, [r3, #16]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d104      	bne.n	800a636 <osThreadNew+0xca>
          mem = 0;
 800a62c:	2300      	movs	r3, #0
 800a62e:	61bb      	str	r3, [r7, #24]
 800a630:	e001      	b.n	800a636 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a632:	2300      	movs	r3, #0
 800a634:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a636:	69bb      	ldr	r3, [r7, #24]
 800a638:	2b01      	cmp	r3, #1
 800a63a:	d110      	bne.n	800a65e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a640:	687a      	ldr	r2, [r7, #4]
 800a642:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a644:	9202      	str	r2, [sp, #8]
 800a646:	9301      	str	r3, [sp, #4]
 800a648:	69fb      	ldr	r3, [r7, #28]
 800a64a:	9300      	str	r3, [sp, #0]
 800a64c:	68bb      	ldr	r3, [r7, #8]
 800a64e:	6a3a      	ldr	r2, [r7, #32]
 800a650:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a652:	68f8      	ldr	r0, [r7, #12]
 800a654:	f001 f808 	bl	800b668 <xTaskCreateStatic>
 800a658:	4603      	mov	r3, r0
 800a65a:	613b      	str	r3, [r7, #16]
 800a65c:	e013      	b.n	800a686 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a65e:	69bb      	ldr	r3, [r7, #24]
 800a660:	2b00      	cmp	r3, #0
 800a662:	d110      	bne.n	800a686 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a664:	6a3b      	ldr	r3, [r7, #32]
 800a666:	b29a      	uxth	r2, r3
 800a668:	f107 0310 	add.w	r3, r7, #16
 800a66c:	9301      	str	r3, [sp, #4]
 800a66e:	69fb      	ldr	r3, [r7, #28]
 800a670:	9300      	str	r3, [sp, #0]
 800a672:	68bb      	ldr	r3, [r7, #8]
 800a674:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a676:	68f8      	ldr	r0, [r7, #12]
 800a678:	f001 f856 	bl	800b728 <xTaskCreate>
 800a67c:	4603      	mov	r3, r0
 800a67e:	2b01      	cmp	r3, #1
 800a680:	d001      	beq.n	800a686 <osThreadNew+0x11a>
            hTask = NULL;
 800a682:	2300      	movs	r3, #0
 800a684:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a686:	693b      	ldr	r3, [r7, #16]
}
 800a688:	4618      	mov	r0, r3
 800a68a:	3728      	adds	r7, #40	@ 0x28
 800a68c:	46bd      	mov	sp, r7
 800a68e:	bd80      	pop	{r7, pc}

0800a690 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a690:	b580      	push	{r7, lr}
 800a692:	b084      	sub	sp, #16
 800a694:	af00      	add	r7, sp, #0
 800a696:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a698:	f3ef 8305 	mrs	r3, IPSR
 800a69c:	60bb      	str	r3, [r7, #8]
  return(result);
 800a69e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d003      	beq.n	800a6ac <osDelay+0x1c>
    stat = osErrorISR;
 800a6a4:	f06f 0305 	mvn.w	r3, #5
 800a6a8:	60fb      	str	r3, [r7, #12]
 800a6aa:	e007      	b.n	800a6bc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d002      	beq.n	800a6bc <osDelay+0x2c>
      vTaskDelay(ticks);
 800a6b6:	6878      	ldr	r0, [r7, #4]
 800a6b8:	f001 f996 	bl	800b9e8 <vTaskDelay>
    }
  }

  return (stat);
 800a6bc:	68fb      	ldr	r3, [r7, #12]
}
 800a6be:	4618      	mov	r0, r3
 800a6c0:	3710      	adds	r7, #16
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	bd80      	pop	{r7, pc}

0800a6c6 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800a6c6:	b580      	push	{r7, lr}
 800a6c8:	b08a      	sub	sp, #40	@ 0x28
 800a6ca:	af02      	add	r7, sp, #8
 800a6cc:	60f8      	str	r0, [r7, #12]
 800a6ce:	60b9      	str	r1, [r7, #8]
 800a6d0:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a6d6:	f3ef 8305 	mrs	r3, IPSR
 800a6da:	613b      	str	r3, [r7, #16]
  return(result);
 800a6dc:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d15f      	bne.n	800a7a2 <osMessageQueueNew+0xdc>
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d05c      	beq.n	800a7a2 <osMessageQueueNew+0xdc>
 800a6e8:	68bb      	ldr	r3, [r7, #8]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d059      	beq.n	800a7a2 <osMessageQueueNew+0xdc>
    mem = -1;
 800a6ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a6f2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d029      	beq.n	800a74e <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	689b      	ldr	r3, [r3, #8]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d012      	beq.n	800a728 <osMessageQueueNew+0x62>
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	68db      	ldr	r3, [r3, #12]
 800a706:	2b4f      	cmp	r3, #79	@ 0x4f
 800a708:	d90e      	bls.n	800a728 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d00a      	beq.n	800a728 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	695a      	ldr	r2, [r3, #20]
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	68b9      	ldr	r1, [r7, #8]
 800a71a:	fb01 f303 	mul.w	r3, r1, r3
 800a71e:	429a      	cmp	r2, r3
 800a720:	d302      	bcc.n	800a728 <osMessageQueueNew+0x62>
        mem = 1;
 800a722:	2301      	movs	r3, #1
 800a724:	61bb      	str	r3, [r7, #24]
 800a726:	e014      	b.n	800a752 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	689b      	ldr	r3, [r3, #8]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d110      	bne.n	800a752 <osMessageQueueNew+0x8c>
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	68db      	ldr	r3, [r3, #12]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d10c      	bne.n	800a752 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d108      	bne.n	800a752 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	695b      	ldr	r3, [r3, #20]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d104      	bne.n	800a752 <osMessageQueueNew+0x8c>
          mem = 0;
 800a748:	2300      	movs	r3, #0
 800a74a:	61bb      	str	r3, [r7, #24]
 800a74c:	e001      	b.n	800a752 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800a74e:	2300      	movs	r3, #0
 800a750:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a752:	69bb      	ldr	r3, [r7, #24]
 800a754:	2b01      	cmp	r3, #1
 800a756:	d10b      	bne.n	800a770 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	691a      	ldr	r2, [r3, #16]
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	689b      	ldr	r3, [r3, #8]
 800a760:	2100      	movs	r1, #0
 800a762:	9100      	str	r1, [sp, #0]
 800a764:	68b9      	ldr	r1, [r7, #8]
 800a766:	68f8      	ldr	r0, [r7, #12]
 800a768:	f000 fa30 	bl	800abcc <xQueueGenericCreateStatic>
 800a76c:	61f8      	str	r0, [r7, #28]
 800a76e:	e008      	b.n	800a782 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800a770:	69bb      	ldr	r3, [r7, #24]
 800a772:	2b00      	cmp	r3, #0
 800a774:	d105      	bne.n	800a782 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800a776:	2200      	movs	r2, #0
 800a778:	68b9      	ldr	r1, [r7, #8]
 800a77a:	68f8      	ldr	r0, [r7, #12]
 800a77c:	f000 faa3 	bl	800acc6 <xQueueGenericCreate>
 800a780:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800a782:	69fb      	ldr	r3, [r7, #28]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d00c      	beq.n	800a7a2 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d003      	beq.n	800a796 <osMessageQueueNew+0xd0>
        name = attr->name;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	617b      	str	r3, [r7, #20]
 800a794:	e001      	b.n	800a79a <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800a796:	2300      	movs	r3, #0
 800a798:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800a79a:	6979      	ldr	r1, [r7, #20]
 800a79c:	69f8      	ldr	r0, [r7, #28]
 800a79e:	f000 ff05 	bl	800b5ac <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800a7a2:	69fb      	ldr	r3, [r7, #28]
}
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	3720      	adds	r7, #32
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	bd80      	pop	{r7, pc}

0800a7ac <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b088      	sub	sp, #32
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	60f8      	str	r0, [r7, #12]
 800a7b4:	60b9      	str	r1, [r7, #8]
 800a7b6:	603b      	str	r3, [r7, #0]
 800a7b8:	4613      	mov	r3, r2
 800a7ba:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a7c4:	f3ef 8305 	mrs	r3, IPSR
 800a7c8:	617b      	str	r3, [r7, #20]
  return(result);
 800a7ca:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d028      	beq.n	800a822 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a7d0:	69bb      	ldr	r3, [r7, #24]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d005      	beq.n	800a7e2 <osMessageQueuePut+0x36>
 800a7d6:	68bb      	ldr	r3, [r7, #8]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d002      	beq.n	800a7e2 <osMessageQueuePut+0x36>
 800a7dc:	683b      	ldr	r3, [r7, #0]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d003      	beq.n	800a7ea <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800a7e2:	f06f 0303 	mvn.w	r3, #3
 800a7e6:	61fb      	str	r3, [r7, #28]
 800a7e8:	e038      	b.n	800a85c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800a7ee:	f107 0210 	add.w	r2, r7, #16
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	68b9      	ldr	r1, [r7, #8]
 800a7f6:	69b8      	ldr	r0, [r7, #24]
 800a7f8:	f000 fbc6 	bl	800af88 <xQueueGenericSendFromISR>
 800a7fc:	4603      	mov	r3, r0
 800a7fe:	2b01      	cmp	r3, #1
 800a800:	d003      	beq.n	800a80a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800a802:	f06f 0302 	mvn.w	r3, #2
 800a806:	61fb      	str	r3, [r7, #28]
 800a808:	e028      	b.n	800a85c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800a80a:	693b      	ldr	r3, [r7, #16]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d025      	beq.n	800a85c <osMessageQueuePut+0xb0>
 800a810:	4b15      	ldr	r3, [pc, #84]	@ (800a868 <osMessageQueuePut+0xbc>)
 800a812:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a816:	601a      	str	r2, [r3, #0]
 800a818:	f3bf 8f4f 	dsb	sy
 800a81c:	f3bf 8f6f 	isb	sy
 800a820:	e01c      	b.n	800a85c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a822:	69bb      	ldr	r3, [r7, #24]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d002      	beq.n	800a82e <osMessageQueuePut+0x82>
 800a828:	68bb      	ldr	r3, [r7, #8]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d103      	bne.n	800a836 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800a82e:	f06f 0303 	mvn.w	r3, #3
 800a832:	61fb      	str	r3, [r7, #28]
 800a834:	e012      	b.n	800a85c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a836:	2300      	movs	r3, #0
 800a838:	683a      	ldr	r2, [r7, #0]
 800a83a:	68b9      	ldr	r1, [r7, #8]
 800a83c:	69b8      	ldr	r0, [r7, #24]
 800a83e:	f000 faa1 	bl	800ad84 <xQueueGenericSend>
 800a842:	4603      	mov	r3, r0
 800a844:	2b01      	cmp	r3, #1
 800a846:	d009      	beq.n	800a85c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800a848:	683b      	ldr	r3, [r7, #0]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d003      	beq.n	800a856 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800a84e:	f06f 0301 	mvn.w	r3, #1
 800a852:	61fb      	str	r3, [r7, #28]
 800a854:	e002      	b.n	800a85c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800a856:	f06f 0302 	mvn.w	r3, #2
 800a85a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800a85c:	69fb      	ldr	r3, [r7, #28]
}
 800a85e:	4618      	mov	r0, r3
 800a860:	3720      	adds	r7, #32
 800a862:	46bd      	mov	sp, r7
 800a864:	bd80      	pop	{r7, pc}
 800a866:	bf00      	nop
 800a868:	e000ed04 	.word	0xe000ed04

0800a86c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b088      	sub	sp, #32
 800a870:	af00      	add	r7, sp, #0
 800a872:	60f8      	str	r0, [r7, #12]
 800a874:	60b9      	str	r1, [r7, #8]
 800a876:	607a      	str	r2, [r7, #4]
 800a878:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800a87e:	2300      	movs	r3, #0
 800a880:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a882:	f3ef 8305 	mrs	r3, IPSR
 800a886:	617b      	str	r3, [r7, #20]
  return(result);
 800a888:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d028      	beq.n	800a8e0 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a88e:	69bb      	ldr	r3, [r7, #24]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d005      	beq.n	800a8a0 <osMessageQueueGet+0x34>
 800a894:	68bb      	ldr	r3, [r7, #8]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d002      	beq.n	800a8a0 <osMessageQueueGet+0x34>
 800a89a:	683b      	ldr	r3, [r7, #0]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d003      	beq.n	800a8a8 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800a8a0:	f06f 0303 	mvn.w	r3, #3
 800a8a4:	61fb      	str	r3, [r7, #28]
 800a8a6:	e037      	b.n	800a918 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800a8ac:	f107 0310 	add.w	r3, r7, #16
 800a8b0:	461a      	mov	r2, r3
 800a8b2:	68b9      	ldr	r1, [r7, #8]
 800a8b4:	69b8      	ldr	r0, [r7, #24]
 800a8b6:	f000 fce7 	bl	800b288 <xQueueReceiveFromISR>
 800a8ba:	4603      	mov	r3, r0
 800a8bc:	2b01      	cmp	r3, #1
 800a8be:	d003      	beq.n	800a8c8 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800a8c0:	f06f 0302 	mvn.w	r3, #2
 800a8c4:	61fb      	str	r3, [r7, #28]
 800a8c6:	e027      	b.n	800a918 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800a8c8:	693b      	ldr	r3, [r7, #16]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d024      	beq.n	800a918 <osMessageQueueGet+0xac>
 800a8ce:	4b15      	ldr	r3, [pc, #84]	@ (800a924 <osMessageQueueGet+0xb8>)
 800a8d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a8d4:	601a      	str	r2, [r3, #0]
 800a8d6:	f3bf 8f4f 	dsb	sy
 800a8da:	f3bf 8f6f 	isb	sy
 800a8de:	e01b      	b.n	800a918 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a8e0:	69bb      	ldr	r3, [r7, #24]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d002      	beq.n	800a8ec <osMessageQueueGet+0x80>
 800a8e6:	68bb      	ldr	r3, [r7, #8]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d103      	bne.n	800a8f4 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800a8ec:	f06f 0303 	mvn.w	r3, #3
 800a8f0:	61fb      	str	r3, [r7, #28]
 800a8f2:	e011      	b.n	800a918 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a8f4:	683a      	ldr	r2, [r7, #0]
 800a8f6:	68b9      	ldr	r1, [r7, #8]
 800a8f8:	69b8      	ldr	r0, [r7, #24]
 800a8fa:	f000 fbe3 	bl	800b0c4 <xQueueReceive>
 800a8fe:	4603      	mov	r3, r0
 800a900:	2b01      	cmp	r3, #1
 800a902:	d009      	beq.n	800a918 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800a904:	683b      	ldr	r3, [r7, #0]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d003      	beq.n	800a912 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800a90a:	f06f 0301 	mvn.w	r3, #1
 800a90e:	61fb      	str	r3, [r7, #28]
 800a910:	e002      	b.n	800a918 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800a912:	f06f 0302 	mvn.w	r3, #2
 800a916:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800a918:	69fb      	ldr	r3, [r7, #28]
}
 800a91a:	4618      	mov	r0, r3
 800a91c:	3720      	adds	r7, #32
 800a91e:	46bd      	mov	sp, r7
 800a920:	bd80      	pop	{r7, pc}
 800a922:	bf00      	nop
 800a924:	e000ed04 	.word	0xe000ed04

0800a928 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a928:	b480      	push	{r7}
 800a92a:	b085      	sub	sp, #20
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	60f8      	str	r0, [r7, #12]
 800a930:	60b9      	str	r1, [r7, #8]
 800a932:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	4a07      	ldr	r2, [pc, #28]	@ (800a954 <vApplicationGetIdleTaskMemory+0x2c>)
 800a938:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a93a:	68bb      	ldr	r3, [r7, #8]
 800a93c:	4a06      	ldr	r2, [pc, #24]	@ (800a958 <vApplicationGetIdleTaskMemory+0x30>)
 800a93e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	2280      	movs	r2, #128	@ 0x80
 800a944:	601a      	str	r2, [r3, #0]
}
 800a946:	bf00      	nop
 800a948:	3714      	adds	r7, #20
 800a94a:	46bd      	mov	sp, r7
 800a94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a950:	4770      	bx	lr
 800a952:	bf00      	nop
 800a954:	20000384 	.word	0x20000384
 800a958:	20000430 	.word	0x20000430

0800a95c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a95c:	b480      	push	{r7}
 800a95e:	b085      	sub	sp, #20
 800a960:	af00      	add	r7, sp, #0
 800a962:	60f8      	str	r0, [r7, #12]
 800a964:	60b9      	str	r1, [r7, #8]
 800a966:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	4a07      	ldr	r2, [pc, #28]	@ (800a988 <vApplicationGetTimerTaskMemory+0x2c>)
 800a96c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a96e:	68bb      	ldr	r3, [r7, #8]
 800a970:	4a06      	ldr	r2, [pc, #24]	@ (800a98c <vApplicationGetTimerTaskMemory+0x30>)
 800a972:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a97a:	601a      	str	r2, [r3, #0]
}
 800a97c:	bf00      	nop
 800a97e:	3714      	adds	r7, #20
 800a980:	46bd      	mov	sp, r7
 800a982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a986:	4770      	bx	lr
 800a988:	20000630 	.word	0x20000630
 800a98c:	200006dc 	.word	0x200006dc

0800a990 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a990:	b480      	push	{r7}
 800a992:	b083      	sub	sp, #12
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	f103 0208 	add.w	r2, r3, #8
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a9a8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	f103 0208 	add.w	r2, r3, #8
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	f103 0208 	add.w	r2, r3, #8
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a9c4:	bf00      	nop
 800a9c6:	370c      	adds	r7, #12
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ce:	4770      	bx	lr

0800a9d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a9d0:	b480      	push	{r7}
 800a9d2:	b083      	sub	sp, #12
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	2200      	movs	r2, #0
 800a9dc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a9de:	bf00      	nop
 800a9e0:	370c      	adds	r7, #12
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e8:	4770      	bx	lr

0800a9ea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a9ea:	b480      	push	{r7}
 800a9ec:	b085      	sub	sp, #20
 800a9ee:	af00      	add	r7, sp, #0
 800a9f0:	6078      	str	r0, [r7, #4]
 800a9f2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	685b      	ldr	r3, [r3, #4]
 800a9f8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a9fa:	683b      	ldr	r3, [r7, #0]
 800a9fc:	68fa      	ldr	r2, [r7, #12]
 800a9fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	689a      	ldr	r2, [r3, #8]
 800aa04:	683b      	ldr	r3, [r7, #0]
 800aa06:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	689b      	ldr	r3, [r3, #8]
 800aa0c:	683a      	ldr	r2, [r7, #0]
 800aa0e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	683a      	ldr	r2, [r7, #0]
 800aa14:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800aa16:	683b      	ldr	r3, [r7, #0]
 800aa18:	687a      	ldr	r2, [r7, #4]
 800aa1a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	1c5a      	adds	r2, r3, #1
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	601a      	str	r2, [r3, #0]
}
 800aa26:	bf00      	nop
 800aa28:	3714      	adds	r7, #20
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa30:	4770      	bx	lr

0800aa32 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800aa32:	b480      	push	{r7}
 800aa34:	b085      	sub	sp, #20
 800aa36:	af00      	add	r7, sp, #0
 800aa38:	6078      	str	r0, [r7, #4]
 800aa3a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800aa3c:	683b      	ldr	r3, [r7, #0]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800aa42:	68bb      	ldr	r3, [r7, #8]
 800aa44:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aa48:	d103      	bne.n	800aa52 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	691b      	ldr	r3, [r3, #16]
 800aa4e:	60fb      	str	r3, [r7, #12]
 800aa50:	e00c      	b.n	800aa6c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	3308      	adds	r3, #8
 800aa56:	60fb      	str	r3, [r7, #12]
 800aa58:	e002      	b.n	800aa60 <vListInsert+0x2e>
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	685b      	ldr	r3, [r3, #4]
 800aa5e:	60fb      	str	r3, [r7, #12]
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	685b      	ldr	r3, [r3, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	68ba      	ldr	r2, [r7, #8]
 800aa68:	429a      	cmp	r2, r3
 800aa6a:	d2f6      	bcs.n	800aa5a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	685a      	ldr	r2, [r3, #4]
 800aa70:	683b      	ldr	r3, [r7, #0]
 800aa72:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800aa74:	683b      	ldr	r3, [r7, #0]
 800aa76:	685b      	ldr	r3, [r3, #4]
 800aa78:	683a      	ldr	r2, [r7, #0]
 800aa7a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800aa7c:	683b      	ldr	r3, [r7, #0]
 800aa7e:	68fa      	ldr	r2, [r7, #12]
 800aa80:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	683a      	ldr	r2, [r7, #0]
 800aa86:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800aa88:	683b      	ldr	r3, [r7, #0]
 800aa8a:	687a      	ldr	r2, [r7, #4]
 800aa8c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	1c5a      	adds	r2, r3, #1
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	601a      	str	r2, [r3, #0]
}
 800aa98:	bf00      	nop
 800aa9a:	3714      	adds	r7, #20
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa2:	4770      	bx	lr

0800aaa4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800aaa4:	b480      	push	{r7}
 800aaa6:	b085      	sub	sp, #20
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	691b      	ldr	r3, [r3, #16]
 800aab0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	685b      	ldr	r3, [r3, #4]
 800aab6:	687a      	ldr	r2, [r7, #4]
 800aab8:	6892      	ldr	r2, [r2, #8]
 800aaba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	689b      	ldr	r3, [r3, #8]
 800aac0:	687a      	ldr	r2, [r7, #4]
 800aac2:	6852      	ldr	r2, [r2, #4]
 800aac4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	685b      	ldr	r3, [r3, #4]
 800aaca:	687a      	ldr	r2, [r7, #4]
 800aacc:	429a      	cmp	r2, r3
 800aace:	d103      	bne.n	800aad8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	689a      	ldr	r2, [r3, #8]
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	2200      	movs	r2, #0
 800aadc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	1e5a      	subs	r2, r3, #1
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	681b      	ldr	r3, [r3, #0]
}
 800aaec:	4618      	mov	r0, r3
 800aaee:	3714      	adds	r7, #20
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf6:	4770      	bx	lr

0800aaf8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b084      	sub	sp, #16
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
 800ab00:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d10b      	bne.n	800ab24 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ab0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab10:	f383 8811 	msr	BASEPRI, r3
 800ab14:	f3bf 8f6f 	isb	sy
 800ab18:	f3bf 8f4f 	dsb	sy
 800ab1c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ab1e:	bf00      	nop
 800ab20:	bf00      	nop
 800ab22:	e7fd      	b.n	800ab20 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ab24:	f002 f990 	bl	800ce48 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	681a      	ldr	r2, [r3, #0]
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab30:	68f9      	ldr	r1, [r7, #12]
 800ab32:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800ab34:	fb01 f303 	mul.w	r3, r1, r3
 800ab38:	441a      	add	r2, r3
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	2200      	movs	r2, #0
 800ab42:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	681a      	ldr	r2, [r3, #0]
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	681a      	ldr	r2, [r3, #0]
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab54:	3b01      	subs	r3, #1
 800ab56:	68f9      	ldr	r1, [r7, #12]
 800ab58:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800ab5a:	fb01 f303 	mul.w	r3, r1, r3
 800ab5e:	441a      	add	r2, r3
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	22ff      	movs	r2, #255	@ 0xff
 800ab68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	22ff      	movs	r2, #255	@ 0xff
 800ab70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800ab74:	683b      	ldr	r3, [r7, #0]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d114      	bne.n	800aba4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	691b      	ldr	r3, [r3, #16]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d01a      	beq.n	800abb8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	3310      	adds	r3, #16
 800ab86:	4618      	mov	r0, r3
 800ab88:	f001 fa26 	bl	800bfd8 <xTaskRemoveFromEventList>
 800ab8c:	4603      	mov	r3, r0
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d012      	beq.n	800abb8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ab92:	4b0d      	ldr	r3, [pc, #52]	@ (800abc8 <xQueueGenericReset+0xd0>)
 800ab94:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ab98:	601a      	str	r2, [r3, #0]
 800ab9a:	f3bf 8f4f 	dsb	sy
 800ab9e:	f3bf 8f6f 	isb	sy
 800aba2:	e009      	b.n	800abb8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	3310      	adds	r3, #16
 800aba8:	4618      	mov	r0, r3
 800abaa:	f7ff fef1 	bl	800a990 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	3324      	adds	r3, #36	@ 0x24
 800abb2:	4618      	mov	r0, r3
 800abb4:	f7ff feec 	bl	800a990 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800abb8:	f002 f978 	bl	800ceac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800abbc:	2301      	movs	r3, #1
}
 800abbe:	4618      	mov	r0, r3
 800abc0:	3710      	adds	r7, #16
 800abc2:	46bd      	mov	sp, r7
 800abc4:	bd80      	pop	{r7, pc}
 800abc6:	bf00      	nop
 800abc8:	e000ed04 	.word	0xe000ed04

0800abcc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800abcc:	b580      	push	{r7, lr}
 800abce:	b08e      	sub	sp, #56	@ 0x38
 800abd0:	af02      	add	r7, sp, #8
 800abd2:	60f8      	str	r0, [r7, #12]
 800abd4:	60b9      	str	r1, [r7, #8]
 800abd6:	607a      	str	r2, [r7, #4]
 800abd8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d10b      	bne.n	800abf8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800abe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abe4:	f383 8811 	msr	BASEPRI, r3
 800abe8:	f3bf 8f6f 	isb	sy
 800abec:	f3bf 8f4f 	dsb	sy
 800abf0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800abf2:	bf00      	nop
 800abf4:	bf00      	nop
 800abf6:	e7fd      	b.n	800abf4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800abf8:	683b      	ldr	r3, [r7, #0]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d10b      	bne.n	800ac16 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800abfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac02:	f383 8811 	msr	BASEPRI, r3
 800ac06:	f3bf 8f6f 	isb	sy
 800ac0a:	f3bf 8f4f 	dsb	sy
 800ac0e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ac10:	bf00      	nop
 800ac12:	bf00      	nop
 800ac14:	e7fd      	b.n	800ac12 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d002      	beq.n	800ac22 <xQueueGenericCreateStatic+0x56>
 800ac1c:	68bb      	ldr	r3, [r7, #8]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d001      	beq.n	800ac26 <xQueueGenericCreateStatic+0x5a>
 800ac22:	2301      	movs	r3, #1
 800ac24:	e000      	b.n	800ac28 <xQueueGenericCreateStatic+0x5c>
 800ac26:	2300      	movs	r3, #0
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d10b      	bne.n	800ac44 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800ac2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac30:	f383 8811 	msr	BASEPRI, r3
 800ac34:	f3bf 8f6f 	isb	sy
 800ac38:	f3bf 8f4f 	dsb	sy
 800ac3c:	623b      	str	r3, [r7, #32]
}
 800ac3e:	bf00      	nop
 800ac40:	bf00      	nop
 800ac42:	e7fd      	b.n	800ac40 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d102      	bne.n	800ac50 <xQueueGenericCreateStatic+0x84>
 800ac4a:	68bb      	ldr	r3, [r7, #8]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d101      	bne.n	800ac54 <xQueueGenericCreateStatic+0x88>
 800ac50:	2301      	movs	r3, #1
 800ac52:	e000      	b.n	800ac56 <xQueueGenericCreateStatic+0x8a>
 800ac54:	2300      	movs	r3, #0
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d10b      	bne.n	800ac72 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800ac5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac5e:	f383 8811 	msr	BASEPRI, r3
 800ac62:	f3bf 8f6f 	isb	sy
 800ac66:	f3bf 8f4f 	dsb	sy
 800ac6a:	61fb      	str	r3, [r7, #28]
}
 800ac6c:	bf00      	nop
 800ac6e:	bf00      	nop
 800ac70:	e7fd      	b.n	800ac6e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ac72:	2350      	movs	r3, #80	@ 0x50
 800ac74:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ac76:	697b      	ldr	r3, [r7, #20]
 800ac78:	2b50      	cmp	r3, #80	@ 0x50
 800ac7a:	d00b      	beq.n	800ac94 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800ac7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac80:	f383 8811 	msr	BASEPRI, r3
 800ac84:	f3bf 8f6f 	isb	sy
 800ac88:	f3bf 8f4f 	dsb	sy
 800ac8c:	61bb      	str	r3, [r7, #24]
}
 800ac8e:	bf00      	nop
 800ac90:	bf00      	nop
 800ac92:	e7fd      	b.n	800ac90 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ac94:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ac96:	683b      	ldr	r3, [r7, #0]
 800ac98:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800ac9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d00d      	beq.n	800acbc <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800aca0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aca2:	2201      	movs	r2, #1
 800aca4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800aca8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800acac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acae:	9300      	str	r3, [sp, #0]
 800acb0:	4613      	mov	r3, r2
 800acb2:	687a      	ldr	r2, [r7, #4]
 800acb4:	68b9      	ldr	r1, [r7, #8]
 800acb6:	68f8      	ldr	r0, [r7, #12]
 800acb8:	f000 f840 	bl	800ad3c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800acbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800acbe:	4618      	mov	r0, r3
 800acc0:	3730      	adds	r7, #48	@ 0x30
 800acc2:	46bd      	mov	sp, r7
 800acc4:	bd80      	pop	{r7, pc}

0800acc6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800acc6:	b580      	push	{r7, lr}
 800acc8:	b08a      	sub	sp, #40	@ 0x28
 800acca:	af02      	add	r7, sp, #8
 800accc:	60f8      	str	r0, [r7, #12]
 800acce:	60b9      	str	r1, [r7, #8]
 800acd0:	4613      	mov	r3, r2
 800acd2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d10b      	bne.n	800acf2 <xQueueGenericCreate+0x2c>
	__asm volatile
 800acda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acde:	f383 8811 	msr	BASEPRI, r3
 800ace2:	f3bf 8f6f 	isb	sy
 800ace6:	f3bf 8f4f 	dsb	sy
 800acea:	613b      	str	r3, [r7, #16]
}
 800acec:	bf00      	nop
 800acee:	bf00      	nop
 800acf0:	e7fd      	b.n	800acee <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	68ba      	ldr	r2, [r7, #8]
 800acf6:	fb02 f303 	mul.w	r3, r2, r3
 800acfa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800acfc:	69fb      	ldr	r3, [r7, #28]
 800acfe:	3350      	adds	r3, #80	@ 0x50
 800ad00:	4618      	mov	r0, r3
 800ad02:	f002 f9c3 	bl	800d08c <pvPortMalloc>
 800ad06:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ad08:	69bb      	ldr	r3, [r7, #24]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d011      	beq.n	800ad32 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ad0e:	69bb      	ldr	r3, [r7, #24]
 800ad10:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ad12:	697b      	ldr	r3, [r7, #20]
 800ad14:	3350      	adds	r3, #80	@ 0x50
 800ad16:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ad18:	69bb      	ldr	r3, [r7, #24]
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ad20:	79fa      	ldrb	r2, [r7, #7]
 800ad22:	69bb      	ldr	r3, [r7, #24]
 800ad24:	9300      	str	r3, [sp, #0]
 800ad26:	4613      	mov	r3, r2
 800ad28:	697a      	ldr	r2, [r7, #20]
 800ad2a:	68b9      	ldr	r1, [r7, #8]
 800ad2c:	68f8      	ldr	r0, [r7, #12]
 800ad2e:	f000 f805 	bl	800ad3c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ad32:	69bb      	ldr	r3, [r7, #24]
	}
 800ad34:	4618      	mov	r0, r3
 800ad36:	3720      	adds	r7, #32
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	bd80      	pop	{r7, pc}

0800ad3c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	b084      	sub	sp, #16
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	60f8      	str	r0, [r7, #12]
 800ad44:	60b9      	str	r1, [r7, #8]
 800ad46:	607a      	str	r2, [r7, #4]
 800ad48:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ad4a:	68bb      	ldr	r3, [r7, #8]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d103      	bne.n	800ad58 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ad50:	69bb      	ldr	r3, [r7, #24]
 800ad52:	69ba      	ldr	r2, [r7, #24]
 800ad54:	601a      	str	r2, [r3, #0]
 800ad56:	e002      	b.n	800ad5e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ad58:	69bb      	ldr	r3, [r7, #24]
 800ad5a:	687a      	ldr	r2, [r7, #4]
 800ad5c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ad5e:	69bb      	ldr	r3, [r7, #24]
 800ad60:	68fa      	ldr	r2, [r7, #12]
 800ad62:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ad64:	69bb      	ldr	r3, [r7, #24]
 800ad66:	68ba      	ldr	r2, [r7, #8]
 800ad68:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ad6a:	2101      	movs	r1, #1
 800ad6c:	69b8      	ldr	r0, [r7, #24]
 800ad6e:	f7ff fec3 	bl	800aaf8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ad72:	69bb      	ldr	r3, [r7, #24]
 800ad74:	78fa      	ldrb	r2, [r7, #3]
 800ad76:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ad7a:	bf00      	nop
 800ad7c:	3710      	adds	r7, #16
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	bd80      	pop	{r7, pc}
	...

0800ad84 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ad84:	b580      	push	{r7, lr}
 800ad86:	b08e      	sub	sp, #56	@ 0x38
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	60f8      	str	r0, [r7, #12]
 800ad8c:	60b9      	str	r1, [r7, #8]
 800ad8e:	607a      	str	r2, [r7, #4]
 800ad90:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ad92:	2300      	movs	r3, #0
 800ad94:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800ad9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d10b      	bne.n	800adb8 <xQueueGenericSend+0x34>
	__asm volatile
 800ada0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ada4:	f383 8811 	msr	BASEPRI, r3
 800ada8:	f3bf 8f6f 	isb	sy
 800adac:	f3bf 8f4f 	dsb	sy
 800adb0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800adb2:	bf00      	nop
 800adb4:	bf00      	nop
 800adb6:	e7fd      	b.n	800adb4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800adb8:	68bb      	ldr	r3, [r7, #8]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d103      	bne.n	800adc6 <xQueueGenericSend+0x42>
 800adbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d101      	bne.n	800adca <xQueueGenericSend+0x46>
 800adc6:	2301      	movs	r3, #1
 800adc8:	e000      	b.n	800adcc <xQueueGenericSend+0x48>
 800adca:	2300      	movs	r3, #0
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d10b      	bne.n	800ade8 <xQueueGenericSend+0x64>
	__asm volatile
 800add0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800add4:	f383 8811 	msr	BASEPRI, r3
 800add8:	f3bf 8f6f 	isb	sy
 800addc:	f3bf 8f4f 	dsb	sy
 800ade0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ade2:	bf00      	nop
 800ade4:	bf00      	nop
 800ade6:	e7fd      	b.n	800ade4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ade8:	683b      	ldr	r3, [r7, #0]
 800adea:	2b02      	cmp	r3, #2
 800adec:	d103      	bne.n	800adf6 <xQueueGenericSend+0x72>
 800adee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adf0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800adf2:	2b01      	cmp	r3, #1
 800adf4:	d101      	bne.n	800adfa <xQueueGenericSend+0x76>
 800adf6:	2301      	movs	r3, #1
 800adf8:	e000      	b.n	800adfc <xQueueGenericSend+0x78>
 800adfa:	2300      	movs	r3, #0
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d10b      	bne.n	800ae18 <xQueueGenericSend+0x94>
	__asm volatile
 800ae00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae04:	f383 8811 	msr	BASEPRI, r3
 800ae08:	f3bf 8f6f 	isb	sy
 800ae0c:	f3bf 8f4f 	dsb	sy
 800ae10:	623b      	str	r3, [r7, #32]
}
 800ae12:	bf00      	nop
 800ae14:	bf00      	nop
 800ae16:	e7fd      	b.n	800ae14 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ae18:	f001 faa6 	bl	800c368 <xTaskGetSchedulerState>
 800ae1c:	4603      	mov	r3, r0
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d102      	bne.n	800ae28 <xQueueGenericSend+0xa4>
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d101      	bne.n	800ae2c <xQueueGenericSend+0xa8>
 800ae28:	2301      	movs	r3, #1
 800ae2a:	e000      	b.n	800ae2e <xQueueGenericSend+0xaa>
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d10b      	bne.n	800ae4a <xQueueGenericSend+0xc6>
	__asm volatile
 800ae32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae36:	f383 8811 	msr	BASEPRI, r3
 800ae3a:	f3bf 8f6f 	isb	sy
 800ae3e:	f3bf 8f4f 	dsb	sy
 800ae42:	61fb      	str	r3, [r7, #28]
}
 800ae44:	bf00      	nop
 800ae46:	bf00      	nop
 800ae48:	e7fd      	b.n	800ae46 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ae4a:	f001 fffd 	bl	800ce48 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ae4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae50:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ae52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ae56:	429a      	cmp	r2, r3
 800ae58:	d302      	bcc.n	800ae60 <xQueueGenericSend+0xdc>
 800ae5a:	683b      	ldr	r3, [r7, #0]
 800ae5c:	2b02      	cmp	r3, #2
 800ae5e:	d129      	bne.n	800aeb4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ae60:	683a      	ldr	r2, [r7, #0]
 800ae62:	68b9      	ldr	r1, [r7, #8]
 800ae64:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ae66:	f000 fa91 	bl	800b38c <prvCopyDataToQueue>
 800ae6a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ae6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d010      	beq.n	800ae96 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ae74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae76:	3324      	adds	r3, #36	@ 0x24
 800ae78:	4618      	mov	r0, r3
 800ae7a:	f001 f8ad 	bl	800bfd8 <xTaskRemoveFromEventList>
 800ae7e:	4603      	mov	r3, r0
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d013      	beq.n	800aeac <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ae84:	4b3f      	ldr	r3, [pc, #252]	@ (800af84 <xQueueGenericSend+0x200>)
 800ae86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ae8a:	601a      	str	r2, [r3, #0]
 800ae8c:	f3bf 8f4f 	dsb	sy
 800ae90:	f3bf 8f6f 	isb	sy
 800ae94:	e00a      	b.n	800aeac <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ae96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d007      	beq.n	800aeac <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ae9c:	4b39      	ldr	r3, [pc, #228]	@ (800af84 <xQueueGenericSend+0x200>)
 800ae9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aea2:	601a      	str	r2, [r3, #0]
 800aea4:	f3bf 8f4f 	dsb	sy
 800aea8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800aeac:	f001 fffe 	bl	800ceac <vPortExitCritical>
				return pdPASS;
 800aeb0:	2301      	movs	r3, #1
 800aeb2:	e063      	b.n	800af7c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d103      	bne.n	800aec2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800aeba:	f001 fff7 	bl	800ceac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800aebe:	2300      	movs	r3, #0
 800aec0:	e05c      	b.n	800af7c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800aec2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d106      	bne.n	800aed6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800aec8:	f107 0314 	add.w	r3, r7, #20
 800aecc:	4618      	mov	r0, r3
 800aece:	f001 f8e7 	bl	800c0a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aed2:	2301      	movs	r3, #1
 800aed4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800aed6:	f001 ffe9 	bl	800ceac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aeda:	f000 fe2b 	bl	800bb34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aede:	f001 ffb3 	bl	800ce48 <vPortEnterCritical>
 800aee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aee4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800aee8:	b25b      	sxtb	r3, r3
 800aeea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aeee:	d103      	bne.n	800aef8 <xQueueGenericSend+0x174>
 800aef0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aef2:	2200      	movs	r2, #0
 800aef4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800aef8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aefa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800aefe:	b25b      	sxtb	r3, r3
 800af00:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800af04:	d103      	bne.n	800af0e <xQueueGenericSend+0x18a>
 800af06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af08:	2200      	movs	r2, #0
 800af0a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800af0e:	f001 ffcd 	bl	800ceac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800af12:	1d3a      	adds	r2, r7, #4
 800af14:	f107 0314 	add.w	r3, r7, #20
 800af18:	4611      	mov	r1, r2
 800af1a:	4618      	mov	r0, r3
 800af1c:	f001 f8d6 	bl	800c0cc <xTaskCheckForTimeOut>
 800af20:	4603      	mov	r3, r0
 800af22:	2b00      	cmp	r3, #0
 800af24:	d124      	bne.n	800af70 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800af26:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800af28:	f000 fb28 	bl	800b57c <prvIsQueueFull>
 800af2c:	4603      	mov	r3, r0
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d018      	beq.n	800af64 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800af32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af34:	3310      	adds	r3, #16
 800af36:	687a      	ldr	r2, [r7, #4]
 800af38:	4611      	mov	r1, r2
 800af3a:	4618      	mov	r0, r3
 800af3c:	f000 fffa 	bl	800bf34 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800af40:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800af42:	f000 fab3 	bl	800b4ac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800af46:	f000 fe03 	bl	800bb50 <xTaskResumeAll>
 800af4a:	4603      	mov	r3, r0
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	f47f af7c 	bne.w	800ae4a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800af52:	4b0c      	ldr	r3, [pc, #48]	@ (800af84 <xQueueGenericSend+0x200>)
 800af54:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800af58:	601a      	str	r2, [r3, #0]
 800af5a:	f3bf 8f4f 	dsb	sy
 800af5e:	f3bf 8f6f 	isb	sy
 800af62:	e772      	b.n	800ae4a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800af64:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800af66:	f000 faa1 	bl	800b4ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800af6a:	f000 fdf1 	bl	800bb50 <xTaskResumeAll>
 800af6e:	e76c      	b.n	800ae4a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800af70:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800af72:	f000 fa9b 	bl	800b4ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800af76:	f000 fdeb 	bl	800bb50 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800af7a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800af7c:	4618      	mov	r0, r3
 800af7e:	3738      	adds	r7, #56	@ 0x38
 800af80:	46bd      	mov	sp, r7
 800af82:	bd80      	pop	{r7, pc}
 800af84:	e000ed04 	.word	0xe000ed04

0800af88 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800af88:	b580      	push	{r7, lr}
 800af8a:	b090      	sub	sp, #64	@ 0x40
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	60f8      	str	r0, [r7, #12]
 800af90:	60b9      	str	r1, [r7, #8]
 800af92:	607a      	str	r2, [r7, #4]
 800af94:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800af9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d10b      	bne.n	800afb8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800afa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afa4:	f383 8811 	msr	BASEPRI, r3
 800afa8:	f3bf 8f6f 	isb	sy
 800afac:	f3bf 8f4f 	dsb	sy
 800afb0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800afb2:	bf00      	nop
 800afb4:	bf00      	nop
 800afb6:	e7fd      	b.n	800afb4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800afb8:	68bb      	ldr	r3, [r7, #8]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d103      	bne.n	800afc6 <xQueueGenericSendFromISR+0x3e>
 800afbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d101      	bne.n	800afca <xQueueGenericSendFromISR+0x42>
 800afc6:	2301      	movs	r3, #1
 800afc8:	e000      	b.n	800afcc <xQueueGenericSendFromISR+0x44>
 800afca:	2300      	movs	r3, #0
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d10b      	bne.n	800afe8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800afd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afd4:	f383 8811 	msr	BASEPRI, r3
 800afd8:	f3bf 8f6f 	isb	sy
 800afdc:	f3bf 8f4f 	dsb	sy
 800afe0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800afe2:	bf00      	nop
 800afe4:	bf00      	nop
 800afe6:	e7fd      	b.n	800afe4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800afe8:	683b      	ldr	r3, [r7, #0]
 800afea:	2b02      	cmp	r3, #2
 800afec:	d103      	bne.n	800aff6 <xQueueGenericSendFromISR+0x6e>
 800afee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aff0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aff2:	2b01      	cmp	r3, #1
 800aff4:	d101      	bne.n	800affa <xQueueGenericSendFromISR+0x72>
 800aff6:	2301      	movs	r3, #1
 800aff8:	e000      	b.n	800affc <xQueueGenericSendFromISR+0x74>
 800affa:	2300      	movs	r3, #0
 800affc:	2b00      	cmp	r3, #0
 800affe:	d10b      	bne.n	800b018 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800b000:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b004:	f383 8811 	msr	BASEPRI, r3
 800b008:	f3bf 8f6f 	isb	sy
 800b00c:	f3bf 8f4f 	dsb	sy
 800b010:	623b      	str	r3, [r7, #32]
}
 800b012:	bf00      	nop
 800b014:	bf00      	nop
 800b016:	e7fd      	b.n	800b014 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b018:	f001 fff6 	bl	800d008 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b01c:	f3ef 8211 	mrs	r2, BASEPRI
 800b020:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b024:	f383 8811 	msr	BASEPRI, r3
 800b028:	f3bf 8f6f 	isb	sy
 800b02c:	f3bf 8f4f 	dsb	sy
 800b030:	61fa      	str	r2, [r7, #28]
 800b032:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b034:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b036:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b038:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b03a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b03c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b03e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b040:	429a      	cmp	r2, r3
 800b042:	d302      	bcc.n	800b04a <xQueueGenericSendFromISR+0xc2>
 800b044:	683b      	ldr	r3, [r7, #0]
 800b046:	2b02      	cmp	r3, #2
 800b048:	d12f      	bne.n	800b0aa <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b04a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b04c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b050:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b054:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b056:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b058:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b05a:	683a      	ldr	r2, [r7, #0]
 800b05c:	68b9      	ldr	r1, [r7, #8]
 800b05e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b060:	f000 f994 	bl	800b38c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b064:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800b068:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b06c:	d112      	bne.n	800b094 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b06e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b072:	2b00      	cmp	r3, #0
 800b074:	d016      	beq.n	800b0a4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b076:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b078:	3324      	adds	r3, #36	@ 0x24
 800b07a:	4618      	mov	r0, r3
 800b07c:	f000 ffac 	bl	800bfd8 <xTaskRemoveFromEventList>
 800b080:	4603      	mov	r3, r0
 800b082:	2b00      	cmp	r3, #0
 800b084:	d00e      	beq.n	800b0a4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d00b      	beq.n	800b0a4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	2201      	movs	r2, #1
 800b090:	601a      	str	r2, [r3, #0]
 800b092:	e007      	b.n	800b0a4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b094:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800b098:	3301      	adds	r3, #1
 800b09a:	b2db      	uxtb	r3, r3
 800b09c:	b25a      	sxtb	r2, r3
 800b09e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800b0a4:	2301      	movs	r3, #1
 800b0a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800b0a8:	e001      	b.n	800b0ae <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b0ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b0b0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b0b2:	697b      	ldr	r3, [r7, #20]
 800b0b4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b0b8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b0ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800b0bc:	4618      	mov	r0, r3
 800b0be:	3740      	adds	r7, #64	@ 0x40
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	bd80      	pop	{r7, pc}

0800b0c4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b08c      	sub	sp, #48	@ 0x30
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	60f8      	str	r0, [r7, #12]
 800b0cc:	60b9      	str	r1, [r7, #8]
 800b0ce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b0d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d10b      	bne.n	800b0f6 <xQueueReceive+0x32>
	__asm volatile
 800b0de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0e2:	f383 8811 	msr	BASEPRI, r3
 800b0e6:	f3bf 8f6f 	isb	sy
 800b0ea:	f3bf 8f4f 	dsb	sy
 800b0ee:	623b      	str	r3, [r7, #32]
}
 800b0f0:	bf00      	nop
 800b0f2:	bf00      	nop
 800b0f4:	e7fd      	b.n	800b0f2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b0f6:	68bb      	ldr	r3, [r7, #8]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d103      	bne.n	800b104 <xQueueReceive+0x40>
 800b0fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b100:	2b00      	cmp	r3, #0
 800b102:	d101      	bne.n	800b108 <xQueueReceive+0x44>
 800b104:	2301      	movs	r3, #1
 800b106:	e000      	b.n	800b10a <xQueueReceive+0x46>
 800b108:	2300      	movs	r3, #0
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d10b      	bne.n	800b126 <xQueueReceive+0x62>
	__asm volatile
 800b10e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b112:	f383 8811 	msr	BASEPRI, r3
 800b116:	f3bf 8f6f 	isb	sy
 800b11a:	f3bf 8f4f 	dsb	sy
 800b11e:	61fb      	str	r3, [r7, #28]
}
 800b120:	bf00      	nop
 800b122:	bf00      	nop
 800b124:	e7fd      	b.n	800b122 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b126:	f001 f91f 	bl	800c368 <xTaskGetSchedulerState>
 800b12a:	4603      	mov	r3, r0
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d102      	bne.n	800b136 <xQueueReceive+0x72>
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	2b00      	cmp	r3, #0
 800b134:	d101      	bne.n	800b13a <xQueueReceive+0x76>
 800b136:	2301      	movs	r3, #1
 800b138:	e000      	b.n	800b13c <xQueueReceive+0x78>
 800b13a:	2300      	movs	r3, #0
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d10b      	bne.n	800b158 <xQueueReceive+0x94>
	__asm volatile
 800b140:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b144:	f383 8811 	msr	BASEPRI, r3
 800b148:	f3bf 8f6f 	isb	sy
 800b14c:	f3bf 8f4f 	dsb	sy
 800b150:	61bb      	str	r3, [r7, #24]
}
 800b152:	bf00      	nop
 800b154:	bf00      	nop
 800b156:	e7fd      	b.n	800b154 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b158:	f001 fe76 	bl	800ce48 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b15c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b15e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b160:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b164:	2b00      	cmp	r3, #0
 800b166:	d01f      	beq.n	800b1a8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b168:	68b9      	ldr	r1, [r7, #8]
 800b16a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b16c:	f000 f978 	bl	800b460 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b172:	1e5a      	subs	r2, r3, #1
 800b174:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b176:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b178:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b17a:	691b      	ldr	r3, [r3, #16]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d00f      	beq.n	800b1a0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b180:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b182:	3310      	adds	r3, #16
 800b184:	4618      	mov	r0, r3
 800b186:	f000 ff27 	bl	800bfd8 <xTaskRemoveFromEventList>
 800b18a:	4603      	mov	r3, r0
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d007      	beq.n	800b1a0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b190:	4b3c      	ldr	r3, [pc, #240]	@ (800b284 <xQueueReceive+0x1c0>)
 800b192:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b196:	601a      	str	r2, [r3, #0]
 800b198:	f3bf 8f4f 	dsb	sy
 800b19c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b1a0:	f001 fe84 	bl	800ceac <vPortExitCritical>
				return pdPASS;
 800b1a4:	2301      	movs	r3, #1
 800b1a6:	e069      	b.n	800b27c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d103      	bne.n	800b1b6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b1ae:	f001 fe7d 	bl	800ceac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	e062      	b.n	800b27c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b1b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d106      	bne.n	800b1ca <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b1bc:	f107 0310 	add.w	r3, r7, #16
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	f000 ff6d 	bl	800c0a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b1c6:	2301      	movs	r3, #1
 800b1c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b1ca:	f001 fe6f 	bl	800ceac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b1ce:	f000 fcb1 	bl	800bb34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b1d2:	f001 fe39 	bl	800ce48 <vPortEnterCritical>
 800b1d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1d8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b1dc:	b25b      	sxtb	r3, r3
 800b1de:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b1e2:	d103      	bne.n	800b1ec <xQueueReceive+0x128>
 800b1e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b1ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1ee:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b1f2:	b25b      	sxtb	r3, r3
 800b1f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b1f8:	d103      	bne.n	800b202 <xQueueReceive+0x13e>
 800b1fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1fc:	2200      	movs	r2, #0
 800b1fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b202:	f001 fe53 	bl	800ceac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b206:	1d3a      	adds	r2, r7, #4
 800b208:	f107 0310 	add.w	r3, r7, #16
 800b20c:	4611      	mov	r1, r2
 800b20e:	4618      	mov	r0, r3
 800b210:	f000 ff5c 	bl	800c0cc <xTaskCheckForTimeOut>
 800b214:	4603      	mov	r3, r0
 800b216:	2b00      	cmp	r3, #0
 800b218:	d123      	bne.n	800b262 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b21a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b21c:	f000 f998 	bl	800b550 <prvIsQueueEmpty>
 800b220:	4603      	mov	r3, r0
 800b222:	2b00      	cmp	r3, #0
 800b224:	d017      	beq.n	800b256 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b228:	3324      	adds	r3, #36	@ 0x24
 800b22a:	687a      	ldr	r2, [r7, #4]
 800b22c:	4611      	mov	r1, r2
 800b22e:	4618      	mov	r0, r3
 800b230:	f000 fe80 	bl	800bf34 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b234:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b236:	f000 f939 	bl	800b4ac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b23a:	f000 fc89 	bl	800bb50 <xTaskResumeAll>
 800b23e:	4603      	mov	r3, r0
 800b240:	2b00      	cmp	r3, #0
 800b242:	d189      	bne.n	800b158 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800b244:	4b0f      	ldr	r3, [pc, #60]	@ (800b284 <xQueueReceive+0x1c0>)
 800b246:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b24a:	601a      	str	r2, [r3, #0]
 800b24c:	f3bf 8f4f 	dsb	sy
 800b250:	f3bf 8f6f 	isb	sy
 800b254:	e780      	b.n	800b158 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b256:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b258:	f000 f928 	bl	800b4ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b25c:	f000 fc78 	bl	800bb50 <xTaskResumeAll>
 800b260:	e77a      	b.n	800b158 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b262:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b264:	f000 f922 	bl	800b4ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b268:	f000 fc72 	bl	800bb50 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b26c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b26e:	f000 f96f 	bl	800b550 <prvIsQueueEmpty>
 800b272:	4603      	mov	r3, r0
 800b274:	2b00      	cmp	r3, #0
 800b276:	f43f af6f 	beq.w	800b158 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b27a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b27c:	4618      	mov	r0, r3
 800b27e:	3730      	adds	r7, #48	@ 0x30
 800b280:	46bd      	mov	sp, r7
 800b282:	bd80      	pop	{r7, pc}
 800b284:	e000ed04 	.word	0xe000ed04

0800b288 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b288:	b580      	push	{r7, lr}
 800b28a:	b08e      	sub	sp, #56	@ 0x38
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	60f8      	str	r0, [r7, #12]
 800b290:	60b9      	str	r1, [r7, #8]
 800b292:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800b298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d10b      	bne.n	800b2b6 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800b29e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2a2:	f383 8811 	msr	BASEPRI, r3
 800b2a6:	f3bf 8f6f 	isb	sy
 800b2aa:	f3bf 8f4f 	dsb	sy
 800b2ae:	623b      	str	r3, [r7, #32]
}
 800b2b0:	bf00      	nop
 800b2b2:	bf00      	nop
 800b2b4:	e7fd      	b.n	800b2b2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b2b6:	68bb      	ldr	r3, [r7, #8]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d103      	bne.n	800b2c4 <xQueueReceiveFromISR+0x3c>
 800b2bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d101      	bne.n	800b2c8 <xQueueReceiveFromISR+0x40>
 800b2c4:	2301      	movs	r3, #1
 800b2c6:	e000      	b.n	800b2ca <xQueueReceiveFromISR+0x42>
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d10b      	bne.n	800b2e6 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800b2ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2d2:	f383 8811 	msr	BASEPRI, r3
 800b2d6:	f3bf 8f6f 	isb	sy
 800b2da:	f3bf 8f4f 	dsb	sy
 800b2de:	61fb      	str	r3, [r7, #28]
}
 800b2e0:	bf00      	nop
 800b2e2:	bf00      	nop
 800b2e4:	e7fd      	b.n	800b2e2 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b2e6:	f001 fe8f 	bl	800d008 <vPortValidateInterruptPriority>
	__asm volatile
 800b2ea:	f3ef 8211 	mrs	r2, BASEPRI
 800b2ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2f2:	f383 8811 	msr	BASEPRI, r3
 800b2f6:	f3bf 8f6f 	isb	sy
 800b2fa:	f3bf 8f4f 	dsb	sy
 800b2fe:	61ba      	str	r2, [r7, #24]
 800b300:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b302:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b304:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b308:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b30a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b30c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d02f      	beq.n	800b372 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800b312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b314:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b318:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b31c:	68b9      	ldr	r1, [r7, #8]
 800b31e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b320:	f000 f89e 	bl	800b460 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b326:	1e5a      	subs	r2, r3, #1
 800b328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b32a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800b32c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800b330:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b334:	d112      	bne.n	800b35c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b338:	691b      	ldr	r3, [r3, #16]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d016      	beq.n	800b36c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b33e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b340:	3310      	adds	r3, #16
 800b342:	4618      	mov	r0, r3
 800b344:	f000 fe48 	bl	800bfd8 <xTaskRemoveFromEventList>
 800b348:	4603      	mov	r3, r0
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d00e      	beq.n	800b36c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d00b      	beq.n	800b36c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	2201      	movs	r2, #1
 800b358:	601a      	str	r2, [r3, #0]
 800b35a:	e007      	b.n	800b36c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b35c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b360:	3301      	adds	r3, #1
 800b362:	b2db      	uxtb	r3, r3
 800b364:	b25a      	sxtb	r2, r3
 800b366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b368:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800b36c:	2301      	movs	r3, #1
 800b36e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b370:	e001      	b.n	800b376 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800b372:	2300      	movs	r3, #0
 800b374:	637b      	str	r3, [r7, #52]	@ 0x34
 800b376:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b378:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b37a:	693b      	ldr	r3, [r7, #16]
 800b37c:	f383 8811 	msr	BASEPRI, r3
}
 800b380:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b382:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800b384:	4618      	mov	r0, r3
 800b386:	3738      	adds	r7, #56	@ 0x38
 800b388:	46bd      	mov	sp, r7
 800b38a:	bd80      	pop	{r7, pc}

0800b38c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	b086      	sub	sp, #24
 800b390:	af00      	add	r7, sp, #0
 800b392:	60f8      	str	r0, [r7, #12]
 800b394:	60b9      	str	r1, [r7, #8]
 800b396:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b398:	2300      	movs	r3, #0
 800b39a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b3a0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d10d      	bne.n	800b3c6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d14d      	bne.n	800b44e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	689b      	ldr	r3, [r3, #8]
 800b3b6:	4618      	mov	r0, r3
 800b3b8:	f000 fff4 	bl	800c3a4 <xTaskPriorityDisinherit>
 800b3bc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	2200      	movs	r2, #0
 800b3c2:	609a      	str	r2, [r3, #8]
 800b3c4:	e043      	b.n	800b44e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d119      	bne.n	800b400 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	6858      	ldr	r0, [r3, #4]
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b3d4:	461a      	mov	r2, r3
 800b3d6:	68b9      	ldr	r1, [r7, #8]
 800b3d8:	f002 fcae 	bl	800dd38 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	685a      	ldr	r2, [r3, #4]
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b3e4:	441a      	add	r2, r3
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	685a      	ldr	r2, [r3, #4]
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	689b      	ldr	r3, [r3, #8]
 800b3f2:	429a      	cmp	r2, r3
 800b3f4:	d32b      	bcc.n	800b44e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	681a      	ldr	r2, [r3, #0]
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	605a      	str	r2, [r3, #4]
 800b3fe:	e026      	b.n	800b44e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	68d8      	ldr	r0, [r3, #12]
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b408:	461a      	mov	r2, r3
 800b40a:	68b9      	ldr	r1, [r7, #8]
 800b40c:	f002 fc94 	bl	800dd38 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	68da      	ldr	r2, [r3, #12]
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b418:	425b      	negs	r3, r3
 800b41a:	441a      	add	r2, r3
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	68da      	ldr	r2, [r3, #12]
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	429a      	cmp	r2, r3
 800b42a:	d207      	bcs.n	800b43c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	689a      	ldr	r2, [r3, #8]
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b434:	425b      	negs	r3, r3
 800b436:	441a      	add	r2, r3
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	2b02      	cmp	r3, #2
 800b440:	d105      	bne.n	800b44e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b442:	693b      	ldr	r3, [r7, #16]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d002      	beq.n	800b44e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b448:	693b      	ldr	r3, [r7, #16]
 800b44a:	3b01      	subs	r3, #1
 800b44c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b44e:	693b      	ldr	r3, [r7, #16]
 800b450:	1c5a      	adds	r2, r3, #1
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800b456:	697b      	ldr	r3, [r7, #20]
}
 800b458:	4618      	mov	r0, r3
 800b45a:	3718      	adds	r7, #24
 800b45c:	46bd      	mov	sp, r7
 800b45e:	bd80      	pop	{r7, pc}

0800b460 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b460:	b580      	push	{r7, lr}
 800b462:	b082      	sub	sp, #8
 800b464:	af00      	add	r7, sp, #0
 800b466:	6078      	str	r0, [r7, #4]
 800b468:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d018      	beq.n	800b4a4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	68da      	ldr	r2, [r3, #12]
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b47a:	441a      	add	r2, r3
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	68da      	ldr	r2, [r3, #12]
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	689b      	ldr	r3, [r3, #8]
 800b488:	429a      	cmp	r2, r3
 800b48a:	d303      	bcc.n	800b494 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	681a      	ldr	r2, [r3, #0]
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	68d9      	ldr	r1, [r3, #12]
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b49c:	461a      	mov	r2, r3
 800b49e:	6838      	ldr	r0, [r7, #0]
 800b4a0:	f002 fc4a 	bl	800dd38 <memcpy>
	}
}
 800b4a4:	bf00      	nop
 800b4a6:	3708      	adds	r7, #8
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	bd80      	pop	{r7, pc}

0800b4ac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b4ac:	b580      	push	{r7, lr}
 800b4ae:	b084      	sub	sp, #16
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b4b4:	f001 fcc8 	bl	800ce48 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b4be:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b4c0:	e011      	b.n	800b4e6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d012      	beq.n	800b4f0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	3324      	adds	r3, #36	@ 0x24
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	f000 fd82 	bl	800bfd8 <xTaskRemoveFromEventList>
 800b4d4:	4603      	mov	r3, r0
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d001      	beq.n	800b4de <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b4da:	f000 fe5b 	bl	800c194 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b4de:	7bfb      	ldrb	r3, [r7, #15]
 800b4e0:	3b01      	subs	r3, #1
 800b4e2:	b2db      	uxtb	r3, r3
 800b4e4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b4e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	dce9      	bgt.n	800b4c2 <prvUnlockQueue+0x16>
 800b4ee:	e000      	b.n	800b4f2 <prvUnlockQueue+0x46>
					break;
 800b4f0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	22ff      	movs	r2, #255	@ 0xff
 800b4f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800b4fa:	f001 fcd7 	bl	800ceac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b4fe:	f001 fca3 	bl	800ce48 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b508:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b50a:	e011      	b.n	800b530 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	691b      	ldr	r3, [r3, #16]
 800b510:	2b00      	cmp	r3, #0
 800b512:	d012      	beq.n	800b53a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	3310      	adds	r3, #16
 800b518:	4618      	mov	r0, r3
 800b51a:	f000 fd5d 	bl	800bfd8 <xTaskRemoveFromEventList>
 800b51e:	4603      	mov	r3, r0
 800b520:	2b00      	cmp	r3, #0
 800b522:	d001      	beq.n	800b528 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b524:	f000 fe36 	bl	800c194 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b528:	7bbb      	ldrb	r3, [r7, #14]
 800b52a:	3b01      	subs	r3, #1
 800b52c:	b2db      	uxtb	r3, r3
 800b52e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b530:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b534:	2b00      	cmp	r3, #0
 800b536:	dce9      	bgt.n	800b50c <prvUnlockQueue+0x60>
 800b538:	e000      	b.n	800b53c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b53a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	22ff      	movs	r2, #255	@ 0xff
 800b540:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800b544:	f001 fcb2 	bl	800ceac <vPortExitCritical>
}
 800b548:	bf00      	nop
 800b54a:	3710      	adds	r7, #16
 800b54c:	46bd      	mov	sp, r7
 800b54e:	bd80      	pop	{r7, pc}

0800b550 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b550:	b580      	push	{r7, lr}
 800b552:	b084      	sub	sp, #16
 800b554:	af00      	add	r7, sp, #0
 800b556:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b558:	f001 fc76 	bl	800ce48 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b560:	2b00      	cmp	r3, #0
 800b562:	d102      	bne.n	800b56a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b564:	2301      	movs	r3, #1
 800b566:	60fb      	str	r3, [r7, #12]
 800b568:	e001      	b.n	800b56e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b56a:	2300      	movs	r3, #0
 800b56c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b56e:	f001 fc9d 	bl	800ceac <vPortExitCritical>

	return xReturn;
 800b572:	68fb      	ldr	r3, [r7, #12]
}
 800b574:	4618      	mov	r0, r3
 800b576:	3710      	adds	r7, #16
 800b578:	46bd      	mov	sp, r7
 800b57a:	bd80      	pop	{r7, pc}

0800b57c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b57c:	b580      	push	{r7, lr}
 800b57e:	b084      	sub	sp, #16
 800b580:	af00      	add	r7, sp, #0
 800b582:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b584:	f001 fc60 	bl	800ce48 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b590:	429a      	cmp	r2, r3
 800b592:	d102      	bne.n	800b59a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b594:	2301      	movs	r3, #1
 800b596:	60fb      	str	r3, [r7, #12]
 800b598:	e001      	b.n	800b59e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b59a:	2300      	movs	r3, #0
 800b59c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b59e:	f001 fc85 	bl	800ceac <vPortExitCritical>

	return xReturn;
 800b5a2:	68fb      	ldr	r3, [r7, #12]
}
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	3710      	adds	r7, #16
 800b5a8:	46bd      	mov	sp, r7
 800b5aa:	bd80      	pop	{r7, pc}

0800b5ac <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b5ac:	b480      	push	{r7}
 800b5ae:	b085      	sub	sp, #20
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	6078      	str	r0, [r7, #4]
 800b5b4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	60fb      	str	r3, [r7, #12]
 800b5ba:	e014      	b.n	800b5e6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b5bc:	4a0f      	ldr	r2, [pc, #60]	@ (800b5fc <vQueueAddToRegistry+0x50>)
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d10b      	bne.n	800b5e0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b5c8:	490c      	ldr	r1, [pc, #48]	@ (800b5fc <vQueueAddToRegistry+0x50>)
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	683a      	ldr	r2, [r7, #0]
 800b5ce:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b5d2:	4a0a      	ldr	r2, [pc, #40]	@ (800b5fc <vQueueAddToRegistry+0x50>)
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	00db      	lsls	r3, r3, #3
 800b5d8:	4413      	add	r3, r2
 800b5da:	687a      	ldr	r2, [r7, #4]
 800b5dc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b5de:	e006      	b.n	800b5ee <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	3301      	adds	r3, #1
 800b5e4:	60fb      	str	r3, [r7, #12]
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	2b07      	cmp	r3, #7
 800b5ea:	d9e7      	bls.n	800b5bc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b5ec:	bf00      	nop
 800b5ee:	bf00      	nop
 800b5f0:	3714      	adds	r7, #20
 800b5f2:	46bd      	mov	sp, r7
 800b5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f8:	4770      	bx	lr
 800b5fa:	bf00      	nop
 800b5fc:	20000adc 	.word	0x20000adc

0800b600 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b600:	b580      	push	{r7, lr}
 800b602:	b086      	sub	sp, #24
 800b604:	af00      	add	r7, sp, #0
 800b606:	60f8      	str	r0, [r7, #12]
 800b608:	60b9      	str	r1, [r7, #8]
 800b60a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b610:	f001 fc1a 	bl	800ce48 <vPortEnterCritical>
 800b614:	697b      	ldr	r3, [r7, #20]
 800b616:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b61a:	b25b      	sxtb	r3, r3
 800b61c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b620:	d103      	bne.n	800b62a <vQueueWaitForMessageRestricted+0x2a>
 800b622:	697b      	ldr	r3, [r7, #20]
 800b624:	2200      	movs	r2, #0
 800b626:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b62a:	697b      	ldr	r3, [r7, #20]
 800b62c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b630:	b25b      	sxtb	r3, r3
 800b632:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b636:	d103      	bne.n	800b640 <vQueueWaitForMessageRestricted+0x40>
 800b638:	697b      	ldr	r3, [r7, #20]
 800b63a:	2200      	movs	r2, #0
 800b63c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b640:	f001 fc34 	bl	800ceac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b644:	697b      	ldr	r3, [r7, #20]
 800b646:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d106      	bne.n	800b65a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b64c:	697b      	ldr	r3, [r7, #20]
 800b64e:	3324      	adds	r3, #36	@ 0x24
 800b650:	687a      	ldr	r2, [r7, #4]
 800b652:	68b9      	ldr	r1, [r7, #8]
 800b654:	4618      	mov	r0, r3
 800b656:	f000 fc93 	bl	800bf80 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b65a:	6978      	ldr	r0, [r7, #20]
 800b65c:	f7ff ff26 	bl	800b4ac <prvUnlockQueue>
	}
 800b660:	bf00      	nop
 800b662:	3718      	adds	r7, #24
 800b664:	46bd      	mov	sp, r7
 800b666:	bd80      	pop	{r7, pc}

0800b668 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b668:	b580      	push	{r7, lr}
 800b66a:	b08e      	sub	sp, #56	@ 0x38
 800b66c:	af04      	add	r7, sp, #16
 800b66e:	60f8      	str	r0, [r7, #12]
 800b670:	60b9      	str	r1, [r7, #8]
 800b672:	607a      	str	r2, [r7, #4]
 800b674:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b676:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d10b      	bne.n	800b694 <xTaskCreateStatic+0x2c>
	__asm volatile
 800b67c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b680:	f383 8811 	msr	BASEPRI, r3
 800b684:	f3bf 8f6f 	isb	sy
 800b688:	f3bf 8f4f 	dsb	sy
 800b68c:	623b      	str	r3, [r7, #32]
}
 800b68e:	bf00      	nop
 800b690:	bf00      	nop
 800b692:	e7fd      	b.n	800b690 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b694:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b696:	2b00      	cmp	r3, #0
 800b698:	d10b      	bne.n	800b6b2 <xTaskCreateStatic+0x4a>
	__asm volatile
 800b69a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b69e:	f383 8811 	msr	BASEPRI, r3
 800b6a2:	f3bf 8f6f 	isb	sy
 800b6a6:	f3bf 8f4f 	dsb	sy
 800b6aa:	61fb      	str	r3, [r7, #28]
}
 800b6ac:	bf00      	nop
 800b6ae:	bf00      	nop
 800b6b0:	e7fd      	b.n	800b6ae <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b6b2:	23ac      	movs	r3, #172	@ 0xac
 800b6b4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b6b6:	693b      	ldr	r3, [r7, #16]
 800b6b8:	2bac      	cmp	r3, #172	@ 0xac
 800b6ba:	d00b      	beq.n	800b6d4 <xTaskCreateStatic+0x6c>
	__asm volatile
 800b6bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6c0:	f383 8811 	msr	BASEPRI, r3
 800b6c4:	f3bf 8f6f 	isb	sy
 800b6c8:	f3bf 8f4f 	dsb	sy
 800b6cc:	61bb      	str	r3, [r7, #24]
}
 800b6ce:	bf00      	nop
 800b6d0:	bf00      	nop
 800b6d2:	e7fd      	b.n	800b6d0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b6d4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b6d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d01e      	beq.n	800b71a <xTaskCreateStatic+0xb2>
 800b6dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d01b      	beq.n	800b71a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b6e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6e4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b6e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6e8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b6ea:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b6ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6ee:	2202      	movs	r2, #2
 800b6f0:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	9303      	str	r3, [sp, #12]
 800b6f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6fa:	9302      	str	r3, [sp, #8]
 800b6fc:	f107 0314 	add.w	r3, r7, #20
 800b700:	9301      	str	r3, [sp, #4]
 800b702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b704:	9300      	str	r3, [sp, #0]
 800b706:	683b      	ldr	r3, [r7, #0]
 800b708:	687a      	ldr	r2, [r7, #4]
 800b70a:	68b9      	ldr	r1, [r7, #8]
 800b70c:	68f8      	ldr	r0, [r7, #12]
 800b70e:	f000 f851 	bl	800b7b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b712:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b714:	f000 f8f8 	bl	800b908 <prvAddNewTaskToReadyList>
 800b718:	e001      	b.n	800b71e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800b71a:	2300      	movs	r3, #0
 800b71c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b71e:	697b      	ldr	r3, [r7, #20]
	}
 800b720:	4618      	mov	r0, r3
 800b722:	3728      	adds	r7, #40	@ 0x28
 800b724:	46bd      	mov	sp, r7
 800b726:	bd80      	pop	{r7, pc}

0800b728 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b728:	b580      	push	{r7, lr}
 800b72a:	b08c      	sub	sp, #48	@ 0x30
 800b72c:	af04      	add	r7, sp, #16
 800b72e:	60f8      	str	r0, [r7, #12]
 800b730:	60b9      	str	r1, [r7, #8]
 800b732:	603b      	str	r3, [r7, #0]
 800b734:	4613      	mov	r3, r2
 800b736:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b738:	88fb      	ldrh	r3, [r7, #6]
 800b73a:	009b      	lsls	r3, r3, #2
 800b73c:	4618      	mov	r0, r3
 800b73e:	f001 fca5 	bl	800d08c <pvPortMalloc>
 800b742:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b744:	697b      	ldr	r3, [r7, #20]
 800b746:	2b00      	cmp	r3, #0
 800b748:	d00e      	beq.n	800b768 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b74a:	20ac      	movs	r0, #172	@ 0xac
 800b74c:	f001 fc9e 	bl	800d08c <pvPortMalloc>
 800b750:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b752:	69fb      	ldr	r3, [r7, #28]
 800b754:	2b00      	cmp	r3, #0
 800b756:	d003      	beq.n	800b760 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b758:	69fb      	ldr	r3, [r7, #28]
 800b75a:	697a      	ldr	r2, [r7, #20]
 800b75c:	631a      	str	r2, [r3, #48]	@ 0x30
 800b75e:	e005      	b.n	800b76c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b760:	6978      	ldr	r0, [r7, #20]
 800b762:	f001 fd67 	bl	800d234 <vPortFree>
 800b766:	e001      	b.n	800b76c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b768:	2300      	movs	r3, #0
 800b76a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b76c:	69fb      	ldr	r3, [r7, #28]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d017      	beq.n	800b7a2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b772:	69fb      	ldr	r3, [r7, #28]
 800b774:	2200      	movs	r2, #0
 800b776:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b77a:	88fa      	ldrh	r2, [r7, #6]
 800b77c:	2300      	movs	r3, #0
 800b77e:	9303      	str	r3, [sp, #12]
 800b780:	69fb      	ldr	r3, [r7, #28]
 800b782:	9302      	str	r3, [sp, #8]
 800b784:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b786:	9301      	str	r3, [sp, #4]
 800b788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b78a:	9300      	str	r3, [sp, #0]
 800b78c:	683b      	ldr	r3, [r7, #0]
 800b78e:	68b9      	ldr	r1, [r7, #8]
 800b790:	68f8      	ldr	r0, [r7, #12]
 800b792:	f000 f80f 	bl	800b7b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b796:	69f8      	ldr	r0, [r7, #28]
 800b798:	f000 f8b6 	bl	800b908 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b79c:	2301      	movs	r3, #1
 800b79e:	61bb      	str	r3, [r7, #24]
 800b7a0:	e002      	b.n	800b7a8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b7a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b7a6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b7a8:	69bb      	ldr	r3, [r7, #24]
	}
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	3720      	adds	r7, #32
 800b7ae:	46bd      	mov	sp, r7
 800b7b0:	bd80      	pop	{r7, pc}
	...

0800b7b4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	b088      	sub	sp, #32
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	60f8      	str	r0, [r7, #12]
 800b7bc:	60b9      	str	r1, [r7, #8]
 800b7be:	607a      	str	r2, [r7, #4]
 800b7c0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b7c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7c4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	009b      	lsls	r3, r3, #2
 800b7ca:	461a      	mov	r2, r3
 800b7cc:	21a5      	movs	r1, #165	@ 0xa5
 800b7ce:	f002 fa19 	bl	800dc04 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b7d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b7dc:	3b01      	subs	r3, #1
 800b7de:	009b      	lsls	r3, r3, #2
 800b7e0:	4413      	add	r3, r2
 800b7e2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b7e4:	69bb      	ldr	r3, [r7, #24]
 800b7e6:	f023 0307 	bic.w	r3, r3, #7
 800b7ea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b7ec:	69bb      	ldr	r3, [r7, #24]
 800b7ee:	f003 0307 	and.w	r3, r3, #7
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d00b      	beq.n	800b80e <prvInitialiseNewTask+0x5a>
	__asm volatile
 800b7f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7fa:	f383 8811 	msr	BASEPRI, r3
 800b7fe:	f3bf 8f6f 	isb	sy
 800b802:	f3bf 8f4f 	dsb	sy
 800b806:	617b      	str	r3, [r7, #20]
}
 800b808:	bf00      	nop
 800b80a:	bf00      	nop
 800b80c:	e7fd      	b.n	800b80a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b80e:	68bb      	ldr	r3, [r7, #8]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d01f      	beq.n	800b854 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b814:	2300      	movs	r3, #0
 800b816:	61fb      	str	r3, [r7, #28]
 800b818:	e012      	b.n	800b840 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b81a:	68ba      	ldr	r2, [r7, #8]
 800b81c:	69fb      	ldr	r3, [r7, #28]
 800b81e:	4413      	add	r3, r2
 800b820:	7819      	ldrb	r1, [r3, #0]
 800b822:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b824:	69fb      	ldr	r3, [r7, #28]
 800b826:	4413      	add	r3, r2
 800b828:	3334      	adds	r3, #52	@ 0x34
 800b82a:	460a      	mov	r2, r1
 800b82c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b82e:	68ba      	ldr	r2, [r7, #8]
 800b830:	69fb      	ldr	r3, [r7, #28]
 800b832:	4413      	add	r3, r2
 800b834:	781b      	ldrb	r3, [r3, #0]
 800b836:	2b00      	cmp	r3, #0
 800b838:	d006      	beq.n	800b848 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b83a:	69fb      	ldr	r3, [r7, #28]
 800b83c:	3301      	adds	r3, #1
 800b83e:	61fb      	str	r3, [r7, #28]
 800b840:	69fb      	ldr	r3, [r7, #28]
 800b842:	2b0f      	cmp	r3, #15
 800b844:	d9e9      	bls.n	800b81a <prvInitialiseNewTask+0x66>
 800b846:	e000      	b.n	800b84a <prvInitialiseNewTask+0x96>
			{
				break;
 800b848:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b84a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b84c:	2200      	movs	r2, #0
 800b84e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b852:	e003      	b.n	800b85c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b856:	2200      	movs	r2, #0
 800b858:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b85c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b85e:	2b37      	cmp	r3, #55	@ 0x37
 800b860:	d901      	bls.n	800b866 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b862:	2337      	movs	r3, #55	@ 0x37
 800b864:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b868:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b86a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b86c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b86e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b870:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b874:	2200      	movs	r2, #0
 800b876:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b87a:	3304      	adds	r3, #4
 800b87c:	4618      	mov	r0, r3
 800b87e:	f7ff f8a7 	bl	800a9d0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b884:	3318      	adds	r3, #24
 800b886:	4618      	mov	r0, r3
 800b888:	f7ff f8a2 	bl	800a9d0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b88c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b88e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b890:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b892:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b894:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b89a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b89c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b89e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b8a0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800b8a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8a4:	2200      	movs	r2, #0
 800b8a6:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b8a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8aa:	2200      	movs	r2, #0
 800b8ac:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b8b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b8b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8ba:	3358      	adds	r3, #88	@ 0x58
 800b8bc:	224c      	movs	r2, #76	@ 0x4c
 800b8be:	2100      	movs	r1, #0
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	f002 f99f 	bl	800dc04 <memset>
 800b8c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8c8:	4a0c      	ldr	r2, [pc, #48]	@ (800b8fc <prvInitialiseNewTask+0x148>)
 800b8ca:	65da      	str	r2, [r3, #92]	@ 0x5c
 800b8cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8ce:	4a0c      	ldr	r2, [pc, #48]	@ (800b900 <prvInitialiseNewTask+0x14c>)
 800b8d0:	661a      	str	r2, [r3, #96]	@ 0x60
 800b8d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8d4:	4a0b      	ldr	r2, [pc, #44]	@ (800b904 <prvInitialiseNewTask+0x150>)
 800b8d6:	665a      	str	r2, [r3, #100]	@ 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b8d8:	683a      	ldr	r2, [r7, #0]
 800b8da:	68f9      	ldr	r1, [r7, #12]
 800b8dc:	69b8      	ldr	r0, [r7, #24]
 800b8de:	f001 f97f 	bl	800cbe0 <pxPortInitialiseStack>
 800b8e2:	4602      	mov	r2, r0
 800b8e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8e6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b8e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d002      	beq.n	800b8f4 <prvInitialiseNewTask+0x140>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b8ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b8f2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b8f4:	bf00      	nop
 800b8f6:	3720      	adds	r7, #32
 800b8f8:	46bd      	mov	sp, r7
 800b8fa:	bd80      	pop	{r7, pc}
 800b8fc:	20009940 	.word	0x20009940
 800b900:	200099a8 	.word	0x200099a8
 800b904:	20009a10 	.word	0x20009a10

0800b908 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b908:	b580      	push	{r7, lr}
 800b90a:	b082      	sub	sp, #8
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b910:	f001 fa9a 	bl	800ce48 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b914:	4b2d      	ldr	r3, [pc, #180]	@ (800b9cc <prvAddNewTaskToReadyList+0xc4>)
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	3301      	adds	r3, #1
 800b91a:	4a2c      	ldr	r2, [pc, #176]	@ (800b9cc <prvAddNewTaskToReadyList+0xc4>)
 800b91c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b91e:	4b2c      	ldr	r3, [pc, #176]	@ (800b9d0 <prvAddNewTaskToReadyList+0xc8>)
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	2b00      	cmp	r3, #0
 800b924:	d109      	bne.n	800b93a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b926:	4a2a      	ldr	r2, [pc, #168]	@ (800b9d0 <prvAddNewTaskToReadyList+0xc8>)
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b92c:	4b27      	ldr	r3, [pc, #156]	@ (800b9cc <prvAddNewTaskToReadyList+0xc4>)
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	2b01      	cmp	r3, #1
 800b932:	d110      	bne.n	800b956 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b934:	f000 fc54 	bl	800c1e0 <prvInitialiseTaskLists>
 800b938:	e00d      	b.n	800b956 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b93a:	4b26      	ldr	r3, [pc, #152]	@ (800b9d4 <prvAddNewTaskToReadyList+0xcc>)
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d109      	bne.n	800b956 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b942:	4b23      	ldr	r3, [pc, #140]	@ (800b9d0 <prvAddNewTaskToReadyList+0xc8>)
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b94c:	429a      	cmp	r2, r3
 800b94e:	d802      	bhi.n	800b956 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b950:	4a1f      	ldr	r2, [pc, #124]	@ (800b9d0 <prvAddNewTaskToReadyList+0xc8>)
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b956:	4b20      	ldr	r3, [pc, #128]	@ (800b9d8 <prvAddNewTaskToReadyList+0xd0>)
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	3301      	adds	r3, #1
 800b95c:	4a1e      	ldr	r2, [pc, #120]	@ (800b9d8 <prvAddNewTaskToReadyList+0xd0>)
 800b95e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b960:	4b1d      	ldr	r3, [pc, #116]	@ (800b9d8 <prvAddNewTaskToReadyList+0xd0>)
 800b962:	681a      	ldr	r2, [r3, #0]
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b96c:	4b1b      	ldr	r3, [pc, #108]	@ (800b9dc <prvAddNewTaskToReadyList+0xd4>)
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	429a      	cmp	r2, r3
 800b972:	d903      	bls.n	800b97c <prvAddNewTaskToReadyList+0x74>
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b978:	4a18      	ldr	r2, [pc, #96]	@ (800b9dc <prvAddNewTaskToReadyList+0xd4>)
 800b97a:	6013      	str	r3, [r2, #0]
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b980:	4613      	mov	r3, r2
 800b982:	009b      	lsls	r3, r3, #2
 800b984:	4413      	add	r3, r2
 800b986:	009b      	lsls	r3, r3, #2
 800b988:	4a15      	ldr	r2, [pc, #84]	@ (800b9e0 <prvAddNewTaskToReadyList+0xd8>)
 800b98a:	441a      	add	r2, r3
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	3304      	adds	r3, #4
 800b990:	4619      	mov	r1, r3
 800b992:	4610      	mov	r0, r2
 800b994:	f7ff f829 	bl	800a9ea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b998:	f001 fa88 	bl	800ceac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b99c:	4b0d      	ldr	r3, [pc, #52]	@ (800b9d4 <prvAddNewTaskToReadyList+0xcc>)
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d00e      	beq.n	800b9c2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b9a4:	4b0a      	ldr	r3, [pc, #40]	@ (800b9d0 <prvAddNewTaskToReadyList+0xc8>)
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9ae:	429a      	cmp	r2, r3
 800b9b0:	d207      	bcs.n	800b9c2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b9b2:	4b0c      	ldr	r3, [pc, #48]	@ (800b9e4 <prvAddNewTaskToReadyList+0xdc>)
 800b9b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b9b8:	601a      	str	r2, [r3, #0]
 800b9ba:	f3bf 8f4f 	dsb	sy
 800b9be:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b9c2:	bf00      	nop
 800b9c4:	3708      	adds	r7, #8
 800b9c6:	46bd      	mov	sp, r7
 800b9c8:	bd80      	pop	{r7, pc}
 800b9ca:	bf00      	nop
 800b9cc:	20000ff0 	.word	0x20000ff0
 800b9d0:	20000b1c 	.word	0x20000b1c
 800b9d4:	20000ffc 	.word	0x20000ffc
 800b9d8:	2000100c 	.word	0x2000100c
 800b9dc:	20000ff8 	.word	0x20000ff8
 800b9e0:	20000b20 	.word	0x20000b20
 800b9e4:	e000ed04 	.word	0xe000ed04

0800b9e8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b9e8:	b580      	push	{r7, lr}
 800b9ea:	b084      	sub	sp, #16
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b9f0:	2300      	movs	r3, #0
 800b9f2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d018      	beq.n	800ba2c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b9fa:	4b14      	ldr	r3, [pc, #80]	@ (800ba4c <vTaskDelay+0x64>)
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d00b      	beq.n	800ba1a <vTaskDelay+0x32>
	__asm volatile
 800ba02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba06:	f383 8811 	msr	BASEPRI, r3
 800ba0a:	f3bf 8f6f 	isb	sy
 800ba0e:	f3bf 8f4f 	dsb	sy
 800ba12:	60bb      	str	r3, [r7, #8]
}
 800ba14:	bf00      	nop
 800ba16:	bf00      	nop
 800ba18:	e7fd      	b.n	800ba16 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ba1a:	f000 f88b 	bl	800bb34 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ba1e:	2100      	movs	r1, #0
 800ba20:	6878      	ldr	r0, [r7, #4]
 800ba22:	f000 fd2f 	bl	800c484 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ba26:	f000 f893 	bl	800bb50 <xTaskResumeAll>
 800ba2a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d107      	bne.n	800ba42 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800ba32:	4b07      	ldr	r3, [pc, #28]	@ (800ba50 <vTaskDelay+0x68>)
 800ba34:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ba38:	601a      	str	r2, [r3, #0]
 800ba3a:	f3bf 8f4f 	dsb	sy
 800ba3e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ba42:	bf00      	nop
 800ba44:	3710      	adds	r7, #16
 800ba46:	46bd      	mov	sp, r7
 800ba48:	bd80      	pop	{r7, pc}
 800ba4a:	bf00      	nop
 800ba4c:	20001018 	.word	0x20001018
 800ba50:	e000ed04 	.word	0xe000ed04

0800ba54 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ba54:	b580      	push	{r7, lr}
 800ba56:	b08a      	sub	sp, #40	@ 0x28
 800ba58:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ba5a:	2300      	movs	r3, #0
 800ba5c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ba5e:	2300      	movs	r3, #0
 800ba60:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ba62:	463a      	mov	r2, r7
 800ba64:	1d39      	adds	r1, r7, #4
 800ba66:	f107 0308 	add.w	r3, r7, #8
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	f7fe ff5c 	bl	800a928 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ba70:	6839      	ldr	r1, [r7, #0]
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	68ba      	ldr	r2, [r7, #8]
 800ba76:	9202      	str	r2, [sp, #8]
 800ba78:	9301      	str	r3, [sp, #4]
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	9300      	str	r3, [sp, #0]
 800ba7e:	2300      	movs	r3, #0
 800ba80:	460a      	mov	r2, r1
 800ba82:	4924      	ldr	r1, [pc, #144]	@ (800bb14 <vTaskStartScheduler+0xc0>)
 800ba84:	4824      	ldr	r0, [pc, #144]	@ (800bb18 <vTaskStartScheduler+0xc4>)
 800ba86:	f7ff fdef 	bl	800b668 <xTaskCreateStatic>
 800ba8a:	4603      	mov	r3, r0
 800ba8c:	4a23      	ldr	r2, [pc, #140]	@ (800bb1c <vTaskStartScheduler+0xc8>)
 800ba8e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ba90:	4b22      	ldr	r3, [pc, #136]	@ (800bb1c <vTaskStartScheduler+0xc8>)
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d002      	beq.n	800ba9e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ba98:	2301      	movs	r3, #1
 800ba9a:	617b      	str	r3, [r7, #20]
 800ba9c:	e001      	b.n	800baa2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ba9e:	2300      	movs	r3, #0
 800baa0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800baa2:	697b      	ldr	r3, [r7, #20]
 800baa4:	2b01      	cmp	r3, #1
 800baa6:	d102      	bne.n	800baae <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800baa8:	f000 fd40 	bl	800c52c <xTimerCreateTimerTask>
 800baac:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800baae:	697b      	ldr	r3, [r7, #20]
 800bab0:	2b01      	cmp	r3, #1
 800bab2:	d11b      	bne.n	800baec <vTaskStartScheduler+0x98>
	__asm volatile
 800bab4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bab8:	f383 8811 	msr	BASEPRI, r3
 800babc:	f3bf 8f6f 	isb	sy
 800bac0:	f3bf 8f4f 	dsb	sy
 800bac4:	613b      	str	r3, [r7, #16]
}
 800bac6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bac8:	4b15      	ldr	r3, [pc, #84]	@ (800bb20 <vTaskStartScheduler+0xcc>)
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	3358      	adds	r3, #88	@ 0x58
 800bace:	4a15      	ldr	r2, [pc, #84]	@ (800bb24 <vTaskStartScheduler+0xd0>)
 800bad0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800bad2:	4b15      	ldr	r3, [pc, #84]	@ (800bb28 <vTaskStartScheduler+0xd4>)
 800bad4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bad8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bada:	4b14      	ldr	r3, [pc, #80]	@ (800bb2c <vTaskStartScheduler+0xd8>)
 800badc:	2201      	movs	r2, #1
 800bade:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800bae0:	4b13      	ldr	r3, [pc, #76]	@ (800bb30 <vTaskStartScheduler+0xdc>)
 800bae2:	2200      	movs	r2, #0
 800bae4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800bae6:	f001 f90b 	bl	800cd00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800baea:	e00f      	b.n	800bb0c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800baec:	697b      	ldr	r3, [r7, #20]
 800baee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800baf2:	d10b      	bne.n	800bb0c <vTaskStartScheduler+0xb8>
	__asm volatile
 800baf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800baf8:	f383 8811 	msr	BASEPRI, r3
 800bafc:	f3bf 8f6f 	isb	sy
 800bb00:	f3bf 8f4f 	dsb	sy
 800bb04:	60fb      	str	r3, [r7, #12]
}
 800bb06:	bf00      	nop
 800bb08:	bf00      	nop
 800bb0a:	e7fd      	b.n	800bb08 <vTaskStartScheduler+0xb4>
}
 800bb0c:	bf00      	nop
 800bb0e:	3718      	adds	r7, #24
 800bb10:	46bd      	mov	sp, r7
 800bb12:	bd80      	pop	{r7, pc}
 800bb14:	0800de28 	.word	0x0800de28
 800bb18:	0800c1ad 	.word	0x0800c1ad
 800bb1c:	20001014 	.word	0x20001014
 800bb20:	20000b1c 	.word	0x20000b1c
 800bb24:	20000030 	.word	0x20000030
 800bb28:	20001010 	.word	0x20001010
 800bb2c:	20000ffc 	.word	0x20000ffc
 800bb30:	20000ff4 	.word	0x20000ff4

0800bb34 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bb34:	b480      	push	{r7}
 800bb36:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800bb38:	4b04      	ldr	r3, [pc, #16]	@ (800bb4c <vTaskSuspendAll+0x18>)
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	3301      	adds	r3, #1
 800bb3e:	4a03      	ldr	r2, [pc, #12]	@ (800bb4c <vTaskSuspendAll+0x18>)
 800bb40:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800bb42:	bf00      	nop
 800bb44:	46bd      	mov	sp, r7
 800bb46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb4a:	4770      	bx	lr
 800bb4c:	20001018 	.word	0x20001018

0800bb50 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800bb50:	b580      	push	{r7, lr}
 800bb52:	b084      	sub	sp, #16
 800bb54:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800bb56:	2300      	movs	r3, #0
 800bb58:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800bb5e:	4b42      	ldr	r3, [pc, #264]	@ (800bc68 <xTaskResumeAll+0x118>)
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d10b      	bne.n	800bb7e <xTaskResumeAll+0x2e>
	__asm volatile
 800bb66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb6a:	f383 8811 	msr	BASEPRI, r3
 800bb6e:	f3bf 8f6f 	isb	sy
 800bb72:	f3bf 8f4f 	dsb	sy
 800bb76:	603b      	str	r3, [r7, #0]
}
 800bb78:	bf00      	nop
 800bb7a:	bf00      	nop
 800bb7c:	e7fd      	b.n	800bb7a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800bb7e:	f001 f963 	bl	800ce48 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800bb82:	4b39      	ldr	r3, [pc, #228]	@ (800bc68 <xTaskResumeAll+0x118>)
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	3b01      	subs	r3, #1
 800bb88:	4a37      	ldr	r2, [pc, #220]	@ (800bc68 <xTaskResumeAll+0x118>)
 800bb8a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bb8c:	4b36      	ldr	r3, [pc, #216]	@ (800bc68 <xTaskResumeAll+0x118>)
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d162      	bne.n	800bc5a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bb94:	4b35      	ldr	r3, [pc, #212]	@ (800bc6c <xTaskResumeAll+0x11c>)
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d05e      	beq.n	800bc5a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bb9c:	e02f      	b.n	800bbfe <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb9e:	4b34      	ldr	r3, [pc, #208]	@ (800bc70 <xTaskResumeAll+0x120>)
 800bba0:	68db      	ldr	r3, [r3, #12]
 800bba2:	68db      	ldr	r3, [r3, #12]
 800bba4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	3318      	adds	r3, #24
 800bbaa:	4618      	mov	r0, r3
 800bbac:	f7fe ff7a 	bl	800aaa4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	3304      	adds	r3, #4
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	f7fe ff75 	bl	800aaa4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bbbe:	4b2d      	ldr	r3, [pc, #180]	@ (800bc74 <xTaskResumeAll+0x124>)
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	429a      	cmp	r2, r3
 800bbc4:	d903      	bls.n	800bbce <xTaskResumeAll+0x7e>
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbca:	4a2a      	ldr	r2, [pc, #168]	@ (800bc74 <xTaskResumeAll+0x124>)
 800bbcc:	6013      	str	r3, [r2, #0]
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bbd2:	4613      	mov	r3, r2
 800bbd4:	009b      	lsls	r3, r3, #2
 800bbd6:	4413      	add	r3, r2
 800bbd8:	009b      	lsls	r3, r3, #2
 800bbda:	4a27      	ldr	r2, [pc, #156]	@ (800bc78 <xTaskResumeAll+0x128>)
 800bbdc:	441a      	add	r2, r3
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	3304      	adds	r3, #4
 800bbe2:	4619      	mov	r1, r3
 800bbe4:	4610      	mov	r0, r2
 800bbe6:	f7fe ff00 	bl	800a9ea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bbee:	4b23      	ldr	r3, [pc, #140]	@ (800bc7c <xTaskResumeAll+0x12c>)
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbf4:	429a      	cmp	r2, r3
 800bbf6:	d302      	bcc.n	800bbfe <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800bbf8:	4b21      	ldr	r3, [pc, #132]	@ (800bc80 <xTaskResumeAll+0x130>)
 800bbfa:	2201      	movs	r2, #1
 800bbfc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bbfe:	4b1c      	ldr	r3, [pc, #112]	@ (800bc70 <xTaskResumeAll+0x120>)
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d1cb      	bne.n	800bb9e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d001      	beq.n	800bc10 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800bc0c:	f000 fb8c 	bl	800c328 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800bc10:	4b1c      	ldr	r3, [pc, #112]	@ (800bc84 <xTaskResumeAll+0x134>)
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d010      	beq.n	800bc3e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800bc1c:	f000 f846 	bl	800bcac <xTaskIncrementTick>
 800bc20:	4603      	mov	r3, r0
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d002      	beq.n	800bc2c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800bc26:	4b16      	ldr	r3, [pc, #88]	@ (800bc80 <xTaskResumeAll+0x130>)
 800bc28:	2201      	movs	r2, #1
 800bc2a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	3b01      	subs	r3, #1
 800bc30:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d1f1      	bne.n	800bc1c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800bc38:	4b12      	ldr	r3, [pc, #72]	@ (800bc84 <xTaskResumeAll+0x134>)
 800bc3a:	2200      	movs	r2, #0
 800bc3c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800bc3e:	4b10      	ldr	r3, [pc, #64]	@ (800bc80 <xTaskResumeAll+0x130>)
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d009      	beq.n	800bc5a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800bc46:	2301      	movs	r3, #1
 800bc48:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800bc4a:	4b0f      	ldr	r3, [pc, #60]	@ (800bc88 <xTaskResumeAll+0x138>)
 800bc4c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bc50:	601a      	str	r2, [r3, #0]
 800bc52:	f3bf 8f4f 	dsb	sy
 800bc56:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bc5a:	f001 f927 	bl	800ceac <vPortExitCritical>

	return xAlreadyYielded;
 800bc5e:	68bb      	ldr	r3, [r7, #8]
}
 800bc60:	4618      	mov	r0, r3
 800bc62:	3710      	adds	r7, #16
 800bc64:	46bd      	mov	sp, r7
 800bc66:	bd80      	pop	{r7, pc}
 800bc68:	20001018 	.word	0x20001018
 800bc6c:	20000ff0 	.word	0x20000ff0
 800bc70:	20000fb0 	.word	0x20000fb0
 800bc74:	20000ff8 	.word	0x20000ff8
 800bc78:	20000b20 	.word	0x20000b20
 800bc7c:	20000b1c 	.word	0x20000b1c
 800bc80:	20001004 	.word	0x20001004
 800bc84:	20001000 	.word	0x20001000
 800bc88:	e000ed04 	.word	0xe000ed04

0800bc8c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800bc8c:	b480      	push	{r7}
 800bc8e:	b083      	sub	sp, #12
 800bc90:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800bc92:	4b05      	ldr	r3, [pc, #20]	@ (800bca8 <xTaskGetTickCount+0x1c>)
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800bc98:	687b      	ldr	r3, [r7, #4]
}
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	370c      	adds	r7, #12
 800bc9e:	46bd      	mov	sp, r7
 800bca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca4:	4770      	bx	lr
 800bca6:	bf00      	nop
 800bca8:	20000ff4 	.word	0x20000ff4

0800bcac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bcac:	b580      	push	{r7, lr}
 800bcae:	b086      	sub	sp, #24
 800bcb0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bcb2:	2300      	movs	r3, #0
 800bcb4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bcb6:	4b4f      	ldr	r3, [pc, #316]	@ (800bdf4 <xTaskIncrementTick+0x148>)
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	f040 8090 	bne.w	800bde0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bcc0:	4b4d      	ldr	r3, [pc, #308]	@ (800bdf8 <xTaskIncrementTick+0x14c>)
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	3301      	adds	r3, #1
 800bcc6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bcc8:	4a4b      	ldr	r2, [pc, #300]	@ (800bdf8 <xTaskIncrementTick+0x14c>)
 800bcca:	693b      	ldr	r3, [r7, #16]
 800bccc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bcce:	693b      	ldr	r3, [r7, #16]
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d121      	bne.n	800bd18 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800bcd4:	4b49      	ldr	r3, [pc, #292]	@ (800bdfc <xTaskIncrementTick+0x150>)
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d00b      	beq.n	800bcf6 <xTaskIncrementTick+0x4a>
	__asm volatile
 800bcde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bce2:	f383 8811 	msr	BASEPRI, r3
 800bce6:	f3bf 8f6f 	isb	sy
 800bcea:	f3bf 8f4f 	dsb	sy
 800bcee:	603b      	str	r3, [r7, #0]
}
 800bcf0:	bf00      	nop
 800bcf2:	bf00      	nop
 800bcf4:	e7fd      	b.n	800bcf2 <xTaskIncrementTick+0x46>
 800bcf6:	4b41      	ldr	r3, [pc, #260]	@ (800bdfc <xTaskIncrementTick+0x150>)
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	60fb      	str	r3, [r7, #12]
 800bcfc:	4b40      	ldr	r3, [pc, #256]	@ (800be00 <xTaskIncrementTick+0x154>)
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	4a3e      	ldr	r2, [pc, #248]	@ (800bdfc <xTaskIncrementTick+0x150>)
 800bd02:	6013      	str	r3, [r2, #0]
 800bd04:	4a3e      	ldr	r2, [pc, #248]	@ (800be00 <xTaskIncrementTick+0x154>)
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	6013      	str	r3, [r2, #0]
 800bd0a:	4b3e      	ldr	r3, [pc, #248]	@ (800be04 <xTaskIncrementTick+0x158>)
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	3301      	adds	r3, #1
 800bd10:	4a3c      	ldr	r2, [pc, #240]	@ (800be04 <xTaskIncrementTick+0x158>)
 800bd12:	6013      	str	r3, [r2, #0]
 800bd14:	f000 fb08 	bl	800c328 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bd18:	4b3b      	ldr	r3, [pc, #236]	@ (800be08 <xTaskIncrementTick+0x15c>)
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	693a      	ldr	r2, [r7, #16]
 800bd1e:	429a      	cmp	r2, r3
 800bd20:	d349      	bcc.n	800bdb6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bd22:	4b36      	ldr	r3, [pc, #216]	@ (800bdfc <xTaskIncrementTick+0x150>)
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d104      	bne.n	800bd36 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd2c:	4b36      	ldr	r3, [pc, #216]	@ (800be08 <xTaskIncrementTick+0x15c>)
 800bd2e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bd32:	601a      	str	r2, [r3, #0]
					break;
 800bd34:	e03f      	b.n	800bdb6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd36:	4b31      	ldr	r3, [pc, #196]	@ (800bdfc <xTaskIncrementTick+0x150>)
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	68db      	ldr	r3, [r3, #12]
 800bd3c:	68db      	ldr	r3, [r3, #12]
 800bd3e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bd40:	68bb      	ldr	r3, [r7, #8]
 800bd42:	685b      	ldr	r3, [r3, #4]
 800bd44:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bd46:	693a      	ldr	r2, [r7, #16]
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	429a      	cmp	r2, r3
 800bd4c:	d203      	bcs.n	800bd56 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bd4e:	4a2e      	ldr	r2, [pc, #184]	@ (800be08 <xTaskIncrementTick+0x15c>)
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bd54:	e02f      	b.n	800bdb6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bd56:	68bb      	ldr	r3, [r7, #8]
 800bd58:	3304      	adds	r3, #4
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	f7fe fea2 	bl	800aaa4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bd60:	68bb      	ldr	r3, [r7, #8]
 800bd62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d004      	beq.n	800bd72 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bd68:	68bb      	ldr	r3, [r7, #8]
 800bd6a:	3318      	adds	r3, #24
 800bd6c:	4618      	mov	r0, r3
 800bd6e:	f7fe fe99 	bl	800aaa4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bd72:	68bb      	ldr	r3, [r7, #8]
 800bd74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd76:	4b25      	ldr	r3, [pc, #148]	@ (800be0c <xTaskIncrementTick+0x160>)
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	429a      	cmp	r2, r3
 800bd7c:	d903      	bls.n	800bd86 <xTaskIncrementTick+0xda>
 800bd7e:	68bb      	ldr	r3, [r7, #8]
 800bd80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd82:	4a22      	ldr	r2, [pc, #136]	@ (800be0c <xTaskIncrementTick+0x160>)
 800bd84:	6013      	str	r3, [r2, #0]
 800bd86:	68bb      	ldr	r3, [r7, #8]
 800bd88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd8a:	4613      	mov	r3, r2
 800bd8c:	009b      	lsls	r3, r3, #2
 800bd8e:	4413      	add	r3, r2
 800bd90:	009b      	lsls	r3, r3, #2
 800bd92:	4a1f      	ldr	r2, [pc, #124]	@ (800be10 <xTaskIncrementTick+0x164>)
 800bd94:	441a      	add	r2, r3
 800bd96:	68bb      	ldr	r3, [r7, #8]
 800bd98:	3304      	adds	r3, #4
 800bd9a:	4619      	mov	r1, r3
 800bd9c:	4610      	mov	r0, r2
 800bd9e:	f7fe fe24 	bl	800a9ea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bda2:	68bb      	ldr	r3, [r7, #8]
 800bda4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bda6:	4b1b      	ldr	r3, [pc, #108]	@ (800be14 <xTaskIncrementTick+0x168>)
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bdac:	429a      	cmp	r2, r3
 800bdae:	d3b8      	bcc.n	800bd22 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800bdb0:	2301      	movs	r3, #1
 800bdb2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bdb4:	e7b5      	b.n	800bd22 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bdb6:	4b17      	ldr	r3, [pc, #92]	@ (800be14 <xTaskIncrementTick+0x168>)
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bdbc:	4914      	ldr	r1, [pc, #80]	@ (800be10 <xTaskIncrementTick+0x164>)
 800bdbe:	4613      	mov	r3, r2
 800bdc0:	009b      	lsls	r3, r3, #2
 800bdc2:	4413      	add	r3, r2
 800bdc4:	009b      	lsls	r3, r3, #2
 800bdc6:	440b      	add	r3, r1
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	2b01      	cmp	r3, #1
 800bdcc:	d901      	bls.n	800bdd2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800bdce:	2301      	movs	r3, #1
 800bdd0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800bdd2:	4b11      	ldr	r3, [pc, #68]	@ (800be18 <xTaskIncrementTick+0x16c>)
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d007      	beq.n	800bdea <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800bdda:	2301      	movs	r3, #1
 800bddc:	617b      	str	r3, [r7, #20]
 800bdde:	e004      	b.n	800bdea <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800bde0:	4b0e      	ldr	r3, [pc, #56]	@ (800be1c <xTaskIncrementTick+0x170>)
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	3301      	adds	r3, #1
 800bde6:	4a0d      	ldr	r2, [pc, #52]	@ (800be1c <xTaskIncrementTick+0x170>)
 800bde8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800bdea:	697b      	ldr	r3, [r7, #20]
}
 800bdec:	4618      	mov	r0, r3
 800bdee:	3718      	adds	r7, #24
 800bdf0:	46bd      	mov	sp, r7
 800bdf2:	bd80      	pop	{r7, pc}
 800bdf4:	20001018 	.word	0x20001018
 800bdf8:	20000ff4 	.word	0x20000ff4
 800bdfc:	20000fa8 	.word	0x20000fa8
 800be00:	20000fac 	.word	0x20000fac
 800be04:	20001008 	.word	0x20001008
 800be08:	20001010 	.word	0x20001010
 800be0c:	20000ff8 	.word	0x20000ff8
 800be10:	20000b20 	.word	0x20000b20
 800be14:	20000b1c 	.word	0x20000b1c
 800be18:	20001004 	.word	0x20001004
 800be1c:	20001000 	.word	0x20001000

0800be20 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800be20:	b580      	push	{r7, lr}
 800be22:	b086      	sub	sp, #24
 800be24:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800be26:	4b3d      	ldr	r3, [pc, #244]	@ (800bf1c <vTaskSwitchContext+0xfc>)
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d003      	beq.n	800be36 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800be2e:	4b3c      	ldr	r3, [pc, #240]	@ (800bf20 <vTaskSwitchContext+0x100>)
 800be30:	2201      	movs	r2, #1
 800be32:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800be34:	e06e      	b.n	800bf14 <vTaskSwitchContext+0xf4>
		xYieldPending = pdFALSE;
 800be36:	4b3a      	ldr	r3, [pc, #232]	@ (800bf20 <vTaskSwitchContext+0x100>)
 800be38:	2200      	movs	r2, #0
 800be3a:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800be3c:	4b39      	ldr	r3, [pc, #228]	@ (800bf24 <vTaskSwitchContext+0x104>)
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800be42:	613b      	str	r3, [r7, #16]
 800be44:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 800be48:	60fb      	str	r3, [r7, #12]
 800be4a:	693b      	ldr	r3, [r7, #16]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	68fa      	ldr	r2, [r7, #12]
 800be50:	429a      	cmp	r2, r3
 800be52:	d111      	bne.n	800be78 <vTaskSwitchContext+0x58>
 800be54:	693b      	ldr	r3, [r7, #16]
 800be56:	3304      	adds	r3, #4
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	68fa      	ldr	r2, [r7, #12]
 800be5c:	429a      	cmp	r2, r3
 800be5e:	d10b      	bne.n	800be78 <vTaskSwitchContext+0x58>
 800be60:	693b      	ldr	r3, [r7, #16]
 800be62:	3308      	adds	r3, #8
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	68fa      	ldr	r2, [r7, #12]
 800be68:	429a      	cmp	r2, r3
 800be6a:	d105      	bne.n	800be78 <vTaskSwitchContext+0x58>
 800be6c:	693b      	ldr	r3, [r7, #16]
 800be6e:	330c      	adds	r3, #12
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	68fa      	ldr	r2, [r7, #12]
 800be74:	429a      	cmp	r2, r3
 800be76:	d008      	beq.n	800be8a <vTaskSwitchContext+0x6a>
 800be78:	4b2a      	ldr	r3, [pc, #168]	@ (800bf24 <vTaskSwitchContext+0x104>)
 800be7a:	681a      	ldr	r2, [r3, #0]
 800be7c:	4b29      	ldr	r3, [pc, #164]	@ (800bf24 <vTaskSwitchContext+0x104>)
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	3334      	adds	r3, #52	@ 0x34
 800be82:	4619      	mov	r1, r3
 800be84:	4610      	mov	r0, r2
 800be86:	f7f4 fb32 	bl	80004ee <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be8a:	4b27      	ldr	r3, [pc, #156]	@ (800bf28 <vTaskSwitchContext+0x108>)
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	617b      	str	r3, [r7, #20]
 800be90:	e011      	b.n	800beb6 <vTaskSwitchContext+0x96>
 800be92:	697b      	ldr	r3, [r7, #20]
 800be94:	2b00      	cmp	r3, #0
 800be96:	d10b      	bne.n	800beb0 <vTaskSwitchContext+0x90>
	__asm volatile
 800be98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be9c:	f383 8811 	msr	BASEPRI, r3
 800bea0:	f3bf 8f6f 	isb	sy
 800bea4:	f3bf 8f4f 	dsb	sy
 800bea8:	607b      	str	r3, [r7, #4]
}
 800beaa:	bf00      	nop
 800beac:	bf00      	nop
 800beae:	e7fd      	b.n	800beac <vTaskSwitchContext+0x8c>
 800beb0:	697b      	ldr	r3, [r7, #20]
 800beb2:	3b01      	subs	r3, #1
 800beb4:	617b      	str	r3, [r7, #20]
 800beb6:	491d      	ldr	r1, [pc, #116]	@ (800bf2c <vTaskSwitchContext+0x10c>)
 800beb8:	697a      	ldr	r2, [r7, #20]
 800beba:	4613      	mov	r3, r2
 800bebc:	009b      	lsls	r3, r3, #2
 800bebe:	4413      	add	r3, r2
 800bec0:	009b      	lsls	r3, r3, #2
 800bec2:	440b      	add	r3, r1
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d0e3      	beq.n	800be92 <vTaskSwitchContext+0x72>
 800beca:	697a      	ldr	r2, [r7, #20]
 800becc:	4613      	mov	r3, r2
 800bece:	009b      	lsls	r3, r3, #2
 800bed0:	4413      	add	r3, r2
 800bed2:	009b      	lsls	r3, r3, #2
 800bed4:	4a15      	ldr	r2, [pc, #84]	@ (800bf2c <vTaskSwitchContext+0x10c>)
 800bed6:	4413      	add	r3, r2
 800bed8:	60bb      	str	r3, [r7, #8]
 800beda:	68bb      	ldr	r3, [r7, #8]
 800bedc:	685b      	ldr	r3, [r3, #4]
 800bede:	685a      	ldr	r2, [r3, #4]
 800bee0:	68bb      	ldr	r3, [r7, #8]
 800bee2:	605a      	str	r2, [r3, #4]
 800bee4:	68bb      	ldr	r3, [r7, #8]
 800bee6:	685a      	ldr	r2, [r3, #4]
 800bee8:	68bb      	ldr	r3, [r7, #8]
 800beea:	3308      	adds	r3, #8
 800beec:	429a      	cmp	r2, r3
 800beee:	d104      	bne.n	800befa <vTaskSwitchContext+0xda>
 800bef0:	68bb      	ldr	r3, [r7, #8]
 800bef2:	685b      	ldr	r3, [r3, #4]
 800bef4:	685a      	ldr	r2, [r3, #4]
 800bef6:	68bb      	ldr	r3, [r7, #8]
 800bef8:	605a      	str	r2, [r3, #4]
 800befa:	68bb      	ldr	r3, [r7, #8]
 800befc:	685b      	ldr	r3, [r3, #4]
 800befe:	68db      	ldr	r3, [r3, #12]
 800bf00:	4a08      	ldr	r2, [pc, #32]	@ (800bf24 <vTaskSwitchContext+0x104>)
 800bf02:	6013      	str	r3, [r2, #0]
 800bf04:	4a08      	ldr	r2, [pc, #32]	@ (800bf28 <vTaskSwitchContext+0x108>)
 800bf06:	697b      	ldr	r3, [r7, #20]
 800bf08:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bf0a:	4b06      	ldr	r3, [pc, #24]	@ (800bf24 <vTaskSwitchContext+0x104>)
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	3358      	adds	r3, #88	@ 0x58
 800bf10:	4a07      	ldr	r2, [pc, #28]	@ (800bf30 <vTaskSwitchContext+0x110>)
 800bf12:	6013      	str	r3, [r2, #0]
}
 800bf14:	bf00      	nop
 800bf16:	3718      	adds	r7, #24
 800bf18:	46bd      	mov	sp, r7
 800bf1a:	bd80      	pop	{r7, pc}
 800bf1c:	20001018 	.word	0x20001018
 800bf20:	20001004 	.word	0x20001004
 800bf24:	20000b1c 	.word	0x20000b1c
 800bf28:	20000ff8 	.word	0x20000ff8
 800bf2c:	20000b20 	.word	0x20000b20
 800bf30:	20000030 	.word	0x20000030

0800bf34 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bf34:	b580      	push	{r7, lr}
 800bf36:	b084      	sub	sp, #16
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	6078      	str	r0, [r7, #4]
 800bf3c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d10b      	bne.n	800bf5c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800bf44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf48:	f383 8811 	msr	BASEPRI, r3
 800bf4c:	f3bf 8f6f 	isb	sy
 800bf50:	f3bf 8f4f 	dsb	sy
 800bf54:	60fb      	str	r3, [r7, #12]
}
 800bf56:	bf00      	nop
 800bf58:	bf00      	nop
 800bf5a:	e7fd      	b.n	800bf58 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bf5c:	4b07      	ldr	r3, [pc, #28]	@ (800bf7c <vTaskPlaceOnEventList+0x48>)
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	3318      	adds	r3, #24
 800bf62:	4619      	mov	r1, r3
 800bf64:	6878      	ldr	r0, [r7, #4]
 800bf66:	f7fe fd64 	bl	800aa32 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bf6a:	2101      	movs	r1, #1
 800bf6c:	6838      	ldr	r0, [r7, #0]
 800bf6e:	f000 fa89 	bl	800c484 <prvAddCurrentTaskToDelayedList>
}
 800bf72:	bf00      	nop
 800bf74:	3710      	adds	r7, #16
 800bf76:	46bd      	mov	sp, r7
 800bf78:	bd80      	pop	{r7, pc}
 800bf7a:	bf00      	nop
 800bf7c:	20000b1c 	.word	0x20000b1c

0800bf80 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bf80:	b580      	push	{r7, lr}
 800bf82:	b086      	sub	sp, #24
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	60f8      	str	r0, [r7, #12]
 800bf88:	60b9      	str	r1, [r7, #8]
 800bf8a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d10b      	bne.n	800bfaa <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800bf92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf96:	f383 8811 	msr	BASEPRI, r3
 800bf9a:	f3bf 8f6f 	isb	sy
 800bf9e:	f3bf 8f4f 	dsb	sy
 800bfa2:	617b      	str	r3, [r7, #20]
}
 800bfa4:	bf00      	nop
 800bfa6:	bf00      	nop
 800bfa8:	e7fd      	b.n	800bfa6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bfaa:	4b0a      	ldr	r3, [pc, #40]	@ (800bfd4 <vTaskPlaceOnEventListRestricted+0x54>)
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	3318      	adds	r3, #24
 800bfb0:	4619      	mov	r1, r3
 800bfb2:	68f8      	ldr	r0, [r7, #12]
 800bfb4:	f7fe fd19 	bl	800a9ea <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d002      	beq.n	800bfc4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800bfbe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bfc2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bfc4:	6879      	ldr	r1, [r7, #4]
 800bfc6:	68b8      	ldr	r0, [r7, #8]
 800bfc8:	f000 fa5c 	bl	800c484 <prvAddCurrentTaskToDelayedList>
	}
 800bfcc:	bf00      	nop
 800bfce:	3718      	adds	r7, #24
 800bfd0:	46bd      	mov	sp, r7
 800bfd2:	bd80      	pop	{r7, pc}
 800bfd4:	20000b1c 	.word	0x20000b1c

0800bfd8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	b086      	sub	sp, #24
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	68db      	ldr	r3, [r3, #12]
 800bfe4:	68db      	ldr	r3, [r3, #12]
 800bfe6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bfe8:	693b      	ldr	r3, [r7, #16]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d10b      	bne.n	800c006 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800bfee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bff2:	f383 8811 	msr	BASEPRI, r3
 800bff6:	f3bf 8f6f 	isb	sy
 800bffa:	f3bf 8f4f 	dsb	sy
 800bffe:	60fb      	str	r3, [r7, #12]
}
 800c000:	bf00      	nop
 800c002:	bf00      	nop
 800c004:	e7fd      	b.n	800c002 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c006:	693b      	ldr	r3, [r7, #16]
 800c008:	3318      	adds	r3, #24
 800c00a:	4618      	mov	r0, r3
 800c00c:	f7fe fd4a 	bl	800aaa4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c010:	4b1d      	ldr	r3, [pc, #116]	@ (800c088 <xTaskRemoveFromEventList+0xb0>)
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	2b00      	cmp	r3, #0
 800c016:	d11d      	bne.n	800c054 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c018:	693b      	ldr	r3, [r7, #16]
 800c01a:	3304      	adds	r3, #4
 800c01c:	4618      	mov	r0, r3
 800c01e:	f7fe fd41 	bl	800aaa4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c022:	693b      	ldr	r3, [r7, #16]
 800c024:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c026:	4b19      	ldr	r3, [pc, #100]	@ (800c08c <xTaskRemoveFromEventList+0xb4>)
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	429a      	cmp	r2, r3
 800c02c:	d903      	bls.n	800c036 <xTaskRemoveFromEventList+0x5e>
 800c02e:	693b      	ldr	r3, [r7, #16]
 800c030:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c032:	4a16      	ldr	r2, [pc, #88]	@ (800c08c <xTaskRemoveFromEventList+0xb4>)
 800c034:	6013      	str	r3, [r2, #0]
 800c036:	693b      	ldr	r3, [r7, #16]
 800c038:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c03a:	4613      	mov	r3, r2
 800c03c:	009b      	lsls	r3, r3, #2
 800c03e:	4413      	add	r3, r2
 800c040:	009b      	lsls	r3, r3, #2
 800c042:	4a13      	ldr	r2, [pc, #76]	@ (800c090 <xTaskRemoveFromEventList+0xb8>)
 800c044:	441a      	add	r2, r3
 800c046:	693b      	ldr	r3, [r7, #16]
 800c048:	3304      	adds	r3, #4
 800c04a:	4619      	mov	r1, r3
 800c04c:	4610      	mov	r0, r2
 800c04e:	f7fe fccc 	bl	800a9ea <vListInsertEnd>
 800c052:	e005      	b.n	800c060 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c054:	693b      	ldr	r3, [r7, #16]
 800c056:	3318      	adds	r3, #24
 800c058:	4619      	mov	r1, r3
 800c05a:	480e      	ldr	r0, [pc, #56]	@ (800c094 <xTaskRemoveFromEventList+0xbc>)
 800c05c:	f7fe fcc5 	bl	800a9ea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c060:	693b      	ldr	r3, [r7, #16]
 800c062:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c064:	4b0c      	ldr	r3, [pc, #48]	@ (800c098 <xTaskRemoveFromEventList+0xc0>)
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c06a:	429a      	cmp	r2, r3
 800c06c:	d905      	bls.n	800c07a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c06e:	2301      	movs	r3, #1
 800c070:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c072:	4b0a      	ldr	r3, [pc, #40]	@ (800c09c <xTaskRemoveFromEventList+0xc4>)
 800c074:	2201      	movs	r2, #1
 800c076:	601a      	str	r2, [r3, #0]
 800c078:	e001      	b.n	800c07e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800c07a:	2300      	movs	r3, #0
 800c07c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c07e:	697b      	ldr	r3, [r7, #20]
}
 800c080:	4618      	mov	r0, r3
 800c082:	3718      	adds	r7, #24
 800c084:	46bd      	mov	sp, r7
 800c086:	bd80      	pop	{r7, pc}
 800c088:	20001018 	.word	0x20001018
 800c08c:	20000ff8 	.word	0x20000ff8
 800c090:	20000b20 	.word	0x20000b20
 800c094:	20000fb0 	.word	0x20000fb0
 800c098:	20000b1c 	.word	0x20000b1c
 800c09c:	20001004 	.word	0x20001004

0800c0a0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c0a0:	b480      	push	{r7}
 800c0a2:	b083      	sub	sp, #12
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c0a8:	4b06      	ldr	r3, [pc, #24]	@ (800c0c4 <vTaskInternalSetTimeOutState+0x24>)
 800c0aa:	681a      	ldr	r2, [r3, #0]
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c0b0:	4b05      	ldr	r3, [pc, #20]	@ (800c0c8 <vTaskInternalSetTimeOutState+0x28>)
 800c0b2:	681a      	ldr	r2, [r3, #0]
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	605a      	str	r2, [r3, #4]
}
 800c0b8:	bf00      	nop
 800c0ba:	370c      	adds	r7, #12
 800c0bc:	46bd      	mov	sp, r7
 800c0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c2:	4770      	bx	lr
 800c0c4:	20001008 	.word	0x20001008
 800c0c8:	20000ff4 	.word	0x20000ff4

0800c0cc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c0cc:	b580      	push	{r7, lr}
 800c0ce:	b088      	sub	sp, #32
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	6078      	str	r0, [r7, #4]
 800c0d4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d10b      	bne.n	800c0f4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800c0dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0e0:	f383 8811 	msr	BASEPRI, r3
 800c0e4:	f3bf 8f6f 	isb	sy
 800c0e8:	f3bf 8f4f 	dsb	sy
 800c0ec:	613b      	str	r3, [r7, #16]
}
 800c0ee:	bf00      	nop
 800c0f0:	bf00      	nop
 800c0f2:	e7fd      	b.n	800c0f0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c0f4:	683b      	ldr	r3, [r7, #0]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d10b      	bne.n	800c112 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800c0fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0fe:	f383 8811 	msr	BASEPRI, r3
 800c102:	f3bf 8f6f 	isb	sy
 800c106:	f3bf 8f4f 	dsb	sy
 800c10a:	60fb      	str	r3, [r7, #12]
}
 800c10c:	bf00      	nop
 800c10e:	bf00      	nop
 800c110:	e7fd      	b.n	800c10e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800c112:	f000 fe99 	bl	800ce48 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c116:	4b1d      	ldr	r3, [pc, #116]	@ (800c18c <xTaskCheckForTimeOut+0xc0>)
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	685b      	ldr	r3, [r3, #4]
 800c120:	69ba      	ldr	r2, [r7, #24]
 800c122:	1ad3      	subs	r3, r2, r3
 800c124:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c126:	683b      	ldr	r3, [r7, #0]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c12e:	d102      	bne.n	800c136 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c130:	2300      	movs	r3, #0
 800c132:	61fb      	str	r3, [r7, #28]
 800c134:	e023      	b.n	800c17e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	681a      	ldr	r2, [r3, #0]
 800c13a:	4b15      	ldr	r3, [pc, #84]	@ (800c190 <xTaskCheckForTimeOut+0xc4>)
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	429a      	cmp	r2, r3
 800c140:	d007      	beq.n	800c152 <xTaskCheckForTimeOut+0x86>
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	685b      	ldr	r3, [r3, #4]
 800c146:	69ba      	ldr	r2, [r7, #24]
 800c148:	429a      	cmp	r2, r3
 800c14a:	d302      	bcc.n	800c152 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c14c:	2301      	movs	r3, #1
 800c14e:	61fb      	str	r3, [r7, #28]
 800c150:	e015      	b.n	800c17e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c152:	683b      	ldr	r3, [r7, #0]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	697a      	ldr	r2, [r7, #20]
 800c158:	429a      	cmp	r2, r3
 800c15a:	d20b      	bcs.n	800c174 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c15c:	683b      	ldr	r3, [r7, #0]
 800c15e:	681a      	ldr	r2, [r3, #0]
 800c160:	697b      	ldr	r3, [r7, #20]
 800c162:	1ad2      	subs	r2, r2, r3
 800c164:	683b      	ldr	r3, [r7, #0]
 800c166:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c168:	6878      	ldr	r0, [r7, #4]
 800c16a:	f7ff ff99 	bl	800c0a0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c16e:	2300      	movs	r3, #0
 800c170:	61fb      	str	r3, [r7, #28]
 800c172:	e004      	b.n	800c17e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800c174:	683b      	ldr	r3, [r7, #0]
 800c176:	2200      	movs	r2, #0
 800c178:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c17a:	2301      	movs	r3, #1
 800c17c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c17e:	f000 fe95 	bl	800ceac <vPortExitCritical>

	return xReturn;
 800c182:	69fb      	ldr	r3, [r7, #28]
}
 800c184:	4618      	mov	r0, r3
 800c186:	3720      	adds	r7, #32
 800c188:	46bd      	mov	sp, r7
 800c18a:	bd80      	pop	{r7, pc}
 800c18c:	20000ff4 	.word	0x20000ff4
 800c190:	20001008 	.word	0x20001008

0800c194 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c194:	b480      	push	{r7}
 800c196:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c198:	4b03      	ldr	r3, [pc, #12]	@ (800c1a8 <vTaskMissedYield+0x14>)
 800c19a:	2201      	movs	r2, #1
 800c19c:	601a      	str	r2, [r3, #0]
}
 800c19e:	bf00      	nop
 800c1a0:	46bd      	mov	sp, r7
 800c1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a6:	4770      	bx	lr
 800c1a8:	20001004 	.word	0x20001004

0800c1ac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c1ac:	b580      	push	{r7, lr}
 800c1ae:	b082      	sub	sp, #8
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c1b4:	f000 f854 	bl	800c260 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c1b8:	4b07      	ldr	r3, [pc, #28]	@ (800c1d8 <prvIdleTask+0x2c>)
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	2b01      	cmp	r3, #1
 800c1be:	d907      	bls.n	800c1d0 <prvIdleTask+0x24>
			{
				taskYIELD();
 800c1c0:	4b06      	ldr	r3, [pc, #24]	@ (800c1dc <prvIdleTask+0x30>)
 800c1c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c1c6:	601a      	str	r2, [r3, #0]
 800c1c8:	f3bf 8f4f 	dsb	sy
 800c1cc:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800c1d0:	f7f4 f986 	bl	80004e0 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800c1d4:	e7ee      	b.n	800c1b4 <prvIdleTask+0x8>
 800c1d6:	bf00      	nop
 800c1d8:	20000b20 	.word	0x20000b20
 800c1dc:	e000ed04 	.word	0xe000ed04

0800c1e0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c1e0:	b580      	push	{r7, lr}
 800c1e2:	b082      	sub	sp, #8
 800c1e4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c1e6:	2300      	movs	r3, #0
 800c1e8:	607b      	str	r3, [r7, #4]
 800c1ea:	e00c      	b.n	800c206 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c1ec:	687a      	ldr	r2, [r7, #4]
 800c1ee:	4613      	mov	r3, r2
 800c1f0:	009b      	lsls	r3, r3, #2
 800c1f2:	4413      	add	r3, r2
 800c1f4:	009b      	lsls	r3, r3, #2
 800c1f6:	4a12      	ldr	r2, [pc, #72]	@ (800c240 <prvInitialiseTaskLists+0x60>)
 800c1f8:	4413      	add	r3, r2
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	f7fe fbc8 	bl	800a990 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	3301      	adds	r3, #1
 800c204:	607b      	str	r3, [r7, #4]
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	2b37      	cmp	r3, #55	@ 0x37
 800c20a:	d9ef      	bls.n	800c1ec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c20c:	480d      	ldr	r0, [pc, #52]	@ (800c244 <prvInitialiseTaskLists+0x64>)
 800c20e:	f7fe fbbf 	bl	800a990 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c212:	480d      	ldr	r0, [pc, #52]	@ (800c248 <prvInitialiseTaskLists+0x68>)
 800c214:	f7fe fbbc 	bl	800a990 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c218:	480c      	ldr	r0, [pc, #48]	@ (800c24c <prvInitialiseTaskLists+0x6c>)
 800c21a:	f7fe fbb9 	bl	800a990 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c21e:	480c      	ldr	r0, [pc, #48]	@ (800c250 <prvInitialiseTaskLists+0x70>)
 800c220:	f7fe fbb6 	bl	800a990 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c224:	480b      	ldr	r0, [pc, #44]	@ (800c254 <prvInitialiseTaskLists+0x74>)
 800c226:	f7fe fbb3 	bl	800a990 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c22a:	4b0b      	ldr	r3, [pc, #44]	@ (800c258 <prvInitialiseTaskLists+0x78>)
 800c22c:	4a05      	ldr	r2, [pc, #20]	@ (800c244 <prvInitialiseTaskLists+0x64>)
 800c22e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c230:	4b0a      	ldr	r3, [pc, #40]	@ (800c25c <prvInitialiseTaskLists+0x7c>)
 800c232:	4a05      	ldr	r2, [pc, #20]	@ (800c248 <prvInitialiseTaskLists+0x68>)
 800c234:	601a      	str	r2, [r3, #0]
}
 800c236:	bf00      	nop
 800c238:	3708      	adds	r7, #8
 800c23a:	46bd      	mov	sp, r7
 800c23c:	bd80      	pop	{r7, pc}
 800c23e:	bf00      	nop
 800c240:	20000b20 	.word	0x20000b20
 800c244:	20000f80 	.word	0x20000f80
 800c248:	20000f94 	.word	0x20000f94
 800c24c:	20000fb0 	.word	0x20000fb0
 800c250:	20000fc4 	.word	0x20000fc4
 800c254:	20000fdc 	.word	0x20000fdc
 800c258:	20000fa8 	.word	0x20000fa8
 800c25c:	20000fac 	.word	0x20000fac

0800c260 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c260:	b580      	push	{r7, lr}
 800c262:	b082      	sub	sp, #8
 800c264:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c266:	e019      	b.n	800c29c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c268:	f000 fdee 	bl	800ce48 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c26c:	4b10      	ldr	r3, [pc, #64]	@ (800c2b0 <prvCheckTasksWaitingTermination+0x50>)
 800c26e:	68db      	ldr	r3, [r3, #12]
 800c270:	68db      	ldr	r3, [r3, #12]
 800c272:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	3304      	adds	r3, #4
 800c278:	4618      	mov	r0, r3
 800c27a:	f7fe fc13 	bl	800aaa4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c27e:	4b0d      	ldr	r3, [pc, #52]	@ (800c2b4 <prvCheckTasksWaitingTermination+0x54>)
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	3b01      	subs	r3, #1
 800c284:	4a0b      	ldr	r2, [pc, #44]	@ (800c2b4 <prvCheckTasksWaitingTermination+0x54>)
 800c286:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c288:	4b0b      	ldr	r3, [pc, #44]	@ (800c2b8 <prvCheckTasksWaitingTermination+0x58>)
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	3b01      	subs	r3, #1
 800c28e:	4a0a      	ldr	r2, [pc, #40]	@ (800c2b8 <prvCheckTasksWaitingTermination+0x58>)
 800c290:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c292:	f000 fe0b 	bl	800ceac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c296:	6878      	ldr	r0, [r7, #4]
 800c298:	f000 f810 	bl	800c2bc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c29c:	4b06      	ldr	r3, [pc, #24]	@ (800c2b8 <prvCheckTasksWaitingTermination+0x58>)
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d1e1      	bne.n	800c268 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c2a4:	bf00      	nop
 800c2a6:	bf00      	nop
 800c2a8:	3708      	adds	r7, #8
 800c2aa:	46bd      	mov	sp, r7
 800c2ac:	bd80      	pop	{r7, pc}
 800c2ae:	bf00      	nop
 800c2b0:	20000fc4 	.word	0x20000fc4
 800c2b4:	20000ff0 	.word	0x20000ff0
 800c2b8:	20000fd8 	.word	0x20000fd8

0800c2bc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c2bc:	b580      	push	{r7, lr}
 800c2be:	b084      	sub	sp, #16
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	3358      	adds	r3, #88	@ 0x58
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	f001 fca3 	bl	800dc14 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d108      	bne.n	800c2ea <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c2dc:	4618      	mov	r0, r3
 800c2de:	f000 ffa9 	bl	800d234 <vPortFree>
				vPortFree( pxTCB );
 800c2e2:	6878      	ldr	r0, [r7, #4]
 800c2e4:	f000 ffa6 	bl	800d234 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c2e8:	e019      	b.n	800c31e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 800c2f0:	2b01      	cmp	r3, #1
 800c2f2:	d103      	bne.n	800c2fc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c2f4:	6878      	ldr	r0, [r7, #4]
 800c2f6:	f000 ff9d 	bl	800d234 <vPortFree>
	}
 800c2fa:	e010      	b.n	800c31e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 800c302:	2b02      	cmp	r3, #2
 800c304:	d00b      	beq.n	800c31e <prvDeleteTCB+0x62>
	__asm volatile
 800c306:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c30a:	f383 8811 	msr	BASEPRI, r3
 800c30e:	f3bf 8f6f 	isb	sy
 800c312:	f3bf 8f4f 	dsb	sy
 800c316:	60fb      	str	r3, [r7, #12]
}
 800c318:	bf00      	nop
 800c31a:	bf00      	nop
 800c31c:	e7fd      	b.n	800c31a <prvDeleteTCB+0x5e>
	}
 800c31e:	bf00      	nop
 800c320:	3710      	adds	r7, #16
 800c322:	46bd      	mov	sp, r7
 800c324:	bd80      	pop	{r7, pc}
	...

0800c328 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c328:	b480      	push	{r7}
 800c32a:	b083      	sub	sp, #12
 800c32c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c32e:	4b0c      	ldr	r3, [pc, #48]	@ (800c360 <prvResetNextTaskUnblockTime+0x38>)
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	2b00      	cmp	r3, #0
 800c336:	d104      	bne.n	800c342 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c338:	4b0a      	ldr	r3, [pc, #40]	@ (800c364 <prvResetNextTaskUnblockTime+0x3c>)
 800c33a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c33e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c340:	e008      	b.n	800c354 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c342:	4b07      	ldr	r3, [pc, #28]	@ (800c360 <prvResetNextTaskUnblockTime+0x38>)
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	68db      	ldr	r3, [r3, #12]
 800c348:	68db      	ldr	r3, [r3, #12]
 800c34a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	685b      	ldr	r3, [r3, #4]
 800c350:	4a04      	ldr	r2, [pc, #16]	@ (800c364 <prvResetNextTaskUnblockTime+0x3c>)
 800c352:	6013      	str	r3, [r2, #0]
}
 800c354:	bf00      	nop
 800c356:	370c      	adds	r7, #12
 800c358:	46bd      	mov	sp, r7
 800c35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c35e:	4770      	bx	lr
 800c360:	20000fa8 	.word	0x20000fa8
 800c364:	20001010 	.word	0x20001010

0800c368 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c368:	b480      	push	{r7}
 800c36a:	b083      	sub	sp, #12
 800c36c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c36e:	4b0b      	ldr	r3, [pc, #44]	@ (800c39c <xTaskGetSchedulerState+0x34>)
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d102      	bne.n	800c37c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c376:	2301      	movs	r3, #1
 800c378:	607b      	str	r3, [r7, #4]
 800c37a:	e008      	b.n	800c38e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c37c:	4b08      	ldr	r3, [pc, #32]	@ (800c3a0 <xTaskGetSchedulerState+0x38>)
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	2b00      	cmp	r3, #0
 800c382:	d102      	bne.n	800c38a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c384:	2302      	movs	r3, #2
 800c386:	607b      	str	r3, [r7, #4]
 800c388:	e001      	b.n	800c38e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c38a:	2300      	movs	r3, #0
 800c38c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c38e:	687b      	ldr	r3, [r7, #4]
	}
 800c390:	4618      	mov	r0, r3
 800c392:	370c      	adds	r7, #12
 800c394:	46bd      	mov	sp, r7
 800c396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c39a:	4770      	bx	lr
 800c39c:	20000ffc 	.word	0x20000ffc
 800c3a0:	20001018 	.word	0x20001018

0800c3a4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c3a4:	b580      	push	{r7, lr}
 800c3a6:	b086      	sub	sp, #24
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c3b0:	2300      	movs	r3, #0
 800c3b2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d058      	beq.n	800c46c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c3ba:	4b2f      	ldr	r3, [pc, #188]	@ (800c478 <xTaskPriorityDisinherit+0xd4>)
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	693a      	ldr	r2, [r7, #16]
 800c3c0:	429a      	cmp	r2, r3
 800c3c2:	d00b      	beq.n	800c3dc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800c3c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3c8:	f383 8811 	msr	BASEPRI, r3
 800c3cc:	f3bf 8f6f 	isb	sy
 800c3d0:	f3bf 8f4f 	dsb	sy
 800c3d4:	60fb      	str	r3, [r7, #12]
}
 800c3d6:	bf00      	nop
 800c3d8:	bf00      	nop
 800c3da:	e7fd      	b.n	800c3d8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c3dc:	693b      	ldr	r3, [r7, #16]
 800c3de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d10b      	bne.n	800c3fc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800c3e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3e8:	f383 8811 	msr	BASEPRI, r3
 800c3ec:	f3bf 8f6f 	isb	sy
 800c3f0:	f3bf 8f4f 	dsb	sy
 800c3f4:	60bb      	str	r3, [r7, #8]
}
 800c3f6:	bf00      	nop
 800c3f8:	bf00      	nop
 800c3fa:	e7fd      	b.n	800c3f8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800c3fc:	693b      	ldr	r3, [r7, #16]
 800c3fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c400:	1e5a      	subs	r2, r3, #1
 800c402:	693b      	ldr	r3, [r7, #16]
 800c404:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c406:	693b      	ldr	r3, [r7, #16]
 800c408:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c40a:	693b      	ldr	r3, [r7, #16]
 800c40c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c40e:	429a      	cmp	r2, r3
 800c410:	d02c      	beq.n	800c46c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c412:	693b      	ldr	r3, [r7, #16]
 800c414:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c416:	2b00      	cmp	r3, #0
 800c418:	d128      	bne.n	800c46c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c41a:	693b      	ldr	r3, [r7, #16]
 800c41c:	3304      	adds	r3, #4
 800c41e:	4618      	mov	r0, r3
 800c420:	f7fe fb40 	bl	800aaa4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c424:	693b      	ldr	r3, [r7, #16]
 800c426:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c428:	693b      	ldr	r3, [r7, #16]
 800c42a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c42c:	693b      	ldr	r3, [r7, #16]
 800c42e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c430:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c434:	693b      	ldr	r3, [r7, #16]
 800c436:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c438:	693b      	ldr	r3, [r7, #16]
 800c43a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c43c:	4b0f      	ldr	r3, [pc, #60]	@ (800c47c <xTaskPriorityDisinherit+0xd8>)
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	429a      	cmp	r2, r3
 800c442:	d903      	bls.n	800c44c <xTaskPriorityDisinherit+0xa8>
 800c444:	693b      	ldr	r3, [r7, #16]
 800c446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c448:	4a0c      	ldr	r2, [pc, #48]	@ (800c47c <xTaskPriorityDisinherit+0xd8>)
 800c44a:	6013      	str	r3, [r2, #0]
 800c44c:	693b      	ldr	r3, [r7, #16]
 800c44e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c450:	4613      	mov	r3, r2
 800c452:	009b      	lsls	r3, r3, #2
 800c454:	4413      	add	r3, r2
 800c456:	009b      	lsls	r3, r3, #2
 800c458:	4a09      	ldr	r2, [pc, #36]	@ (800c480 <xTaskPriorityDisinherit+0xdc>)
 800c45a:	441a      	add	r2, r3
 800c45c:	693b      	ldr	r3, [r7, #16]
 800c45e:	3304      	adds	r3, #4
 800c460:	4619      	mov	r1, r3
 800c462:	4610      	mov	r0, r2
 800c464:	f7fe fac1 	bl	800a9ea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c468:	2301      	movs	r3, #1
 800c46a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c46c:	697b      	ldr	r3, [r7, #20]
	}
 800c46e:	4618      	mov	r0, r3
 800c470:	3718      	adds	r7, #24
 800c472:	46bd      	mov	sp, r7
 800c474:	bd80      	pop	{r7, pc}
 800c476:	bf00      	nop
 800c478:	20000b1c 	.word	0x20000b1c
 800c47c:	20000ff8 	.word	0x20000ff8
 800c480:	20000b20 	.word	0x20000b20

0800c484 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c484:	b580      	push	{r7, lr}
 800c486:	b084      	sub	sp, #16
 800c488:	af00      	add	r7, sp, #0
 800c48a:	6078      	str	r0, [r7, #4]
 800c48c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c48e:	4b21      	ldr	r3, [pc, #132]	@ (800c514 <prvAddCurrentTaskToDelayedList+0x90>)
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c494:	4b20      	ldr	r3, [pc, #128]	@ (800c518 <prvAddCurrentTaskToDelayedList+0x94>)
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	3304      	adds	r3, #4
 800c49a:	4618      	mov	r0, r3
 800c49c:	f7fe fb02 	bl	800aaa4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c4a6:	d10a      	bne.n	800c4be <prvAddCurrentTaskToDelayedList+0x3a>
 800c4a8:	683b      	ldr	r3, [r7, #0]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d007      	beq.n	800c4be <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c4ae:	4b1a      	ldr	r3, [pc, #104]	@ (800c518 <prvAddCurrentTaskToDelayedList+0x94>)
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	3304      	adds	r3, #4
 800c4b4:	4619      	mov	r1, r3
 800c4b6:	4819      	ldr	r0, [pc, #100]	@ (800c51c <prvAddCurrentTaskToDelayedList+0x98>)
 800c4b8:	f7fe fa97 	bl	800a9ea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c4bc:	e026      	b.n	800c50c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c4be:	68fa      	ldr	r2, [r7, #12]
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	4413      	add	r3, r2
 800c4c4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c4c6:	4b14      	ldr	r3, [pc, #80]	@ (800c518 <prvAddCurrentTaskToDelayedList+0x94>)
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	68ba      	ldr	r2, [r7, #8]
 800c4cc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c4ce:	68ba      	ldr	r2, [r7, #8]
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	429a      	cmp	r2, r3
 800c4d4:	d209      	bcs.n	800c4ea <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c4d6:	4b12      	ldr	r3, [pc, #72]	@ (800c520 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c4d8:	681a      	ldr	r2, [r3, #0]
 800c4da:	4b0f      	ldr	r3, [pc, #60]	@ (800c518 <prvAddCurrentTaskToDelayedList+0x94>)
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	3304      	adds	r3, #4
 800c4e0:	4619      	mov	r1, r3
 800c4e2:	4610      	mov	r0, r2
 800c4e4:	f7fe faa5 	bl	800aa32 <vListInsert>
}
 800c4e8:	e010      	b.n	800c50c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c4ea:	4b0e      	ldr	r3, [pc, #56]	@ (800c524 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c4ec:	681a      	ldr	r2, [r3, #0]
 800c4ee:	4b0a      	ldr	r3, [pc, #40]	@ (800c518 <prvAddCurrentTaskToDelayedList+0x94>)
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	3304      	adds	r3, #4
 800c4f4:	4619      	mov	r1, r3
 800c4f6:	4610      	mov	r0, r2
 800c4f8:	f7fe fa9b 	bl	800aa32 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c4fc:	4b0a      	ldr	r3, [pc, #40]	@ (800c528 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	68ba      	ldr	r2, [r7, #8]
 800c502:	429a      	cmp	r2, r3
 800c504:	d202      	bcs.n	800c50c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c506:	4a08      	ldr	r2, [pc, #32]	@ (800c528 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c508:	68bb      	ldr	r3, [r7, #8]
 800c50a:	6013      	str	r3, [r2, #0]
}
 800c50c:	bf00      	nop
 800c50e:	3710      	adds	r7, #16
 800c510:	46bd      	mov	sp, r7
 800c512:	bd80      	pop	{r7, pc}
 800c514:	20000ff4 	.word	0x20000ff4
 800c518:	20000b1c 	.word	0x20000b1c
 800c51c:	20000fdc 	.word	0x20000fdc
 800c520:	20000fac 	.word	0x20000fac
 800c524:	20000fa8 	.word	0x20000fa8
 800c528:	20001010 	.word	0x20001010

0800c52c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c52c:	b580      	push	{r7, lr}
 800c52e:	b08a      	sub	sp, #40	@ 0x28
 800c530:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c532:	2300      	movs	r3, #0
 800c534:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c536:	f000 fb13 	bl	800cb60 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c53a:	4b1d      	ldr	r3, [pc, #116]	@ (800c5b0 <xTimerCreateTimerTask+0x84>)
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d021      	beq.n	800c586 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c542:	2300      	movs	r3, #0
 800c544:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c546:	2300      	movs	r3, #0
 800c548:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c54a:	1d3a      	adds	r2, r7, #4
 800c54c:	f107 0108 	add.w	r1, r7, #8
 800c550:	f107 030c 	add.w	r3, r7, #12
 800c554:	4618      	mov	r0, r3
 800c556:	f7fe fa01 	bl	800a95c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c55a:	6879      	ldr	r1, [r7, #4]
 800c55c:	68bb      	ldr	r3, [r7, #8]
 800c55e:	68fa      	ldr	r2, [r7, #12]
 800c560:	9202      	str	r2, [sp, #8]
 800c562:	9301      	str	r3, [sp, #4]
 800c564:	2302      	movs	r3, #2
 800c566:	9300      	str	r3, [sp, #0]
 800c568:	2300      	movs	r3, #0
 800c56a:	460a      	mov	r2, r1
 800c56c:	4911      	ldr	r1, [pc, #68]	@ (800c5b4 <xTimerCreateTimerTask+0x88>)
 800c56e:	4812      	ldr	r0, [pc, #72]	@ (800c5b8 <xTimerCreateTimerTask+0x8c>)
 800c570:	f7ff f87a 	bl	800b668 <xTaskCreateStatic>
 800c574:	4603      	mov	r3, r0
 800c576:	4a11      	ldr	r2, [pc, #68]	@ (800c5bc <xTimerCreateTimerTask+0x90>)
 800c578:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c57a:	4b10      	ldr	r3, [pc, #64]	@ (800c5bc <xTimerCreateTimerTask+0x90>)
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d001      	beq.n	800c586 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c582:	2301      	movs	r3, #1
 800c584:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c586:	697b      	ldr	r3, [r7, #20]
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d10b      	bne.n	800c5a4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800c58c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c590:	f383 8811 	msr	BASEPRI, r3
 800c594:	f3bf 8f6f 	isb	sy
 800c598:	f3bf 8f4f 	dsb	sy
 800c59c:	613b      	str	r3, [r7, #16]
}
 800c59e:	bf00      	nop
 800c5a0:	bf00      	nop
 800c5a2:	e7fd      	b.n	800c5a0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c5a4:	697b      	ldr	r3, [r7, #20]
}
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	3718      	adds	r7, #24
 800c5aa:	46bd      	mov	sp, r7
 800c5ac:	bd80      	pop	{r7, pc}
 800c5ae:	bf00      	nop
 800c5b0:	2000104c 	.word	0x2000104c
 800c5b4:	0800de30 	.word	0x0800de30
 800c5b8:	0800c6f9 	.word	0x0800c6f9
 800c5bc:	20001050 	.word	0x20001050

0800c5c0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c5c0:	b580      	push	{r7, lr}
 800c5c2:	b08a      	sub	sp, #40	@ 0x28
 800c5c4:	af00      	add	r7, sp, #0
 800c5c6:	60f8      	str	r0, [r7, #12]
 800c5c8:	60b9      	str	r1, [r7, #8]
 800c5ca:	607a      	str	r2, [r7, #4]
 800c5cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c5ce:	2300      	movs	r3, #0
 800c5d0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d10b      	bne.n	800c5f0 <xTimerGenericCommand+0x30>
	__asm volatile
 800c5d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5dc:	f383 8811 	msr	BASEPRI, r3
 800c5e0:	f3bf 8f6f 	isb	sy
 800c5e4:	f3bf 8f4f 	dsb	sy
 800c5e8:	623b      	str	r3, [r7, #32]
}
 800c5ea:	bf00      	nop
 800c5ec:	bf00      	nop
 800c5ee:	e7fd      	b.n	800c5ec <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c5f0:	4b19      	ldr	r3, [pc, #100]	@ (800c658 <xTimerGenericCommand+0x98>)
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d02a      	beq.n	800c64e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c5f8:	68bb      	ldr	r3, [r7, #8]
 800c5fa:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c604:	68bb      	ldr	r3, [r7, #8]
 800c606:	2b05      	cmp	r3, #5
 800c608:	dc18      	bgt.n	800c63c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c60a:	f7ff fead 	bl	800c368 <xTaskGetSchedulerState>
 800c60e:	4603      	mov	r3, r0
 800c610:	2b02      	cmp	r3, #2
 800c612:	d109      	bne.n	800c628 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c614:	4b10      	ldr	r3, [pc, #64]	@ (800c658 <xTimerGenericCommand+0x98>)
 800c616:	6818      	ldr	r0, [r3, #0]
 800c618:	f107 0110 	add.w	r1, r7, #16
 800c61c:	2300      	movs	r3, #0
 800c61e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c620:	f7fe fbb0 	bl	800ad84 <xQueueGenericSend>
 800c624:	6278      	str	r0, [r7, #36]	@ 0x24
 800c626:	e012      	b.n	800c64e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c628:	4b0b      	ldr	r3, [pc, #44]	@ (800c658 <xTimerGenericCommand+0x98>)
 800c62a:	6818      	ldr	r0, [r3, #0]
 800c62c:	f107 0110 	add.w	r1, r7, #16
 800c630:	2300      	movs	r3, #0
 800c632:	2200      	movs	r2, #0
 800c634:	f7fe fba6 	bl	800ad84 <xQueueGenericSend>
 800c638:	6278      	str	r0, [r7, #36]	@ 0x24
 800c63a:	e008      	b.n	800c64e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c63c:	4b06      	ldr	r3, [pc, #24]	@ (800c658 <xTimerGenericCommand+0x98>)
 800c63e:	6818      	ldr	r0, [r3, #0]
 800c640:	f107 0110 	add.w	r1, r7, #16
 800c644:	2300      	movs	r3, #0
 800c646:	683a      	ldr	r2, [r7, #0]
 800c648:	f7fe fc9e 	bl	800af88 <xQueueGenericSendFromISR>
 800c64c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c64e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c650:	4618      	mov	r0, r3
 800c652:	3728      	adds	r7, #40	@ 0x28
 800c654:	46bd      	mov	sp, r7
 800c656:	bd80      	pop	{r7, pc}
 800c658:	2000104c 	.word	0x2000104c

0800c65c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c65c:	b580      	push	{r7, lr}
 800c65e:	b088      	sub	sp, #32
 800c660:	af02      	add	r7, sp, #8
 800c662:	6078      	str	r0, [r7, #4]
 800c664:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c666:	4b23      	ldr	r3, [pc, #140]	@ (800c6f4 <prvProcessExpiredTimer+0x98>)
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	68db      	ldr	r3, [r3, #12]
 800c66c:	68db      	ldr	r3, [r3, #12]
 800c66e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c670:	697b      	ldr	r3, [r7, #20]
 800c672:	3304      	adds	r3, #4
 800c674:	4618      	mov	r0, r3
 800c676:	f7fe fa15 	bl	800aaa4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c67a:	697b      	ldr	r3, [r7, #20]
 800c67c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c680:	f003 0304 	and.w	r3, r3, #4
 800c684:	2b00      	cmp	r3, #0
 800c686:	d023      	beq.n	800c6d0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c688:	697b      	ldr	r3, [r7, #20]
 800c68a:	699a      	ldr	r2, [r3, #24]
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	18d1      	adds	r1, r2, r3
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	683a      	ldr	r2, [r7, #0]
 800c694:	6978      	ldr	r0, [r7, #20]
 800c696:	f000 f8d5 	bl	800c844 <prvInsertTimerInActiveList>
 800c69a:	4603      	mov	r3, r0
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d020      	beq.n	800c6e2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c6a0:	2300      	movs	r3, #0
 800c6a2:	9300      	str	r3, [sp, #0]
 800c6a4:	2300      	movs	r3, #0
 800c6a6:	687a      	ldr	r2, [r7, #4]
 800c6a8:	2100      	movs	r1, #0
 800c6aa:	6978      	ldr	r0, [r7, #20]
 800c6ac:	f7ff ff88 	bl	800c5c0 <xTimerGenericCommand>
 800c6b0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c6b2:	693b      	ldr	r3, [r7, #16]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d114      	bne.n	800c6e2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800c6b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6bc:	f383 8811 	msr	BASEPRI, r3
 800c6c0:	f3bf 8f6f 	isb	sy
 800c6c4:	f3bf 8f4f 	dsb	sy
 800c6c8:	60fb      	str	r3, [r7, #12]
}
 800c6ca:	bf00      	nop
 800c6cc:	bf00      	nop
 800c6ce:	e7fd      	b.n	800c6cc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c6d0:	697b      	ldr	r3, [r7, #20]
 800c6d2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c6d6:	f023 0301 	bic.w	r3, r3, #1
 800c6da:	b2da      	uxtb	r2, r3
 800c6dc:	697b      	ldr	r3, [r7, #20]
 800c6de:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c6e2:	697b      	ldr	r3, [r7, #20]
 800c6e4:	6a1b      	ldr	r3, [r3, #32]
 800c6e6:	6978      	ldr	r0, [r7, #20]
 800c6e8:	4798      	blx	r3
}
 800c6ea:	bf00      	nop
 800c6ec:	3718      	adds	r7, #24
 800c6ee:	46bd      	mov	sp, r7
 800c6f0:	bd80      	pop	{r7, pc}
 800c6f2:	bf00      	nop
 800c6f4:	20001044 	.word	0x20001044

0800c6f8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c6f8:	b580      	push	{r7, lr}
 800c6fa:	b084      	sub	sp, #16
 800c6fc:	af00      	add	r7, sp, #0
 800c6fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c700:	f107 0308 	add.w	r3, r7, #8
 800c704:	4618      	mov	r0, r3
 800c706:	f000 f859 	bl	800c7bc <prvGetNextExpireTime>
 800c70a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c70c:	68bb      	ldr	r3, [r7, #8]
 800c70e:	4619      	mov	r1, r3
 800c710:	68f8      	ldr	r0, [r7, #12]
 800c712:	f000 f805 	bl	800c720 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c716:	f000 f8d7 	bl	800c8c8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c71a:	bf00      	nop
 800c71c:	e7f0      	b.n	800c700 <prvTimerTask+0x8>
	...

0800c720 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c720:	b580      	push	{r7, lr}
 800c722:	b084      	sub	sp, #16
 800c724:	af00      	add	r7, sp, #0
 800c726:	6078      	str	r0, [r7, #4]
 800c728:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c72a:	f7ff fa03 	bl	800bb34 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c72e:	f107 0308 	add.w	r3, r7, #8
 800c732:	4618      	mov	r0, r3
 800c734:	f000 f866 	bl	800c804 <prvSampleTimeNow>
 800c738:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c73a:	68bb      	ldr	r3, [r7, #8]
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d130      	bne.n	800c7a2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c740:	683b      	ldr	r3, [r7, #0]
 800c742:	2b00      	cmp	r3, #0
 800c744:	d10a      	bne.n	800c75c <prvProcessTimerOrBlockTask+0x3c>
 800c746:	687a      	ldr	r2, [r7, #4]
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	429a      	cmp	r2, r3
 800c74c:	d806      	bhi.n	800c75c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c74e:	f7ff f9ff 	bl	800bb50 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c752:	68f9      	ldr	r1, [r7, #12]
 800c754:	6878      	ldr	r0, [r7, #4]
 800c756:	f7ff ff81 	bl	800c65c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c75a:	e024      	b.n	800c7a6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c75c:	683b      	ldr	r3, [r7, #0]
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d008      	beq.n	800c774 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c762:	4b13      	ldr	r3, [pc, #76]	@ (800c7b0 <prvProcessTimerOrBlockTask+0x90>)
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d101      	bne.n	800c770 <prvProcessTimerOrBlockTask+0x50>
 800c76c:	2301      	movs	r3, #1
 800c76e:	e000      	b.n	800c772 <prvProcessTimerOrBlockTask+0x52>
 800c770:	2300      	movs	r3, #0
 800c772:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c774:	4b0f      	ldr	r3, [pc, #60]	@ (800c7b4 <prvProcessTimerOrBlockTask+0x94>)
 800c776:	6818      	ldr	r0, [r3, #0]
 800c778:	687a      	ldr	r2, [r7, #4]
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	1ad3      	subs	r3, r2, r3
 800c77e:	683a      	ldr	r2, [r7, #0]
 800c780:	4619      	mov	r1, r3
 800c782:	f7fe ff3d 	bl	800b600 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c786:	f7ff f9e3 	bl	800bb50 <xTaskResumeAll>
 800c78a:	4603      	mov	r3, r0
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d10a      	bne.n	800c7a6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c790:	4b09      	ldr	r3, [pc, #36]	@ (800c7b8 <prvProcessTimerOrBlockTask+0x98>)
 800c792:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c796:	601a      	str	r2, [r3, #0]
 800c798:	f3bf 8f4f 	dsb	sy
 800c79c:	f3bf 8f6f 	isb	sy
}
 800c7a0:	e001      	b.n	800c7a6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c7a2:	f7ff f9d5 	bl	800bb50 <xTaskResumeAll>
}
 800c7a6:	bf00      	nop
 800c7a8:	3710      	adds	r7, #16
 800c7aa:	46bd      	mov	sp, r7
 800c7ac:	bd80      	pop	{r7, pc}
 800c7ae:	bf00      	nop
 800c7b0:	20001048 	.word	0x20001048
 800c7b4:	2000104c 	.word	0x2000104c
 800c7b8:	e000ed04 	.word	0xe000ed04

0800c7bc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c7bc:	b480      	push	{r7}
 800c7be:	b085      	sub	sp, #20
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c7c4:	4b0e      	ldr	r3, [pc, #56]	@ (800c800 <prvGetNextExpireTime+0x44>)
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d101      	bne.n	800c7d2 <prvGetNextExpireTime+0x16>
 800c7ce:	2201      	movs	r2, #1
 800c7d0:	e000      	b.n	800c7d4 <prvGetNextExpireTime+0x18>
 800c7d2:	2200      	movs	r2, #0
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d105      	bne.n	800c7ec <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c7e0:	4b07      	ldr	r3, [pc, #28]	@ (800c800 <prvGetNextExpireTime+0x44>)
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	68db      	ldr	r3, [r3, #12]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	60fb      	str	r3, [r7, #12]
 800c7ea:	e001      	b.n	800c7f0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c7ec:	2300      	movs	r3, #0
 800c7ee:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c7f0:	68fb      	ldr	r3, [r7, #12]
}
 800c7f2:	4618      	mov	r0, r3
 800c7f4:	3714      	adds	r7, #20
 800c7f6:	46bd      	mov	sp, r7
 800c7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7fc:	4770      	bx	lr
 800c7fe:	bf00      	nop
 800c800:	20001044 	.word	0x20001044

0800c804 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c804:	b580      	push	{r7, lr}
 800c806:	b084      	sub	sp, #16
 800c808:	af00      	add	r7, sp, #0
 800c80a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c80c:	f7ff fa3e 	bl	800bc8c <xTaskGetTickCount>
 800c810:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c812:	4b0b      	ldr	r3, [pc, #44]	@ (800c840 <prvSampleTimeNow+0x3c>)
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	68fa      	ldr	r2, [r7, #12]
 800c818:	429a      	cmp	r2, r3
 800c81a:	d205      	bcs.n	800c828 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c81c:	f000 f93a 	bl	800ca94 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	2201      	movs	r2, #1
 800c824:	601a      	str	r2, [r3, #0]
 800c826:	e002      	b.n	800c82e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	2200      	movs	r2, #0
 800c82c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c82e:	4a04      	ldr	r2, [pc, #16]	@ (800c840 <prvSampleTimeNow+0x3c>)
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c834:	68fb      	ldr	r3, [r7, #12]
}
 800c836:	4618      	mov	r0, r3
 800c838:	3710      	adds	r7, #16
 800c83a:	46bd      	mov	sp, r7
 800c83c:	bd80      	pop	{r7, pc}
 800c83e:	bf00      	nop
 800c840:	20001054 	.word	0x20001054

0800c844 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c844:	b580      	push	{r7, lr}
 800c846:	b086      	sub	sp, #24
 800c848:	af00      	add	r7, sp, #0
 800c84a:	60f8      	str	r0, [r7, #12]
 800c84c:	60b9      	str	r1, [r7, #8]
 800c84e:	607a      	str	r2, [r7, #4]
 800c850:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c852:	2300      	movs	r3, #0
 800c854:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	68ba      	ldr	r2, [r7, #8]
 800c85a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	68fa      	ldr	r2, [r7, #12]
 800c860:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c862:	68ba      	ldr	r2, [r7, #8]
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	429a      	cmp	r2, r3
 800c868:	d812      	bhi.n	800c890 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c86a:	687a      	ldr	r2, [r7, #4]
 800c86c:	683b      	ldr	r3, [r7, #0]
 800c86e:	1ad2      	subs	r2, r2, r3
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	699b      	ldr	r3, [r3, #24]
 800c874:	429a      	cmp	r2, r3
 800c876:	d302      	bcc.n	800c87e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c878:	2301      	movs	r3, #1
 800c87a:	617b      	str	r3, [r7, #20]
 800c87c:	e01b      	b.n	800c8b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c87e:	4b10      	ldr	r3, [pc, #64]	@ (800c8c0 <prvInsertTimerInActiveList+0x7c>)
 800c880:	681a      	ldr	r2, [r3, #0]
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	3304      	adds	r3, #4
 800c886:	4619      	mov	r1, r3
 800c888:	4610      	mov	r0, r2
 800c88a:	f7fe f8d2 	bl	800aa32 <vListInsert>
 800c88e:	e012      	b.n	800c8b6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c890:	687a      	ldr	r2, [r7, #4]
 800c892:	683b      	ldr	r3, [r7, #0]
 800c894:	429a      	cmp	r2, r3
 800c896:	d206      	bcs.n	800c8a6 <prvInsertTimerInActiveList+0x62>
 800c898:	68ba      	ldr	r2, [r7, #8]
 800c89a:	683b      	ldr	r3, [r7, #0]
 800c89c:	429a      	cmp	r2, r3
 800c89e:	d302      	bcc.n	800c8a6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c8a0:	2301      	movs	r3, #1
 800c8a2:	617b      	str	r3, [r7, #20]
 800c8a4:	e007      	b.n	800c8b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c8a6:	4b07      	ldr	r3, [pc, #28]	@ (800c8c4 <prvInsertTimerInActiveList+0x80>)
 800c8a8:	681a      	ldr	r2, [r3, #0]
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	3304      	adds	r3, #4
 800c8ae:	4619      	mov	r1, r3
 800c8b0:	4610      	mov	r0, r2
 800c8b2:	f7fe f8be 	bl	800aa32 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c8b6:	697b      	ldr	r3, [r7, #20]
}
 800c8b8:	4618      	mov	r0, r3
 800c8ba:	3718      	adds	r7, #24
 800c8bc:	46bd      	mov	sp, r7
 800c8be:	bd80      	pop	{r7, pc}
 800c8c0:	20001048 	.word	0x20001048
 800c8c4:	20001044 	.word	0x20001044

0800c8c8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c8c8:	b580      	push	{r7, lr}
 800c8ca:	b08e      	sub	sp, #56	@ 0x38
 800c8cc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c8ce:	e0ce      	b.n	800ca6e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	da19      	bge.n	800c90a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c8d6:	1d3b      	adds	r3, r7, #4
 800c8d8:	3304      	adds	r3, #4
 800c8da:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c8dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d10b      	bne.n	800c8fa <prvProcessReceivedCommands+0x32>
	__asm volatile
 800c8e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8e6:	f383 8811 	msr	BASEPRI, r3
 800c8ea:	f3bf 8f6f 	isb	sy
 800c8ee:	f3bf 8f4f 	dsb	sy
 800c8f2:	61fb      	str	r3, [r7, #28]
}
 800c8f4:	bf00      	nop
 800c8f6:	bf00      	nop
 800c8f8:	e7fd      	b.n	800c8f6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c8fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c900:	6850      	ldr	r0, [r2, #4]
 800c902:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c904:	6892      	ldr	r2, [r2, #8]
 800c906:	4611      	mov	r1, r2
 800c908:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	f2c0 80ae 	blt.w	800ca6e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c916:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c918:	695b      	ldr	r3, [r3, #20]
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d004      	beq.n	800c928 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c91e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c920:	3304      	adds	r3, #4
 800c922:	4618      	mov	r0, r3
 800c924:	f7fe f8be 	bl	800aaa4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c928:	463b      	mov	r3, r7
 800c92a:	4618      	mov	r0, r3
 800c92c:	f7ff ff6a 	bl	800c804 <prvSampleTimeNow>
 800c930:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	2b09      	cmp	r3, #9
 800c936:	f200 8097 	bhi.w	800ca68 <prvProcessReceivedCommands+0x1a0>
 800c93a:	a201      	add	r2, pc, #4	@ (adr r2, 800c940 <prvProcessReceivedCommands+0x78>)
 800c93c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c940:	0800c969 	.word	0x0800c969
 800c944:	0800c969 	.word	0x0800c969
 800c948:	0800c969 	.word	0x0800c969
 800c94c:	0800c9df 	.word	0x0800c9df
 800c950:	0800c9f3 	.word	0x0800c9f3
 800c954:	0800ca3f 	.word	0x0800ca3f
 800c958:	0800c969 	.word	0x0800c969
 800c95c:	0800c969 	.word	0x0800c969
 800c960:	0800c9df 	.word	0x0800c9df
 800c964:	0800c9f3 	.word	0x0800c9f3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c968:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c96a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c96e:	f043 0301 	orr.w	r3, r3, #1
 800c972:	b2da      	uxtb	r2, r3
 800c974:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c976:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c97a:	68ba      	ldr	r2, [r7, #8]
 800c97c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c97e:	699b      	ldr	r3, [r3, #24]
 800c980:	18d1      	adds	r1, r2, r3
 800c982:	68bb      	ldr	r3, [r7, #8]
 800c984:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c986:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c988:	f7ff ff5c 	bl	800c844 <prvInsertTimerInActiveList>
 800c98c:	4603      	mov	r3, r0
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d06c      	beq.n	800ca6c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c992:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c994:	6a1b      	ldr	r3, [r3, #32]
 800c996:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c998:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c99a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c99c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c9a0:	f003 0304 	and.w	r3, r3, #4
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d061      	beq.n	800ca6c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c9a8:	68ba      	ldr	r2, [r7, #8]
 800c9aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9ac:	699b      	ldr	r3, [r3, #24]
 800c9ae:	441a      	add	r2, r3
 800c9b0:	2300      	movs	r3, #0
 800c9b2:	9300      	str	r3, [sp, #0]
 800c9b4:	2300      	movs	r3, #0
 800c9b6:	2100      	movs	r1, #0
 800c9b8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c9ba:	f7ff fe01 	bl	800c5c0 <xTimerGenericCommand>
 800c9be:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c9c0:	6a3b      	ldr	r3, [r7, #32]
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d152      	bne.n	800ca6c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800c9c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9ca:	f383 8811 	msr	BASEPRI, r3
 800c9ce:	f3bf 8f6f 	isb	sy
 800c9d2:	f3bf 8f4f 	dsb	sy
 800c9d6:	61bb      	str	r3, [r7, #24]
}
 800c9d8:	bf00      	nop
 800c9da:	bf00      	nop
 800c9dc:	e7fd      	b.n	800c9da <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c9de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c9e4:	f023 0301 	bic.w	r3, r3, #1
 800c9e8:	b2da      	uxtb	r2, r3
 800c9ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9ec:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c9f0:	e03d      	b.n	800ca6e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c9f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c9f8:	f043 0301 	orr.w	r3, r3, #1
 800c9fc:	b2da      	uxtb	r2, r3
 800c9fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca00:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ca04:	68ba      	ldr	r2, [r7, #8]
 800ca06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca08:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ca0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca0c:	699b      	ldr	r3, [r3, #24]
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d10b      	bne.n	800ca2a <prvProcessReceivedCommands+0x162>
	__asm volatile
 800ca12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca16:	f383 8811 	msr	BASEPRI, r3
 800ca1a:	f3bf 8f6f 	isb	sy
 800ca1e:	f3bf 8f4f 	dsb	sy
 800ca22:	617b      	str	r3, [r7, #20]
}
 800ca24:	bf00      	nop
 800ca26:	bf00      	nop
 800ca28:	e7fd      	b.n	800ca26 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ca2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca2c:	699a      	ldr	r2, [r3, #24]
 800ca2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca30:	18d1      	adds	r1, r2, r3
 800ca32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ca36:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ca38:	f7ff ff04 	bl	800c844 <prvInsertTimerInActiveList>
					break;
 800ca3c:	e017      	b.n	800ca6e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ca3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca40:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ca44:	f003 0302 	and.w	r3, r3, #2
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d103      	bne.n	800ca54 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800ca4c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ca4e:	f000 fbf1 	bl	800d234 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ca52:	e00c      	b.n	800ca6e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ca54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca56:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ca5a:	f023 0301 	bic.w	r3, r3, #1
 800ca5e:	b2da      	uxtb	r2, r3
 800ca60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca62:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ca66:	e002      	b.n	800ca6e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800ca68:	bf00      	nop
 800ca6a:	e000      	b.n	800ca6e <prvProcessReceivedCommands+0x1a6>
					break;
 800ca6c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ca6e:	4b08      	ldr	r3, [pc, #32]	@ (800ca90 <prvProcessReceivedCommands+0x1c8>)
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	1d39      	adds	r1, r7, #4
 800ca74:	2200      	movs	r2, #0
 800ca76:	4618      	mov	r0, r3
 800ca78:	f7fe fb24 	bl	800b0c4 <xQueueReceive>
 800ca7c:	4603      	mov	r3, r0
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	f47f af26 	bne.w	800c8d0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800ca84:	bf00      	nop
 800ca86:	bf00      	nop
 800ca88:	3730      	adds	r7, #48	@ 0x30
 800ca8a:	46bd      	mov	sp, r7
 800ca8c:	bd80      	pop	{r7, pc}
 800ca8e:	bf00      	nop
 800ca90:	2000104c 	.word	0x2000104c

0800ca94 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ca94:	b580      	push	{r7, lr}
 800ca96:	b088      	sub	sp, #32
 800ca98:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ca9a:	e049      	b.n	800cb30 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ca9c:	4b2e      	ldr	r3, [pc, #184]	@ (800cb58 <prvSwitchTimerLists+0xc4>)
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	68db      	ldr	r3, [r3, #12]
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800caa6:	4b2c      	ldr	r3, [pc, #176]	@ (800cb58 <prvSwitchTimerLists+0xc4>)
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	68db      	ldr	r3, [r3, #12]
 800caac:	68db      	ldr	r3, [r3, #12]
 800caae:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	3304      	adds	r3, #4
 800cab4:	4618      	mov	r0, r3
 800cab6:	f7fd fff5 	bl	800aaa4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	6a1b      	ldr	r3, [r3, #32]
 800cabe:	68f8      	ldr	r0, [r7, #12]
 800cac0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cac8:	f003 0304 	and.w	r3, r3, #4
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d02f      	beq.n	800cb30 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	699b      	ldr	r3, [r3, #24]
 800cad4:	693a      	ldr	r2, [r7, #16]
 800cad6:	4413      	add	r3, r2
 800cad8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800cada:	68ba      	ldr	r2, [r7, #8]
 800cadc:	693b      	ldr	r3, [r7, #16]
 800cade:	429a      	cmp	r2, r3
 800cae0:	d90e      	bls.n	800cb00 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	68ba      	ldr	r2, [r7, #8]
 800cae6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	68fa      	ldr	r2, [r7, #12]
 800caec:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800caee:	4b1a      	ldr	r3, [pc, #104]	@ (800cb58 <prvSwitchTimerLists+0xc4>)
 800caf0:	681a      	ldr	r2, [r3, #0]
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	3304      	adds	r3, #4
 800caf6:	4619      	mov	r1, r3
 800caf8:	4610      	mov	r0, r2
 800cafa:	f7fd ff9a 	bl	800aa32 <vListInsert>
 800cafe:	e017      	b.n	800cb30 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cb00:	2300      	movs	r3, #0
 800cb02:	9300      	str	r3, [sp, #0]
 800cb04:	2300      	movs	r3, #0
 800cb06:	693a      	ldr	r2, [r7, #16]
 800cb08:	2100      	movs	r1, #0
 800cb0a:	68f8      	ldr	r0, [r7, #12]
 800cb0c:	f7ff fd58 	bl	800c5c0 <xTimerGenericCommand>
 800cb10:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d10b      	bne.n	800cb30 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800cb18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb1c:	f383 8811 	msr	BASEPRI, r3
 800cb20:	f3bf 8f6f 	isb	sy
 800cb24:	f3bf 8f4f 	dsb	sy
 800cb28:	603b      	str	r3, [r7, #0]
}
 800cb2a:	bf00      	nop
 800cb2c:	bf00      	nop
 800cb2e:	e7fd      	b.n	800cb2c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cb30:	4b09      	ldr	r3, [pc, #36]	@ (800cb58 <prvSwitchTimerLists+0xc4>)
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d1b0      	bne.n	800ca9c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800cb3a:	4b07      	ldr	r3, [pc, #28]	@ (800cb58 <prvSwitchTimerLists+0xc4>)
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800cb40:	4b06      	ldr	r3, [pc, #24]	@ (800cb5c <prvSwitchTimerLists+0xc8>)
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	4a04      	ldr	r2, [pc, #16]	@ (800cb58 <prvSwitchTimerLists+0xc4>)
 800cb46:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800cb48:	4a04      	ldr	r2, [pc, #16]	@ (800cb5c <prvSwitchTimerLists+0xc8>)
 800cb4a:	697b      	ldr	r3, [r7, #20]
 800cb4c:	6013      	str	r3, [r2, #0]
}
 800cb4e:	bf00      	nop
 800cb50:	3718      	adds	r7, #24
 800cb52:	46bd      	mov	sp, r7
 800cb54:	bd80      	pop	{r7, pc}
 800cb56:	bf00      	nop
 800cb58:	20001044 	.word	0x20001044
 800cb5c:	20001048 	.word	0x20001048

0800cb60 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800cb60:	b580      	push	{r7, lr}
 800cb62:	b082      	sub	sp, #8
 800cb64:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800cb66:	f000 f96f 	bl	800ce48 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800cb6a:	4b15      	ldr	r3, [pc, #84]	@ (800cbc0 <prvCheckForValidListAndQueue+0x60>)
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d120      	bne.n	800cbb4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800cb72:	4814      	ldr	r0, [pc, #80]	@ (800cbc4 <prvCheckForValidListAndQueue+0x64>)
 800cb74:	f7fd ff0c 	bl	800a990 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800cb78:	4813      	ldr	r0, [pc, #76]	@ (800cbc8 <prvCheckForValidListAndQueue+0x68>)
 800cb7a:	f7fd ff09 	bl	800a990 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800cb7e:	4b13      	ldr	r3, [pc, #76]	@ (800cbcc <prvCheckForValidListAndQueue+0x6c>)
 800cb80:	4a10      	ldr	r2, [pc, #64]	@ (800cbc4 <prvCheckForValidListAndQueue+0x64>)
 800cb82:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800cb84:	4b12      	ldr	r3, [pc, #72]	@ (800cbd0 <prvCheckForValidListAndQueue+0x70>)
 800cb86:	4a10      	ldr	r2, [pc, #64]	@ (800cbc8 <prvCheckForValidListAndQueue+0x68>)
 800cb88:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	9300      	str	r3, [sp, #0]
 800cb8e:	4b11      	ldr	r3, [pc, #68]	@ (800cbd4 <prvCheckForValidListAndQueue+0x74>)
 800cb90:	4a11      	ldr	r2, [pc, #68]	@ (800cbd8 <prvCheckForValidListAndQueue+0x78>)
 800cb92:	2110      	movs	r1, #16
 800cb94:	200a      	movs	r0, #10
 800cb96:	f7fe f819 	bl	800abcc <xQueueGenericCreateStatic>
 800cb9a:	4603      	mov	r3, r0
 800cb9c:	4a08      	ldr	r2, [pc, #32]	@ (800cbc0 <prvCheckForValidListAndQueue+0x60>)
 800cb9e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800cba0:	4b07      	ldr	r3, [pc, #28]	@ (800cbc0 <prvCheckForValidListAndQueue+0x60>)
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d005      	beq.n	800cbb4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800cba8:	4b05      	ldr	r3, [pc, #20]	@ (800cbc0 <prvCheckForValidListAndQueue+0x60>)
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	490b      	ldr	r1, [pc, #44]	@ (800cbdc <prvCheckForValidListAndQueue+0x7c>)
 800cbae:	4618      	mov	r0, r3
 800cbb0:	f7fe fcfc 	bl	800b5ac <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cbb4:	f000 f97a 	bl	800ceac <vPortExitCritical>
}
 800cbb8:	bf00      	nop
 800cbba:	46bd      	mov	sp, r7
 800cbbc:	bd80      	pop	{r7, pc}
 800cbbe:	bf00      	nop
 800cbc0:	2000104c 	.word	0x2000104c
 800cbc4:	2000101c 	.word	0x2000101c
 800cbc8:	20001030 	.word	0x20001030
 800cbcc:	20001044 	.word	0x20001044
 800cbd0:	20001048 	.word	0x20001048
 800cbd4:	200010f8 	.word	0x200010f8
 800cbd8:	20001058 	.word	0x20001058
 800cbdc:	0800de38 	.word	0x0800de38

0800cbe0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800cbe0:	b480      	push	{r7}
 800cbe2:	b085      	sub	sp, #20
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	60f8      	str	r0, [r7, #12]
 800cbe8:	60b9      	str	r1, [r7, #8]
 800cbea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	3b04      	subs	r3, #4
 800cbf0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800cbf8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	3b04      	subs	r3, #4
 800cbfe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800cc00:	68bb      	ldr	r3, [r7, #8]
 800cc02:	f023 0201 	bic.w	r2, r3, #1
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	3b04      	subs	r3, #4
 800cc0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cc10:	4a0c      	ldr	r2, [pc, #48]	@ (800cc44 <pxPortInitialiseStack+0x64>)
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	3b14      	subs	r3, #20
 800cc1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800cc1c:	687a      	ldr	r2, [r7, #4]
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	3b04      	subs	r3, #4
 800cc26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	f06f 0202 	mvn.w	r2, #2
 800cc2e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	3b20      	subs	r3, #32
 800cc34:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800cc36:	68fb      	ldr	r3, [r7, #12]
}
 800cc38:	4618      	mov	r0, r3
 800cc3a:	3714      	adds	r7, #20
 800cc3c:	46bd      	mov	sp, r7
 800cc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc42:	4770      	bx	lr
 800cc44:	0800cc49 	.word	0x0800cc49

0800cc48 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800cc48:	b480      	push	{r7}
 800cc4a:	b085      	sub	sp, #20
 800cc4c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800cc4e:	2300      	movs	r3, #0
 800cc50:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800cc52:	4b13      	ldr	r3, [pc, #76]	@ (800cca0 <prvTaskExitError+0x58>)
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cc5a:	d00b      	beq.n	800cc74 <prvTaskExitError+0x2c>
	__asm volatile
 800cc5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc60:	f383 8811 	msr	BASEPRI, r3
 800cc64:	f3bf 8f6f 	isb	sy
 800cc68:	f3bf 8f4f 	dsb	sy
 800cc6c:	60fb      	str	r3, [r7, #12]
}
 800cc6e:	bf00      	nop
 800cc70:	bf00      	nop
 800cc72:	e7fd      	b.n	800cc70 <prvTaskExitError+0x28>
	__asm volatile
 800cc74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc78:	f383 8811 	msr	BASEPRI, r3
 800cc7c:	f3bf 8f6f 	isb	sy
 800cc80:	f3bf 8f4f 	dsb	sy
 800cc84:	60bb      	str	r3, [r7, #8]
}
 800cc86:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800cc88:	bf00      	nop
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d0fc      	beq.n	800cc8a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800cc90:	bf00      	nop
 800cc92:	bf00      	nop
 800cc94:	3714      	adds	r7, #20
 800cc96:	46bd      	mov	sp, r7
 800cc98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc9c:	4770      	bx	lr
 800cc9e:	bf00      	nop
 800cca0:	2000002c 	.word	0x2000002c
	...

0800ccb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ccb0:	4b07      	ldr	r3, [pc, #28]	@ (800ccd0 <pxCurrentTCBConst2>)
 800ccb2:	6819      	ldr	r1, [r3, #0]
 800ccb4:	6808      	ldr	r0, [r1, #0]
 800ccb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccba:	f380 8809 	msr	PSP, r0
 800ccbe:	f3bf 8f6f 	isb	sy
 800ccc2:	f04f 0000 	mov.w	r0, #0
 800ccc6:	f380 8811 	msr	BASEPRI, r0
 800ccca:	4770      	bx	lr
 800cccc:	f3af 8000 	nop.w

0800ccd0 <pxCurrentTCBConst2>:
 800ccd0:	20000b1c 	.word	0x20000b1c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ccd4:	bf00      	nop
 800ccd6:	bf00      	nop

0800ccd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ccd8:	4808      	ldr	r0, [pc, #32]	@ (800ccfc <prvPortStartFirstTask+0x24>)
 800ccda:	6800      	ldr	r0, [r0, #0]
 800ccdc:	6800      	ldr	r0, [r0, #0]
 800ccde:	f380 8808 	msr	MSP, r0
 800cce2:	f04f 0000 	mov.w	r0, #0
 800cce6:	f380 8814 	msr	CONTROL, r0
 800ccea:	b662      	cpsie	i
 800ccec:	b661      	cpsie	f
 800ccee:	f3bf 8f4f 	dsb	sy
 800ccf2:	f3bf 8f6f 	isb	sy
 800ccf6:	df00      	svc	0
 800ccf8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ccfa:	bf00      	nop
 800ccfc:	e000ed08 	.word	0xe000ed08

0800cd00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cd00:	b580      	push	{r7, lr}
 800cd02:	b086      	sub	sp, #24
 800cd04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800cd06:	4b47      	ldr	r3, [pc, #284]	@ (800ce24 <xPortStartScheduler+0x124>)
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	4a47      	ldr	r2, [pc, #284]	@ (800ce28 <xPortStartScheduler+0x128>)
 800cd0c:	4293      	cmp	r3, r2
 800cd0e:	d10b      	bne.n	800cd28 <xPortStartScheduler+0x28>
	__asm volatile
 800cd10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd14:	f383 8811 	msr	BASEPRI, r3
 800cd18:	f3bf 8f6f 	isb	sy
 800cd1c:	f3bf 8f4f 	dsb	sy
 800cd20:	613b      	str	r3, [r7, #16]
}
 800cd22:	bf00      	nop
 800cd24:	bf00      	nop
 800cd26:	e7fd      	b.n	800cd24 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800cd28:	4b3e      	ldr	r3, [pc, #248]	@ (800ce24 <xPortStartScheduler+0x124>)
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	4a3f      	ldr	r2, [pc, #252]	@ (800ce2c <xPortStartScheduler+0x12c>)
 800cd2e:	4293      	cmp	r3, r2
 800cd30:	d10b      	bne.n	800cd4a <xPortStartScheduler+0x4a>
	__asm volatile
 800cd32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd36:	f383 8811 	msr	BASEPRI, r3
 800cd3a:	f3bf 8f6f 	isb	sy
 800cd3e:	f3bf 8f4f 	dsb	sy
 800cd42:	60fb      	str	r3, [r7, #12]
}
 800cd44:	bf00      	nop
 800cd46:	bf00      	nop
 800cd48:	e7fd      	b.n	800cd46 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cd4a:	4b39      	ldr	r3, [pc, #228]	@ (800ce30 <xPortStartScheduler+0x130>)
 800cd4c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800cd4e:	697b      	ldr	r3, [r7, #20]
 800cd50:	781b      	ldrb	r3, [r3, #0]
 800cd52:	b2db      	uxtb	r3, r3
 800cd54:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cd56:	697b      	ldr	r3, [r7, #20]
 800cd58:	22ff      	movs	r2, #255	@ 0xff
 800cd5a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cd5c:	697b      	ldr	r3, [r7, #20]
 800cd5e:	781b      	ldrb	r3, [r3, #0]
 800cd60:	b2db      	uxtb	r3, r3
 800cd62:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cd64:	78fb      	ldrb	r3, [r7, #3]
 800cd66:	b2db      	uxtb	r3, r3
 800cd68:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800cd6c:	b2da      	uxtb	r2, r3
 800cd6e:	4b31      	ldr	r3, [pc, #196]	@ (800ce34 <xPortStartScheduler+0x134>)
 800cd70:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800cd72:	4b31      	ldr	r3, [pc, #196]	@ (800ce38 <xPortStartScheduler+0x138>)
 800cd74:	2207      	movs	r2, #7
 800cd76:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cd78:	e009      	b.n	800cd8e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800cd7a:	4b2f      	ldr	r3, [pc, #188]	@ (800ce38 <xPortStartScheduler+0x138>)
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	3b01      	subs	r3, #1
 800cd80:	4a2d      	ldr	r2, [pc, #180]	@ (800ce38 <xPortStartScheduler+0x138>)
 800cd82:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cd84:	78fb      	ldrb	r3, [r7, #3]
 800cd86:	b2db      	uxtb	r3, r3
 800cd88:	005b      	lsls	r3, r3, #1
 800cd8a:	b2db      	uxtb	r3, r3
 800cd8c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cd8e:	78fb      	ldrb	r3, [r7, #3]
 800cd90:	b2db      	uxtb	r3, r3
 800cd92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cd96:	2b80      	cmp	r3, #128	@ 0x80
 800cd98:	d0ef      	beq.n	800cd7a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800cd9a:	4b27      	ldr	r3, [pc, #156]	@ (800ce38 <xPortStartScheduler+0x138>)
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	f1c3 0307 	rsb	r3, r3, #7
 800cda2:	2b04      	cmp	r3, #4
 800cda4:	d00b      	beq.n	800cdbe <xPortStartScheduler+0xbe>
	__asm volatile
 800cda6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdaa:	f383 8811 	msr	BASEPRI, r3
 800cdae:	f3bf 8f6f 	isb	sy
 800cdb2:	f3bf 8f4f 	dsb	sy
 800cdb6:	60bb      	str	r3, [r7, #8]
}
 800cdb8:	bf00      	nop
 800cdba:	bf00      	nop
 800cdbc:	e7fd      	b.n	800cdba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800cdbe:	4b1e      	ldr	r3, [pc, #120]	@ (800ce38 <xPortStartScheduler+0x138>)
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	021b      	lsls	r3, r3, #8
 800cdc4:	4a1c      	ldr	r2, [pc, #112]	@ (800ce38 <xPortStartScheduler+0x138>)
 800cdc6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800cdc8:	4b1b      	ldr	r3, [pc, #108]	@ (800ce38 <xPortStartScheduler+0x138>)
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800cdd0:	4a19      	ldr	r2, [pc, #100]	@ (800ce38 <xPortStartScheduler+0x138>)
 800cdd2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	b2da      	uxtb	r2, r3
 800cdd8:	697b      	ldr	r3, [r7, #20]
 800cdda:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800cddc:	4b17      	ldr	r3, [pc, #92]	@ (800ce3c <xPortStartScheduler+0x13c>)
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	4a16      	ldr	r2, [pc, #88]	@ (800ce3c <xPortStartScheduler+0x13c>)
 800cde2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800cde6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cde8:	4b14      	ldr	r3, [pc, #80]	@ (800ce3c <xPortStartScheduler+0x13c>)
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	4a13      	ldr	r2, [pc, #76]	@ (800ce3c <xPortStartScheduler+0x13c>)
 800cdee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800cdf2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800cdf4:	f000 f8da 	bl	800cfac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800cdf8:	4b11      	ldr	r3, [pc, #68]	@ (800ce40 <xPortStartScheduler+0x140>)
 800cdfa:	2200      	movs	r2, #0
 800cdfc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800cdfe:	f000 f8f9 	bl	800cff4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ce02:	4b10      	ldr	r3, [pc, #64]	@ (800ce44 <xPortStartScheduler+0x144>)
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	4a0f      	ldr	r2, [pc, #60]	@ (800ce44 <xPortStartScheduler+0x144>)
 800ce08:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800ce0c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ce0e:	f7ff ff63 	bl	800ccd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ce12:	f7ff f805 	bl	800be20 <vTaskSwitchContext>
	prvTaskExitError();
 800ce16:	f7ff ff17 	bl	800cc48 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ce1a:	2300      	movs	r3, #0
}
 800ce1c:	4618      	mov	r0, r3
 800ce1e:	3718      	adds	r7, #24
 800ce20:	46bd      	mov	sp, r7
 800ce22:	bd80      	pop	{r7, pc}
 800ce24:	e000ed00 	.word	0xe000ed00
 800ce28:	410fc271 	.word	0x410fc271
 800ce2c:	410fc270 	.word	0x410fc270
 800ce30:	e000e400 	.word	0xe000e400
 800ce34:	20001148 	.word	0x20001148
 800ce38:	2000114c 	.word	0x2000114c
 800ce3c:	e000ed20 	.word	0xe000ed20
 800ce40:	2000002c 	.word	0x2000002c
 800ce44:	e000ef34 	.word	0xe000ef34

0800ce48 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ce48:	b480      	push	{r7}
 800ce4a:	b083      	sub	sp, #12
 800ce4c:	af00      	add	r7, sp, #0
	__asm volatile
 800ce4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce52:	f383 8811 	msr	BASEPRI, r3
 800ce56:	f3bf 8f6f 	isb	sy
 800ce5a:	f3bf 8f4f 	dsb	sy
 800ce5e:	607b      	str	r3, [r7, #4]
}
 800ce60:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ce62:	4b10      	ldr	r3, [pc, #64]	@ (800cea4 <vPortEnterCritical+0x5c>)
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	3301      	adds	r3, #1
 800ce68:	4a0e      	ldr	r2, [pc, #56]	@ (800cea4 <vPortEnterCritical+0x5c>)
 800ce6a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ce6c:	4b0d      	ldr	r3, [pc, #52]	@ (800cea4 <vPortEnterCritical+0x5c>)
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	2b01      	cmp	r3, #1
 800ce72:	d110      	bne.n	800ce96 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ce74:	4b0c      	ldr	r3, [pc, #48]	@ (800cea8 <vPortEnterCritical+0x60>)
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	b2db      	uxtb	r3, r3
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d00b      	beq.n	800ce96 <vPortEnterCritical+0x4e>
	__asm volatile
 800ce7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce82:	f383 8811 	msr	BASEPRI, r3
 800ce86:	f3bf 8f6f 	isb	sy
 800ce8a:	f3bf 8f4f 	dsb	sy
 800ce8e:	603b      	str	r3, [r7, #0]
}
 800ce90:	bf00      	nop
 800ce92:	bf00      	nop
 800ce94:	e7fd      	b.n	800ce92 <vPortEnterCritical+0x4a>
	}
}
 800ce96:	bf00      	nop
 800ce98:	370c      	adds	r7, #12
 800ce9a:	46bd      	mov	sp, r7
 800ce9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cea0:	4770      	bx	lr
 800cea2:	bf00      	nop
 800cea4:	2000002c 	.word	0x2000002c
 800cea8:	e000ed04 	.word	0xe000ed04

0800ceac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ceac:	b480      	push	{r7}
 800ceae:	b083      	sub	sp, #12
 800ceb0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ceb2:	4b12      	ldr	r3, [pc, #72]	@ (800cefc <vPortExitCritical+0x50>)
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d10b      	bne.n	800ced2 <vPortExitCritical+0x26>
	__asm volatile
 800ceba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cebe:	f383 8811 	msr	BASEPRI, r3
 800cec2:	f3bf 8f6f 	isb	sy
 800cec6:	f3bf 8f4f 	dsb	sy
 800ceca:	607b      	str	r3, [r7, #4]
}
 800cecc:	bf00      	nop
 800cece:	bf00      	nop
 800ced0:	e7fd      	b.n	800cece <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ced2:	4b0a      	ldr	r3, [pc, #40]	@ (800cefc <vPortExitCritical+0x50>)
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	3b01      	subs	r3, #1
 800ced8:	4a08      	ldr	r2, [pc, #32]	@ (800cefc <vPortExitCritical+0x50>)
 800ceda:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cedc:	4b07      	ldr	r3, [pc, #28]	@ (800cefc <vPortExitCritical+0x50>)
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d105      	bne.n	800cef0 <vPortExitCritical+0x44>
 800cee4:	2300      	movs	r3, #0
 800cee6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cee8:	683b      	ldr	r3, [r7, #0]
 800ceea:	f383 8811 	msr	BASEPRI, r3
}
 800ceee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cef0:	bf00      	nop
 800cef2:	370c      	adds	r7, #12
 800cef4:	46bd      	mov	sp, r7
 800cef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cefa:	4770      	bx	lr
 800cefc:	2000002c 	.word	0x2000002c

0800cf00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cf00:	f3ef 8009 	mrs	r0, PSP
 800cf04:	f3bf 8f6f 	isb	sy
 800cf08:	4b15      	ldr	r3, [pc, #84]	@ (800cf60 <pxCurrentTCBConst>)
 800cf0a:	681a      	ldr	r2, [r3, #0]
 800cf0c:	f01e 0f10 	tst.w	lr, #16
 800cf10:	bf08      	it	eq
 800cf12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cf16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf1a:	6010      	str	r0, [r2, #0]
 800cf1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cf20:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800cf24:	f380 8811 	msr	BASEPRI, r0
 800cf28:	f3bf 8f4f 	dsb	sy
 800cf2c:	f3bf 8f6f 	isb	sy
 800cf30:	f7fe ff76 	bl	800be20 <vTaskSwitchContext>
 800cf34:	f04f 0000 	mov.w	r0, #0
 800cf38:	f380 8811 	msr	BASEPRI, r0
 800cf3c:	bc09      	pop	{r0, r3}
 800cf3e:	6819      	ldr	r1, [r3, #0]
 800cf40:	6808      	ldr	r0, [r1, #0]
 800cf42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf46:	f01e 0f10 	tst.w	lr, #16
 800cf4a:	bf08      	it	eq
 800cf4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cf50:	f380 8809 	msr	PSP, r0
 800cf54:	f3bf 8f6f 	isb	sy
 800cf58:	4770      	bx	lr
 800cf5a:	bf00      	nop
 800cf5c:	f3af 8000 	nop.w

0800cf60 <pxCurrentTCBConst>:
 800cf60:	20000b1c 	.word	0x20000b1c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cf64:	bf00      	nop
 800cf66:	bf00      	nop

0800cf68 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cf68:	b580      	push	{r7, lr}
 800cf6a:	b082      	sub	sp, #8
 800cf6c:	af00      	add	r7, sp, #0
	__asm volatile
 800cf6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf72:	f383 8811 	msr	BASEPRI, r3
 800cf76:	f3bf 8f6f 	isb	sy
 800cf7a:	f3bf 8f4f 	dsb	sy
 800cf7e:	607b      	str	r3, [r7, #4]
}
 800cf80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cf82:	f7fe fe93 	bl	800bcac <xTaskIncrementTick>
 800cf86:	4603      	mov	r3, r0
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d003      	beq.n	800cf94 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cf8c:	4b06      	ldr	r3, [pc, #24]	@ (800cfa8 <xPortSysTickHandler+0x40>)
 800cf8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cf92:	601a      	str	r2, [r3, #0]
 800cf94:	2300      	movs	r3, #0
 800cf96:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cf98:	683b      	ldr	r3, [r7, #0]
 800cf9a:	f383 8811 	msr	BASEPRI, r3
}
 800cf9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cfa0:	bf00      	nop
 800cfa2:	3708      	adds	r7, #8
 800cfa4:	46bd      	mov	sp, r7
 800cfa6:	bd80      	pop	{r7, pc}
 800cfa8:	e000ed04 	.word	0xe000ed04

0800cfac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cfac:	b480      	push	{r7}
 800cfae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cfb0:	4b0b      	ldr	r3, [pc, #44]	@ (800cfe0 <vPortSetupTimerInterrupt+0x34>)
 800cfb2:	2200      	movs	r2, #0
 800cfb4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cfb6:	4b0b      	ldr	r3, [pc, #44]	@ (800cfe4 <vPortSetupTimerInterrupt+0x38>)
 800cfb8:	2200      	movs	r2, #0
 800cfba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cfbc:	4b0a      	ldr	r3, [pc, #40]	@ (800cfe8 <vPortSetupTimerInterrupt+0x3c>)
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	4a0a      	ldr	r2, [pc, #40]	@ (800cfec <vPortSetupTimerInterrupt+0x40>)
 800cfc2:	fba2 2303 	umull	r2, r3, r2, r3
 800cfc6:	099b      	lsrs	r3, r3, #6
 800cfc8:	4a09      	ldr	r2, [pc, #36]	@ (800cff0 <vPortSetupTimerInterrupt+0x44>)
 800cfca:	3b01      	subs	r3, #1
 800cfcc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cfce:	4b04      	ldr	r3, [pc, #16]	@ (800cfe0 <vPortSetupTimerInterrupt+0x34>)
 800cfd0:	2207      	movs	r2, #7
 800cfd2:	601a      	str	r2, [r3, #0]
}
 800cfd4:	bf00      	nop
 800cfd6:	46bd      	mov	sp, r7
 800cfd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfdc:	4770      	bx	lr
 800cfde:	bf00      	nop
 800cfe0:	e000e010 	.word	0xe000e010
 800cfe4:	e000e018 	.word	0xe000e018
 800cfe8:	20000000 	.word	0x20000000
 800cfec:	10624dd3 	.word	0x10624dd3
 800cff0:	e000e014 	.word	0xe000e014

0800cff4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cff4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800d004 <vPortEnableVFP+0x10>
 800cff8:	6801      	ldr	r1, [r0, #0]
 800cffa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800cffe:	6001      	str	r1, [r0, #0]
 800d000:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d002:	bf00      	nop
 800d004:	e000ed88 	.word	0xe000ed88

0800d008 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d008:	b480      	push	{r7}
 800d00a:	b085      	sub	sp, #20
 800d00c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d00e:	f3ef 8305 	mrs	r3, IPSR
 800d012:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	2b0f      	cmp	r3, #15
 800d018:	d915      	bls.n	800d046 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d01a:	4a18      	ldr	r2, [pc, #96]	@ (800d07c <vPortValidateInterruptPriority+0x74>)
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	4413      	add	r3, r2
 800d020:	781b      	ldrb	r3, [r3, #0]
 800d022:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d024:	4b16      	ldr	r3, [pc, #88]	@ (800d080 <vPortValidateInterruptPriority+0x78>)
 800d026:	781b      	ldrb	r3, [r3, #0]
 800d028:	7afa      	ldrb	r2, [r7, #11]
 800d02a:	429a      	cmp	r2, r3
 800d02c:	d20b      	bcs.n	800d046 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800d02e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d032:	f383 8811 	msr	BASEPRI, r3
 800d036:	f3bf 8f6f 	isb	sy
 800d03a:	f3bf 8f4f 	dsb	sy
 800d03e:	607b      	str	r3, [r7, #4]
}
 800d040:	bf00      	nop
 800d042:	bf00      	nop
 800d044:	e7fd      	b.n	800d042 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d046:	4b0f      	ldr	r3, [pc, #60]	@ (800d084 <vPortValidateInterruptPriority+0x7c>)
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800d04e:	4b0e      	ldr	r3, [pc, #56]	@ (800d088 <vPortValidateInterruptPriority+0x80>)
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	429a      	cmp	r2, r3
 800d054:	d90b      	bls.n	800d06e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800d056:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d05a:	f383 8811 	msr	BASEPRI, r3
 800d05e:	f3bf 8f6f 	isb	sy
 800d062:	f3bf 8f4f 	dsb	sy
 800d066:	603b      	str	r3, [r7, #0]
}
 800d068:	bf00      	nop
 800d06a:	bf00      	nop
 800d06c:	e7fd      	b.n	800d06a <vPortValidateInterruptPriority+0x62>
	}
 800d06e:	bf00      	nop
 800d070:	3714      	adds	r7, #20
 800d072:	46bd      	mov	sp, r7
 800d074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d078:	4770      	bx	lr
 800d07a:	bf00      	nop
 800d07c:	e000e3f0 	.word	0xe000e3f0
 800d080:	20001148 	.word	0x20001148
 800d084:	e000ed0c 	.word	0xe000ed0c
 800d088:	2000114c 	.word	0x2000114c

0800d08c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d08c:	b580      	push	{r7, lr}
 800d08e:	b08a      	sub	sp, #40	@ 0x28
 800d090:	af00      	add	r7, sp, #0
 800d092:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d094:	2300      	movs	r3, #0
 800d096:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d098:	f7fe fd4c 	bl	800bb34 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d09c:	4b5f      	ldr	r3, [pc, #380]	@ (800d21c <pvPortMalloc+0x190>)
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d101      	bne.n	800d0a8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d0a4:	f000 f92a 	bl	800d2fc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d0a8:	4b5d      	ldr	r3, [pc, #372]	@ (800d220 <pvPortMalloc+0x194>)
 800d0aa:	681a      	ldr	r2, [r3, #0]
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	4013      	ands	r3, r2
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	f040 8095 	bne.w	800d1e0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d01e      	beq.n	800d0fa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800d0bc:	2208      	movs	r2, #8
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	4413      	add	r3, r2
 800d0c2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	f003 0307 	and.w	r3, r3, #7
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d015      	beq.n	800d0fa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	f023 0307 	bic.w	r3, r3, #7
 800d0d4:	3308      	adds	r3, #8
 800d0d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	f003 0307 	and.w	r3, r3, #7
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d00b      	beq.n	800d0fa <pvPortMalloc+0x6e>
	__asm volatile
 800d0e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0e6:	f383 8811 	msr	BASEPRI, r3
 800d0ea:	f3bf 8f6f 	isb	sy
 800d0ee:	f3bf 8f4f 	dsb	sy
 800d0f2:	617b      	str	r3, [r7, #20]
}
 800d0f4:	bf00      	nop
 800d0f6:	bf00      	nop
 800d0f8:	e7fd      	b.n	800d0f6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d06f      	beq.n	800d1e0 <pvPortMalloc+0x154>
 800d100:	4b48      	ldr	r3, [pc, #288]	@ (800d224 <pvPortMalloc+0x198>)
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	687a      	ldr	r2, [r7, #4]
 800d106:	429a      	cmp	r2, r3
 800d108:	d86a      	bhi.n	800d1e0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d10a:	4b47      	ldr	r3, [pc, #284]	@ (800d228 <pvPortMalloc+0x19c>)
 800d10c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d10e:	4b46      	ldr	r3, [pc, #280]	@ (800d228 <pvPortMalloc+0x19c>)
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d114:	e004      	b.n	800d120 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800d116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d118:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d11a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d122:	685b      	ldr	r3, [r3, #4]
 800d124:	687a      	ldr	r2, [r7, #4]
 800d126:	429a      	cmp	r2, r3
 800d128:	d903      	bls.n	800d132 <pvPortMalloc+0xa6>
 800d12a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d1f1      	bne.n	800d116 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d132:	4b3a      	ldr	r3, [pc, #232]	@ (800d21c <pvPortMalloc+0x190>)
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d138:	429a      	cmp	r2, r3
 800d13a:	d051      	beq.n	800d1e0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d13c:	6a3b      	ldr	r3, [r7, #32]
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	2208      	movs	r2, #8
 800d142:	4413      	add	r3, r2
 800d144:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d148:	681a      	ldr	r2, [r3, #0]
 800d14a:	6a3b      	ldr	r3, [r7, #32]
 800d14c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d14e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d150:	685a      	ldr	r2, [r3, #4]
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	1ad2      	subs	r2, r2, r3
 800d156:	2308      	movs	r3, #8
 800d158:	005b      	lsls	r3, r3, #1
 800d15a:	429a      	cmp	r2, r3
 800d15c:	d920      	bls.n	800d1a0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d15e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	4413      	add	r3, r2
 800d164:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d166:	69bb      	ldr	r3, [r7, #24]
 800d168:	f003 0307 	and.w	r3, r3, #7
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d00b      	beq.n	800d188 <pvPortMalloc+0xfc>
	__asm volatile
 800d170:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d174:	f383 8811 	msr	BASEPRI, r3
 800d178:	f3bf 8f6f 	isb	sy
 800d17c:	f3bf 8f4f 	dsb	sy
 800d180:	613b      	str	r3, [r7, #16]
}
 800d182:	bf00      	nop
 800d184:	bf00      	nop
 800d186:	e7fd      	b.n	800d184 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d18a:	685a      	ldr	r2, [r3, #4]
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	1ad2      	subs	r2, r2, r3
 800d190:	69bb      	ldr	r3, [r7, #24]
 800d192:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d196:	687a      	ldr	r2, [r7, #4]
 800d198:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d19a:	69b8      	ldr	r0, [r7, #24]
 800d19c:	f000 f910 	bl	800d3c0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d1a0:	4b20      	ldr	r3, [pc, #128]	@ (800d224 <pvPortMalloc+0x198>)
 800d1a2:	681a      	ldr	r2, [r3, #0]
 800d1a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1a6:	685b      	ldr	r3, [r3, #4]
 800d1a8:	1ad3      	subs	r3, r2, r3
 800d1aa:	4a1e      	ldr	r2, [pc, #120]	@ (800d224 <pvPortMalloc+0x198>)
 800d1ac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d1ae:	4b1d      	ldr	r3, [pc, #116]	@ (800d224 <pvPortMalloc+0x198>)
 800d1b0:	681a      	ldr	r2, [r3, #0]
 800d1b2:	4b1e      	ldr	r3, [pc, #120]	@ (800d22c <pvPortMalloc+0x1a0>)
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	429a      	cmp	r2, r3
 800d1b8:	d203      	bcs.n	800d1c2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d1ba:	4b1a      	ldr	r3, [pc, #104]	@ (800d224 <pvPortMalloc+0x198>)
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	4a1b      	ldr	r2, [pc, #108]	@ (800d22c <pvPortMalloc+0x1a0>)
 800d1c0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d1c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1c4:	685a      	ldr	r2, [r3, #4]
 800d1c6:	4b16      	ldr	r3, [pc, #88]	@ (800d220 <pvPortMalloc+0x194>)
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	431a      	orrs	r2, r3
 800d1cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1ce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d1d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1d2:	2200      	movs	r2, #0
 800d1d4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d1d6:	4b16      	ldr	r3, [pc, #88]	@ (800d230 <pvPortMalloc+0x1a4>)
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	3301      	adds	r3, #1
 800d1dc:	4a14      	ldr	r2, [pc, #80]	@ (800d230 <pvPortMalloc+0x1a4>)
 800d1de:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d1e0:	f7fe fcb6 	bl	800bb50 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800d1e4:	69fb      	ldr	r3, [r7, #28]
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d101      	bne.n	800d1ee <pvPortMalloc+0x162>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800d1ea:	f7f3 f98b 	bl	8000504 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d1ee:	69fb      	ldr	r3, [r7, #28]
 800d1f0:	f003 0307 	and.w	r3, r3, #7
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d00b      	beq.n	800d210 <pvPortMalloc+0x184>
	__asm volatile
 800d1f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1fc:	f383 8811 	msr	BASEPRI, r3
 800d200:	f3bf 8f6f 	isb	sy
 800d204:	f3bf 8f4f 	dsb	sy
 800d208:	60fb      	str	r3, [r7, #12]
}
 800d20a:	bf00      	nop
 800d20c:	bf00      	nop
 800d20e:	e7fd      	b.n	800d20c <pvPortMalloc+0x180>
	return pvReturn;
 800d210:	69fb      	ldr	r3, [r7, #28]
}
 800d212:	4618      	mov	r0, r3
 800d214:	3728      	adds	r7, #40	@ 0x28
 800d216:	46bd      	mov	sp, r7
 800d218:	bd80      	pop	{r7, pc}
 800d21a:	bf00      	nop
 800d21c:	20009158 	.word	0x20009158
 800d220:	2000916c 	.word	0x2000916c
 800d224:	2000915c 	.word	0x2000915c
 800d228:	20009150 	.word	0x20009150
 800d22c:	20009160 	.word	0x20009160
 800d230:	20009164 	.word	0x20009164

0800d234 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d234:	b580      	push	{r7, lr}
 800d236:	b086      	sub	sp, #24
 800d238:	af00      	add	r7, sp, #0
 800d23a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	2b00      	cmp	r3, #0
 800d244:	d04f      	beq.n	800d2e6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d246:	2308      	movs	r3, #8
 800d248:	425b      	negs	r3, r3
 800d24a:	697a      	ldr	r2, [r7, #20]
 800d24c:	4413      	add	r3, r2
 800d24e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d250:	697b      	ldr	r3, [r7, #20]
 800d252:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d254:	693b      	ldr	r3, [r7, #16]
 800d256:	685a      	ldr	r2, [r3, #4]
 800d258:	4b25      	ldr	r3, [pc, #148]	@ (800d2f0 <vPortFree+0xbc>)
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	4013      	ands	r3, r2
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d10b      	bne.n	800d27a <vPortFree+0x46>
	__asm volatile
 800d262:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d266:	f383 8811 	msr	BASEPRI, r3
 800d26a:	f3bf 8f6f 	isb	sy
 800d26e:	f3bf 8f4f 	dsb	sy
 800d272:	60fb      	str	r3, [r7, #12]
}
 800d274:	bf00      	nop
 800d276:	bf00      	nop
 800d278:	e7fd      	b.n	800d276 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d27a:	693b      	ldr	r3, [r7, #16]
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d00b      	beq.n	800d29a <vPortFree+0x66>
	__asm volatile
 800d282:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d286:	f383 8811 	msr	BASEPRI, r3
 800d28a:	f3bf 8f6f 	isb	sy
 800d28e:	f3bf 8f4f 	dsb	sy
 800d292:	60bb      	str	r3, [r7, #8]
}
 800d294:	bf00      	nop
 800d296:	bf00      	nop
 800d298:	e7fd      	b.n	800d296 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d29a:	693b      	ldr	r3, [r7, #16]
 800d29c:	685a      	ldr	r2, [r3, #4]
 800d29e:	4b14      	ldr	r3, [pc, #80]	@ (800d2f0 <vPortFree+0xbc>)
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	4013      	ands	r3, r2
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d01e      	beq.n	800d2e6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d2a8:	693b      	ldr	r3, [r7, #16]
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d11a      	bne.n	800d2e6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d2b0:	693b      	ldr	r3, [r7, #16]
 800d2b2:	685a      	ldr	r2, [r3, #4]
 800d2b4:	4b0e      	ldr	r3, [pc, #56]	@ (800d2f0 <vPortFree+0xbc>)
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	43db      	mvns	r3, r3
 800d2ba:	401a      	ands	r2, r3
 800d2bc:	693b      	ldr	r3, [r7, #16]
 800d2be:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d2c0:	f7fe fc38 	bl	800bb34 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d2c4:	693b      	ldr	r3, [r7, #16]
 800d2c6:	685a      	ldr	r2, [r3, #4]
 800d2c8:	4b0a      	ldr	r3, [pc, #40]	@ (800d2f4 <vPortFree+0xc0>)
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	4413      	add	r3, r2
 800d2ce:	4a09      	ldr	r2, [pc, #36]	@ (800d2f4 <vPortFree+0xc0>)
 800d2d0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d2d2:	6938      	ldr	r0, [r7, #16]
 800d2d4:	f000 f874 	bl	800d3c0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d2d8:	4b07      	ldr	r3, [pc, #28]	@ (800d2f8 <vPortFree+0xc4>)
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	3301      	adds	r3, #1
 800d2de:	4a06      	ldr	r2, [pc, #24]	@ (800d2f8 <vPortFree+0xc4>)
 800d2e0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d2e2:	f7fe fc35 	bl	800bb50 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d2e6:	bf00      	nop
 800d2e8:	3718      	adds	r7, #24
 800d2ea:	46bd      	mov	sp, r7
 800d2ec:	bd80      	pop	{r7, pc}
 800d2ee:	bf00      	nop
 800d2f0:	2000916c 	.word	0x2000916c
 800d2f4:	2000915c 	.word	0x2000915c
 800d2f8:	20009168 	.word	0x20009168

0800d2fc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d2fc:	b480      	push	{r7}
 800d2fe:	b085      	sub	sp, #20
 800d300:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d302:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d306:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d308:	4b27      	ldr	r3, [pc, #156]	@ (800d3a8 <prvHeapInit+0xac>)
 800d30a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	f003 0307 	and.w	r3, r3, #7
 800d312:	2b00      	cmp	r3, #0
 800d314:	d00c      	beq.n	800d330 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	3307      	adds	r3, #7
 800d31a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	f023 0307 	bic.w	r3, r3, #7
 800d322:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d324:	68ba      	ldr	r2, [r7, #8]
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	1ad3      	subs	r3, r2, r3
 800d32a:	4a1f      	ldr	r2, [pc, #124]	@ (800d3a8 <prvHeapInit+0xac>)
 800d32c:	4413      	add	r3, r2
 800d32e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d334:	4a1d      	ldr	r2, [pc, #116]	@ (800d3ac <prvHeapInit+0xb0>)
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d33a:	4b1c      	ldr	r3, [pc, #112]	@ (800d3ac <prvHeapInit+0xb0>)
 800d33c:	2200      	movs	r2, #0
 800d33e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	68ba      	ldr	r2, [r7, #8]
 800d344:	4413      	add	r3, r2
 800d346:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d348:	2208      	movs	r2, #8
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	1a9b      	subs	r3, r3, r2
 800d34e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	f023 0307 	bic.w	r3, r3, #7
 800d356:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	4a15      	ldr	r2, [pc, #84]	@ (800d3b0 <prvHeapInit+0xb4>)
 800d35c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d35e:	4b14      	ldr	r3, [pc, #80]	@ (800d3b0 <prvHeapInit+0xb4>)
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	2200      	movs	r2, #0
 800d364:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d366:	4b12      	ldr	r3, [pc, #72]	@ (800d3b0 <prvHeapInit+0xb4>)
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	2200      	movs	r2, #0
 800d36c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d372:	683b      	ldr	r3, [r7, #0]
 800d374:	68fa      	ldr	r2, [r7, #12]
 800d376:	1ad2      	subs	r2, r2, r3
 800d378:	683b      	ldr	r3, [r7, #0]
 800d37a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d37c:	4b0c      	ldr	r3, [pc, #48]	@ (800d3b0 <prvHeapInit+0xb4>)
 800d37e:	681a      	ldr	r2, [r3, #0]
 800d380:	683b      	ldr	r3, [r7, #0]
 800d382:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d384:	683b      	ldr	r3, [r7, #0]
 800d386:	685b      	ldr	r3, [r3, #4]
 800d388:	4a0a      	ldr	r2, [pc, #40]	@ (800d3b4 <prvHeapInit+0xb8>)
 800d38a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d38c:	683b      	ldr	r3, [r7, #0]
 800d38e:	685b      	ldr	r3, [r3, #4]
 800d390:	4a09      	ldr	r2, [pc, #36]	@ (800d3b8 <prvHeapInit+0xbc>)
 800d392:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d394:	4b09      	ldr	r3, [pc, #36]	@ (800d3bc <prvHeapInit+0xc0>)
 800d396:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800d39a:	601a      	str	r2, [r3, #0]
}
 800d39c:	bf00      	nop
 800d39e:	3714      	adds	r7, #20
 800d3a0:	46bd      	mov	sp, r7
 800d3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a6:	4770      	bx	lr
 800d3a8:	20001150 	.word	0x20001150
 800d3ac:	20009150 	.word	0x20009150
 800d3b0:	20009158 	.word	0x20009158
 800d3b4:	20009160 	.word	0x20009160
 800d3b8:	2000915c 	.word	0x2000915c
 800d3bc:	2000916c 	.word	0x2000916c

0800d3c0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d3c0:	b480      	push	{r7}
 800d3c2:	b085      	sub	sp, #20
 800d3c4:	af00      	add	r7, sp, #0
 800d3c6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d3c8:	4b28      	ldr	r3, [pc, #160]	@ (800d46c <prvInsertBlockIntoFreeList+0xac>)
 800d3ca:	60fb      	str	r3, [r7, #12]
 800d3cc:	e002      	b.n	800d3d4 <prvInsertBlockIntoFreeList+0x14>
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	60fb      	str	r3, [r7, #12]
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	687a      	ldr	r2, [r7, #4]
 800d3da:	429a      	cmp	r2, r3
 800d3dc:	d8f7      	bhi.n	800d3ce <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	685b      	ldr	r3, [r3, #4]
 800d3e6:	68ba      	ldr	r2, [r7, #8]
 800d3e8:	4413      	add	r3, r2
 800d3ea:	687a      	ldr	r2, [r7, #4]
 800d3ec:	429a      	cmp	r2, r3
 800d3ee:	d108      	bne.n	800d402 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	685a      	ldr	r2, [r3, #4]
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	685b      	ldr	r3, [r3, #4]
 800d3f8:	441a      	add	r2, r3
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	685b      	ldr	r3, [r3, #4]
 800d40a:	68ba      	ldr	r2, [r7, #8]
 800d40c:	441a      	add	r2, r3
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	429a      	cmp	r2, r3
 800d414:	d118      	bne.n	800d448 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	681a      	ldr	r2, [r3, #0]
 800d41a:	4b15      	ldr	r3, [pc, #84]	@ (800d470 <prvInsertBlockIntoFreeList+0xb0>)
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	429a      	cmp	r2, r3
 800d420:	d00d      	beq.n	800d43e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	685a      	ldr	r2, [r3, #4]
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	685b      	ldr	r3, [r3, #4]
 800d42c:	441a      	add	r2, r3
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	681a      	ldr	r2, [r3, #0]
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	601a      	str	r2, [r3, #0]
 800d43c:	e008      	b.n	800d450 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d43e:	4b0c      	ldr	r3, [pc, #48]	@ (800d470 <prvInsertBlockIntoFreeList+0xb0>)
 800d440:	681a      	ldr	r2, [r3, #0]
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	601a      	str	r2, [r3, #0]
 800d446:	e003      	b.n	800d450 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	681a      	ldr	r2, [r3, #0]
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d450:	68fa      	ldr	r2, [r7, #12]
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	429a      	cmp	r2, r3
 800d456:	d002      	beq.n	800d45e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	687a      	ldr	r2, [r7, #4]
 800d45c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d45e:	bf00      	nop
 800d460:	3714      	adds	r7, #20
 800d462:	46bd      	mov	sp, r7
 800d464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d468:	4770      	bx	lr
 800d46a:	bf00      	nop
 800d46c:	20009150 	.word	0x20009150
 800d470:	20009158 	.word	0x20009158

0800d474 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800d474:	b580      	push	{r7, lr}
 800d476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 800d478:	2200      	movs	r2, #0
 800d47a:	490e      	ldr	r1, [pc, #56]	@ (800d4b4 <MX_USB_HOST_Init+0x40>)
 800d47c:	480e      	ldr	r0, [pc, #56]	@ (800d4b8 <MX_USB_HOST_Init+0x44>)
 800d47e:	f7fb f8d3 	bl	8008628 <USBH_Init>
 800d482:	4603      	mov	r3, r0
 800d484:	2b00      	cmp	r3, #0
 800d486:	d001      	beq.n	800d48c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800d488:	f7f3 fc4c 	bl	8000d24 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_CDC_CLASS) != USBH_OK)
 800d48c:	490b      	ldr	r1, [pc, #44]	@ (800d4bc <MX_USB_HOST_Init+0x48>)
 800d48e:	480a      	ldr	r0, [pc, #40]	@ (800d4b8 <MX_USB_HOST_Init+0x44>)
 800d490:	f7fb f999 	bl	80087c6 <USBH_RegisterClass>
 800d494:	4603      	mov	r3, r0
 800d496:	2b00      	cmp	r3, #0
 800d498:	d001      	beq.n	800d49e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800d49a:	f7f3 fc43 	bl	8000d24 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 800d49e:	4806      	ldr	r0, [pc, #24]	@ (800d4b8 <MX_USB_HOST_Init+0x44>)
 800d4a0:	f7fb fa1d 	bl	80088de <USBH_Start>
 800d4a4:	4603      	mov	r3, r0
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d001      	beq.n	800d4ae <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800d4aa:	f7f3 fc3b 	bl	8000d24 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800d4ae:	bf00      	nop
 800d4b0:	bd80      	pop	{r7, pc}
 800d4b2:	bf00      	nop
 800d4b4:	0800d4c1 	.word	0x0800d4c1
 800d4b8:	20009170 	.word	0x20009170
 800d4bc:	2000000c 	.word	0x2000000c

0800d4c0 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800d4c0:	b480      	push	{r7}
 800d4c2:	b083      	sub	sp, #12
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	6078      	str	r0, [r7, #4]
 800d4c8:	460b      	mov	r3, r1
 800d4ca:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800d4cc:	78fb      	ldrb	r3, [r7, #3]
 800d4ce:	3b01      	subs	r3, #1
 800d4d0:	2b04      	cmp	r3, #4
 800d4d2:	d819      	bhi.n	800d508 <USBH_UserProcess+0x48>
 800d4d4:	a201      	add	r2, pc, #4	@ (adr r2, 800d4dc <USBH_UserProcess+0x1c>)
 800d4d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4da:	bf00      	nop
 800d4dc:	0800d509 	.word	0x0800d509
 800d4e0:	0800d4f9 	.word	0x0800d4f9
 800d4e4:	0800d509 	.word	0x0800d509
 800d4e8:	0800d501 	.word	0x0800d501
 800d4ec:	0800d4f1 	.word	0x0800d4f1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800d4f0:	4b09      	ldr	r3, [pc, #36]	@ (800d518 <USBH_UserProcess+0x58>)
 800d4f2:	2203      	movs	r2, #3
 800d4f4:	701a      	strb	r2, [r3, #0]
  break;
 800d4f6:	e008      	b.n	800d50a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800d4f8:	4b07      	ldr	r3, [pc, #28]	@ (800d518 <USBH_UserProcess+0x58>)
 800d4fa:	2202      	movs	r2, #2
 800d4fc:	701a      	strb	r2, [r3, #0]
  break;
 800d4fe:	e004      	b.n	800d50a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800d500:	4b05      	ldr	r3, [pc, #20]	@ (800d518 <USBH_UserProcess+0x58>)
 800d502:	2201      	movs	r2, #1
 800d504:	701a      	strb	r2, [r3, #0]
  break;
 800d506:	e000      	b.n	800d50a <USBH_UserProcess+0x4a>

  default:
  break;
 800d508:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800d50a:	bf00      	nop
 800d50c:	370c      	adds	r7, #12
 800d50e:	46bd      	mov	sp, r7
 800d510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d514:	4770      	bx	lr
 800d516:	bf00      	nop
 800d518:	20009554 	.word	0x20009554

0800d51c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800d51c:	b580      	push	{r7, lr}
 800d51e:	b08a      	sub	sp, #40	@ 0x28
 800d520:	af00      	add	r7, sp, #0
 800d522:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d524:	f107 0314 	add.w	r3, r7, #20
 800d528:	2200      	movs	r2, #0
 800d52a:	601a      	str	r2, [r3, #0]
 800d52c:	605a      	str	r2, [r3, #4]
 800d52e:	609a      	str	r2, [r3, #8]
 800d530:	60da      	str	r2, [r3, #12]
 800d532:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	4a24      	ldr	r2, [pc, #144]	@ (800d5cc <HAL_HCD_MspInit+0xb0>)
 800d53a:	4293      	cmp	r3, r2
 800d53c:	d141      	bne.n	800d5c2 <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d53e:	2300      	movs	r3, #0
 800d540:	613b      	str	r3, [r7, #16]
 800d542:	4b23      	ldr	r3, [pc, #140]	@ (800d5d0 <HAL_HCD_MspInit+0xb4>)
 800d544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d546:	4a22      	ldr	r2, [pc, #136]	@ (800d5d0 <HAL_HCD_MspInit+0xb4>)
 800d548:	f043 0302 	orr.w	r3, r3, #2
 800d54c:	6313      	str	r3, [r2, #48]	@ 0x30
 800d54e:	4b20      	ldr	r3, [pc, #128]	@ (800d5d0 <HAL_HCD_MspInit+0xb4>)
 800d550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d552:	f003 0302 	and.w	r3, r3, #2
 800d556:	613b      	str	r3, [r7, #16]
 800d558:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 800d55a:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 800d55e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d560:	2302      	movs	r3, #2
 800d562:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d564:	2300      	movs	r3, #0
 800d566:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d568:	2300      	movs	r3, #0
 800d56a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800d56c:	230c      	movs	r3, #12
 800d56e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d570:	f107 0314 	add.w	r3, r7, #20
 800d574:	4619      	mov	r1, r3
 800d576:	4817      	ldr	r0, [pc, #92]	@ (800d5d4 <HAL_HCD_MspInit+0xb8>)
 800d578:	f7f4 fbba 	bl	8001cf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800d57c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800d580:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d582:	2300      	movs	r3, #0
 800d584:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d586:	2300      	movs	r3, #0
 800d588:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800d58a:	f107 0314 	add.w	r3, r7, #20
 800d58e:	4619      	mov	r1, r3
 800d590:	4810      	ldr	r0, [pc, #64]	@ (800d5d4 <HAL_HCD_MspInit+0xb8>)
 800d592:	f7f4 fbad 	bl	8001cf0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800d596:	2300      	movs	r3, #0
 800d598:	60fb      	str	r3, [r7, #12]
 800d59a:	4b0d      	ldr	r3, [pc, #52]	@ (800d5d0 <HAL_HCD_MspInit+0xb4>)
 800d59c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d59e:	4a0c      	ldr	r2, [pc, #48]	@ (800d5d0 <HAL_HCD_MspInit+0xb4>)
 800d5a0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800d5a4:	6313      	str	r3, [r2, #48]	@ 0x30
 800d5a6:	4b0a      	ldr	r3, [pc, #40]	@ (800d5d0 <HAL_HCD_MspInit+0xb4>)
 800d5a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d5aa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d5ae:	60fb      	str	r3, [r7, #12]
 800d5b0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 800d5b2:	2200      	movs	r2, #0
 800d5b4:	2105      	movs	r1, #5
 800d5b6:	204d      	movs	r0, #77	@ 0x4d
 800d5b8:	f7f4 f968 	bl	800188c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800d5bc:	204d      	movs	r0, #77	@ 0x4d
 800d5be:	f7f4 f981 	bl	80018c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800d5c2:	bf00      	nop
 800d5c4:	3728      	adds	r7, #40	@ 0x28
 800d5c6:	46bd      	mov	sp, r7
 800d5c8:	bd80      	pop	{r7, pc}
 800d5ca:	bf00      	nop
 800d5cc:	40040000 	.word	0x40040000
 800d5d0:	40023800 	.word	0x40023800
 800d5d4:	40020400 	.word	0x40020400

0800d5d8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800d5d8:	b580      	push	{r7, lr}
 800d5da:	b082      	sub	sp, #8
 800d5dc:	af00      	add	r7, sp, #0
 800d5de:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800d5e6:	4618      	mov	r0, r3
 800d5e8:	f7fb fe2b 	bl	8009242 <USBH_LL_IncTimer>
}
 800d5ec:	bf00      	nop
 800d5ee:	3708      	adds	r7, #8
 800d5f0:	46bd      	mov	sp, r7
 800d5f2:	bd80      	pop	{r7, pc}

0800d5f4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800d5f4:	b580      	push	{r7, lr}
 800d5f6:	b082      	sub	sp, #8
 800d5f8:	af00      	add	r7, sp, #0
 800d5fa:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800d602:	4618      	mov	r0, r3
 800d604:	f7fb fe6f 	bl	80092e6 <USBH_LL_Connect>
}
 800d608:	bf00      	nop
 800d60a:	3708      	adds	r7, #8
 800d60c:	46bd      	mov	sp, r7
 800d60e:	bd80      	pop	{r7, pc}

0800d610 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800d610:	b580      	push	{r7, lr}
 800d612:	b082      	sub	sp, #8
 800d614:	af00      	add	r7, sp, #0
 800d616:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800d61e:	4618      	mov	r0, r3
 800d620:	f7fb fe84 	bl	800932c <USBH_LL_Disconnect>
}
 800d624:	bf00      	nop
 800d626:	3708      	adds	r7, #8
 800d628:	46bd      	mov	sp, r7
 800d62a:	bd80      	pop	{r7, pc}

0800d62c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800d62c:	b580      	push	{r7, lr}
 800d62e:	b082      	sub	sp, #8
 800d630:	af00      	add	r7, sp, #0
 800d632:	6078      	str	r0, [r7, #4]
 800d634:	460b      	mov	r3, r1
 800d636:	70fb      	strb	r3, [r7, #3]
 800d638:	4613      	mov	r3, r2
 800d63a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800d642:	4618      	mov	r0, r3
 800d644:	f7fb febb 	bl	80093be <USBH_LL_NotifyURBChange>
#endif
}
 800d648:	bf00      	nop
 800d64a:	3708      	adds	r7, #8
 800d64c:	46bd      	mov	sp, r7
 800d64e:	bd80      	pop	{r7, pc}

0800d650 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800d650:	b580      	push	{r7, lr}
 800d652:	b082      	sub	sp, #8
 800d654:	af00      	add	r7, sp, #0
 800d656:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800d65e:	4618      	mov	r0, r3
 800d660:	f7fb fe19 	bl	8009296 <USBH_LL_PortEnabled>
}
 800d664:	bf00      	nop
 800d666:	3708      	adds	r7, #8
 800d668:	46bd      	mov	sp, r7
 800d66a:	bd80      	pop	{r7, pc}

0800d66c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800d66c:	b580      	push	{r7, lr}
 800d66e:	b082      	sub	sp, #8
 800d670:	af00      	add	r7, sp, #0
 800d672:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800d67a:	4618      	mov	r0, r3
 800d67c:	f7fb fe25 	bl	80092ca <USBH_LL_PortDisabled>
}
 800d680:	bf00      	nop
 800d682:	3708      	adds	r7, #8
 800d684:	46bd      	mov	sp, r7
 800d686:	bd80      	pop	{r7, pc}

0800d688 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800d688:	b580      	push	{r7, lr}
 800d68a:	b082      	sub	sp, #8
 800d68c:	af00      	add	r7, sp, #0
 800d68e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800d696:	2b00      	cmp	r3, #0
 800d698:	d132      	bne.n	800d700 <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 800d69a:	4a1c      	ldr	r2, [pc, #112]	@ (800d70c <USBH_LL_Init+0x84>)
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_HS;
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	4a19      	ldr	r2, [pc, #100]	@ (800d70c <USBH_LL_Init+0x84>)
 800d6a6:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800d6aa:	4b18      	ldr	r3, [pc, #96]	@ (800d70c <USBH_LL_Init+0x84>)
 800d6ac:	4a18      	ldr	r2, [pc, #96]	@ (800d710 <USBH_LL_Init+0x88>)
 800d6ae:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 800d6b0:	4b16      	ldr	r3, [pc, #88]	@ (800d70c <USBH_LL_Init+0x84>)
 800d6b2:	220c      	movs	r2, #12
 800d6b4:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 800d6b6:	4b15      	ldr	r3, [pc, #84]	@ (800d70c <USBH_LL_Init+0x84>)
 800d6b8:	2201      	movs	r2, #1
 800d6ba:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800d6bc:	4b13      	ldr	r3, [pc, #76]	@ (800d70c <USBH_LL_Init+0x84>)
 800d6be:	2200      	movs	r2, #0
 800d6c0:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800d6c2:	4b12      	ldr	r3, [pc, #72]	@ (800d70c <USBH_LL_Init+0x84>)
 800d6c4:	2202      	movs	r2, #2
 800d6c6:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800d6c8:	4b10      	ldr	r3, [pc, #64]	@ (800d70c <USBH_LL_Init+0x84>)
 800d6ca:	2200      	movs	r2, #0
 800d6cc:	729a      	strb	r2, [r3, #10]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800d6ce:	4b0f      	ldr	r3, [pc, #60]	@ (800d70c <USBH_LL_Init+0x84>)
 800d6d0:	2200      	movs	r2, #0
 800d6d2:	72da      	strb	r2, [r3, #11]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800d6d4:	4b0d      	ldr	r3, [pc, #52]	@ (800d70c <USBH_LL_Init+0x84>)
 800d6d6:	2200      	movs	r2, #0
 800d6d8:	739a      	strb	r2, [r3, #14]
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800d6da:	4b0c      	ldr	r3, [pc, #48]	@ (800d70c <USBH_LL_Init+0x84>)
 800d6dc:	2200      	movs	r2, #0
 800d6de:	741a      	strb	r2, [r3, #16]
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 800d6e0:	480a      	ldr	r0, [pc, #40]	@ (800d70c <USBH_LL_Init+0x84>)
 800d6e2:	f7f4 fce4 	bl	80020ae <HAL_HCD_Init>
 800d6e6:	4603      	mov	r3, r0
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d001      	beq.n	800d6f0 <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 800d6ec:	f7f3 fb1a 	bl	8000d24 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 800d6f0:	4806      	ldr	r0, [pc, #24]	@ (800d70c <USBH_LL_Init+0x84>)
 800d6f2:	f7f5 f945 	bl	8002980 <HAL_HCD_GetCurrentFrame>
 800d6f6:	4603      	mov	r3, r0
 800d6f8:	4619      	mov	r1, r3
 800d6fa:	6878      	ldr	r0, [r7, #4]
 800d6fc:	f7fb fd92 	bl	8009224 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800d700:	2300      	movs	r3, #0
}
 800d702:	4618      	mov	r0, r3
 800d704:	3708      	adds	r7, #8
 800d706:	46bd      	mov	sp, r7
 800d708:	bd80      	pop	{r7, pc}
 800d70a:	bf00      	nop
 800d70c:	20009558 	.word	0x20009558
 800d710:	40040000 	.word	0x40040000

0800d714 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800d714:	b580      	push	{r7, lr}
 800d716:	b084      	sub	sp, #16
 800d718:	af00      	add	r7, sp, #0
 800d71a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d71c:	2300      	movs	r3, #0
 800d71e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d720:	2300      	movs	r3, #0
 800d722:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800d72a:	4618      	mov	r0, r3
 800d72c:	f7f5 f8b0 	bl	8002890 <HAL_HCD_Start>
 800d730:	4603      	mov	r3, r0
 800d732:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d734:	7bfb      	ldrb	r3, [r7, #15]
 800d736:	4618      	mov	r0, r3
 800d738:	f000 f95e 	bl	800d9f8 <USBH_Get_USB_Status>
 800d73c:	4603      	mov	r3, r0
 800d73e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d740:	7bbb      	ldrb	r3, [r7, #14]
}
 800d742:	4618      	mov	r0, r3
 800d744:	3710      	adds	r7, #16
 800d746:	46bd      	mov	sp, r7
 800d748:	bd80      	pop	{r7, pc}

0800d74a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800d74a:	b580      	push	{r7, lr}
 800d74c:	b084      	sub	sp, #16
 800d74e:	af00      	add	r7, sp, #0
 800d750:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d752:	2300      	movs	r3, #0
 800d754:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d756:	2300      	movs	r3, #0
 800d758:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800d760:	4618      	mov	r0, r3
 800d762:	f7f5 f8b8 	bl	80028d6 <HAL_HCD_Stop>
 800d766:	4603      	mov	r3, r0
 800d768:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d76a:	7bfb      	ldrb	r3, [r7, #15]
 800d76c:	4618      	mov	r0, r3
 800d76e:	f000 f943 	bl	800d9f8 <USBH_Get_USB_Status>
 800d772:	4603      	mov	r3, r0
 800d774:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d776:	7bbb      	ldrb	r3, [r7, #14]
}
 800d778:	4618      	mov	r0, r3
 800d77a:	3710      	adds	r7, #16
 800d77c:	46bd      	mov	sp, r7
 800d77e:	bd80      	pop	{r7, pc}

0800d780 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800d780:	b580      	push	{r7, lr}
 800d782:	b084      	sub	sp, #16
 800d784:	af00      	add	r7, sp, #0
 800d786:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800d788:	2301      	movs	r3, #1
 800d78a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800d792:	4618      	mov	r0, r3
 800d794:	f7f5 f902 	bl	800299c <HAL_HCD_GetCurrentSpeed>
 800d798:	4603      	mov	r3, r0
 800d79a:	2b02      	cmp	r3, #2
 800d79c:	d00c      	beq.n	800d7b8 <USBH_LL_GetSpeed+0x38>
 800d79e:	2b02      	cmp	r3, #2
 800d7a0:	d80d      	bhi.n	800d7be <USBH_LL_GetSpeed+0x3e>
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d002      	beq.n	800d7ac <USBH_LL_GetSpeed+0x2c>
 800d7a6:	2b01      	cmp	r3, #1
 800d7a8:	d003      	beq.n	800d7b2 <USBH_LL_GetSpeed+0x32>
 800d7aa:	e008      	b.n	800d7be <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800d7ac:	2300      	movs	r3, #0
 800d7ae:	73fb      	strb	r3, [r7, #15]
    break;
 800d7b0:	e008      	b.n	800d7c4 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800d7b2:	2301      	movs	r3, #1
 800d7b4:	73fb      	strb	r3, [r7, #15]
    break;
 800d7b6:	e005      	b.n	800d7c4 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800d7b8:	2302      	movs	r3, #2
 800d7ba:	73fb      	strb	r3, [r7, #15]
    break;
 800d7bc:	e002      	b.n	800d7c4 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800d7be:	2301      	movs	r3, #1
 800d7c0:	73fb      	strb	r3, [r7, #15]
    break;
 800d7c2:	bf00      	nop
  }
  return  speed;
 800d7c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7c6:	4618      	mov	r0, r3
 800d7c8:	3710      	adds	r7, #16
 800d7ca:	46bd      	mov	sp, r7
 800d7cc:	bd80      	pop	{r7, pc}

0800d7ce <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800d7ce:	b580      	push	{r7, lr}
 800d7d0:	b084      	sub	sp, #16
 800d7d2:	af00      	add	r7, sp, #0
 800d7d4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d7d6:	2300      	movs	r3, #0
 800d7d8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d7da:	2300      	movs	r3, #0
 800d7dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800d7e4:	4618      	mov	r0, r3
 800d7e6:	f7f5 f893 	bl	8002910 <HAL_HCD_ResetPort>
 800d7ea:	4603      	mov	r3, r0
 800d7ec:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d7ee:	7bfb      	ldrb	r3, [r7, #15]
 800d7f0:	4618      	mov	r0, r3
 800d7f2:	f000 f901 	bl	800d9f8 <USBH_Get_USB_Status>
 800d7f6:	4603      	mov	r3, r0
 800d7f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d7fa:	7bbb      	ldrb	r3, [r7, #14]
}
 800d7fc:	4618      	mov	r0, r3
 800d7fe:	3710      	adds	r7, #16
 800d800:	46bd      	mov	sp, r7
 800d802:	bd80      	pop	{r7, pc}

0800d804 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d804:	b580      	push	{r7, lr}
 800d806:	b082      	sub	sp, #8
 800d808:	af00      	add	r7, sp, #0
 800d80a:	6078      	str	r0, [r7, #4]
 800d80c:	460b      	mov	r3, r1
 800d80e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800d816:	78fa      	ldrb	r2, [r7, #3]
 800d818:	4611      	mov	r1, r2
 800d81a:	4618      	mov	r0, r3
 800d81c:	f7f5 f89b 	bl	8002956 <HAL_HCD_HC_GetXferCount>
 800d820:	4603      	mov	r3, r0
}
 800d822:	4618      	mov	r0, r3
 800d824:	3708      	adds	r7, #8
 800d826:	46bd      	mov	sp, r7
 800d828:	bd80      	pop	{r7, pc}

0800d82a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800d82a:	b590      	push	{r4, r7, lr}
 800d82c:	b089      	sub	sp, #36	@ 0x24
 800d82e:	af04      	add	r7, sp, #16
 800d830:	6078      	str	r0, [r7, #4]
 800d832:	4608      	mov	r0, r1
 800d834:	4611      	mov	r1, r2
 800d836:	461a      	mov	r2, r3
 800d838:	4603      	mov	r3, r0
 800d83a:	70fb      	strb	r3, [r7, #3]
 800d83c:	460b      	mov	r3, r1
 800d83e:	70bb      	strb	r3, [r7, #2]
 800d840:	4613      	mov	r3, r2
 800d842:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d844:	2300      	movs	r3, #0
 800d846:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d848:	2300      	movs	r3, #0
 800d84a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800d852:	787c      	ldrb	r4, [r7, #1]
 800d854:	78ba      	ldrb	r2, [r7, #2]
 800d856:	78f9      	ldrb	r1, [r7, #3]
 800d858:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800d85a:	9302      	str	r3, [sp, #8]
 800d85c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800d860:	9301      	str	r3, [sp, #4]
 800d862:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d866:	9300      	str	r3, [sp, #0]
 800d868:	4623      	mov	r3, r4
 800d86a:	f7f4 fc87 	bl	800217c <HAL_HCD_HC_Init>
 800d86e:	4603      	mov	r3, r0
 800d870:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800d872:	7bfb      	ldrb	r3, [r7, #15]
 800d874:	4618      	mov	r0, r3
 800d876:	f000 f8bf 	bl	800d9f8 <USBH_Get_USB_Status>
 800d87a:	4603      	mov	r3, r0
 800d87c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d87e:	7bbb      	ldrb	r3, [r7, #14]
}
 800d880:	4618      	mov	r0, r3
 800d882:	3714      	adds	r7, #20
 800d884:	46bd      	mov	sp, r7
 800d886:	bd90      	pop	{r4, r7, pc}

0800d888 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d888:	b580      	push	{r7, lr}
 800d88a:	b084      	sub	sp, #16
 800d88c:	af00      	add	r7, sp, #0
 800d88e:	6078      	str	r0, [r7, #4]
 800d890:	460b      	mov	r3, r1
 800d892:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d894:	2300      	movs	r3, #0
 800d896:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d898:	2300      	movs	r3, #0
 800d89a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800d8a2:	78fa      	ldrb	r2, [r7, #3]
 800d8a4:	4611      	mov	r1, r2
 800d8a6:	4618      	mov	r0, r3
 800d8a8:	f7f4 fd20 	bl	80022ec <HAL_HCD_HC_Halt>
 800d8ac:	4603      	mov	r3, r0
 800d8ae:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d8b0:	7bfb      	ldrb	r3, [r7, #15]
 800d8b2:	4618      	mov	r0, r3
 800d8b4:	f000 f8a0 	bl	800d9f8 <USBH_Get_USB_Status>
 800d8b8:	4603      	mov	r3, r0
 800d8ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d8bc:	7bbb      	ldrb	r3, [r7, #14]
}
 800d8be:	4618      	mov	r0, r3
 800d8c0:	3710      	adds	r7, #16
 800d8c2:	46bd      	mov	sp, r7
 800d8c4:	bd80      	pop	{r7, pc}

0800d8c6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800d8c6:	b590      	push	{r4, r7, lr}
 800d8c8:	b089      	sub	sp, #36	@ 0x24
 800d8ca:	af04      	add	r7, sp, #16
 800d8cc:	6078      	str	r0, [r7, #4]
 800d8ce:	4608      	mov	r0, r1
 800d8d0:	4611      	mov	r1, r2
 800d8d2:	461a      	mov	r2, r3
 800d8d4:	4603      	mov	r3, r0
 800d8d6:	70fb      	strb	r3, [r7, #3]
 800d8d8:	460b      	mov	r3, r1
 800d8da:	70bb      	strb	r3, [r7, #2]
 800d8dc:	4613      	mov	r3, r2
 800d8de:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d8e0:	2300      	movs	r3, #0
 800d8e2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d8e4:	2300      	movs	r3, #0
 800d8e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800d8ee:	787c      	ldrb	r4, [r7, #1]
 800d8f0:	78ba      	ldrb	r2, [r7, #2]
 800d8f2:	78f9      	ldrb	r1, [r7, #3]
 800d8f4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800d8f8:	9303      	str	r3, [sp, #12]
 800d8fa:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800d8fc:	9302      	str	r3, [sp, #8]
 800d8fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d900:	9301      	str	r3, [sp, #4]
 800d902:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d906:	9300      	str	r3, [sp, #0]
 800d908:	4623      	mov	r3, r4
 800d90a:	f7f4 fd13 	bl	8002334 <HAL_HCD_HC_SubmitRequest>
 800d90e:	4603      	mov	r3, r0
 800d910:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800d912:	7bfb      	ldrb	r3, [r7, #15]
 800d914:	4618      	mov	r0, r3
 800d916:	f000 f86f 	bl	800d9f8 <USBH_Get_USB_Status>
 800d91a:	4603      	mov	r3, r0
 800d91c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d91e:	7bbb      	ldrb	r3, [r7, #14]
}
 800d920:	4618      	mov	r0, r3
 800d922:	3714      	adds	r7, #20
 800d924:	46bd      	mov	sp, r7
 800d926:	bd90      	pop	{r4, r7, pc}

0800d928 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d928:	b580      	push	{r7, lr}
 800d92a:	b082      	sub	sp, #8
 800d92c:	af00      	add	r7, sp, #0
 800d92e:	6078      	str	r0, [r7, #4]
 800d930:	460b      	mov	r3, r1
 800d932:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800d93a:	78fa      	ldrb	r2, [r7, #3]
 800d93c:	4611      	mov	r1, r2
 800d93e:	4618      	mov	r0, r3
 800d940:	f7f4 fff4 	bl	800292c <HAL_HCD_HC_GetURBState>
 800d944:	4603      	mov	r3, r0
}
 800d946:	4618      	mov	r0, r3
 800d948:	3708      	adds	r7, #8
 800d94a:	46bd      	mov	sp, r7
 800d94c:	bd80      	pop	{r7, pc}

0800d94e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800d94e:	b580      	push	{r7, lr}
 800d950:	b082      	sub	sp, #8
 800d952:	af00      	add	r7, sp, #0
 800d954:	6078      	str	r0, [r7, #4]
 800d956:	460b      	mov	r3, r1
 800d958:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800d960:	2b00      	cmp	r3, #0
 800d962:	d103      	bne.n	800d96c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 800d964:	78fb      	ldrb	r3, [r7, #3]
 800d966:	4618      	mov	r0, r3
 800d968:	f000 f872 	bl	800da50 <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800d96c:	20c8      	movs	r0, #200	@ 0xc8
 800d96e:	f7f3 feb1 	bl	80016d4 <HAL_Delay>
  return USBH_OK;
 800d972:	2300      	movs	r3, #0
}
 800d974:	4618      	mov	r0, r3
 800d976:	3708      	adds	r7, #8
 800d978:	46bd      	mov	sp, r7
 800d97a:	bd80      	pop	{r7, pc}

0800d97c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800d97c:	b480      	push	{r7}
 800d97e:	b085      	sub	sp, #20
 800d980:	af00      	add	r7, sp, #0
 800d982:	6078      	str	r0, [r7, #4]
 800d984:	460b      	mov	r3, r1
 800d986:	70fb      	strb	r3, [r7, #3]
 800d988:	4613      	mov	r3, r2
 800d98a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800d992:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800d994:	78fa      	ldrb	r2, [r7, #3]
 800d996:	68f9      	ldr	r1, [r7, #12]
 800d998:	4613      	mov	r3, r2
 800d99a:	011b      	lsls	r3, r3, #4
 800d99c:	1a9b      	subs	r3, r3, r2
 800d99e:	009b      	lsls	r3, r3, #2
 800d9a0:	440b      	add	r3, r1
 800d9a2:	3317      	adds	r3, #23
 800d9a4:	781b      	ldrb	r3, [r3, #0]
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d00a      	beq.n	800d9c0 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800d9aa:	78fa      	ldrb	r2, [r7, #3]
 800d9ac:	68f9      	ldr	r1, [r7, #12]
 800d9ae:	4613      	mov	r3, r2
 800d9b0:	011b      	lsls	r3, r3, #4
 800d9b2:	1a9b      	subs	r3, r3, r2
 800d9b4:	009b      	lsls	r3, r3, #2
 800d9b6:	440b      	add	r3, r1
 800d9b8:	333c      	adds	r3, #60	@ 0x3c
 800d9ba:	78ba      	ldrb	r2, [r7, #2]
 800d9bc:	701a      	strb	r2, [r3, #0]
 800d9be:	e009      	b.n	800d9d4 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800d9c0:	78fa      	ldrb	r2, [r7, #3]
 800d9c2:	68f9      	ldr	r1, [r7, #12]
 800d9c4:	4613      	mov	r3, r2
 800d9c6:	011b      	lsls	r3, r3, #4
 800d9c8:	1a9b      	subs	r3, r3, r2
 800d9ca:	009b      	lsls	r3, r3, #2
 800d9cc:	440b      	add	r3, r1
 800d9ce:	333d      	adds	r3, #61	@ 0x3d
 800d9d0:	78ba      	ldrb	r2, [r7, #2]
 800d9d2:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800d9d4:	2300      	movs	r3, #0
}
 800d9d6:	4618      	mov	r0, r3
 800d9d8:	3714      	adds	r7, #20
 800d9da:	46bd      	mov	sp, r7
 800d9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9e0:	4770      	bx	lr

0800d9e2 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800d9e2:	b580      	push	{r7, lr}
 800d9e4:	b082      	sub	sp, #8
 800d9e6:	af00      	add	r7, sp, #0
 800d9e8:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800d9ea:	6878      	ldr	r0, [r7, #4]
 800d9ec:	f7f3 fe72 	bl	80016d4 <HAL_Delay>
}
 800d9f0:	bf00      	nop
 800d9f2:	3708      	adds	r7, #8
 800d9f4:	46bd      	mov	sp, r7
 800d9f6:	bd80      	pop	{r7, pc}

0800d9f8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d9f8:	b480      	push	{r7}
 800d9fa:	b085      	sub	sp, #20
 800d9fc:	af00      	add	r7, sp, #0
 800d9fe:	4603      	mov	r3, r0
 800da00:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800da02:	2300      	movs	r3, #0
 800da04:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800da06:	79fb      	ldrb	r3, [r7, #7]
 800da08:	2b03      	cmp	r3, #3
 800da0a:	d817      	bhi.n	800da3c <USBH_Get_USB_Status+0x44>
 800da0c:	a201      	add	r2, pc, #4	@ (adr r2, 800da14 <USBH_Get_USB_Status+0x1c>)
 800da0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da12:	bf00      	nop
 800da14:	0800da25 	.word	0x0800da25
 800da18:	0800da2b 	.word	0x0800da2b
 800da1c:	0800da31 	.word	0x0800da31
 800da20:	0800da37 	.word	0x0800da37
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800da24:	2300      	movs	r3, #0
 800da26:	73fb      	strb	r3, [r7, #15]
    break;
 800da28:	e00b      	b.n	800da42 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800da2a:	2302      	movs	r3, #2
 800da2c:	73fb      	strb	r3, [r7, #15]
    break;
 800da2e:	e008      	b.n	800da42 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800da30:	2301      	movs	r3, #1
 800da32:	73fb      	strb	r3, [r7, #15]
    break;
 800da34:	e005      	b.n	800da42 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800da36:	2302      	movs	r3, #2
 800da38:	73fb      	strb	r3, [r7, #15]
    break;
 800da3a:	e002      	b.n	800da42 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800da3c:	2302      	movs	r3, #2
 800da3e:	73fb      	strb	r3, [r7, #15]
    break;
 800da40:	bf00      	nop
  }
  return usb_status;
 800da42:	7bfb      	ldrb	r3, [r7, #15]
}
 800da44:	4618      	mov	r0, r3
 800da46:	3714      	adds	r7, #20
 800da48:	46bd      	mov	sp, r7
 800da4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da4e:	4770      	bx	lr

0800da50 <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 800da50:	b580      	push	{r7, lr}
 800da52:	b084      	sub	sp, #16
 800da54:	af00      	add	r7, sp, #0
 800da56:	4603      	mov	r3, r0
 800da58:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800da5a:	79fb      	ldrb	r3, [r7, #7]
 800da5c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 800da5e:	79fb      	ldrb	r3, [r7, #7]
 800da60:	2b00      	cmp	r3, #0
 800da62:	d102      	bne.n	800da6a <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800da64:	2301      	movs	r3, #1
 800da66:	73fb      	strb	r3, [r7, #15]
 800da68:	e001      	b.n	800da6e <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800da6a:	2300      	movs	r3, #0
 800da6c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 800da6e:	7bfb      	ldrb	r3, [r7, #15]
 800da70:	461a      	mov	r2, r3
 800da72:	2110      	movs	r1, #16
 800da74:	4803      	ldr	r0, [pc, #12]	@ (800da84 <MX_DriverVbusHS+0x34>)
 800da76:	f7f4 fae7 	bl	8002048 <HAL_GPIO_WritePin>
}
 800da7a:	bf00      	nop
 800da7c:	3710      	adds	r7, #16
 800da7e:	46bd      	mov	sp, r7
 800da80:	bd80      	pop	{r7, pc}
 800da82:	bf00      	nop
 800da84:	40020800 	.word	0x40020800

0800da88 <malloc>:
 800da88:	4b02      	ldr	r3, [pc, #8]	@ (800da94 <malloc+0xc>)
 800da8a:	4601      	mov	r1, r0
 800da8c:	6818      	ldr	r0, [r3, #0]
 800da8e:	f000 b82d 	b.w	800daec <_malloc_r>
 800da92:	bf00      	nop
 800da94:	20000030 	.word	0x20000030

0800da98 <free>:
 800da98:	4b02      	ldr	r3, [pc, #8]	@ (800daa4 <free+0xc>)
 800da9a:	4601      	mov	r1, r0
 800da9c:	6818      	ldr	r0, [r3, #0]
 800da9e:	f000 b959 	b.w	800dd54 <_free_r>
 800daa2:	bf00      	nop
 800daa4:	20000030 	.word	0x20000030

0800daa8 <sbrk_aligned>:
 800daa8:	b570      	push	{r4, r5, r6, lr}
 800daaa:	4e0f      	ldr	r6, [pc, #60]	@ (800dae8 <sbrk_aligned+0x40>)
 800daac:	460c      	mov	r4, r1
 800daae:	6831      	ldr	r1, [r6, #0]
 800dab0:	4605      	mov	r5, r0
 800dab2:	b911      	cbnz	r1, 800daba <sbrk_aligned+0x12>
 800dab4:	f000 f904 	bl	800dcc0 <_sbrk_r>
 800dab8:	6030      	str	r0, [r6, #0]
 800daba:	4621      	mov	r1, r4
 800dabc:	4628      	mov	r0, r5
 800dabe:	f000 f8ff 	bl	800dcc0 <_sbrk_r>
 800dac2:	1c43      	adds	r3, r0, #1
 800dac4:	d103      	bne.n	800dace <sbrk_aligned+0x26>
 800dac6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800daca:	4620      	mov	r0, r4
 800dacc:	bd70      	pop	{r4, r5, r6, pc}
 800dace:	1cc4      	adds	r4, r0, #3
 800dad0:	f024 0403 	bic.w	r4, r4, #3
 800dad4:	42a0      	cmp	r0, r4
 800dad6:	d0f8      	beq.n	800daca <sbrk_aligned+0x22>
 800dad8:	1a21      	subs	r1, r4, r0
 800dada:	4628      	mov	r0, r5
 800dadc:	f000 f8f0 	bl	800dcc0 <_sbrk_r>
 800dae0:	3001      	adds	r0, #1
 800dae2:	d1f2      	bne.n	800daca <sbrk_aligned+0x22>
 800dae4:	e7ef      	b.n	800dac6 <sbrk_aligned+0x1e>
 800dae6:	bf00      	nop
 800dae8:	20009938 	.word	0x20009938

0800daec <_malloc_r>:
 800daec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800daf0:	1ccd      	adds	r5, r1, #3
 800daf2:	f025 0503 	bic.w	r5, r5, #3
 800daf6:	3508      	adds	r5, #8
 800daf8:	2d0c      	cmp	r5, #12
 800dafa:	bf38      	it	cc
 800dafc:	250c      	movcc	r5, #12
 800dafe:	2d00      	cmp	r5, #0
 800db00:	4606      	mov	r6, r0
 800db02:	db01      	blt.n	800db08 <_malloc_r+0x1c>
 800db04:	42a9      	cmp	r1, r5
 800db06:	d904      	bls.n	800db12 <_malloc_r+0x26>
 800db08:	230c      	movs	r3, #12
 800db0a:	6033      	str	r3, [r6, #0]
 800db0c:	2000      	movs	r0, #0
 800db0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db12:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800dbe8 <_malloc_r+0xfc>
 800db16:	f000 f869 	bl	800dbec <__malloc_lock>
 800db1a:	f8d8 3000 	ldr.w	r3, [r8]
 800db1e:	461c      	mov	r4, r3
 800db20:	bb44      	cbnz	r4, 800db74 <_malloc_r+0x88>
 800db22:	4629      	mov	r1, r5
 800db24:	4630      	mov	r0, r6
 800db26:	f7ff ffbf 	bl	800daa8 <sbrk_aligned>
 800db2a:	1c43      	adds	r3, r0, #1
 800db2c:	4604      	mov	r4, r0
 800db2e:	d158      	bne.n	800dbe2 <_malloc_r+0xf6>
 800db30:	f8d8 4000 	ldr.w	r4, [r8]
 800db34:	4627      	mov	r7, r4
 800db36:	2f00      	cmp	r7, #0
 800db38:	d143      	bne.n	800dbc2 <_malloc_r+0xd6>
 800db3a:	2c00      	cmp	r4, #0
 800db3c:	d04b      	beq.n	800dbd6 <_malloc_r+0xea>
 800db3e:	6823      	ldr	r3, [r4, #0]
 800db40:	4639      	mov	r1, r7
 800db42:	4630      	mov	r0, r6
 800db44:	eb04 0903 	add.w	r9, r4, r3
 800db48:	f000 f8ba 	bl	800dcc0 <_sbrk_r>
 800db4c:	4581      	cmp	r9, r0
 800db4e:	d142      	bne.n	800dbd6 <_malloc_r+0xea>
 800db50:	6821      	ldr	r1, [r4, #0]
 800db52:	1a6d      	subs	r5, r5, r1
 800db54:	4629      	mov	r1, r5
 800db56:	4630      	mov	r0, r6
 800db58:	f7ff ffa6 	bl	800daa8 <sbrk_aligned>
 800db5c:	3001      	adds	r0, #1
 800db5e:	d03a      	beq.n	800dbd6 <_malloc_r+0xea>
 800db60:	6823      	ldr	r3, [r4, #0]
 800db62:	442b      	add	r3, r5
 800db64:	6023      	str	r3, [r4, #0]
 800db66:	f8d8 3000 	ldr.w	r3, [r8]
 800db6a:	685a      	ldr	r2, [r3, #4]
 800db6c:	bb62      	cbnz	r2, 800dbc8 <_malloc_r+0xdc>
 800db6e:	f8c8 7000 	str.w	r7, [r8]
 800db72:	e00f      	b.n	800db94 <_malloc_r+0xa8>
 800db74:	6822      	ldr	r2, [r4, #0]
 800db76:	1b52      	subs	r2, r2, r5
 800db78:	d420      	bmi.n	800dbbc <_malloc_r+0xd0>
 800db7a:	2a0b      	cmp	r2, #11
 800db7c:	d917      	bls.n	800dbae <_malloc_r+0xc2>
 800db7e:	1961      	adds	r1, r4, r5
 800db80:	42a3      	cmp	r3, r4
 800db82:	6025      	str	r5, [r4, #0]
 800db84:	bf18      	it	ne
 800db86:	6059      	strne	r1, [r3, #4]
 800db88:	6863      	ldr	r3, [r4, #4]
 800db8a:	bf08      	it	eq
 800db8c:	f8c8 1000 	streq.w	r1, [r8]
 800db90:	5162      	str	r2, [r4, r5]
 800db92:	604b      	str	r3, [r1, #4]
 800db94:	4630      	mov	r0, r6
 800db96:	f000 f82f 	bl	800dbf8 <__malloc_unlock>
 800db9a:	f104 000b 	add.w	r0, r4, #11
 800db9e:	1d23      	adds	r3, r4, #4
 800dba0:	f020 0007 	bic.w	r0, r0, #7
 800dba4:	1ac2      	subs	r2, r0, r3
 800dba6:	bf1c      	itt	ne
 800dba8:	1a1b      	subne	r3, r3, r0
 800dbaa:	50a3      	strne	r3, [r4, r2]
 800dbac:	e7af      	b.n	800db0e <_malloc_r+0x22>
 800dbae:	6862      	ldr	r2, [r4, #4]
 800dbb0:	42a3      	cmp	r3, r4
 800dbb2:	bf0c      	ite	eq
 800dbb4:	f8c8 2000 	streq.w	r2, [r8]
 800dbb8:	605a      	strne	r2, [r3, #4]
 800dbba:	e7eb      	b.n	800db94 <_malloc_r+0xa8>
 800dbbc:	4623      	mov	r3, r4
 800dbbe:	6864      	ldr	r4, [r4, #4]
 800dbc0:	e7ae      	b.n	800db20 <_malloc_r+0x34>
 800dbc2:	463c      	mov	r4, r7
 800dbc4:	687f      	ldr	r7, [r7, #4]
 800dbc6:	e7b6      	b.n	800db36 <_malloc_r+0x4a>
 800dbc8:	461a      	mov	r2, r3
 800dbca:	685b      	ldr	r3, [r3, #4]
 800dbcc:	42a3      	cmp	r3, r4
 800dbce:	d1fb      	bne.n	800dbc8 <_malloc_r+0xdc>
 800dbd0:	2300      	movs	r3, #0
 800dbd2:	6053      	str	r3, [r2, #4]
 800dbd4:	e7de      	b.n	800db94 <_malloc_r+0xa8>
 800dbd6:	230c      	movs	r3, #12
 800dbd8:	6033      	str	r3, [r6, #0]
 800dbda:	4630      	mov	r0, r6
 800dbdc:	f000 f80c 	bl	800dbf8 <__malloc_unlock>
 800dbe0:	e794      	b.n	800db0c <_malloc_r+0x20>
 800dbe2:	6005      	str	r5, [r0, #0]
 800dbe4:	e7d6      	b.n	800db94 <_malloc_r+0xa8>
 800dbe6:	bf00      	nop
 800dbe8:	2000993c 	.word	0x2000993c

0800dbec <__malloc_lock>:
 800dbec:	4801      	ldr	r0, [pc, #4]	@ (800dbf4 <__malloc_lock+0x8>)
 800dbee:	f000 b8a1 	b.w	800dd34 <__retarget_lock_acquire_recursive>
 800dbf2:	bf00      	nop
 800dbf4:	20009a7c 	.word	0x20009a7c

0800dbf8 <__malloc_unlock>:
 800dbf8:	4801      	ldr	r0, [pc, #4]	@ (800dc00 <__malloc_unlock+0x8>)
 800dbfa:	f000 b89c 	b.w	800dd36 <__retarget_lock_release_recursive>
 800dbfe:	bf00      	nop
 800dc00:	20009a7c 	.word	0x20009a7c

0800dc04 <memset>:
 800dc04:	4402      	add	r2, r0
 800dc06:	4603      	mov	r3, r0
 800dc08:	4293      	cmp	r3, r2
 800dc0a:	d100      	bne.n	800dc0e <memset+0xa>
 800dc0c:	4770      	bx	lr
 800dc0e:	f803 1b01 	strb.w	r1, [r3], #1
 800dc12:	e7f9      	b.n	800dc08 <memset+0x4>

0800dc14 <_reclaim_reent>:
 800dc14:	4b29      	ldr	r3, [pc, #164]	@ (800dcbc <_reclaim_reent+0xa8>)
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	4283      	cmp	r3, r0
 800dc1a:	b570      	push	{r4, r5, r6, lr}
 800dc1c:	4604      	mov	r4, r0
 800dc1e:	d04b      	beq.n	800dcb8 <_reclaim_reent+0xa4>
 800dc20:	69c3      	ldr	r3, [r0, #28]
 800dc22:	b1ab      	cbz	r3, 800dc50 <_reclaim_reent+0x3c>
 800dc24:	68db      	ldr	r3, [r3, #12]
 800dc26:	b16b      	cbz	r3, 800dc44 <_reclaim_reent+0x30>
 800dc28:	2500      	movs	r5, #0
 800dc2a:	69e3      	ldr	r3, [r4, #28]
 800dc2c:	68db      	ldr	r3, [r3, #12]
 800dc2e:	5959      	ldr	r1, [r3, r5]
 800dc30:	2900      	cmp	r1, #0
 800dc32:	d13b      	bne.n	800dcac <_reclaim_reent+0x98>
 800dc34:	3504      	adds	r5, #4
 800dc36:	2d80      	cmp	r5, #128	@ 0x80
 800dc38:	d1f7      	bne.n	800dc2a <_reclaim_reent+0x16>
 800dc3a:	69e3      	ldr	r3, [r4, #28]
 800dc3c:	4620      	mov	r0, r4
 800dc3e:	68d9      	ldr	r1, [r3, #12]
 800dc40:	f000 f888 	bl	800dd54 <_free_r>
 800dc44:	69e3      	ldr	r3, [r4, #28]
 800dc46:	6819      	ldr	r1, [r3, #0]
 800dc48:	b111      	cbz	r1, 800dc50 <_reclaim_reent+0x3c>
 800dc4a:	4620      	mov	r0, r4
 800dc4c:	f000 f882 	bl	800dd54 <_free_r>
 800dc50:	6961      	ldr	r1, [r4, #20]
 800dc52:	b111      	cbz	r1, 800dc5a <_reclaim_reent+0x46>
 800dc54:	4620      	mov	r0, r4
 800dc56:	f000 f87d 	bl	800dd54 <_free_r>
 800dc5a:	69e1      	ldr	r1, [r4, #28]
 800dc5c:	b111      	cbz	r1, 800dc64 <_reclaim_reent+0x50>
 800dc5e:	4620      	mov	r0, r4
 800dc60:	f000 f878 	bl	800dd54 <_free_r>
 800dc64:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800dc66:	b111      	cbz	r1, 800dc6e <_reclaim_reent+0x5a>
 800dc68:	4620      	mov	r0, r4
 800dc6a:	f000 f873 	bl	800dd54 <_free_r>
 800dc6e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dc70:	b111      	cbz	r1, 800dc78 <_reclaim_reent+0x64>
 800dc72:	4620      	mov	r0, r4
 800dc74:	f000 f86e 	bl	800dd54 <_free_r>
 800dc78:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800dc7a:	b111      	cbz	r1, 800dc82 <_reclaim_reent+0x6e>
 800dc7c:	4620      	mov	r0, r4
 800dc7e:	f000 f869 	bl	800dd54 <_free_r>
 800dc82:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800dc84:	b111      	cbz	r1, 800dc8c <_reclaim_reent+0x78>
 800dc86:	4620      	mov	r0, r4
 800dc88:	f000 f864 	bl	800dd54 <_free_r>
 800dc8c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800dc8e:	b111      	cbz	r1, 800dc96 <_reclaim_reent+0x82>
 800dc90:	4620      	mov	r0, r4
 800dc92:	f000 f85f 	bl	800dd54 <_free_r>
 800dc96:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800dc98:	b111      	cbz	r1, 800dca0 <_reclaim_reent+0x8c>
 800dc9a:	4620      	mov	r0, r4
 800dc9c:	f000 f85a 	bl	800dd54 <_free_r>
 800dca0:	6a23      	ldr	r3, [r4, #32]
 800dca2:	b14b      	cbz	r3, 800dcb8 <_reclaim_reent+0xa4>
 800dca4:	4620      	mov	r0, r4
 800dca6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dcaa:	4718      	bx	r3
 800dcac:	680e      	ldr	r6, [r1, #0]
 800dcae:	4620      	mov	r0, r4
 800dcb0:	f000 f850 	bl	800dd54 <_free_r>
 800dcb4:	4631      	mov	r1, r6
 800dcb6:	e7bb      	b.n	800dc30 <_reclaim_reent+0x1c>
 800dcb8:	bd70      	pop	{r4, r5, r6, pc}
 800dcba:	bf00      	nop
 800dcbc:	20000030 	.word	0x20000030

0800dcc0 <_sbrk_r>:
 800dcc0:	b538      	push	{r3, r4, r5, lr}
 800dcc2:	4d06      	ldr	r5, [pc, #24]	@ (800dcdc <_sbrk_r+0x1c>)
 800dcc4:	2300      	movs	r3, #0
 800dcc6:	4604      	mov	r4, r0
 800dcc8:	4608      	mov	r0, r1
 800dcca:	602b      	str	r3, [r5, #0]
 800dccc:	f7f3 fc4e 	bl	800156c <_sbrk>
 800dcd0:	1c43      	adds	r3, r0, #1
 800dcd2:	d102      	bne.n	800dcda <_sbrk_r+0x1a>
 800dcd4:	682b      	ldr	r3, [r5, #0]
 800dcd6:	b103      	cbz	r3, 800dcda <_sbrk_r+0x1a>
 800dcd8:	6023      	str	r3, [r4, #0]
 800dcda:	bd38      	pop	{r3, r4, r5, pc}
 800dcdc:	20009a78 	.word	0x20009a78

0800dce0 <__errno>:
 800dce0:	4b01      	ldr	r3, [pc, #4]	@ (800dce8 <__errno+0x8>)
 800dce2:	6818      	ldr	r0, [r3, #0]
 800dce4:	4770      	bx	lr
 800dce6:	bf00      	nop
 800dce8:	20000030 	.word	0x20000030

0800dcec <__libc_init_array>:
 800dcec:	b570      	push	{r4, r5, r6, lr}
 800dcee:	4d0d      	ldr	r5, [pc, #52]	@ (800dd24 <__libc_init_array+0x38>)
 800dcf0:	4c0d      	ldr	r4, [pc, #52]	@ (800dd28 <__libc_init_array+0x3c>)
 800dcf2:	1b64      	subs	r4, r4, r5
 800dcf4:	10a4      	asrs	r4, r4, #2
 800dcf6:	2600      	movs	r6, #0
 800dcf8:	42a6      	cmp	r6, r4
 800dcfa:	d109      	bne.n	800dd10 <__libc_init_array+0x24>
 800dcfc:	4d0b      	ldr	r5, [pc, #44]	@ (800dd2c <__libc_init_array+0x40>)
 800dcfe:	4c0c      	ldr	r4, [pc, #48]	@ (800dd30 <__libc_init_array+0x44>)
 800dd00:	f000 f872 	bl	800dde8 <_init>
 800dd04:	1b64      	subs	r4, r4, r5
 800dd06:	10a4      	asrs	r4, r4, #2
 800dd08:	2600      	movs	r6, #0
 800dd0a:	42a6      	cmp	r6, r4
 800dd0c:	d105      	bne.n	800dd1a <__libc_init_array+0x2e>
 800dd0e:	bd70      	pop	{r4, r5, r6, pc}
 800dd10:	f855 3b04 	ldr.w	r3, [r5], #4
 800dd14:	4798      	blx	r3
 800dd16:	3601      	adds	r6, #1
 800dd18:	e7ee      	b.n	800dcf8 <__libc_init_array+0xc>
 800dd1a:	f855 3b04 	ldr.w	r3, [r5], #4
 800dd1e:	4798      	blx	r3
 800dd20:	3601      	adds	r6, #1
 800dd22:	e7f2      	b.n	800dd0a <__libc_init_array+0x1e>
 800dd24:	0800decc 	.word	0x0800decc
 800dd28:	0800decc 	.word	0x0800decc
 800dd2c:	0800decc 	.word	0x0800decc
 800dd30:	0800ded0 	.word	0x0800ded0

0800dd34 <__retarget_lock_acquire_recursive>:
 800dd34:	4770      	bx	lr

0800dd36 <__retarget_lock_release_recursive>:
 800dd36:	4770      	bx	lr

0800dd38 <memcpy>:
 800dd38:	440a      	add	r2, r1
 800dd3a:	4291      	cmp	r1, r2
 800dd3c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800dd40:	d100      	bne.n	800dd44 <memcpy+0xc>
 800dd42:	4770      	bx	lr
 800dd44:	b510      	push	{r4, lr}
 800dd46:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dd4a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dd4e:	4291      	cmp	r1, r2
 800dd50:	d1f9      	bne.n	800dd46 <memcpy+0xe>
 800dd52:	bd10      	pop	{r4, pc}

0800dd54 <_free_r>:
 800dd54:	b538      	push	{r3, r4, r5, lr}
 800dd56:	4605      	mov	r5, r0
 800dd58:	2900      	cmp	r1, #0
 800dd5a:	d041      	beq.n	800dde0 <_free_r+0x8c>
 800dd5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dd60:	1f0c      	subs	r4, r1, #4
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	bfb8      	it	lt
 800dd66:	18e4      	addlt	r4, r4, r3
 800dd68:	f7ff ff40 	bl	800dbec <__malloc_lock>
 800dd6c:	4a1d      	ldr	r2, [pc, #116]	@ (800dde4 <_free_r+0x90>)
 800dd6e:	6813      	ldr	r3, [r2, #0]
 800dd70:	b933      	cbnz	r3, 800dd80 <_free_r+0x2c>
 800dd72:	6063      	str	r3, [r4, #4]
 800dd74:	6014      	str	r4, [r2, #0]
 800dd76:	4628      	mov	r0, r5
 800dd78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dd7c:	f7ff bf3c 	b.w	800dbf8 <__malloc_unlock>
 800dd80:	42a3      	cmp	r3, r4
 800dd82:	d908      	bls.n	800dd96 <_free_r+0x42>
 800dd84:	6820      	ldr	r0, [r4, #0]
 800dd86:	1821      	adds	r1, r4, r0
 800dd88:	428b      	cmp	r3, r1
 800dd8a:	bf01      	itttt	eq
 800dd8c:	6819      	ldreq	r1, [r3, #0]
 800dd8e:	685b      	ldreq	r3, [r3, #4]
 800dd90:	1809      	addeq	r1, r1, r0
 800dd92:	6021      	streq	r1, [r4, #0]
 800dd94:	e7ed      	b.n	800dd72 <_free_r+0x1e>
 800dd96:	461a      	mov	r2, r3
 800dd98:	685b      	ldr	r3, [r3, #4]
 800dd9a:	b10b      	cbz	r3, 800dda0 <_free_r+0x4c>
 800dd9c:	42a3      	cmp	r3, r4
 800dd9e:	d9fa      	bls.n	800dd96 <_free_r+0x42>
 800dda0:	6811      	ldr	r1, [r2, #0]
 800dda2:	1850      	adds	r0, r2, r1
 800dda4:	42a0      	cmp	r0, r4
 800dda6:	d10b      	bne.n	800ddc0 <_free_r+0x6c>
 800dda8:	6820      	ldr	r0, [r4, #0]
 800ddaa:	4401      	add	r1, r0
 800ddac:	1850      	adds	r0, r2, r1
 800ddae:	4283      	cmp	r3, r0
 800ddb0:	6011      	str	r1, [r2, #0]
 800ddb2:	d1e0      	bne.n	800dd76 <_free_r+0x22>
 800ddb4:	6818      	ldr	r0, [r3, #0]
 800ddb6:	685b      	ldr	r3, [r3, #4]
 800ddb8:	6053      	str	r3, [r2, #4]
 800ddba:	4408      	add	r0, r1
 800ddbc:	6010      	str	r0, [r2, #0]
 800ddbe:	e7da      	b.n	800dd76 <_free_r+0x22>
 800ddc0:	d902      	bls.n	800ddc8 <_free_r+0x74>
 800ddc2:	230c      	movs	r3, #12
 800ddc4:	602b      	str	r3, [r5, #0]
 800ddc6:	e7d6      	b.n	800dd76 <_free_r+0x22>
 800ddc8:	6820      	ldr	r0, [r4, #0]
 800ddca:	1821      	adds	r1, r4, r0
 800ddcc:	428b      	cmp	r3, r1
 800ddce:	bf04      	itt	eq
 800ddd0:	6819      	ldreq	r1, [r3, #0]
 800ddd2:	685b      	ldreq	r3, [r3, #4]
 800ddd4:	6063      	str	r3, [r4, #4]
 800ddd6:	bf04      	itt	eq
 800ddd8:	1809      	addeq	r1, r1, r0
 800ddda:	6021      	streq	r1, [r4, #0]
 800dddc:	6054      	str	r4, [r2, #4]
 800ddde:	e7ca      	b.n	800dd76 <_free_r+0x22>
 800dde0:	bd38      	pop	{r3, r4, r5, pc}
 800dde2:	bf00      	nop
 800dde4:	2000993c 	.word	0x2000993c

0800dde8 <_init>:
 800dde8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddea:	bf00      	nop
 800ddec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ddee:	bc08      	pop	{r3}
 800ddf0:	469e      	mov	lr, r3
 800ddf2:	4770      	bx	lr

0800ddf4 <_fini>:
 800ddf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddf6:	bf00      	nop
 800ddf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ddfa:	bc08      	pop	{r3}
 800ddfc:	469e      	mov	lr, r3
 800ddfe:	4770      	bx	lr
