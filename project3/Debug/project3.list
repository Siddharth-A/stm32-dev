
project3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dbc4  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  0800dd74  0800dd74  0000ed74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dde4  0800dde4  0000f080  2**0
                  CONTENTS
  4 .ARM          00000008  0800dde4  0800dde4  0000ede4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ddec  0800ddec  0000f080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ddec  0800ddec  0000edec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ddf0  0800ddf0  0000edf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  0800ddf4  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f080  2**0
                  CONTENTS
 10 .bss          00009960  20000080  20000080  0000f080  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200099e0  200099e0  0000f080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f080  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002cf92  00000000  00000000  0000f0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000061d9  00000000  00000000  0003c042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002528  00000000  00000000  00042220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001cc8  00000000  00000000  00044748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b7b4  00000000  00000000  00046410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002da86  00000000  00000000  00071bc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f6a76  00000000  00000000  0009f64a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001960c0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a1d0  00000000  00000000  00196104  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  001a02d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000080 	.word	0x20000080
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800dd5c 	.word	0x0800dd5c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000084 	.word	0x20000084
 80001ec:	0800dd5c 	.word	0x0800dd5c

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000200:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000204:	f000 b96a 	b.w	80004dc <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	460c      	mov	r4, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14e      	bne.n	80002ca <__udivmoddi4+0xaa>
 800022c:	4694      	mov	ip, r2
 800022e:	458c      	cmp	ip, r1
 8000230:	4686      	mov	lr, r0
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	d962      	bls.n	80002fe <__udivmoddi4+0xde>
 8000238:	b14a      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023a:	f1c2 0320 	rsb	r3, r2, #32
 800023e:	4091      	lsls	r1, r2
 8000240:	fa20 f303 	lsr.w	r3, r0, r3
 8000244:	fa0c fc02 	lsl.w	ip, ip, r2
 8000248:	4319      	orrs	r1, r3
 800024a:	fa00 fe02 	lsl.w	lr, r0, r2
 800024e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000252:	fa1f f68c 	uxth.w	r6, ip
 8000256:	fbb1 f4f7 	udiv	r4, r1, r7
 800025a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025e:	fb07 1114 	mls	r1, r7, r4, r1
 8000262:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000266:	fb04 f106 	mul.w	r1, r4, r6
 800026a:	4299      	cmp	r1, r3
 800026c:	d90a      	bls.n	8000284 <__udivmoddi4+0x64>
 800026e:	eb1c 0303 	adds.w	r3, ip, r3
 8000272:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000276:	f080 8112 	bcs.w	800049e <__udivmoddi4+0x27e>
 800027a:	4299      	cmp	r1, r3
 800027c:	f240 810f 	bls.w	800049e <__udivmoddi4+0x27e>
 8000280:	3c02      	subs	r4, #2
 8000282:	4463      	add	r3, ip
 8000284:	1a59      	subs	r1, r3, r1
 8000286:	fa1f f38e 	uxth.w	r3, lr
 800028a:	fbb1 f0f7 	udiv	r0, r1, r7
 800028e:	fb07 1110 	mls	r1, r7, r0, r1
 8000292:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000296:	fb00 f606 	mul.w	r6, r0, r6
 800029a:	429e      	cmp	r6, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x94>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002a6:	f080 80fc 	bcs.w	80004a2 <__udivmoddi4+0x282>
 80002aa:	429e      	cmp	r6, r3
 80002ac:	f240 80f9 	bls.w	80004a2 <__udivmoddi4+0x282>
 80002b0:	4463      	add	r3, ip
 80002b2:	3802      	subs	r0, #2
 80002b4:	1b9b      	subs	r3, r3, r6
 80002b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ba:	2100      	movs	r1, #0
 80002bc:	b11d      	cbz	r5, 80002c6 <__udivmoddi4+0xa6>
 80002be:	40d3      	lsrs	r3, r2
 80002c0:	2200      	movs	r2, #0
 80002c2:	e9c5 3200 	strd	r3, r2, [r5]
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d905      	bls.n	80002da <__udivmoddi4+0xba>
 80002ce:	b10d      	cbz	r5, 80002d4 <__udivmoddi4+0xb4>
 80002d0:	e9c5 0100 	strd	r0, r1, [r5]
 80002d4:	2100      	movs	r1, #0
 80002d6:	4608      	mov	r0, r1
 80002d8:	e7f5      	b.n	80002c6 <__udivmoddi4+0xa6>
 80002da:	fab3 f183 	clz	r1, r3
 80002de:	2900      	cmp	r1, #0
 80002e0:	d146      	bne.n	8000370 <__udivmoddi4+0x150>
 80002e2:	42a3      	cmp	r3, r4
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xcc>
 80002e6:	4290      	cmp	r0, r2
 80002e8:	f0c0 80f0 	bcc.w	80004cc <__udivmoddi4+0x2ac>
 80002ec:	1a86      	subs	r6, r0, r2
 80002ee:	eb64 0303 	sbc.w	r3, r4, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	2d00      	cmp	r5, #0
 80002f6:	d0e6      	beq.n	80002c6 <__udivmoddi4+0xa6>
 80002f8:	e9c5 6300 	strd	r6, r3, [r5]
 80002fc:	e7e3      	b.n	80002c6 <__udivmoddi4+0xa6>
 80002fe:	2a00      	cmp	r2, #0
 8000300:	f040 8090 	bne.w	8000424 <__udivmoddi4+0x204>
 8000304:	eba1 040c 	sub.w	r4, r1, ip
 8000308:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800030c:	fa1f f78c 	uxth.w	r7, ip
 8000310:	2101      	movs	r1, #1
 8000312:	fbb4 f6f8 	udiv	r6, r4, r8
 8000316:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031a:	fb08 4416 	mls	r4, r8, r6, r4
 800031e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000322:	fb07 f006 	mul.w	r0, r7, r6
 8000326:	4298      	cmp	r0, r3
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x11c>
 800032a:	eb1c 0303 	adds.w	r3, ip, r3
 800032e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x11a>
 8000334:	4298      	cmp	r0, r3
 8000336:	f200 80cd 	bhi.w	80004d4 <__udivmoddi4+0x2b4>
 800033a:	4626      	mov	r6, r4
 800033c:	1a1c      	subs	r4, r3, r0
 800033e:	fa1f f38e 	uxth.w	r3, lr
 8000342:	fbb4 f0f8 	udiv	r0, r4, r8
 8000346:	fb08 4410 	mls	r4, r8, r0, r4
 800034a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034e:	fb00 f707 	mul.w	r7, r0, r7
 8000352:	429f      	cmp	r7, r3
 8000354:	d908      	bls.n	8000368 <__udivmoddi4+0x148>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x146>
 8000360:	429f      	cmp	r7, r3
 8000362:	f200 80b0 	bhi.w	80004c6 <__udivmoddi4+0x2a6>
 8000366:	4620      	mov	r0, r4
 8000368:	1bdb      	subs	r3, r3, r7
 800036a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0x9c>
 8000370:	f1c1 0620 	rsb	r6, r1, #32
 8000374:	408b      	lsls	r3, r1
 8000376:	fa22 f706 	lsr.w	r7, r2, r6
 800037a:	431f      	orrs	r7, r3
 800037c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000380:	fa04 f301 	lsl.w	r3, r4, r1
 8000384:	ea43 030c 	orr.w	r3, r3, ip
 8000388:	40f4      	lsrs	r4, r6
 800038a:	fa00 f801 	lsl.w	r8, r0, r1
 800038e:	0c38      	lsrs	r0, r7, #16
 8000390:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000394:	fbb4 fef0 	udiv	lr, r4, r0
 8000398:	fa1f fc87 	uxth.w	ip, r7
 800039c:	fb00 441e 	mls	r4, r0, lr, r4
 80003a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a4:	fb0e f90c 	mul.w	r9, lr, ip
 80003a8:	45a1      	cmp	r9, r4
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	d90a      	bls.n	80003c6 <__udivmoddi4+0x1a6>
 80003b0:	193c      	adds	r4, r7, r4
 80003b2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003b6:	f080 8084 	bcs.w	80004c2 <__udivmoddi4+0x2a2>
 80003ba:	45a1      	cmp	r9, r4
 80003bc:	f240 8081 	bls.w	80004c2 <__udivmoddi4+0x2a2>
 80003c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	eba4 0409 	sub.w	r4, r4, r9
 80003ca:	fa1f f983 	uxth.w	r9, r3
 80003ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80003d2:	fb00 4413 	mls	r4, r0, r3, r4
 80003d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003da:	fb03 fc0c 	mul.w	ip, r3, ip
 80003de:	45a4      	cmp	ip, r4
 80003e0:	d907      	bls.n	80003f2 <__udivmoddi4+0x1d2>
 80003e2:	193c      	adds	r4, r7, r4
 80003e4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003e8:	d267      	bcs.n	80004ba <__udivmoddi4+0x29a>
 80003ea:	45a4      	cmp	ip, r4
 80003ec:	d965      	bls.n	80004ba <__udivmoddi4+0x29a>
 80003ee:	3b02      	subs	r3, #2
 80003f0:	443c      	add	r4, r7
 80003f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f6:	fba0 9302 	umull	r9, r3, r0, r2
 80003fa:	eba4 040c 	sub.w	r4, r4, ip
 80003fe:	429c      	cmp	r4, r3
 8000400:	46ce      	mov	lr, r9
 8000402:	469c      	mov	ip, r3
 8000404:	d351      	bcc.n	80004aa <__udivmoddi4+0x28a>
 8000406:	d04e      	beq.n	80004a6 <__udivmoddi4+0x286>
 8000408:	b155      	cbz	r5, 8000420 <__udivmoddi4+0x200>
 800040a:	ebb8 030e 	subs.w	r3, r8, lr
 800040e:	eb64 040c 	sbc.w	r4, r4, ip
 8000412:	fa04 f606 	lsl.w	r6, r4, r6
 8000416:	40cb      	lsrs	r3, r1
 8000418:	431e      	orrs	r6, r3
 800041a:	40cc      	lsrs	r4, r1
 800041c:	e9c5 6400 	strd	r6, r4, [r5]
 8000420:	2100      	movs	r1, #0
 8000422:	e750      	b.n	80002c6 <__udivmoddi4+0xa6>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f103 	lsr.w	r1, r0, r3
 800042c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000430:	fa24 f303 	lsr.w	r3, r4, r3
 8000434:	4094      	lsls	r4, r2
 8000436:	430c      	orrs	r4, r1
 8000438:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800043c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000440:	fa1f f78c 	uxth.w	r7, ip
 8000444:	fbb3 f0f8 	udiv	r0, r3, r8
 8000448:	fb08 3110 	mls	r1, r8, r0, r3
 800044c:	0c23      	lsrs	r3, r4, #16
 800044e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000452:	fb00 f107 	mul.w	r1, r0, r7
 8000456:	4299      	cmp	r1, r3
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x24c>
 800045a:	eb1c 0303 	adds.w	r3, ip, r3
 800045e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000462:	d22c      	bcs.n	80004be <__udivmoddi4+0x29e>
 8000464:	4299      	cmp	r1, r3
 8000466:	d92a      	bls.n	80004be <__udivmoddi4+0x29e>
 8000468:	3802      	subs	r0, #2
 800046a:	4463      	add	r3, ip
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb3 f1f8 	udiv	r1, r3, r8
 8000474:	fb08 3311 	mls	r3, r8, r1, r3
 8000478:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800047c:	fb01 f307 	mul.w	r3, r1, r7
 8000480:	42a3      	cmp	r3, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x276>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800048c:	d213      	bcs.n	80004b6 <__udivmoddi4+0x296>
 800048e:	42a3      	cmp	r3, r4
 8000490:	d911      	bls.n	80004b6 <__udivmoddi4+0x296>
 8000492:	3902      	subs	r1, #2
 8000494:	4464      	add	r4, ip
 8000496:	1ae4      	subs	r4, r4, r3
 8000498:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800049c:	e739      	b.n	8000312 <__udivmoddi4+0xf2>
 800049e:	4604      	mov	r4, r0
 80004a0:	e6f0      	b.n	8000284 <__udivmoddi4+0x64>
 80004a2:	4608      	mov	r0, r1
 80004a4:	e706      	b.n	80002b4 <__udivmoddi4+0x94>
 80004a6:	45c8      	cmp	r8, r9
 80004a8:	d2ae      	bcs.n	8000408 <__udivmoddi4+0x1e8>
 80004aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80004b2:	3801      	subs	r0, #1
 80004b4:	e7a8      	b.n	8000408 <__udivmoddi4+0x1e8>
 80004b6:	4631      	mov	r1, r6
 80004b8:	e7ed      	b.n	8000496 <__udivmoddi4+0x276>
 80004ba:	4603      	mov	r3, r0
 80004bc:	e799      	b.n	80003f2 <__udivmoddi4+0x1d2>
 80004be:	4630      	mov	r0, r6
 80004c0:	e7d4      	b.n	800046c <__udivmoddi4+0x24c>
 80004c2:	46d6      	mov	lr, sl
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1a6>
 80004c6:	4463      	add	r3, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e74d      	b.n	8000368 <__udivmoddi4+0x148>
 80004cc:	4606      	mov	r6, r0
 80004ce:	4623      	mov	r3, r4
 80004d0:	4608      	mov	r0, r1
 80004d2:	e70f      	b.n	80002f4 <__udivmoddi4+0xd4>
 80004d4:	3e02      	subs	r6, #2
 80004d6:	4463      	add	r3, ip
 80004d8:	e730      	b.n	800033c <__udivmoddi4+0x11c>
 80004da:	bf00      	nop

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80004e4:	bf00      	nop
 80004e6:	46bd      	mov	sp, r7
 80004e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ec:	4770      	bx	lr

080004ee <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80004ee:	b480      	push	{r7}
 80004f0:	b083      	sub	sp, #12
 80004f2:	af00      	add	r7, sp, #0
 80004f4:	6078      	str	r0, [r7, #4]
 80004f6:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80004f8:	bf00      	nop
 80004fa:	370c      	adds	r7, #12
 80004fc:	46bd      	mov	sp, r7
 80004fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000502:	4770      	bx	lr

08000504 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000508:	bf00      	nop
 800050a:	46bd      	mov	sp, r7
 800050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000510:	4770      	bx	lr

08000512 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000512:	b480      	push	{r7}
 8000514:	b083      	sub	sp, #12
 8000516:	af00      	add	r7, sp, #0
 8000518:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800051a:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800051e:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000522:	f003 0301 	and.w	r3, r3, #1
 8000526:	2b00      	cmp	r3, #0
 8000528:	d013      	beq.n	8000552 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800052a:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800052e:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000532:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000536:	2b00      	cmp	r3, #0
 8000538:	d00b      	beq.n	8000552 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800053a:	e000      	b.n	800053e <ITM_SendChar+0x2c>
    {
      __NOP();
 800053c:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800053e:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	2b00      	cmp	r3, #0
 8000546:	d0f9      	beq.n	800053c <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000548:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800054c:	687a      	ldr	r2, [r7, #4]
 800054e:	b2d2      	uxtb	r2, r2
 8000550:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000552:	687b      	ldr	r3, [r7, #4]
}
 8000554:	4618      	mov	r0, r3
 8000556:	370c      	adds	r7, #12
 8000558:	46bd      	mov	sp, r7
 800055a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055e:	4770      	bx	lr

08000560 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000564:	f001 f890 	bl	8001688 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000568:	f000 f826 	bl	80005b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056c:	f000 fa94 	bl	8000a98 <MX_GPIO_Init>
  MX_CRC_Init();
 8000570:	f000 f88c 	bl	800068c <MX_CRC_Init>
  MX_DMA2D_Init();
 8000574:	f000 f89e 	bl	80006b4 <MX_DMA2D_Init>
  MX_FMC_Init();
 8000578:	f000 fa3e 	bl	80009f8 <MX_FMC_Init>
  MX_I2C3_Init();
 800057c:	f000 f8cc 	bl	8000718 <MX_I2C3_Init>
  MX_LTDC_Init();
 8000580:	f000 f90a 	bl	8000798 <MX_LTDC_Init>
  MX_SPI5_Init();
 8000584:	f000 f988 	bl	8000898 <MX_SPI5_Init>
  MX_TIM1_Init();
 8000588:	f000 f9bc 	bl	8000904 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800058c:	f000 fa0a 	bl	80009a4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000590:	f009 ffe2 	bl	800a558 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000594:	4a05      	ldr	r2, [pc, #20]	@ (80005ac <main+0x4c>)
 8000596:	2100      	movs	r1, #0
 8000598:	4805      	ldr	r0, [pc, #20]	@ (80005b0 <main+0x50>)
 800059a:	f00a f827 	bl	800a5ec <osThreadNew>
 800059e:	4603      	mov	r3, r0
 80005a0:	4a04      	ldr	r2, [pc, #16]	@ (80005b4 <main+0x54>)
 80005a2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005a4:	f009 fffc 	bl	800a5a0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005a8:	bf00      	nop
 80005aa:	e7fd      	b.n	80005a8 <main+0x48>
 80005ac:	0800dda8 	.word	0x0800dda8
 80005b0:	08000d01 	.word	0x08000d01
 80005b4:	200002fc 	.word	0x200002fc

080005b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b094      	sub	sp, #80	@ 0x50
 80005bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005be:	f107 0320 	add.w	r3, r7, #32
 80005c2:	2230      	movs	r2, #48	@ 0x30
 80005c4:	2100      	movs	r1, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f00d fb2c 	bl	800dc24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005cc:	f107 030c 	add.w	r3, r7, #12
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	605a      	str	r2, [r3, #4]
 80005d6:	609a      	str	r2, [r3, #8]
 80005d8:	60da      	str	r2, [r3, #12]
 80005da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005dc:	2300      	movs	r3, #0
 80005de:	60bb      	str	r3, [r7, #8]
 80005e0:	4b28      	ldr	r3, [pc, #160]	@ (8000684 <SystemClock_Config+0xcc>)
 80005e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005e4:	4a27      	ldr	r2, [pc, #156]	@ (8000684 <SystemClock_Config+0xcc>)
 80005e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80005ec:	4b25      	ldr	r3, [pc, #148]	@ (8000684 <SystemClock_Config+0xcc>)
 80005ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005f4:	60bb      	str	r3, [r7, #8]
 80005f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005f8:	2300      	movs	r3, #0
 80005fa:	607b      	str	r3, [r7, #4]
 80005fc:	4b22      	ldr	r3, [pc, #136]	@ (8000688 <SystemClock_Config+0xd0>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000604:	4a20      	ldr	r2, [pc, #128]	@ (8000688 <SystemClock_Config+0xd0>)
 8000606:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800060a:	6013      	str	r3, [r2, #0]
 800060c:	4b1e      	ldr	r3, [pc, #120]	@ (8000688 <SystemClock_Config+0xd0>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000614:	607b      	str	r3, [r7, #4]
 8000616:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000618:	2301      	movs	r3, #1
 800061a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800061c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000620:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000622:	2302      	movs	r3, #2
 8000624:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000626:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800062a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800062c:	2304      	movs	r3, #4
 800062e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000630:	2348      	movs	r3, #72	@ 0x48
 8000632:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000634:	2302      	movs	r3, #2
 8000636:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000638:	2303      	movs	r3, #3
 800063a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800063c:	f107 0320 	add.w	r3, r7, #32
 8000640:	4618      	mov	r0, r3
 8000642:	f004 fbb7 	bl	8004db4 <HAL_RCC_OscConfig>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800064c:	f000 fb80 	bl	8000d50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000650:	230f      	movs	r3, #15
 8000652:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000654:	2302      	movs	r3, #2
 8000656:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000658:	2300      	movs	r3, #0
 800065a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800065c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000660:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000662:	2300      	movs	r3, #0
 8000664:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000666:	f107 030c 	add.w	r3, r7, #12
 800066a:	2102      	movs	r1, #2
 800066c:	4618      	mov	r0, r3
 800066e:	f004 fe19 	bl	80052a4 <HAL_RCC_ClockConfig>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000678:	f000 fb6a 	bl	8000d50 <Error_Handler>
  }
}
 800067c:	bf00      	nop
 800067e:	3750      	adds	r7, #80	@ 0x50
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	40023800 	.word	0x40023800
 8000688:	40007000 	.word	0x40007000

0800068c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000690:	4b06      	ldr	r3, [pc, #24]	@ (80006ac <MX_CRC_Init+0x20>)
 8000692:	4a07      	ldr	r2, [pc, #28]	@ (80006b0 <MX_CRC_Init+0x24>)
 8000694:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000696:	4805      	ldr	r0, [pc, #20]	@ (80006ac <MX_CRC_Init+0x20>)
 8000698:	f001 f93e 	bl	8001918 <HAL_CRC_Init>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80006a2:	f000 fb55 	bl	8000d50 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80006a6:	bf00      	nop
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	2000009c 	.word	0x2000009c
 80006b0:	40023000 	.word	0x40023000

080006b4 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80006b8:	4b15      	ldr	r3, [pc, #84]	@ (8000710 <MX_DMA2D_Init+0x5c>)
 80006ba:	4a16      	ldr	r2, [pc, #88]	@ (8000714 <MX_DMA2D_Init+0x60>)
 80006bc:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80006be:	4b14      	ldr	r3, [pc, #80]	@ (8000710 <MX_DMA2D_Init+0x5c>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80006c4:	4b12      	ldr	r3, [pc, #72]	@ (8000710 <MX_DMA2D_Init+0x5c>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80006ca:	4b11      	ldr	r3, [pc, #68]	@ (8000710 <MX_DMA2D_Init+0x5c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80006d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000710 <MX_DMA2D_Init+0x5c>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80006d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000710 <MX_DMA2D_Init+0x5c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80006dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000710 <MX_DMA2D_Init+0x5c>)
 80006de:	2200      	movs	r2, #0
 80006e0:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80006e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000710 <MX_DMA2D_Init+0x5c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80006e8:	4809      	ldr	r0, [pc, #36]	@ (8000710 <MX_DMA2D_Init+0x5c>)
 80006ea:	f001 f931 	bl	8001950 <HAL_DMA2D_Init>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80006f4:	f000 fb2c 	bl	8000d50 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80006f8:	2101      	movs	r1, #1
 80006fa:	4805      	ldr	r0, [pc, #20]	@ (8000710 <MX_DMA2D_Init+0x5c>)
 80006fc:	f001 fa82 	bl	8001c04 <HAL_DMA2D_ConfigLayer>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000706:	f000 fb23 	bl	8000d50 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800070a:	bf00      	nop
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	200000a4 	.word	0x200000a4
 8000714:	4002b000 	.word	0x4002b000

08000718 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800071c:	4b1b      	ldr	r3, [pc, #108]	@ (800078c <MX_I2C3_Init+0x74>)
 800071e:	4a1c      	ldr	r2, [pc, #112]	@ (8000790 <MX_I2C3_Init+0x78>)
 8000720:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000722:	4b1a      	ldr	r3, [pc, #104]	@ (800078c <MX_I2C3_Init+0x74>)
 8000724:	4a1b      	ldr	r2, [pc, #108]	@ (8000794 <MX_I2C3_Init+0x7c>)
 8000726:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000728:	4b18      	ldr	r3, [pc, #96]	@ (800078c <MX_I2C3_Init+0x74>)
 800072a:	2200      	movs	r2, #0
 800072c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800072e:	4b17      	ldr	r3, [pc, #92]	@ (800078c <MX_I2C3_Init+0x74>)
 8000730:	2200      	movs	r2, #0
 8000732:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000734:	4b15      	ldr	r3, [pc, #84]	@ (800078c <MX_I2C3_Init+0x74>)
 8000736:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800073a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800073c:	4b13      	ldr	r3, [pc, #76]	@ (800078c <MX_I2C3_Init+0x74>)
 800073e:	2200      	movs	r2, #0
 8000740:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000742:	4b12      	ldr	r3, [pc, #72]	@ (800078c <MX_I2C3_Init+0x74>)
 8000744:	2200      	movs	r2, #0
 8000746:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000748:	4b10      	ldr	r3, [pc, #64]	@ (800078c <MX_I2C3_Init+0x74>)
 800074a:	2200      	movs	r2, #0
 800074c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800074e:	4b0f      	ldr	r3, [pc, #60]	@ (800078c <MX_I2C3_Init+0x74>)
 8000750:	2200      	movs	r2, #0
 8000752:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000754:	480d      	ldr	r0, [pc, #52]	@ (800078c <MX_I2C3_Init+0x74>)
 8000756:	f003 fe05 	bl	8004364 <HAL_I2C_Init>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000760:	f000 faf6 	bl	8000d50 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000764:	2100      	movs	r1, #0
 8000766:	4809      	ldr	r0, [pc, #36]	@ (800078c <MX_I2C3_Init+0x74>)
 8000768:	f003 ff40 	bl	80045ec <HAL_I2CEx_ConfigAnalogFilter>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000772:	f000 faed 	bl	8000d50 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000776:	2100      	movs	r1, #0
 8000778:	4804      	ldr	r0, [pc, #16]	@ (800078c <MX_I2C3_Init+0x74>)
 800077a:	f003 ff73 	bl	8004664 <HAL_I2CEx_ConfigDigitalFilter>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000784:	f000 fae4 	bl	8000d50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000788:	bf00      	nop
 800078a:	bd80      	pop	{r7, pc}
 800078c:	200000e4 	.word	0x200000e4
 8000790:	40005c00 	.word	0x40005c00
 8000794:	000186a0 	.word	0x000186a0

08000798 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b08e      	sub	sp, #56	@ 0x38
 800079c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800079e:	1d3b      	adds	r3, r7, #4
 80007a0:	2234      	movs	r2, #52	@ 0x34
 80007a2:	2100      	movs	r1, #0
 80007a4:	4618      	mov	r0, r3
 80007a6:	f00d fa3d 	bl	800dc24 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80007aa:	4b39      	ldr	r3, [pc, #228]	@ (8000890 <MX_LTDC_Init+0xf8>)
 80007ac:	4a39      	ldr	r2, [pc, #228]	@ (8000894 <MX_LTDC_Init+0xfc>)
 80007ae:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80007b0:	4b37      	ldr	r3, [pc, #220]	@ (8000890 <MX_LTDC_Init+0xf8>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80007b6:	4b36      	ldr	r3, [pc, #216]	@ (8000890 <MX_LTDC_Init+0xf8>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80007bc:	4b34      	ldr	r3, [pc, #208]	@ (8000890 <MX_LTDC_Init+0xf8>)
 80007be:	2200      	movs	r2, #0
 80007c0:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80007c2:	4b33      	ldr	r3, [pc, #204]	@ (8000890 <MX_LTDC_Init+0xf8>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 80007c8:	4b31      	ldr	r3, [pc, #196]	@ (8000890 <MX_LTDC_Init+0xf8>)
 80007ca:	2209      	movs	r2, #9
 80007cc:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 80007ce:	4b30      	ldr	r3, [pc, #192]	@ (8000890 <MX_LTDC_Init+0xf8>)
 80007d0:	2201      	movs	r2, #1
 80007d2:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 80007d4:	4b2e      	ldr	r3, [pc, #184]	@ (8000890 <MX_LTDC_Init+0xf8>)
 80007d6:	221d      	movs	r2, #29
 80007d8:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 80007da:	4b2d      	ldr	r3, [pc, #180]	@ (8000890 <MX_LTDC_Init+0xf8>)
 80007dc:	2203      	movs	r2, #3
 80007de:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 80007e0:	4b2b      	ldr	r3, [pc, #172]	@ (8000890 <MX_LTDC_Init+0xf8>)
 80007e2:	f240 120d 	movw	r2, #269	@ 0x10d
 80007e6:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 80007e8:	4b29      	ldr	r3, [pc, #164]	@ (8000890 <MX_LTDC_Init+0xf8>)
 80007ea:	f240 1243 	movw	r2, #323	@ 0x143
 80007ee:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 279;
 80007f0:	4b27      	ldr	r3, [pc, #156]	@ (8000890 <MX_LTDC_Init+0xf8>)
 80007f2:	f240 1217 	movw	r2, #279	@ 0x117
 80007f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 327;
 80007f8:	4b25      	ldr	r3, [pc, #148]	@ (8000890 <MX_LTDC_Init+0xf8>)
 80007fa:	f240 1247 	movw	r2, #327	@ 0x147
 80007fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000800:	4b23      	ldr	r3, [pc, #140]	@ (8000890 <MX_LTDC_Init+0xf8>)
 8000802:	2200      	movs	r2, #0
 8000804:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000808:	4b21      	ldr	r3, [pc, #132]	@ (8000890 <MX_LTDC_Init+0xf8>)
 800080a:	2200      	movs	r2, #0
 800080c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000810:	4b1f      	ldr	r3, [pc, #124]	@ (8000890 <MX_LTDC_Init+0xf8>)
 8000812:	2200      	movs	r2, #0
 8000814:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000818:	481d      	ldr	r0, [pc, #116]	@ (8000890 <MX_LTDC_Init+0xf8>)
 800081a:	f003 ff63 	bl	80046e4 <HAL_LTDC_Init>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000824:	f000 fa94 	bl	8000d50 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000828:	2300      	movs	r3, #0
 800082a:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 800082c:	23f0      	movs	r3, #240	@ 0xf0
 800082e:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000830:	2300      	movs	r3, #0
 8000832:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8000834:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000838:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 800083a:	2302      	movs	r3, #2
 800083c:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800083e:	23ff      	movs	r3, #255	@ 0xff
 8000840:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000842:	2300      	movs	r3, #0
 8000844:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000846:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800084a:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800084c:	2307      	movs	r3, #7
 800084e:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000850:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 8000854:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 240;
 8000856:	23f0      	movs	r3, #240	@ 0xf0
 8000858:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 320;
 800085a:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800085e:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000860:	2300      	movs	r3, #0
 8000862:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000866:	2300      	movs	r3, #0
 8000868:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 800086c:	2300      	movs	r3, #0
 800086e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000872:	1d3b      	adds	r3, r7, #4
 8000874:	2200      	movs	r2, #0
 8000876:	4619      	mov	r1, r3
 8000878:	4805      	ldr	r0, [pc, #20]	@ (8000890 <MX_LTDC_Init+0xf8>)
 800087a:	f004 f8c5 	bl	8004a08 <HAL_LTDC_ConfigLayer>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8000884:	f000 fa64 	bl	8000d50 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000888:	bf00      	nop
 800088a:	3738      	adds	r7, #56	@ 0x38
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	20000138 	.word	0x20000138
 8000894:	40016800 	.word	0x40016800

08000898 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 800089c:	4b17      	ldr	r3, [pc, #92]	@ (80008fc <MX_SPI5_Init+0x64>)
 800089e:	4a18      	ldr	r2, [pc, #96]	@ (8000900 <MX_SPI5_Init+0x68>)
 80008a0:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80008a2:	4b16      	ldr	r3, [pc, #88]	@ (80008fc <MX_SPI5_Init+0x64>)
 80008a4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80008a8:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80008aa:	4b14      	ldr	r3, [pc, #80]	@ (80008fc <MX_SPI5_Init+0x64>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80008b0:	4b12      	ldr	r3, [pc, #72]	@ (80008fc <MX_SPI5_Init+0x64>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008b6:	4b11      	ldr	r3, [pc, #68]	@ (80008fc <MX_SPI5_Init+0x64>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008bc:	4b0f      	ldr	r3, [pc, #60]	@ (80008fc <MX_SPI5_Init+0x64>)
 80008be:	2200      	movs	r2, #0
 80008c0:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80008c2:	4b0e      	ldr	r3, [pc, #56]	@ (80008fc <MX_SPI5_Init+0x64>)
 80008c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008c8:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80008ca:	4b0c      	ldr	r3, [pc, #48]	@ (80008fc <MX_SPI5_Init+0x64>)
 80008cc:	2218      	movs	r2, #24
 80008ce:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008d0:	4b0a      	ldr	r3, [pc, #40]	@ (80008fc <MX_SPI5_Init+0x64>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80008d6:	4b09      	ldr	r3, [pc, #36]	@ (80008fc <MX_SPI5_Init+0x64>)
 80008d8:	2200      	movs	r2, #0
 80008da:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008dc:	4b07      	ldr	r3, [pc, #28]	@ (80008fc <MX_SPI5_Init+0x64>)
 80008de:	2200      	movs	r2, #0
 80008e0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 80008e2:	4b06      	ldr	r3, [pc, #24]	@ (80008fc <MX_SPI5_Init+0x64>)
 80008e4:	220a      	movs	r2, #10
 80008e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80008e8:	4804      	ldr	r0, [pc, #16]	@ (80008fc <MX_SPI5_Init+0x64>)
 80008ea:	f005 f921 	bl	8005b30 <HAL_SPI_Init>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80008f4:	f000 fa2c 	bl	8000d50 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80008f8:	bf00      	nop
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	200001e0 	.word	0x200001e0
 8000900:	40015000 	.word	0x40015000

08000904 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b086      	sub	sp, #24
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800090a:	f107 0308 	add.w	r3, r7, #8
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	605a      	str	r2, [r3, #4]
 8000914:	609a      	str	r2, [r3, #8]
 8000916:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000918:	463b      	mov	r3, r7
 800091a:	2200      	movs	r2, #0
 800091c:	601a      	str	r2, [r3, #0]
 800091e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000920:	4b1e      	ldr	r3, [pc, #120]	@ (800099c <MX_TIM1_Init+0x98>)
 8000922:	4a1f      	ldr	r2, [pc, #124]	@ (80009a0 <MX_TIM1_Init+0x9c>)
 8000924:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000926:	4b1d      	ldr	r3, [pc, #116]	@ (800099c <MX_TIM1_Init+0x98>)
 8000928:	2200      	movs	r2, #0
 800092a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800092c:	4b1b      	ldr	r3, [pc, #108]	@ (800099c <MX_TIM1_Init+0x98>)
 800092e:	2200      	movs	r2, #0
 8000930:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000932:	4b1a      	ldr	r3, [pc, #104]	@ (800099c <MX_TIM1_Init+0x98>)
 8000934:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000938:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800093a:	4b18      	ldr	r3, [pc, #96]	@ (800099c <MX_TIM1_Init+0x98>)
 800093c:	2200      	movs	r2, #0
 800093e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000940:	4b16      	ldr	r3, [pc, #88]	@ (800099c <MX_TIM1_Init+0x98>)
 8000942:	2200      	movs	r2, #0
 8000944:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000946:	4b15      	ldr	r3, [pc, #84]	@ (800099c <MX_TIM1_Init+0x98>)
 8000948:	2200      	movs	r2, #0
 800094a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800094c:	4813      	ldr	r0, [pc, #76]	@ (800099c <MX_TIM1_Init+0x98>)
 800094e:	f005 f978 	bl	8005c42 <HAL_TIM_Base_Init>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000958:	f000 f9fa 	bl	8000d50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800095c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000960:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000962:	f107 0308 	add.w	r3, r7, #8
 8000966:	4619      	mov	r1, r3
 8000968:	480c      	ldr	r0, [pc, #48]	@ (800099c <MX_TIM1_Init+0x98>)
 800096a:	f005 fb19 	bl	8005fa0 <HAL_TIM_ConfigClockSource>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000974:	f000 f9ec 	bl	8000d50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000978:	2300      	movs	r3, #0
 800097a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800097c:	2300      	movs	r3, #0
 800097e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000980:	463b      	mov	r3, r7
 8000982:	4619      	mov	r1, r3
 8000984:	4805      	ldr	r0, [pc, #20]	@ (800099c <MX_TIM1_Init+0x98>)
 8000986:	f005 fd41 	bl	800640c <HAL_TIMEx_MasterConfigSynchronization>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000990:	f000 f9de 	bl	8000d50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000994:	bf00      	nop
 8000996:	3718      	adds	r7, #24
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	20000238 	.word	0x20000238
 80009a0:	40010000 	.word	0x40010000

080009a4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009a8:	4b11      	ldr	r3, [pc, #68]	@ (80009f0 <MX_USART1_UART_Init+0x4c>)
 80009aa:	4a12      	ldr	r2, [pc, #72]	@ (80009f4 <MX_USART1_UART_Init+0x50>)
 80009ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009ae:	4b10      	ldr	r3, [pc, #64]	@ (80009f0 <MX_USART1_UART_Init+0x4c>)
 80009b0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009b6:	4b0e      	ldr	r3, [pc, #56]	@ (80009f0 <MX_USART1_UART_Init+0x4c>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009bc:	4b0c      	ldr	r3, [pc, #48]	@ (80009f0 <MX_USART1_UART_Init+0x4c>)
 80009be:	2200      	movs	r2, #0
 80009c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009c2:	4b0b      	ldr	r3, [pc, #44]	@ (80009f0 <MX_USART1_UART_Init+0x4c>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009c8:	4b09      	ldr	r3, [pc, #36]	@ (80009f0 <MX_USART1_UART_Init+0x4c>)
 80009ca:	220c      	movs	r2, #12
 80009cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ce:	4b08      	ldr	r3, [pc, #32]	@ (80009f0 <MX_USART1_UART_Init+0x4c>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009d4:	4b06      	ldr	r3, [pc, #24]	@ (80009f0 <MX_USART1_UART_Init+0x4c>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009da:	4805      	ldr	r0, [pc, #20]	@ (80009f0 <MX_USART1_UART_Init+0x4c>)
 80009dc:	f005 fda6 	bl	800652c <HAL_UART_Init>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80009e6:	f000 f9b3 	bl	8000d50 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	20000280 	.word	0x20000280
 80009f4:	40011000 	.word	0x40011000

080009f8 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b088      	sub	sp, #32
 80009fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80009fe:	1d3b      	adds	r3, r7, #4
 8000a00:	2200      	movs	r2, #0
 8000a02:	601a      	str	r2, [r3, #0]
 8000a04:	605a      	str	r2, [r3, #4]
 8000a06:	609a      	str	r2, [r3, #8]
 8000a08:	60da      	str	r2, [r3, #12]
 8000a0a:	611a      	str	r2, [r3, #16]
 8000a0c:	615a      	str	r2, [r3, #20]
 8000a0e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000a10:	4b1f      	ldr	r3, [pc, #124]	@ (8000a90 <MX_FMC_Init+0x98>)
 8000a12:	4a20      	ldr	r2, [pc, #128]	@ (8000a94 <MX_FMC_Init+0x9c>)
 8000a14:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000a16:	4b1e      	ldr	r3, [pc, #120]	@ (8000a90 <MX_FMC_Init+0x98>)
 8000a18:	2201      	movs	r2, #1
 8000a1a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000a1c:	4b1c      	ldr	r3, [pc, #112]	@ (8000a90 <MX_FMC_Init+0x98>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000a22:	4b1b      	ldr	r3, [pc, #108]	@ (8000a90 <MX_FMC_Init+0x98>)
 8000a24:	2204      	movs	r2, #4
 8000a26:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000a28:	4b19      	ldr	r3, [pc, #100]	@ (8000a90 <MX_FMC_Init+0x98>)
 8000a2a:	2210      	movs	r2, #16
 8000a2c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000a2e:	4b18      	ldr	r3, [pc, #96]	@ (8000a90 <MX_FMC_Init+0x98>)
 8000a30:	2240      	movs	r2, #64	@ 0x40
 8000a32:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000a34:	4b16      	ldr	r3, [pc, #88]	@ (8000a90 <MX_FMC_Init+0x98>)
 8000a36:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8000a3a:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000a3c:	4b14      	ldr	r3, [pc, #80]	@ (8000a90 <MX_FMC_Init+0x98>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000a42:	4b13      	ldr	r3, [pc, #76]	@ (8000a90 <MX_FMC_Init+0x98>)
 8000a44:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000a48:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000a4a:	4b11      	ldr	r3, [pc, #68]	@ (8000a90 <MX_FMC_Init+0x98>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000a50:	4b0f      	ldr	r3, [pc, #60]	@ (8000a90 <MX_FMC_Init+0x98>)
 8000a52:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a56:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000a5c:	2307      	movs	r3, #7
 8000a5e:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000a60:	2304      	movs	r3, #4
 8000a62:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000a64:	2307      	movs	r3, #7
 8000a66:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000a68:	2303      	movs	r3, #3
 8000a6a:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000a70:	2302      	movs	r3, #2
 8000a72:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000a74:	1d3b      	adds	r3, r7, #4
 8000a76:	4619      	mov	r1, r3
 8000a78:	4805      	ldr	r0, [pc, #20]	@ (8000a90 <MX_FMC_Init+0x98>)
 8000a7a:	f005 f825 	bl	8005ac8 <HAL_SDRAM_Init>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000a84:	f000 f964 	bl	8000d50 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000a88:	bf00      	nop
 8000a8a:	3720      	adds	r7, #32
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	200002c8 	.word	0x200002c8
 8000a94:	a0000140 	.word	0xa0000140

08000a98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b08e      	sub	sp, #56	@ 0x38
 8000a9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a9e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	601a      	str	r2, [r3, #0]
 8000aa6:	605a      	str	r2, [r3, #4]
 8000aa8:	609a      	str	r2, [r3, #8]
 8000aaa:	60da      	str	r2, [r3, #12]
 8000aac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	623b      	str	r3, [r7, #32]
 8000ab2:	4b85      	ldr	r3, [pc, #532]	@ (8000cc8 <MX_GPIO_Init+0x230>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab6:	4a84      	ldr	r2, [pc, #528]	@ (8000cc8 <MX_GPIO_Init+0x230>)
 8000ab8:	f043 0304 	orr.w	r3, r3, #4
 8000abc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000abe:	4b82      	ldr	r3, [pc, #520]	@ (8000cc8 <MX_GPIO_Init+0x230>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac2:	f003 0304 	and.w	r3, r3, #4
 8000ac6:	623b      	str	r3, [r7, #32]
 8000ac8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	61fb      	str	r3, [r7, #28]
 8000ace:	4b7e      	ldr	r3, [pc, #504]	@ (8000cc8 <MX_GPIO_Init+0x230>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad2:	4a7d      	ldr	r2, [pc, #500]	@ (8000cc8 <MX_GPIO_Init+0x230>)
 8000ad4:	f043 0320 	orr.w	r3, r3, #32
 8000ad8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ada:	4b7b      	ldr	r3, [pc, #492]	@ (8000cc8 <MX_GPIO_Init+0x230>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ade:	f003 0320 	and.w	r3, r3, #32
 8000ae2:	61fb      	str	r3, [r7, #28]
 8000ae4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	61bb      	str	r3, [r7, #24]
 8000aea:	4b77      	ldr	r3, [pc, #476]	@ (8000cc8 <MX_GPIO_Init+0x230>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aee:	4a76      	ldr	r2, [pc, #472]	@ (8000cc8 <MX_GPIO_Init+0x230>)
 8000af0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000af4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000af6:	4b74      	ldr	r3, [pc, #464]	@ (8000cc8 <MX_GPIO_Init+0x230>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000afe:	61bb      	str	r3, [r7, #24]
 8000b00:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	617b      	str	r3, [r7, #20]
 8000b06:	4b70      	ldr	r3, [pc, #448]	@ (8000cc8 <MX_GPIO_Init+0x230>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0a:	4a6f      	ldr	r2, [pc, #444]	@ (8000cc8 <MX_GPIO_Init+0x230>)
 8000b0c:	f043 0301 	orr.w	r3, r3, #1
 8000b10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b12:	4b6d      	ldr	r3, [pc, #436]	@ (8000cc8 <MX_GPIO_Init+0x230>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b16:	f003 0301 	and.w	r3, r3, #1
 8000b1a:	617b      	str	r3, [r7, #20]
 8000b1c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b1e:	2300      	movs	r3, #0
 8000b20:	613b      	str	r3, [r7, #16]
 8000b22:	4b69      	ldr	r3, [pc, #420]	@ (8000cc8 <MX_GPIO_Init+0x230>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b26:	4a68      	ldr	r2, [pc, #416]	@ (8000cc8 <MX_GPIO_Init+0x230>)
 8000b28:	f043 0302 	orr.w	r3, r3, #2
 8000b2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b2e:	4b66      	ldr	r3, [pc, #408]	@ (8000cc8 <MX_GPIO_Init+0x230>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b32:	f003 0302 	and.w	r3, r3, #2
 8000b36:	613b      	str	r3, [r7, #16]
 8000b38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	60fb      	str	r3, [r7, #12]
 8000b3e:	4b62      	ldr	r3, [pc, #392]	@ (8000cc8 <MX_GPIO_Init+0x230>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b42:	4a61      	ldr	r2, [pc, #388]	@ (8000cc8 <MX_GPIO_Init+0x230>)
 8000b44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b4a:	4b5f      	ldr	r3, [pc, #380]	@ (8000cc8 <MX_GPIO_Init+0x230>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b52:	60fb      	str	r3, [r7, #12]
 8000b54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	60bb      	str	r3, [r7, #8]
 8000b5a:	4b5b      	ldr	r3, [pc, #364]	@ (8000cc8 <MX_GPIO_Init+0x230>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b5e:	4a5a      	ldr	r2, [pc, #360]	@ (8000cc8 <MX_GPIO_Init+0x230>)
 8000b60:	f043 0310 	orr.w	r3, r3, #16
 8000b64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b66:	4b58      	ldr	r3, [pc, #352]	@ (8000cc8 <MX_GPIO_Init+0x230>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6a:	f003 0310 	and.w	r3, r3, #16
 8000b6e:	60bb      	str	r3, [r7, #8]
 8000b70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	607b      	str	r3, [r7, #4]
 8000b76:	4b54      	ldr	r3, [pc, #336]	@ (8000cc8 <MX_GPIO_Init+0x230>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7a:	4a53      	ldr	r2, [pc, #332]	@ (8000cc8 <MX_GPIO_Init+0x230>)
 8000b7c:	f043 0308 	orr.w	r3, r3, #8
 8000b80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b82:	4b51      	ldr	r3, [pc, #324]	@ (8000cc8 <MX_GPIO_Init+0x230>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b86:	f003 0308 	and.w	r3, r3, #8
 8000b8a:	607b      	str	r3, [r7, #4]
 8000b8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	2116      	movs	r1, #22
 8000b92:	484e      	ldr	r0, [pc, #312]	@ (8000ccc <MX_GPIO_Init+0x234>)
 8000b94:	f001 fa74 	bl	8002080 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000b98:	2200      	movs	r2, #0
 8000b9a:	2180      	movs	r1, #128	@ 0x80
 8000b9c:	484c      	ldr	r0, [pc, #304]	@ (8000cd0 <MX_GPIO_Init+0x238>)
 8000b9e:	f001 fa6f 	bl	8002080 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8000ba8:	484a      	ldr	r0, [pc, #296]	@ (8000cd4 <MX_GPIO_Init+0x23c>)
 8000baa:	f001 fa69 	bl	8002080 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED_GREEEN_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8000bb4:	4848      	ldr	r0, [pc, #288]	@ (8000cd8 <MX_GPIO_Init+0x240>)
 8000bb6:	f001 fa63 	bl	8002080 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000bba:	2316      	movs	r3, #22
 8000bbc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bce:	4619      	mov	r1, r3
 8000bd0:	483e      	ldr	r0, [pc, #248]	@ (8000ccc <MX_GPIO_Init+0x234>)
 8000bd2:	f001 f8a9 	bl	8001d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUE_BUTTON_Pin */
  GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bda:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000bde:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000be4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000be8:	4619      	mov	r1, r3
 8000bea:	4839      	ldr	r0, [pc, #228]	@ (8000cd0 <MX_GPIO_Init+0x238>)
 8000bec:	f001 f89c 	bl	8001d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000bf0:	f248 0306 	movw	r3, #32774	@ 0x8006
 8000bf4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000bf6:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000bfa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c04:	4619      	mov	r1, r3
 8000c06:	4832      	ldr	r0, [pc, #200]	@ (8000cd0 <MX_GPIO_Init+0x238>)
 8000c08:	f001 f88e 	bl	8001d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000c0c:	2380      	movs	r3, #128	@ 0x80
 8000c0e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c10:	2301      	movs	r3, #1
 8000c12:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c14:	2300      	movs	r3, #0
 8000c16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000c1c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c20:	4619      	mov	r1, r3
 8000c22:	482b      	ldr	r0, [pc, #172]	@ (8000cd0 <MX_GPIO_Init+0x238>)
 8000c24:	f001 f880 	bl	8001d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000c28:	2320      	movs	r3, #32
 8000c2a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c2c:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000c30:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	2300      	movs	r3, #0
 8000c34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000c36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4823      	ldr	r0, [pc, #140]	@ (8000ccc <MX_GPIO_Init+0x234>)
 8000c3e:	f001 f873 	bl	8001d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000c42:	2304      	movs	r3, #4
 8000c44:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c46:	2300      	movs	r3, #0
 8000c48:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000c4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c52:	4619      	mov	r1, r3
 8000c54:	4821      	ldr	r0, [pc, #132]	@ (8000cdc <MX_GPIO_Init+0x244>)
 8000c56:	f001 f867 	bl	8001d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000c5a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000c5e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c60:	2300      	movs	r3, #0
 8000c62:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c64:	2300      	movs	r3, #0
 8000c66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000c68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4819      	ldr	r0, [pc, #100]	@ (8000cd4 <MX_GPIO_Init+0x23c>)
 8000c70:	f001 f85a 	bl	8001d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000c74:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000c78:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c82:	2300      	movs	r3, #0
 8000c84:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4811      	ldr	r0, [pc, #68]	@ (8000cd4 <MX_GPIO_Init+0x23c>)
 8000c8e:	f001 f84b 	bl	8001d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEEN_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LED_GREEEN_Pin|LD4_Pin;
 8000c92:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000c96:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ca4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ca8:	4619      	mov	r1, r3
 8000caa:	480b      	ldr	r0, [pc, #44]	@ (8000cd8 <MX_GPIO_Init+0x240>)
 8000cac:	f001 f83c 	bl	8001d28 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	2105      	movs	r1, #5
 8000cb4:	2006      	movs	r0, #6
 8000cb6:	f000 fe05 	bl	80018c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000cba:	2006      	movs	r0, #6
 8000cbc:	f000 fe1e 	bl	80018fc <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cc0:	bf00      	nop
 8000cc2:	3738      	adds	r7, #56	@ 0x38
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	40023800 	.word	0x40023800
 8000ccc:	40020800 	.word	0x40020800
 8000cd0:	40020000 	.word	0x40020000
 8000cd4:	40020c00 	.word	0x40020c00
 8000cd8:	40021800 	.word	0x40021800
 8000cdc:	40020400 	.word	0x40020400

08000ce0 <Task_action>:

/* USER CODE BEGIN 4 */
void Task_action(char message)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	71fb      	strb	r3, [r7, #7]
	ITM_SendChar(message);
 8000cea:	79fb      	ldrb	r3, [r7, #7]
 8000cec:	4618      	mov	r0, r3
 8000cee:	f7ff fc10 	bl	8000512 <ITM_SendChar>
	ITM_SendChar('\n');
 8000cf2:	200a      	movs	r0, #10
 8000cf4:	f7ff fc0d 	bl	8000512 <ITM_SendChar>
}
 8000cf8:	bf00      	nop
 8000cfa:	3708      	adds	r7, #8
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8000d08:	f00c fbc4 	bl	800d494 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LED_GREEEN_GPIO_Port, LED_GREEEN_Pin);
 8000d0c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d10:	4805      	ldr	r0, [pc, #20]	@ (8000d28 <StartDefaultTask+0x28>)
 8000d12:	f001 f9ce 	bl	80020b2 <HAL_GPIO_TogglePin>
	  Task_action('1');
 8000d16:	2031      	movs	r0, #49	@ 0x31
 8000d18:	f7ff ffe2 	bl	8000ce0 <Task_action>
	  osDelay(2000);
 8000d1c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000d20:	f009 fcf6 	bl	800a710 <osDelay>
	  HAL_GPIO_TogglePin(LED_GREEEN_GPIO_Port, LED_GREEEN_Pin);
 8000d24:	bf00      	nop
 8000d26:	e7f1      	b.n	8000d0c <StartDefaultTask+0xc>
 8000d28:	40021800 	.word	0x40021800

08000d2c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a04      	ldr	r2, [pc, #16]	@ (8000d4c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d101      	bne.n	8000d42 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d3e:	f000 fcc5 	bl	80016cc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d42:	bf00      	nop
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	40001000 	.word	0x40001000

08000d50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d54:	b672      	cpsid	i
}
 8000d56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d58:	bf00      	nop
 8000d5a:	e7fd      	b.n	8000d58 <Error_Handler+0x8>

08000d5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d62:	2300      	movs	r3, #0
 8000d64:	607b      	str	r3, [r7, #4]
 8000d66:	4b12      	ldr	r3, [pc, #72]	@ (8000db0 <HAL_MspInit+0x54>)
 8000d68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d6a:	4a11      	ldr	r2, [pc, #68]	@ (8000db0 <HAL_MspInit+0x54>)
 8000d6c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d70:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d72:	4b0f      	ldr	r3, [pc, #60]	@ (8000db0 <HAL_MspInit+0x54>)
 8000d74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d7a:	607b      	str	r3, [r7, #4]
 8000d7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d7e:	2300      	movs	r3, #0
 8000d80:	603b      	str	r3, [r7, #0]
 8000d82:	4b0b      	ldr	r3, [pc, #44]	@ (8000db0 <HAL_MspInit+0x54>)
 8000d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d86:	4a0a      	ldr	r2, [pc, #40]	@ (8000db0 <HAL_MspInit+0x54>)
 8000d88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d8e:	4b08      	ldr	r3, [pc, #32]	@ (8000db0 <HAL_MspInit+0x54>)
 8000d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d96:	603b      	str	r3, [r7, #0]
 8000d98:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	210f      	movs	r1, #15
 8000d9e:	f06f 0001 	mvn.w	r0, #1
 8000da2:	f000 fd8f 	bl	80018c4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000da6:	bf00      	nop
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40023800 	.word	0x40023800

08000db4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b085      	sub	sp, #20
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a0b      	ldr	r2, [pc, #44]	@ (8000df0 <HAL_CRC_MspInit+0x3c>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d10d      	bne.n	8000de2 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	60fb      	str	r3, [r7, #12]
 8000dca:	4b0a      	ldr	r3, [pc, #40]	@ (8000df4 <HAL_CRC_MspInit+0x40>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dce:	4a09      	ldr	r2, [pc, #36]	@ (8000df4 <HAL_CRC_MspInit+0x40>)
 8000dd0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000dd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dd6:	4b07      	ldr	r3, [pc, #28]	@ (8000df4 <HAL_CRC_MspInit+0x40>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dda:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000dde:	60fb      	str	r3, [r7, #12]
 8000de0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000de2:	bf00      	nop
 8000de4:	3714      	adds	r7, #20
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	40023000 	.word	0x40023000
 8000df4:	40023800 	.word	0x40023800

08000df8 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a0e      	ldr	r2, [pc, #56]	@ (8000e40 <HAL_DMA2D_MspInit+0x48>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d115      	bne.n	8000e36 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	60fb      	str	r3, [r7, #12]
 8000e0e:	4b0d      	ldr	r3, [pc, #52]	@ (8000e44 <HAL_DMA2D_MspInit+0x4c>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e12:	4a0c      	ldr	r2, [pc, #48]	@ (8000e44 <HAL_DMA2D_MspInit+0x4c>)
 8000e14:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000e18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e1a:	4b0a      	ldr	r3, [pc, #40]	@ (8000e44 <HAL_DMA2D_MspInit+0x4c>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e1e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000e22:	60fb      	str	r3, [r7, #12]
 8000e24:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000e26:	2200      	movs	r2, #0
 8000e28:	2105      	movs	r1, #5
 8000e2a:	205a      	movs	r0, #90	@ 0x5a
 8000e2c:	f000 fd4a 	bl	80018c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000e30:	205a      	movs	r0, #90	@ 0x5a
 8000e32:	f000 fd63 	bl	80018fc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8000e36:	bf00      	nop
 8000e38:	3710      	adds	r7, #16
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	4002b000 	.word	0x4002b000
 8000e44:	40023800 	.word	0x40023800

08000e48 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b08a      	sub	sp, #40	@ 0x28
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e50:	f107 0314 	add.w	r3, r7, #20
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
 8000e5a:	609a      	str	r2, [r3, #8]
 8000e5c:	60da      	str	r2, [r3, #12]
 8000e5e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a29      	ldr	r2, [pc, #164]	@ (8000f0c <HAL_I2C_MspInit+0xc4>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d14b      	bne.n	8000f02 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	613b      	str	r3, [r7, #16]
 8000e6e:	4b28      	ldr	r3, [pc, #160]	@ (8000f10 <HAL_I2C_MspInit+0xc8>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e72:	4a27      	ldr	r2, [pc, #156]	@ (8000f10 <HAL_I2C_MspInit+0xc8>)
 8000e74:	f043 0304 	orr.w	r3, r3, #4
 8000e78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e7a:	4b25      	ldr	r3, [pc, #148]	@ (8000f10 <HAL_I2C_MspInit+0xc8>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7e:	f003 0304 	and.w	r3, r3, #4
 8000e82:	613b      	str	r3, [r7, #16]
 8000e84:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	60fb      	str	r3, [r7, #12]
 8000e8a:	4b21      	ldr	r3, [pc, #132]	@ (8000f10 <HAL_I2C_MspInit+0xc8>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8e:	4a20      	ldr	r2, [pc, #128]	@ (8000f10 <HAL_I2C_MspInit+0xc8>)
 8000e90:	f043 0301 	orr.w	r3, r3, #1
 8000e94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e96:	4b1e      	ldr	r3, [pc, #120]	@ (8000f10 <HAL_I2C_MspInit+0xc8>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e9a:	f003 0301 	and.w	r3, r3, #1
 8000e9e:	60fb      	str	r3, [r7, #12]
 8000ea0:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000ea2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ea6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ea8:	2312      	movs	r3, #18
 8000eaa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000eac:	2301      	movs	r3, #1
 8000eae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000eb4:	2304      	movs	r3, #4
 8000eb6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000eb8:	f107 0314 	add.w	r3, r7, #20
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4815      	ldr	r0, [pc, #84]	@ (8000f14 <HAL_I2C_MspInit+0xcc>)
 8000ec0:	f000 ff32 	bl	8001d28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000ec4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ec8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000eca:	2312      	movs	r3, #18
 8000ecc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000ed6:	2304      	movs	r3, #4
 8000ed8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000eda:	f107 0314 	add.w	r3, r7, #20
 8000ede:	4619      	mov	r1, r3
 8000ee0:	480d      	ldr	r0, [pc, #52]	@ (8000f18 <HAL_I2C_MspInit+0xd0>)
 8000ee2:	f000 ff21 	bl	8001d28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	60bb      	str	r3, [r7, #8]
 8000eea:	4b09      	ldr	r3, [pc, #36]	@ (8000f10 <HAL_I2C_MspInit+0xc8>)
 8000eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eee:	4a08      	ldr	r2, [pc, #32]	@ (8000f10 <HAL_I2C_MspInit+0xc8>)
 8000ef0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000ef4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ef6:	4b06      	ldr	r3, [pc, #24]	@ (8000f10 <HAL_I2C_MspInit+0xc8>)
 8000ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000efa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000efe:	60bb      	str	r3, [r7, #8]
 8000f00:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000f02:	bf00      	nop
 8000f04:	3728      	adds	r7, #40	@ 0x28
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	40005c00 	.word	0x40005c00
 8000f10:	40023800 	.word	0x40023800
 8000f14:	40020800 	.word	0x40020800
 8000f18:	40020000 	.word	0x40020000

08000f1c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b09a      	sub	sp, #104	@ 0x68
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f24:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	605a      	str	r2, [r3, #4]
 8000f2e:	609a      	str	r2, [r3, #8]
 8000f30:	60da      	str	r2, [r3, #12]
 8000f32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f34:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f38:	2230      	movs	r2, #48	@ 0x30
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f00c fe71 	bl	800dc24 <memset>
  if(hltdc->Instance==LTDC)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4a85      	ldr	r2, [pc, #532]	@ (800115c <HAL_LTDC_MspInit+0x240>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	f040 8102 	bne.w	8001152 <HAL_LTDC_MspInit+0x236>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000f4e:	2308      	movs	r3, #8
 8000f50:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8000f52:	2332      	movs	r3, #50	@ 0x32
 8000f54:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000f56:	2302      	movs	r3, #2
 8000f58:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f62:	4618      	mov	r0, r3
 8000f64:	f004 fbf0 	bl	8005748 <HAL_RCCEx_PeriphCLKConfig>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8000f6e:	f7ff feef 	bl	8000d50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	623b      	str	r3, [r7, #32]
 8000f76:	4b7a      	ldr	r3, [pc, #488]	@ (8001160 <HAL_LTDC_MspInit+0x244>)
 8000f78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f7a:	4a79      	ldr	r2, [pc, #484]	@ (8001160 <HAL_LTDC_MspInit+0x244>)
 8000f7c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000f80:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f82:	4b77      	ldr	r3, [pc, #476]	@ (8001160 <HAL_LTDC_MspInit+0x244>)
 8000f84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f86:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000f8a:	623b      	str	r3, [r7, #32]
 8000f8c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f8e:	2300      	movs	r3, #0
 8000f90:	61fb      	str	r3, [r7, #28]
 8000f92:	4b73      	ldr	r3, [pc, #460]	@ (8001160 <HAL_LTDC_MspInit+0x244>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f96:	4a72      	ldr	r2, [pc, #456]	@ (8001160 <HAL_LTDC_MspInit+0x244>)
 8000f98:	f043 0320 	orr.w	r3, r3, #32
 8000f9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f9e:	4b70      	ldr	r3, [pc, #448]	@ (8001160 <HAL_LTDC_MspInit+0x244>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa2:	f003 0320 	and.w	r3, r3, #32
 8000fa6:	61fb      	str	r3, [r7, #28]
 8000fa8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000faa:	2300      	movs	r3, #0
 8000fac:	61bb      	str	r3, [r7, #24]
 8000fae:	4b6c      	ldr	r3, [pc, #432]	@ (8001160 <HAL_LTDC_MspInit+0x244>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb2:	4a6b      	ldr	r2, [pc, #428]	@ (8001160 <HAL_LTDC_MspInit+0x244>)
 8000fb4:	f043 0301 	orr.w	r3, r3, #1
 8000fb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fba:	4b69      	ldr	r3, [pc, #420]	@ (8001160 <HAL_LTDC_MspInit+0x244>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fbe:	f003 0301 	and.w	r3, r3, #1
 8000fc2:	61bb      	str	r3, [r7, #24]
 8000fc4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	617b      	str	r3, [r7, #20]
 8000fca:	4b65      	ldr	r3, [pc, #404]	@ (8001160 <HAL_LTDC_MspInit+0x244>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fce:	4a64      	ldr	r2, [pc, #400]	@ (8001160 <HAL_LTDC_MspInit+0x244>)
 8000fd0:	f043 0302 	orr.w	r3, r3, #2
 8000fd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fd6:	4b62      	ldr	r3, [pc, #392]	@ (8001160 <HAL_LTDC_MspInit+0x244>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fda:	f003 0302 	and.w	r3, r3, #2
 8000fde:	617b      	str	r3, [r7, #20]
 8000fe0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	613b      	str	r3, [r7, #16]
 8000fe6:	4b5e      	ldr	r3, [pc, #376]	@ (8001160 <HAL_LTDC_MspInit+0x244>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fea:	4a5d      	ldr	r2, [pc, #372]	@ (8001160 <HAL_LTDC_MspInit+0x244>)
 8000fec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ff0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ff2:	4b5b      	ldr	r3, [pc, #364]	@ (8001160 <HAL_LTDC_MspInit+0x244>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ffa:	613b      	str	r3, [r7, #16]
 8000ffc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	60fb      	str	r3, [r7, #12]
 8001002:	4b57      	ldr	r3, [pc, #348]	@ (8001160 <HAL_LTDC_MspInit+0x244>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001006:	4a56      	ldr	r2, [pc, #344]	@ (8001160 <HAL_LTDC_MspInit+0x244>)
 8001008:	f043 0304 	orr.w	r3, r3, #4
 800100c:	6313      	str	r3, [r2, #48]	@ 0x30
 800100e:	4b54      	ldr	r3, [pc, #336]	@ (8001160 <HAL_LTDC_MspInit+0x244>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001012:	f003 0304 	and.w	r3, r3, #4
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	60bb      	str	r3, [r7, #8]
 800101e:	4b50      	ldr	r3, [pc, #320]	@ (8001160 <HAL_LTDC_MspInit+0x244>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001022:	4a4f      	ldr	r2, [pc, #316]	@ (8001160 <HAL_LTDC_MspInit+0x244>)
 8001024:	f043 0308 	orr.w	r3, r3, #8
 8001028:	6313      	str	r3, [r2, #48]	@ 0x30
 800102a:	4b4d      	ldr	r3, [pc, #308]	@ (8001160 <HAL_LTDC_MspInit+0x244>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102e:	f003 0308 	and.w	r3, r3, #8
 8001032:	60bb      	str	r3, [r7, #8]
 8001034:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8001036:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800103a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103c:	2302      	movs	r3, #2
 800103e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001040:	2300      	movs	r3, #0
 8001042:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001044:	2300      	movs	r3, #0
 8001046:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001048:	230e      	movs	r3, #14
 800104a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 800104c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001050:	4619      	mov	r1, r3
 8001052:	4844      	ldr	r0, [pc, #272]	@ (8001164 <HAL_LTDC_MspInit+0x248>)
 8001054:	f000 fe68 	bl	8001d28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8001058:	f641 0358 	movw	r3, #6232	@ 0x1858
 800105c:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105e:	2302      	movs	r3, #2
 8001060:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001062:	2300      	movs	r3, #0
 8001064:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001066:	2300      	movs	r3, #0
 8001068:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800106a:	230e      	movs	r3, #14
 800106c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800106e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001072:	4619      	mov	r1, r3
 8001074:	483c      	ldr	r0, [pc, #240]	@ (8001168 <HAL_LTDC_MspInit+0x24c>)
 8001076:	f000 fe57 	bl	8001d28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 800107a:	2303      	movs	r3, #3
 800107c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107e:	2302      	movs	r3, #2
 8001080:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	2300      	movs	r3, #0
 8001084:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001086:	2300      	movs	r3, #0
 8001088:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800108a:	2309      	movs	r3, #9
 800108c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800108e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001092:	4619      	mov	r1, r3
 8001094:	4835      	ldr	r0, [pc, #212]	@ (800116c <HAL_LTDC_MspInit+0x250>)
 8001096:	f000 fe47 	bl	8001d28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 800109a:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 800109e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a0:	2302      	movs	r3, #2
 80010a2:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a4:	2300      	movs	r3, #0
 80010a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a8:	2300      	movs	r3, #0
 80010aa:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80010ac:	230e      	movs	r3, #14
 80010ae:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80010b4:	4619      	mov	r1, r3
 80010b6:	482d      	ldr	r0, [pc, #180]	@ (800116c <HAL_LTDC_MspInit+0x250>)
 80010b8:	f000 fe36 	bl	8001d28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80010bc:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 80010c0:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c2:	2302      	movs	r3, #2
 80010c4:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c6:	2300      	movs	r3, #0
 80010c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ca:	2300      	movs	r3, #0
 80010cc:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80010ce:	230e      	movs	r3, #14
 80010d0:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010d2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80010d6:	4619      	mov	r1, r3
 80010d8:	4825      	ldr	r0, [pc, #148]	@ (8001170 <HAL_LTDC_MspInit+0x254>)
 80010da:	f000 fe25 	bl	8001d28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 80010de:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 80010e2:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e4:	2302      	movs	r3, #2
 80010e6:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e8:	2300      	movs	r3, #0
 80010ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ec:	2300      	movs	r3, #0
 80010ee:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80010f0:	230e      	movs	r3, #14
 80010f2:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010f4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80010f8:	4619      	mov	r1, r3
 80010fa:	481e      	ldr	r0, [pc, #120]	@ (8001174 <HAL_LTDC_MspInit+0x258>)
 80010fc:	f000 fe14 	bl	8001d28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001100:	2348      	movs	r3, #72	@ 0x48
 8001102:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001104:	2302      	movs	r3, #2
 8001106:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001108:	2300      	movs	r3, #0
 800110a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110c:	2300      	movs	r3, #0
 800110e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001110:	230e      	movs	r3, #14
 8001112:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001114:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001118:	4619      	mov	r1, r3
 800111a:	4817      	ldr	r0, [pc, #92]	@ (8001178 <HAL_LTDC_MspInit+0x25c>)
 800111c:	f000 fe04 	bl	8001d28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001120:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001124:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001126:	2302      	movs	r3, #2
 8001128:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112a:	2300      	movs	r3, #0
 800112c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112e:	2300      	movs	r3, #0
 8001130:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001132:	2309      	movs	r3, #9
 8001134:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001136:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800113a:	4619      	mov	r1, r3
 800113c:	480c      	ldr	r0, [pc, #48]	@ (8001170 <HAL_LTDC_MspInit+0x254>)
 800113e:	f000 fdf3 	bl	8001d28 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001142:	2200      	movs	r2, #0
 8001144:	2105      	movs	r1, #5
 8001146:	2058      	movs	r0, #88	@ 0x58
 8001148:	f000 fbbc 	bl	80018c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800114c:	2058      	movs	r0, #88	@ 0x58
 800114e:	f000 fbd5 	bl	80018fc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001152:	bf00      	nop
 8001154:	3768      	adds	r7, #104	@ 0x68
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	40016800 	.word	0x40016800
 8001160:	40023800 	.word	0x40023800
 8001164:	40021400 	.word	0x40021400
 8001168:	40020000 	.word	0x40020000
 800116c:	40020400 	.word	0x40020400
 8001170:	40021800 	.word	0x40021800
 8001174:	40020800 	.word	0x40020800
 8001178:	40020c00 	.word	0x40020c00

0800117c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b08a      	sub	sp, #40	@ 0x28
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001184:	f107 0314 	add.w	r3, r7, #20
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	605a      	str	r2, [r3, #4]
 800118e:	609a      	str	r2, [r3, #8]
 8001190:	60da      	str	r2, [r3, #12]
 8001192:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a19      	ldr	r2, [pc, #100]	@ (8001200 <HAL_SPI_MspInit+0x84>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d12c      	bne.n	80011f8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800119e:	2300      	movs	r3, #0
 80011a0:	613b      	str	r3, [r7, #16]
 80011a2:	4b18      	ldr	r3, [pc, #96]	@ (8001204 <HAL_SPI_MspInit+0x88>)
 80011a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011a6:	4a17      	ldr	r2, [pc, #92]	@ (8001204 <HAL_SPI_MspInit+0x88>)
 80011a8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80011ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80011ae:	4b15      	ldr	r3, [pc, #84]	@ (8001204 <HAL_SPI_MspInit+0x88>)
 80011b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011b6:	613b      	str	r3, [r7, #16]
 80011b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80011ba:	2300      	movs	r3, #0
 80011bc:	60fb      	str	r3, [r7, #12]
 80011be:	4b11      	ldr	r3, [pc, #68]	@ (8001204 <HAL_SPI_MspInit+0x88>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c2:	4a10      	ldr	r2, [pc, #64]	@ (8001204 <HAL_SPI_MspInit+0x88>)
 80011c4:	f043 0320 	orr.w	r3, r3, #32
 80011c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001204 <HAL_SPI_MspInit+0x88>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ce:	f003 0320 	and.w	r3, r3, #32
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 80011d6:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80011da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011dc:	2302      	movs	r3, #2
 80011de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e0:	2300      	movs	r3, #0
 80011e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e4:	2300      	movs	r3, #0
 80011e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80011e8:	2305      	movs	r3, #5
 80011ea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80011ec:	f107 0314 	add.w	r3, r7, #20
 80011f0:	4619      	mov	r1, r3
 80011f2:	4805      	ldr	r0, [pc, #20]	@ (8001208 <HAL_SPI_MspInit+0x8c>)
 80011f4:	f000 fd98 	bl	8001d28 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 80011f8:	bf00      	nop
 80011fa:	3728      	adds	r7, #40	@ 0x28
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40015000 	.word	0x40015000
 8001204:	40023800 	.word	0x40023800
 8001208:	40021400 	.word	0x40021400

0800120c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800120c:	b480      	push	{r7}
 800120e:	b085      	sub	sp, #20
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a0b      	ldr	r2, [pc, #44]	@ (8001248 <HAL_TIM_Base_MspInit+0x3c>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d10d      	bne.n	800123a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	60fb      	str	r3, [r7, #12]
 8001222:	4b0a      	ldr	r3, [pc, #40]	@ (800124c <HAL_TIM_Base_MspInit+0x40>)
 8001224:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001226:	4a09      	ldr	r2, [pc, #36]	@ (800124c <HAL_TIM_Base_MspInit+0x40>)
 8001228:	f043 0301 	orr.w	r3, r3, #1
 800122c:	6453      	str	r3, [r2, #68]	@ 0x44
 800122e:	4b07      	ldr	r3, [pc, #28]	@ (800124c <HAL_TIM_Base_MspInit+0x40>)
 8001230:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001232:	f003 0301 	and.w	r3, r3, #1
 8001236:	60fb      	str	r3, [r7, #12]
 8001238:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800123a:	bf00      	nop
 800123c:	3714      	adds	r7, #20
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	40010000 	.word	0x40010000
 800124c:	40023800 	.word	0x40023800

08001250 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b08a      	sub	sp, #40	@ 0x28
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001258:	f107 0314 	add.w	r3, r7, #20
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	605a      	str	r2, [r3, #4]
 8001262:	609a      	str	r2, [r3, #8]
 8001264:	60da      	str	r2, [r3, #12]
 8001266:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a19      	ldr	r2, [pc, #100]	@ (80012d4 <HAL_UART_MspInit+0x84>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d12c      	bne.n	80012cc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	613b      	str	r3, [r7, #16]
 8001276:	4b18      	ldr	r3, [pc, #96]	@ (80012d8 <HAL_UART_MspInit+0x88>)
 8001278:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800127a:	4a17      	ldr	r2, [pc, #92]	@ (80012d8 <HAL_UART_MspInit+0x88>)
 800127c:	f043 0310 	orr.w	r3, r3, #16
 8001280:	6453      	str	r3, [r2, #68]	@ 0x44
 8001282:	4b15      	ldr	r3, [pc, #84]	@ (80012d8 <HAL_UART_MspInit+0x88>)
 8001284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001286:	f003 0310 	and.w	r3, r3, #16
 800128a:	613b      	str	r3, [r7, #16]
 800128c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	60fb      	str	r3, [r7, #12]
 8001292:	4b11      	ldr	r3, [pc, #68]	@ (80012d8 <HAL_UART_MspInit+0x88>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001296:	4a10      	ldr	r2, [pc, #64]	@ (80012d8 <HAL_UART_MspInit+0x88>)
 8001298:	f043 0301 	orr.w	r3, r3, #1
 800129c:	6313      	str	r3, [r2, #48]	@ 0x30
 800129e:	4b0e      	ldr	r3, [pc, #56]	@ (80012d8 <HAL_UART_MspInit+0x88>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a2:	f003 0301 	and.w	r3, r3, #1
 80012a6:	60fb      	str	r3, [r7, #12]
 80012a8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80012aa:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80012ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b0:	2302      	movs	r3, #2
 80012b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b8:	2303      	movs	r3, #3
 80012ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80012bc:	2307      	movs	r3, #7
 80012be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c0:	f107 0314 	add.w	r3, r7, #20
 80012c4:	4619      	mov	r1, r3
 80012c6:	4805      	ldr	r0, [pc, #20]	@ (80012dc <HAL_UART_MspInit+0x8c>)
 80012c8:	f000 fd2e 	bl	8001d28 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80012cc:	bf00      	nop
 80012ce:	3728      	adds	r7, #40	@ 0x28
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	40011000 	.word	0x40011000
 80012d8:	40023800 	.word	0x40023800
 80012dc:	40020000 	.word	0x40020000

080012e0 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80012e6:	1d3b      	adds	r3, r7, #4
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	605a      	str	r2, [r3, #4]
 80012ee:	609a      	str	r2, [r3, #8]
 80012f0:	60da      	str	r2, [r3, #12]
 80012f2:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80012f4:	4b3b      	ldr	r3, [pc, #236]	@ (80013e4 <HAL_FMC_MspInit+0x104>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d16f      	bne.n	80013dc <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 80012fc:	4b39      	ldr	r3, [pc, #228]	@ (80013e4 <HAL_FMC_MspInit+0x104>)
 80012fe:	2201      	movs	r2, #1
 8001300:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	603b      	str	r3, [r7, #0]
 8001306:	4b38      	ldr	r3, [pc, #224]	@ (80013e8 <HAL_FMC_MspInit+0x108>)
 8001308:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800130a:	4a37      	ldr	r2, [pc, #220]	@ (80013e8 <HAL_FMC_MspInit+0x108>)
 800130c:	f043 0301 	orr.w	r3, r3, #1
 8001310:	6393      	str	r3, [r2, #56]	@ 0x38
 8001312:	4b35      	ldr	r3, [pc, #212]	@ (80013e8 <HAL_FMC_MspInit+0x108>)
 8001314:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001316:	f003 0301 	and.w	r3, r3, #1
 800131a:	603b      	str	r3, [r7, #0]
 800131c:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 800131e:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8001322:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001324:	2302      	movs	r3, #2
 8001326:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001328:	2300      	movs	r3, #0
 800132a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800132c:	2303      	movs	r3, #3
 800132e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001330:	230c      	movs	r3, #12
 8001332:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001334:	1d3b      	adds	r3, r7, #4
 8001336:	4619      	mov	r1, r3
 8001338:	482c      	ldr	r0, [pc, #176]	@ (80013ec <HAL_FMC_MspInit+0x10c>)
 800133a:	f000 fcf5 	bl	8001d28 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 800133e:	2301      	movs	r3, #1
 8001340:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001342:	2302      	movs	r3, #2
 8001344:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001346:	2300      	movs	r3, #0
 8001348:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800134a:	2303      	movs	r3, #3
 800134c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800134e:	230c      	movs	r3, #12
 8001350:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8001352:	1d3b      	adds	r3, r7, #4
 8001354:	4619      	mov	r1, r3
 8001356:	4826      	ldr	r0, [pc, #152]	@ (80013f0 <HAL_FMC_MspInit+0x110>)
 8001358:	f000 fce6 	bl	8001d28 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 800135c:	f248 1333 	movw	r3, #33075	@ 0x8133
 8001360:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001362:	2302      	movs	r3, #2
 8001364:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001366:	2300      	movs	r3, #0
 8001368:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800136a:	2303      	movs	r3, #3
 800136c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800136e:	230c      	movs	r3, #12
 8001370:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001372:	1d3b      	adds	r3, r7, #4
 8001374:	4619      	mov	r1, r3
 8001376:	481f      	ldr	r0, [pc, #124]	@ (80013f4 <HAL_FMC_MspInit+0x114>)
 8001378:	f000 fcd6 	bl	8001d28 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 800137c:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8001380:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001382:	2302      	movs	r3, #2
 8001384:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001386:	2300      	movs	r3, #0
 8001388:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800138a:	2303      	movs	r3, #3
 800138c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800138e:	230c      	movs	r3, #12
 8001390:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001392:	1d3b      	adds	r3, r7, #4
 8001394:	4619      	mov	r1, r3
 8001396:	4818      	ldr	r0, [pc, #96]	@ (80013f8 <HAL_FMC_MspInit+0x118>)
 8001398:	f000 fcc6 	bl	8001d28 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 800139c:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80013a0:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a2:	2302      	movs	r3, #2
 80013a4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a6:	2300      	movs	r3, #0
 80013a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013aa:	2303      	movs	r3, #3
 80013ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80013ae:	230c      	movs	r3, #12
 80013b0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013b2:	1d3b      	adds	r3, r7, #4
 80013b4:	4619      	mov	r1, r3
 80013b6:	4811      	ldr	r0, [pc, #68]	@ (80013fc <HAL_FMC_MspInit+0x11c>)
 80013b8:	f000 fcb6 	bl	8001d28 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 80013bc:	2360      	movs	r3, #96	@ 0x60
 80013be:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c0:	2302      	movs	r3, #2
 80013c2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c4:	2300      	movs	r3, #0
 80013c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013c8:	2303      	movs	r3, #3
 80013ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80013cc:	230c      	movs	r3, #12
 80013ce:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013d0:	1d3b      	adds	r3, r7, #4
 80013d2:	4619      	mov	r1, r3
 80013d4:	480a      	ldr	r0, [pc, #40]	@ (8001400 <HAL_FMC_MspInit+0x120>)
 80013d6:	f000 fca7 	bl	8001d28 <HAL_GPIO_Init>
 80013da:	e000      	b.n	80013de <HAL_FMC_MspInit+0xfe>
    return;
 80013dc:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80013de:	3718      	adds	r7, #24
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	20000300 	.word	0x20000300
 80013e8:	40023800 	.word	0x40023800
 80013ec:	40021400 	.word	0x40021400
 80013f0:	40020800 	.word	0x40020800
 80013f4:	40021800 	.word	0x40021800
 80013f8:	40021000 	.word	0x40021000
 80013fc:	40020c00 	.word	0x40020c00
 8001400:	40020400 	.word	0x40020400

08001404 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800140c:	f7ff ff68 	bl	80012e0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001410:	bf00      	nop
 8001412:	3708      	adds	r7, #8
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}

08001418 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b08e      	sub	sp, #56	@ 0x38
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001420:	2300      	movs	r3, #0
 8001422:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001424:	2300      	movs	r3, #0
 8001426:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001428:	2300      	movs	r3, #0
 800142a:	60fb      	str	r3, [r7, #12]
 800142c:	4b33      	ldr	r3, [pc, #204]	@ (80014fc <HAL_InitTick+0xe4>)
 800142e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001430:	4a32      	ldr	r2, [pc, #200]	@ (80014fc <HAL_InitTick+0xe4>)
 8001432:	f043 0310 	orr.w	r3, r3, #16
 8001436:	6413      	str	r3, [r2, #64]	@ 0x40
 8001438:	4b30      	ldr	r3, [pc, #192]	@ (80014fc <HAL_InitTick+0xe4>)
 800143a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800143c:	f003 0310 	and.w	r3, r3, #16
 8001440:	60fb      	str	r3, [r7, #12]
 8001442:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001444:	f107 0210 	add.w	r2, r7, #16
 8001448:	f107 0314 	add.w	r3, r7, #20
 800144c:	4611      	mov	r1, r2
 800144e:	4618      	mov	r0, r3
 8001450:	f004 f948 	bl	80056e4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001454:	6a3b      	ldr	r3, [r7, #32]
 8001456:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001458:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800145a:	2b00      	cmp	r3, #0
 800145c:	d103      	bne.n	8001466 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800145e:	f004 f919 	bl	8005694 <HAL_RCC_GetPCLK1Freq>
 8001462:	6378      	str	r0, [r7, #52]	@ 0x34
 8001464:	e004      	b.n	8001470 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001466:	f004 f915 	bl	8005694 <HAL_RCC_GetPCLK1Freq>
 800146a:	4603      	mov	r3, r0
 800146c:	005b      	lsls	r3, r3, #1
 800146e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001470:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001472:	4a23      	ldr	r2, [pc, #140]	@ (8001500 <HAL_InitTick+0xe8>)
 8001474:	fba2 2303 	umull	r2, r3, r2, r3
 8001478:	0c9b      	lsrs	r3, r3, #18
 800147a:	3b01      	subs	r3, #1
 800147c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800147e:	4b21      	ldr	r3, [pc, #132]	@ (8001504 <HAL_InitTick+0xec>)
 8001480:	4a21      	ldr	r2, [pc, #132]	@ (8001508 <HAL_InitTick+0xf0>)
 8001482:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001484:	4b1f      	ldr	r3, [pc, #124]	@ (8001504 <HAL_InitTick+0xec>)
 8001486:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800148a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800148c:	4a1d      	ldr	r2, [pc, #116]	@ (8001504 <HAL_InitTick+0xec>)
 800148e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001490:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001492:	4b1c      	ldr	r3, [pc, #112]	@ (8001504 <HAL_InitTick+0xec>)
 8001494:	2200      	movs	r2, #0
 8001496:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001498:	4b1a      	ldr	r3, [pc, #104]	@ (8001504 <HAL_InitTick+0xec>)
 800149a:	2200      	movs	r2, #0
 800149c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800149e:	4b19      	ldr	r3, [pc, #100]	@ (8001504 <HAL_InitTick+0xec>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80014a4:	4817      	ldr	r0, [pc, #92]	@ (8001504 <HAL_InitTick+0xec>)
 80014a6:	f004 fbcc 	bl	8005c42 <HAL_TIM_Base_Init>
 80014aa:	4603      	mov	r3, r0
 80014ac:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80014b0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d11b      	bne.n	80014f0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80014b8:	4812      	ldr	r0, [pc, #72]	@ (8001504 <HAL_InitTick+0xec>)
 80014ba:	f004 fc11 	bl	8005ce0 <HAL_TIM_Base_Start_IT>
 80014be:	4603      	mov	r3, r0
 80014c0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80014c4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d111      	bne.n	80014f0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80014cc:	2036      	movs	r0, #54	@ 0x36
 80014ce:	f000 fa15 	bl	80018fc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2b0f      	cmp	r3, #15
 80014d6:	d808      	bhi.n	80014ea <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80014d8:	2200      	movs	r2, #0
 80014da:	6879      	ldr	r1, [r7, #4]
 80014dc:	2036      	movs	r0, #54	@ 0x36
 80014de:	f000 f9f1 	bl	80018c4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014e2:	4a0a      	ldr	r2, [pc, #40]	@ (800150c <HAL_InitTick+0xf4>)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6013      	str	r3, [r2, #0]
 80014e8:	e002      	b.n	80014f0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80014f0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3738      	adds	r7, #56	@ 0x38
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	40023800 	.word	0x40023800
 8001500:	431bde83 	.word	0x431bde83
 8001504:	20000304 	.word	0x20000304
 8001508:	40001000 	.word	0x40001000
 800150c:	20000004 	.word	0x20000004

08001510 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001514:	bf00      	nop
 8001516:	e7fd      	b.n	8001514 <NMI_Handler+0x4>

08001518 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800151c:	bf00      	nop
 800151e:	e7fd      	b.n	800151c <HardFault_Handler+0x4>

08001520 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001524:	bf00      	nop
 8001526:	e7fd      	b.n	8001524 <MemManage_Handler+0x4>

08001528 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800152c:	bf00      	nop
 800152e:	e7fd      	b.n	800152c <BusFault_Handler+0x4>

08001530 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001534:	bf00      	nop
 8001536:	e7fd      	b.n	8001534 <UsageFault_Handler+0x4>

08001538 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800153c:	bf00      	nop
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr

08001546 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001546:	b580      	push	{r7, lr}
 8001548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLUE_BUTTON_Pin);
 800154a:	2001      	movs	r0, #1
 800154c:	f000 fdcc 	bl	80020e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001550:	bf00      	nop
 8001552:	bd80      	pop	{r7, pc}

08001554 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001558:	4802      	ldr	r0, [pc, #8]	@ (8001564 <TIM6_DAC_IRQHandler+0x10>)
 800155a:	f004 fc31 	bl	8005dc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800155e:	bf00      	nop
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	20000304 	.word	0x20000304

08001568 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 800156c:	4802      	ldr	r0, [pc, #8]	@ (8001578 <OTG_HS_IRQHandler+0x10>)
 800156e:	f001 f8bf 	bl	80026f0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001572:	bf00      	nop
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	200094b8 	.word	0x200094b8

0800157c <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001580:	4802      	ldr	r0, [pc, #8]	@ (800158c <LTDC_IRQHandler+0x10>)
 8001582:	f003 f97f 	bl	8004884 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001586:	bf00      	nop
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	20000138 	.word	0x20000138

08001590 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001594:	4802      	ldr	r0, [pc, #8]	@ (80015a0 <DMA2D_IRQHandler+0x10>)
 8001596:	f000 fa24 	bl	80019e2 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800159a:	bf00      	nop
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	200000a4 	.word	0x200000a4

080015a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b086      	sub	sp, #24
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015ac:	4a14      	ldr	r2, [pc, #80]	@ (8001600 <_sbrk+0x5c>)
 80015ae:	4b15      	ldr	r3, [pc, #84]	@ (8001604 <_sbrk+0x60>)
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015b8:	4b13      	ldr	r3, [pc, #76]	@ (8001608 <_sbrk+0x64>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d102      	bne.n	80015c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015c0:	4b11      	ldr	r3, [pc, #68]	@ (8001608 <_sbrk+0x64>)
 80015c2:	4a12      	ldr	r2, [pc, #72]	@ (800160c <_sbrk+0x68>)
 80015c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015c6:	4b10      	ldr	r3, [pc, #64]	@ (8001608 <_sbrk+0x64>)
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4413      	add	r3, r2
 80015ce:	693a      	ldr	r2, [r7, #16]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d207      	bcs.n	80015e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015d4:	f00c fb3e 	bl	800dc54 <__errno>
 80015d8:	4603      	mov	r3, r0
 80015da:	220c      	movs	r2, #12
 80015dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80015e2:	e009      	b.n	80015f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015e4:	4b08      	ldr	r3, [pc, #32]	@ (8001608 <_sbrk+0x64>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015ea:	4b07      	ldr	r3, [pc, #28]	@ (8001608 <_sbrk+0x64>)
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4413      	add	r3, r2
 80015f2:	4a05      	ldr	r2, [pc, #20]	@ (8001608 <_sbrk+0x64>)
 80015f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015f6:	68fb      	ldr	r3, [r7, #12]
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3718      	adds	r7, #24
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	20030000 	.word	0x20030000
 8001604:	00000400 	.word	0x00000400
 8001608:	2000034c 	.word	0x2000034c
 800160c:	200099e0 	.word	0x200099e0

08001610 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001614:	4b06      	ldr	r3, [pc, #24]	@ (8001630 <SystemInit+0x20>)
 8001616:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800161a:	4a05      	ldr	r2, [pc, #20]	@ (8001630 <SystemInit+0x20>)
 800161c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001620:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001624:	bf00      	nop
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	e000ed00 	.word	0xe000ed00

08001634 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001634:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800166c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001638:	f7ff ffea 	bl	8001610 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800163c:	480c      	ldr	r0, [pc, #48]	@ (8001670 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800163e:	490d      	ldr	r1, [pc, #52]	@ (8001674 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001640:	4a0d      	ldr	r2, [pc, #52]	@ (8001678 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001642:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001644:	e002      	b.n	800164c <LoopCopyDataInit>

08001646 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001646:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001648:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800164a:	3304      	adds	r3, #4

0800164c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800164c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800164e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001650:	d3f9      	bcc.n	8001646 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001652:	4a0a      	ldr	r2, [pc, #40]	@ (800167c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001654:	4c0a      	ldr	r4, [pc, #40]	@ (8001680 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001656:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001658:	e001      	b.n	800165e <LoopFillZerobss>

0800165a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800165a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800165c:	3204      	adds	r2, #4

0800165e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800165e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001660:	d3fb      	bcc.n	800165a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001662:	f00c fafd 	bl	800dc60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001666:	f7fe ff7b 	bl	8000560 <main>
  bx  lr    
 800166a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800166c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001670:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001674:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001678:	0800ddf4 	.word	0x0800ddf4
  ldr r2, =_sbss
 800167c:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001680:	200099e0 	.word	0x200099e0

08001684 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001684:	e7fe      	b.n	8001684 <ADC_IRQHandler>
	...

08001688 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800168c:	4b0e      	ldr	r3, [pc, #56]	@ (80016c8 <HAL_Init+0x40>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a0d      	ldr	r2, [pc, #52]	@ (80016c8 <HAL_Init+0x40>)
 8001692:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001696:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001698:	4b0b      	ldr	r3, [pc, #44]	@ (80016c8 <HAL_Init+0x40>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a0a      	ldr	r2, [pc, #40]	@ (80016c8 <HAL_Init+0x40>)
 800169e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80016a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016a4:	4b08      	ldr	r3, [pc, #32]	@ (80016c8 <HAL_Init+0x40>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a07      	ldr	r2, [pc, #28]	@ (80016c8 <HAL_Init+0x40>)
 80016aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016b0:	2003      	movs	r0, #3
 80016b2:	f000 f8fc 	bl	80018ae <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016b6:	200f      	movs	r0, #15
 80016b8:	f7ff feae 	bl	8001418 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016bc:	f7ff fb4e 	bl	8000d5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016c0:	2300      	movs	r3, #0
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	40023c00 	.word	0x40023c00

080016cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016d0:	4b06      	ldr	r3, [pc, #24]	@ (80016ec <HAL_IncTick+0x20>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	461a      	mov	r2, r3
 80016d6:	4b06      	ldr	r3, [pc, #24]	@ (80016f0 <HAL_IncTick+0x24>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4413      	add	r3, r2
 80016dc:	4a04      	ldr	r2, [pc, #16]	@ (80016f0 <HAL_IncTick+0x24>)
 80016de:	6013      	str	r3, [r2, #0]
}
 80016e0:	bf00      	nop
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	20000008 	.word	0x20000008
 80016f0:	20000350 	.word	0x20000350

080016f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  return uwTick;
 80016f8:	4b03      	ldr	r3, [pc, #12]	@ (8001708 <HAL_GetTick+0x14>)
 80016fa:	681b      	ldr	r3, [r3, #0]
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	20000350 	.word	0x20000350

0800170c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001714:	f7ff ffee 	bl	80016f4 <HAL_GetTick>
 8001718:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001724:	d005      	beq.n	8001732 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001726:	4b0a      	ldr	r3, [pc, #40]	@ (8001750 <HAL_Delay+0x44>)
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	461a      	mov	r2, r3
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	4413      	add	r3, r2
 8001730:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001732:	bf00      	nop
 8001734:	f7ff ffde 	bl	80016f4 <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	68fa      	ldr	r2, [r7, #12]
 8001740:	429a      	cmp	r2, r3
 8001742:	d8f7      	bhi.n	8001734 <HAL_Delay+0x28>
  {
  }
}
 8001744:	bf00      	nop
 8001746:	bf00      	nop
 8001748:	3710      	adds	r7, #16
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	20000008 	.word	0x20000008

08001754 <__NVIC_SetPriorityGrouping>:
{
 8001754:	b480      	push	{r7}
 8001756:	b085      	sub	sp, #20
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	f003 0307 	and.w	r3, r3, #7
 8001762:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001764:	4b0c      	ldr	r3, [pc, #48]	@ (8001798 <__NVIC_SetPriorityGrouping+0x44>)
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800176a:	68ba      	ldr	r2, [r7, #8]
 800176c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001770:	4013      	ands	r3, r2
 8001772:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800177c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001780:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001784:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001786:	4a04      	ldr	r2, [pc, #16]	@ (8001798 <__NVIC_SetPriorityGrouping+0x44>)
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	60d3      	str	r3, [r2, #12]
}
 800178c:	bf00      	nop
 800178e:	3714      	adds	r7, #20
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr
 8001798:	e000ed00 	.word	0xe000ed00

0800179c <__NVIC_GetPriorityGrouping>:
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017a0:	4b04      	ldr	r3, [pc, #16]	@ (80017b4 <__NVIC_GetPriorityGrouping+0x18>)
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	0a1b      	lsrs	r3, r3, #8
 80017a6:	f003 0307 	and.w	r3, r3, #7
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr
 80017b4:	e000ed00 	.word	0xe000ed00

080017b8 <__NVIC_EnableIRQ>:
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	4603      	mov	r3, r0
 80017c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	db0b      	blt.n	80017e2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017ca:	79fb      	ldrb	r3, [r7, #7]
 80017cc:	f003 021f 	and.w	r2, r3, #31
 80017d0:	4907      	ldr	r1, [pc, #28]	@ (80017f0 <__NVIC_EnableIRQ+0x38>)
 80017d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d6:	095b      	lsrs	r3, r3, #5
 80017d8:	2001      	movs	r0, #1
 80017da:	fa00 f202 	lsl.w	r2, r0, r2
 80017de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80017e2:	bf00      	nop
 80017e4:	370c      	adds	r7, #12
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	e000e100 	.word	0xe000e100

080017f4 <__NVIC_SetPriority>:
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	4603      	mov	r3, r0
 80017fc:	6039      	str	r1, [r7, #0]
 80017fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001800:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001804:	2b00      	cmp	r3, #0
 8001806:	db0a      	blt.n	800181e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	b2da      	uxtb	r2, r3
 800180c:	490c      	ldr	r1, [pc, #48]	@ (8001840 <__NVIC_SetPriority+0x4c>)
 800180e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001812:	0112      	lsls	r2, r2, #4
 8001814:	b2d2      	uxtb	r2, r2
 8001816:	440b      	add	r3, r1
 8001818:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800181c:	e00a      	b.n	8001834 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	b2da      	uxtb	r2, r3
 8001822:	4908      	ldr	r1, [pc, #32]	@ (8001844 <__NVIC_SetPriority+0x50>)
 8001824:	79fb      	ldrb	r3, [r7, #7]
 8001826:	f003 030f 	and.w	r3, r3, #15
 800182a:	3b04      	subs	r3, #4
 800182c:	0112      	lsls	r2, r2, #4
 800182e:	b2d2      	uxtb	r2, r2
 8001830:	440b      	add	r3, r1
 8001832:	761a      	strb	r2, [r3, #24]
}
 8001834:	bf00      	nop
 8001836:	370c      	adds	r7, #12
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr
 8001840:	e000e100 	.word	0xe000e100
 8001844:	e000ed00 	.word	0xe000ed00

08001848 <NVIC_EncodePriority>:
{
 8001848:	b480      	push	{r7}
 800184a:	b089      	sub	sp, #36	@ 0x24
 800184c:	af00      	add	r7, sp, #0
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	60b9      	str	r1, [r7, #8]
 8001852:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	f003 0307 	and.w	r3, r3, #7
 800185a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	f1c3 0307 	rsb	r3, r3, #7
 8001862:	2b04      	cmp	r3, #4
 8001864:	bf28      	it	cs
 8001866:	2304      	movcs	r3, #4
 8001868:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	3304      	adds	r3, #4
 800186e:	2b06      	cmp	r3, #6
 8001870:	d902      	bls.n	8001878 <NVIC_EncodePriority+0x30>
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	3b03      	subs	r3, #3
 8001876:	e000      	b.n	800187a <NVIC_EncodePriority+0x32>
 8001878:	2300      	movs	r3, #0
 800187a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800187c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001880:	69bb      	ldr	r3, [r7, #24]
 8001882:	fa02 f303 	lsl.w	r3, r2, r3
 8001886:	43da      	mvns	r2, r3
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	401a      	ands	r2, r3
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001890:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	fa01 f303 	lsl.w	r3, r1, r3
 800189a:	43d9      	mvns	r1, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a0:	4313      	orrs	r3, r2
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3724      	adds	r7, #36	@ 0x24
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr

080018ae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018ae:	b580      	push	{r7, lr}
 80018b0:	b082      	sub	sp, #8
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f7ff ff4c 	bl	8001754 <__NVIC_SetPriorityGrouping>
}
 80018bc:	bf00      	nop
 80018be:	3708      	adds	r7, #8
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b086      	sub	sp, #24
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	4603      	mov	r3, r0
 80018cc:	60b9      	str	r1, [r7, #8]
 80018ce:	607a      	str	r2, [r7, #4]
 80018d0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018d2:	2300      	movs	r3, #0
 80018d4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018d6:	f7ff ff61 	bl	800179c <__NVIC_GetPriorityGrouping>
 80018da:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	68b9      	ldr	r1, [r7, #8]
 80018e0:	6978      	ldr	r0, [r7, #20]
 80018e2:	f7ff ffb1 	bl	8001848 <NVIC_EncodePriority>
 80018e6:	4602      	mov	r2, r0
 80018e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018ec:	4611      	mov	r1, r2
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7ff ff80 	bl	80017f4 <__NVIC_SetPriority>
}
 80018f4:	bf00      	nop
 80018f6:	3718      	adds	r7, #24
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}

080018fc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	4603      	mov	r3, r0
 8001904:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190a:	4618      	mov	r0, r3
 800190c:	f7ff ff54 	bl	80017b8 <__NVIC_EnableIRQ>
}
 8001910:	bf00      	nop
 8001912:	3708      	adds	r7, #8
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}

08001918 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d101      	bne.n	800192a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e00e      	b.n	8001948 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	795b      	ldrb	r3, [r3, #5]
 800192e:	b2db      	uxtb	r3, r3
 8001930:	2b00      	cmp	r3, #0
 8001932:	d105      	bne.n	8001940 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2200      	movs	r2, #0
 8001938:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f7ff fa3a 	bl	8000db4 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2201      	movs	r2, #1
 8001944:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001946:	2300      	movs	r3, #0
}
 8001948:	4618      	mov	r0, r3
 800194a:	3708      	adds	r7, #8
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}

08001950 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d101      	bne.n	8001962 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e03b      	b.n	80019da <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001968:	b2db      	uxtb	r3, r3
 800196a:	2b00      	cmp	r3, #0
 800196c:	d106      	bne.n	800197c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2200      	movs	r2, #0
 8001972:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f7ff fa3e 	bl	8000df8 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2202      	movs	r2, #2
 8001980:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	685a      	ldr	r2, [r3, #4]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	430a      	orrs	r2, r1
 8001998:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019a0:	f023 0107 	bic.w	r1, r3, #7
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	689a      	ldr	r2, [r3, #8]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	430a      	orrs	r2, r1
 80019ae:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b6:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80019ba:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	68d1      	ldr	r1, [r2, #12]
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	6812      	ldr	r2, [r2, #0]
 80019c6:	430b      	orrs	r3, r1
 80019c8:	6413      	str	r3, [r2, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2200      	movs	r2, #0
 80019ce:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2201      	movs	r2, #1
 80019d4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 80019d8:	2300      	movs	r3, #0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}

080019e2 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80019e2:	b580      	push	{r7, lr}
 80019e4:	b084      	sub	sp, #16
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	f003 0301 	and.w	r3, r3, #1
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d026      	beq.n	8001a52 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d021      	beq.n	8001a52 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001a1c:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a22:	f043 0201 	orr.w	r2, r3, #1
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	2201      	movs	r2, #1
 8001a30:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2204      	movs	r2, #4
 8001a36:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	695b      	ldr	r3, [r3, #20]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d003      	beq.n	8001a52 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	695b      	ldr	r3, [r3, #20]
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	f003 0320 	and.w	r3, r3, #32
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d026      	beq.n	8001aaa <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d021      	beq.n	8001aaa <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001a74:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	2220      	movs	r2, #32
 8001a7c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a82:	f043 0202 	orr.w	r2, r3, #2
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2204      	movs	r2, #4
 8001a8e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2200      	movs	r2, #0
 8001a96:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	695b      	ldr	r3, [r3, #20]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d003      	beq.n	8001aaa <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	695b      	ldr	r3, [r3, #20]
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	f003 0308 	and.w	r3, r3, #8
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d026      	beq.n	8001b02 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d021      	beq.n	8001b02 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001acc:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	2208      	movs	r2, #8
 8001ad4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ada:	f043 0204 	orr.w	r2, r3, #4
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2204      	movs	r2, #4
 8001ae6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	695b      	ldr	r3, [r3, #20]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d003      	beq.n	8001b02 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	695b      	ldr	r3, [r3, #20]
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	f003 0304 	and.w	r3, r3, #4
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d013      	beq.n	8001b34 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d00e      	beq.n	8001b34 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001b24:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	2204      	movs	r2, #4
 8001b2c:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f000 f853 	bl	8001bda <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	f003 0302 	and.w	r3, r3, #2
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d024      	beq.n	8001b88 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d01f      	beq.n	8001b88 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001b56:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	2202      	movs	r2, #2
 8001b5e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2200      	movs	r2, #0
 8001b74:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	691b      	ldr	r3, [r3, #16]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d003      	beq.n	8001b88 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	691b      	ldr	r3, [r3, #16]
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	f003 0310 	and.w	r3, r3, #16
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d01f      	beq.n	8001bd2 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d01a      	beq.n	8001bd2 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001baa:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2210      	movs	r2, #16
 8001bb2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	f000 f80e 	bl	8001bee <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8001bd2:	bf00      	nop
 8001bd4:	3710      	adds	r7, #16
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}

08001bda <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	b083      	sub	sp, #12
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8001be2:	bf00      	nop
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr

08001bee <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001bee:	b480      	push	{r7}
 8001bf0:	b083      	sub	sp, #12
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8001bf6:	bf00      	nop
 8001bf8:	370c      	adds	r7, #12
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
	...

08001c04 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b087      	sub	sp, #28
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d101      	bne.n	8001c24 <HAL_DMA2D_ConfigLayer+0x20>
 8001c20:	2302      	movs	r3, #2
 8001c22:	e079      	b.n	8001d18 <HAL_DMA2D_ConfigLayer+0x114>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2201      	movs	r2, #1
 8001c28:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2202      	movs	r2, #2
 8001c30:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	011b      	lsls	r3, r3, #4
 8001c38:	3318      	adds	r3, #24
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	4413      	add	r3, r2
 8001c3e:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	685a      	ldr	r2, [r3, #4]
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	041b      	lsls	r3, r3, #16
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8001c4e:	4b35      	ldr	r3, [pc, #212]	@ (8001d24 <HAL_DMA2D_ConfigLayer+0x120>)
 8001c50:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	2b0a      	cmp	r3, #10
 8001c58:	d003      	beq.n	8001c62 <HAL_DMA2D_ConfigLayer+0x5e>
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	2b09      	cmp	r3, #9
 8001c60:	d107      	bne.n	8001c72 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	68db      	ldr	r3, [r3, #12]
 8001c66:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8001c6a:	697a      	ldr	r2, [r7, #20]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	617b      	str	r3, [r7, #20]
 8001c70:	e005      	b.n	8001c7e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	68db      	ldr	r3, [r3, #12]
 8001c76:	061b      	lsls	r3, r3, #24
 8001c78:	697a      	ldr	r2, [r7, #20]
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d120      	bne.n	8001cc6 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	43db      	mvns	r3, r3
 8001c8e:	ea02 0103 	and.w	r1, r2, r3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	697a      	ldr	r2, [r7, #20]
 8001c98:	430a      	orrs	r2, r1
 8001c9a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	693a      	ldr	r2, [r7, #16]
 8001ca2:	6812      	ldr	r2, [r2, #0]
 8001ca4:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	2b0a      	cmp	r3, #10
 8001cac:	d003      	beq.n	8001cb6 <HAL_DMA2D_ConfigLayer+0xb2>
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	2b09      	cmp	r3, #9
 8001cb4:	d127      	bne.n	8001d06 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	68da      	ldr	r2, [r3, #12]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8001cc2:	629a      	str	r2, [r3, #40]	@ 0x28
 8001cc4:	e01f      	b.n	8001d06 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	69da      	ldr	r2, [r3, #28]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	43db      	mvns	r3, r3
 8001cd0:	ea02 0103 	and.w	r1, r2, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	697a      	ldr	r2, [r7, #20]
 8001cda:	430a      	orrs	r2, r1
 8001cdc:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	693a      	ldr	r2, [r7, #16]
 8001ce4:	6812      	ldr	r2, [r2, #0]
 8001ce6:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	2b0a      	cmp	r3, #10
 8001cee:	d003      	beq.n	8001cf8 <HAL_DMA2D_ConfigLayer+0xf4>
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	2b09      	cmp	r3, #9
 8001cf6:	d106      	bne.n	8001d06 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	68da      	ldr	r2, [r3, #12]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8001d04:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2201      	movs	r2, #1
 8001d0a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2200      	movs	r2, #0
 8001d12:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8001d16:	2300      	movs	r3, #0
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	371c      	adds	r7, #28
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr
 8001d24:	ff03000f 	.word	0xff03000f

08001d28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b089      	sub	sp, #36	@ 0x24
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d32:	2300      	movs	r3, #0
 8001d34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d36:	2300      	movs	r3, #0
 8001d38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d3e:	2300      	movs	r3, #0
 8001d40:	61fb      	str	r3, [r7, #28]
 8001d42:	e177      	b.n	8002034 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d44:	2201      	movs	r2, #1
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	697a      	ldr	r2, [r7, #20]
 8001d54:	4013      	ands	r3, r2
 8001d56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d58:	693a      	ldr	r2, [r7, #16]
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	f040 8166 	bne.w	800202e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f003 0303 	and.w	r3, r3, #3
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d005      	beq.n	8001d7a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d130      	bne.n	8001ddc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	005b      	lsls	r3, r3, #1
 8001d84:	2203      	movs	r2, #3
 8001d86:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8a:	43db      	mvns	r3, r3
 8001d8c:	69ba      	ldr	r2, [r7, #24]
 8001d8e:	4013      	ands	r3, r2
 8001d90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	68da      	ldr	r2, [r3, #12]
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	005b      	lsls	r3, r3, #1
 8001d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9e:	69ba      	ldr	r2, [r7, #24]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	69ba      	ldr	r2, [r7, #24]
 8001da8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001db0:	2201      	movs	r2, #1
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	fa02 f303 	lsl.w	r3, r2, r3
 8001db8:	43db      	mvns	r3, r3
 8001dba:	69ba      	ldr	r2, [r7, #24]
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	091b      	lsrs	r3, r3, #4
 8001dc6:	f003 0201 	and.w	r2, r3, #1
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f003 0303 	and.w	r3, r3, #3
 8001de4:	2b03      	cmp	r3, #3
 8001de6:	d017      	beq.n	8001e18 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	005b      	lsls	r3, r3, #1
 8001df2:	2203      	movs	r2, #3
 8001df4:	fa02 f303 	lsl.w	r3, r2, r3
 8001df8:	43db      	mvns	r3, r3
 8001dfa:	69ba      	ldr	r2, [r7, #24]
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	689a      	ldr	r2, [r3, #8]
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	005b      	lsls	r3, r3, #1
 8001e08:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0c:	69ba      	ldr	r2, [r7, #24]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	69ba      	ldr	r2, [r7, #24]
 8001e16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f003 0303 	and.w	r3, r3, #3
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d123      	bne.n	8001e6c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	08da      	lsrs	r2, r3, #3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	3208      	adds	r2, #8
 8001e2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e30:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	f003 0307 	and.w	r3, r3, #7
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	220f      	movs	r2, #15
 8001e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e40:	43db      	mvns	r3, r3
 8001e42:	69ba      	ldr	r2, [r7, #24]
 8001e44:	4013      	ands	r3, r2
 8001e46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	691a      	ldr	r2, [r3, #16]
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	f003 0307 	and.w	r3, r3, #7
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	fa02 f303 	lsl.w	r3, r2, r3
 8001e58:	69ba      	ldr	r2, [r7, #24]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	08da      	lsrs	r2, r3, #3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	3208      	adds	r2, #8
 8001e66:	69b9      	ldr	r1, [r7, #24]
 8001e68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	005b      	lsls	r3, r3, #1
 8001e76:	2203      	movs	r2, #3
 8001e78:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7c:	43db      	mvns	r3, r3
 8001e7e:	69ba      	ldr	r2, [r7, #24]
 8001e80:	4013      	ands	r3, r2
 8001e82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f003 0203 	and.w	r2, r3, #3
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	fa02 f303 	lsl.w	r3, r2, r3
 8001e94:	69ba      	ldr	r2, [r7, #24]
 8001e96:	4313      	orrs	r3, r2
 8001e98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	f000 80c0 	beq.w	800202e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eae:	2300      	movs	r3, #0
 8001eb0:	60fb      	str	r3, [r7, #12]
 8001eb2:	4b66      	ldr	r3, [pc, #408]	@ (800204c <HAL_GPIO_Init+0x324>)
 8001eb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eb6:	4a65      	ldr	r2, [pc, #404]	@ (800204c <HAL_GPIO_Init+0x324>)
 8001eb8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ebc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ebe:	4b63      	ldr	r3, [pc, #396]	@ (800204c <HAL_GPIO_Init+0x324>)
 8001ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ec2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ec6:	60fb      	str	r3, [r7, #12]
 8001ec8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001eca:	4a61      	ldr	r2, [pc, #388]	@ (8002050 <HAL_GPIO_Init+0x328>)
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	089b      	lsrs	r3, r3, #2
 8001ed0:	3302      	adds	r3, #2
 8001ed2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	f003 0303 	and.w	r3, r3, #3
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	220f      	movs	r2, #15
 8001ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee6:	43db      	mvns	r3, r3
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	4013      	ands	r3, r2
 8001eec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a58      	ldr	r2, [pc, #352]	@ (8002054 <HAL_GPIO_Init+0x32c>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d037      	beq.n	8001f66 <HAL_GPIO_Init+0x23e>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a57      	ldr	r2, [pc, #348]	@ (8002058 <HAL_GPIO_Init+0x330>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d031      	beq.n	8001f62 <HAL_GPIO_Init+0x23a>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a56      	ldr	r2, [pc, #344]	@ (800205c <HAL_GPIO_Init+0x334>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d02b      	beq.n	8001f5e <HAL_GPIO_Init+0x236>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a55      	ldr	r2, [pc, #340]	@ (8002060 <HAL_GPIO_Init+0x338>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d025      	beq.n	8001f5a <HAL_GPIO_Init+0x232>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a54      	ldr	r2, [pc, #336]	@ (8002064 <HAL_GPIO_Init+0x33c>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d01f      	beq.n	8001f56 <HAL_GPIO_Init+0x22e>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a53      	ldr	r2, [pc, #332]	@ (8002068 <HAL_GPIO_Init+0x340>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d019      	beq.n	8001f52 <HAL_GPIO_Init+0x22a>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a52      	ldr	r2, [pc, #328]	@ (800206c <HAL_GPIO_Init+0x344>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d013      	beq.n	8001f4e <HAL_GPIO_Init+0x226>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a51      	ldr	r2, [pc, #324]	@ (8002070 <HAL_GPIO_Init+0x348>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d00d      	beq.n	8001f4a <HAL_GPIO_Init+0x222>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a50      	ldr	r2, [pc, #320]	@ (8002074 <HAL_GPIO_Init+0x34c>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d007      	beq.n	8001f46 <HAL_GPIO_Init+0x21e>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a4f      	ldr	r2, [pc, #316]	@ (8002078 <HAL_GPIO_Init+0x350>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d101      	bne.n	8001f42 <HAL_GPIO_Init+0x21a>
 8001f3e:	2309      	movs	r3, #9
 8001f40:	e012      	b.n	8001f68 <HAL_GPIO_Init+0x240>
 8001f42:	230a      	movs	r3, #10
 8001f44:	e010      	b.n	8001f68 <HAL_GPIO_Init+0x240>
 8001f46:	2308      	movs	r3, #8
 8001f48:	e00e      	b.n	8001f68 <HAL_GPIO_Init+0x240>
 8001f4a:	2307      	movs	r3, #7
 8001f4c:	e00c      	b.n	8001f68 <HAL_GPIO_Init+0x240>
 8001f4e:	2306      	movs	r3, #6
 8001f50:	e00a      	b.n	8001f68 <HAL_GPIO_Init+0x240>
 8001f52:	2305      	movs	r3, #5
 8001f54:	e008      	b.n	8001f68 <HAL_GPIO_Init+0x240>
 8001f56:	2304      	movs	r3, #4
 8001f58:	e006      	b.n	8001f68 <HAL_GPIO_Init+0x240>
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e004      	b.n	8001f68 <HAL_GPIO_Init+0x240>
 8001f5e:	2302      	movs	r3, #2
 8001f60:	e002      	b.n	8001f68 <HAL_GPIO_Init+0x240>
 8001f62:	2301      	movs	r3, #1
 8001f64:	e000      	b.n	8001f68 <HAL_GPIO_Init+0x240>
 8001f66:	2300      	movs	r3, #0
 8001f68:	69fa      	ldr	r2, [r7, #28]
 8001f6a:	f002 0203 	and.w	r2, r2, #3
 8001f6e:	0092      	lsls	r2, r2, #2
 8001f70:	4093      	lsls	r3, r2
 8001f72:	69ba      	ldr	r2, [r7, #24]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f78:	4935      	ldr	r1, [pc, #212]	@ (8002050 <HAL_GPIO_Init+0x328>)
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	089b      	lsrs	r3, r3, #2
 8001f7e:	3302      	adds	r3, #2
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f86:	4b3d      	ldr	r3, [pc, #244]	@ (800207c <HAL_GPIO_Init+0x354>)
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	43db      	mvns	r3, r3
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	4013      	ands	r3, r2
 8001f94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d003      	beq.n	8001faa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001fa2:	69ba      	ldr	r2, [r7, #24]
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001faa:	4a34      	ldr	r2, [pc, #208]	@ (800207c <HAL_GPIO_Init+0x354>)
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fb0:	4b32      	ldr	r3, [pc, #200]	@ (800207c <HAL_GPIO_Init+0x354>)
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	43db      	mvns	r3, r3
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d003      	beq.n	8001fd4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fd4:	4a29      	ldr	r2, [pc, #164]	@ (800207c <HAL_GPIO_Init+0x354>)
 8001fd6:	69bb      	ldr	r3, [r7, #24]
 8001fd8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001fda:	4b28      	ldr	r3, [pc, #160]	@ (800207c <HAL_GPIO_Init+0x354>)
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	43db      	mvns	r3, r3
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d003      	beq.n	8001ffe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001ff6:	69ba      	ldr	r2, [r7, #24]
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ffe:	4a1f      	ldr	r2, [pc, #124]	@ (800207c <HAL_GPIO_Init+0x354>)
 8002000:	69bb      	ldr	r3, [r7, #24]
 8002002:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002004:	4b1d      	ldr	r3, [pc, #116]	@ (800207c <HAL_GPIO_Init+0x354>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	43db      	mvns	r3, r3
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	4013      	ands	r3, r2
 8002012:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800201c:	2b00      	cmp	r3, #0
 800201e:	d003      	beq.n	8002028 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	4313      	orrs	r3, r2
 8002026:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002028:	4a14      	ldr	r2, [pc, #80]	@ (800207c <HAL_GPIO_Init+0x354>)
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	3301      	adds	r3, #1
 8002032:	61fb      	str	r3, [r7, #28]
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	2b0f      	cmp	r3, #15
 8002038:	f67f ae84 	bls.w	8001d44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800203c:	bf00      	nop
 800203e:	bf00      	nop
 8002040:	3724      	adds	r7, #36	@ 0x24
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	40023800 	.word	0x40023800
 8002050:	40013800 	.word	0x40013800
 8002054:	40020000 	.word	0x40020000
 8002058:	40020400 	.word	0x40020400
 800205c:	40020800 	.word	0x40020800
 8002060:	40020c00 	.word	0x40020c00
 8002064:	40021000 	.word	0x40021000
 8002068:	40021400 	.word	0x40021400
 800206c:	40021800 	.word	0x40021800
 8002070:	40021c00 	.word	0x40021c00
 8002074:	40022000 	.word	0x40022000
 8002078:	40022400 	.word	0x40022400
 800207c:	40013c00 	.word	0x40013c00

08002080 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	460b      	mov	r3, r1
 800208a:	807b      	strh	r3, [r7, #2]
 800208c:	4613      	mov	r3, r2
 800208e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002090:	787b      	ldrb	r3, [r7, #1]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d003      	beq.n	800209e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002096:	887a      	ldrh	r2, [r7, #2]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800209c:	e003      	b.n	80020a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800209e:	887b      	ldrh	r3, [r7, #2]
 80020a0:	041a      	lsls	r2, r3, #16
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	619a      	str	r2, [r3, #24]
}
 80020a6:	bf00      	nop
 80020a8:	370c      	adds	r7, #12
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr

080020b2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80020b2:	b480      	push	{r7}
 80020b4:	b085      	sub	sp, #20
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
 80020ba:	460b      	mov	r3, r1
 80020bc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	695b      	ldr	r3, [r3, #20]
 80020c2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80020c4:	887a      	ldrh	r2, [r7, #2]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	4013      	ands	r3, r2
 80020ca:	041a      	lsls	r2, r3, #16
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	43d9      	mvns	r1, r3
 80020d0:	887b      	ldrh	r3, [r7, #2]
 80020d2:	400b      	ands	r3, r1
 80020d4:	431a      	orrs	r2, r3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	619a      	str	r2, [r3, #24]
}
 80020da:	bf00      	nop
 80020dc:	3714      	adds	r7, #20
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
	...

080020e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	4603      	mov	r3, r0
 80020f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80020f2:	4b08      	ldr	r3, [pc, #32]	@ (8002114 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020f4:	695a      	ldr	r2, [r3, #20]
 80020f6:	88fb      	ldrh	r3, [r7, #6]
 80020f8:	4013      	ands	r3, r2
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d006      	beq.n	800210c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80020fe:	4a05      	ldr	r2, [pc, #20]	@ (8002114 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002100:	88fb      	ldrh	r3, [r7, #6]
 8002102:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002104:	88fb      	ldrh	r3, [r7, #6]
 8002106:	4618      	mov	r0, r3
 8002108:	f000 f806 	bl	8002118 <HAL_GPIO_EXTI_Callback>
  }
}
 800210c:	bf00      	nop
 800210e:	3708      	adds	r7, #8
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	40013c00 	.word	0x40013c00

08002118 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	4603      	mov	r3, r0
 8002120:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002122:	bf00      	nop
 8002124:	370c      	adds	r7, #12
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr

0800212e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800212e:	b580      	push	{r7, lr}
 8002130:	b086      	sub	sp, #24
 8002132:	af02      	add	r7, sp, #8
 8002134:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d101      	bne.n	8002140 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e059      	b.n	80021f4 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 800214c:	b2db      	uxtb	r3, r3
 800214e:	2b00      	cmp	r3, #0
 8002150:	d106      	bne.n	8002160 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f00b f9ee 	bl	800d53c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2203      	movs	r2, #3
 8002164:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800216e:	d102      	bne.n	8002176 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2200      	movs	r2, #0
 8002174:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4618      	mov	r0, r3
 800217c:	f004 fdd5 	bl	8006d2a <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6818      	ldr	r0, [r3, #0]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	7c1a      	ldrb	r2, [r3, #16]
 8002188:	f88d 2000 	strb.w	r2, [sp]
 800218c:	3304      	adds	r3, #4
 800218e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002190:	f004 fd56 	bl	8006c40 <USB_CoreInit>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d005      	beq.n	80021a6 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2202      	movs	r2, #2
 800219e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e026      	b.n	80021f4 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	2101      	movs	r1, #1
 80021ac:	4618      	mov	r0, r3
 80021ae:	f004 fdcd 	bl	8006d4c <USB_SetCurrentMode>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d005      	beq.n	80021c4 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2202      	movs	r2, #2
 80021bc:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e017      	b.n	80021f4 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6818      	ldr	r0, [r3, #0]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	7c1a      	ldrb	r2, [r3, #16]
 80021cc:	f88d 2000 	strb.w	r2, [sp]
 80021d0:	3304      	adds	r3, #4
 80021d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021d4:	f004 ff70 	bl	80070b8 <USB_HostInit>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d005      	beq.n	80021ea <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2202      	movs	r2, #2
 80021e2:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e004      	b.n	80021f4 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2201      	movs	r2, #1
 80021ee:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 80021f2:	2300      	movs	r3, #0
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3710      	adds	r7, #16
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}

080021fc <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80021fc:	b590      	push	{r4, r7, lr}
 80021fe:	b08b      	sub	sp, #44	@ 0x2c
 8002200:	af04      	add	r7, sp, #16
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	4608      	mov	r0, r1
 8002206:	4611      	mov	r1, r2
 8002208:	461a      	mov	r2, r3
 800220a:	4603      	mov	r3, r0
 800220c:	70fb      	strb	r3, [r7, #3]
 800220e:	460b      	mov	r3, r1
 8002210:	70bb      	strb	r3, [r7, #2]
 8002212:	4613      	mov	r3, r2
 8002214:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8002216:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8002218:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002220:	2b01      	cmp	r3, #1
 8002222:	d101      	bne.n	8002228 <HAL_HCD_HC_Init+0x2c>
 8002224:	2302      	movs	r3, #2
 8002226:	e09d      	b.n	8002364 <HAL_HCD_HC_Init+0x168>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2201      	movs	r2, #1
 800222c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8002230:	78fa      	ldrb	r2, [r7, #3]
 8002232:	6879      	ldr	r1, [r7, #4]
 8002234:	4613      	mov	r3, r2
 8002236:	011b      	lsls	r3, r3, #4
 8002238:	1a9b      	subs	r3, r3, r2
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	440b      	add	r3, r1
 800223e:	3319      	adds	r3, #25
 8002240:	2200      	movs	r2, #0
 8002242:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002244:	78fa      	ldrb	r2, [r7, #3]
 8002246:	6879      	ldr	r1, [r7, #4]
 8002248:	4613      	mov	r3, r2
 800224a:	011b      	lsls	r3, r3, #4
 800224c:	1a9b      	subs	r3, r3, r2
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	440b      	add	r3, r1
 8002252:	3314      	adds	r3, #20
 8002254:	787a      	ldrb	r2, [r7, #1]
 8002256:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002258:	78fa      	ldrb	r2, [r7, #3]
 800225a:	6879      	ldr	r1, [r7, #4]
 800225c:	4613      	mov	r3, r2
 800225e:	011b      	lsls	r3, r3, #4
 8002260:	1a9b      	subs	r3, r3, r2
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	440b      	add	r3, r1
 8002266:	3315      	adds	r3, #21
 8002268:	78fa      	ldrb	r2, [r7, #3]
 800226a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800226c:	78fa      	ldrb	r2, [r7, #3]
 800226e:	6879      	ldr	r1, [r7, #4]
 8002270:	4613      	mov	r3, r2
 8002272:	011b      	lsls	r3, r3, #4
 8002274:	1a9b      	subs	r3, r3, r2
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	440b      	add	r3, r1
 800227a:	3326      	adds	r3, #38	@ 0x26
 800227c:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8002280:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002282:	78fa      	ldrb	r2, [r7, #3]
 8002284:	78bb      	ldrb	r3, [r7, #2]
 8002286:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800228a:	b2d8      	uxtb	r0, r3
 800228c:	6879      	ldr	r1, [r7, #4]
 800228e:	4613      	mov	r3, r2
 8002290:	011b      	lsls	r3, r3, #4
 8002292:	1a9b      	subs	r3, r3, r2
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	440b      	add	r3, r1
 8002298:	3316      	adds	r3, #22
 800229a:	4602      	mov	r2, r0
 800229c:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 800229e:	78fb      	ldrb	r3, [r7, #3]
 80022a0:	4619      	mov	r1, r3
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f000 fbc8 	bl	8002a38 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 80022a8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	da0a      	bge.n	80022c6 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80022b0:	78fa      	ldrb	r2, [r7, #3]
 80022b2:	6879      	ldr	r1, [r7, #4]
 80022b4:	4613      	mov	r3, r2
 80022b6:	011b      	lsls	r3, r3, #4
 80022b8:	1a9b      	subs	r3, r3, r2
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	440b      	add	r3, r1
 80022be:	3317      	adds	r3, #23
 80022c0:	2201      	movs	r2, #1
 80022c2:	701a      	strb	r2, [r3, #0]
 80022c4:	e009      	b.n	80022da <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80022c6:	78fa      	ldrb	r2, [r7, #3]
 80022c8:	6879      	ldr	r1, [r7, #4]
 80022ca:	4613      	mov	r3, r2
 80022cc:	011b      	lsls	r3, r3, #4
 80022ce:	1a9b      	subs	r3, r3, r2
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	440b      	add	r3, r1
 80022d4:	3317      	adds	r3, #23
 80022d6:	2200      	movs	r2, #0
 80022d8:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4618      	mov	r0, r3
 80022e0:	f005 f84e 	bl	8007380 <USB_GetHostSpeed>
 80022e4:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 80022e6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d10b      	bne.n	8002306 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 80022ee:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d107      	bne.n	8002306 <HAL_HCD_HC_Init+0x10a>
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d104      	bne.n	8002306 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	2bbc      	cmp	r3, #188	@ 0xbc
 8002300:	d901      	bls.n	8002306 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8002302:	23bc      	movs	r3, #188	@ 0xbc
 8002304:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8002306:	78fa      	ldrb	r2, [r7, #3]
 8002308:	6879      	ldr	r1, [r7, #4]
 800230a:	4613      	mov	r3, r2
 800230c:	011b      	lsls	r3, r3, #4
 800230e:	1a9b      	subs	r3, r3, r2
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	440b      	add	r3, r1
 8002314:	3318      	adds	r3, #24
 8002316:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800231a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 800231c:	78fa      	ldrb	r2, [r7, #3]
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	b298      	uxth	r0, r3
 8002322:	6879      	ldr	r1, [r7, #4]
 8002324:	4613      	mov	r3, r2
 8002326:	011b      	lsls	r3, r3, #4
 8002328:	1a9b      	subs	r3, r3, r2
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	440b      	add	r3, r1
 800232e:	3328      	adds	r3, #40	@ 0x28
 8002330:	4602      	mov	r2, r0
 8002332:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6818      	ldr	r0, [r3, #0]
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	b29b      	uxth	r3, r3
 800233c:	787c      	ldrb	r4, [r7, #1]
 800233e:	78ba      	ldrb	r2, [r7, #2]
 8002340:	78f9      	ldrb	r1, [r7, #3]
 8002342:	9302      	str	r3, [sp, #8]
 8002344:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002348:	9301      	str	r3, [sp, #4]
 800234a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800234e:	9300      	str	r3, [sp, #0]
 8002350:	4623      	mov	r3, r4
 8002352:	f005 f83d 	bl	80073d0 <USB_HC_Init>
 8002356:	4603      	mov	r3, r0
 8002358:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2200      	movs	r2, #0
 800235e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8002362:	7bfb      	ldrb	r3, [r7, #15]
}
 8002364:	4618      	mov	r0, r3
 8002366:	371c      	adds	r7, #28
 8002368:	46bd      	mov	sp, r7
 800236a:	bd90      	pop	{r4, r7, pc}

0800236c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	460b      	mov	r3, r1
 8002376:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002378:	2300      	movs	r3, #0
 800237a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002382:	2b01      	cmp	r3, #1
 8002384:	d101      	bne.n	800238a <HAL_HCD_HC_Halt+0x1e>
 8002386:	2302      	movs	r3, #2
 8002388:	e00f      	b.n	80023aa <HAL_HCD_HC_Halt+0x3e>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2201      	movs	r2, #1
 800238e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	78fa      	ldrb	r2, [r7, #3]
 8002398:	4611      	mov	r1, r2
 800239a:	4618      	mov	r0, r3
 800239c:	f005 fbcf 	bl	8007b3e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2200      	movs	r2, #0
 80023a4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80023a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3710      	adds	r7, #16
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
	...

080023b4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	4608      	mov	r0, r1
 80023be:	4611      	mov	r1, r2
 80023c0:	461a      	mov	r2, r3
 80023c2:	4603      	mov	r3, r0
 80023c4:	70fb      	strb	r3, [r7, #3]
 80023c6:	460b      	mov	r3, r1
 80023c8:	70bb      	strb	r3, [r7, #2]
 80023ca:	4613      	mov	r3, r2
 80023cc:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80023ce:	78fa      	ldrb	r2, [r7, #3]
 80023d0:	6879      	ldr	r1, [r7, #4]
 80023d2:	4613      	mov	r3, r2
 80023d4:	011b      	lsls	r3, r3, #4
 80023d6:	1a9b      	subs	r3, r3, r2
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	440b      	add	r3, r1
 80023dc:	3317      	adds	r3, #23
 80023de:	78ba      	ldrb	r2, [r7, #2]
 80023e0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80023e2:	78fa      	ldrb	r2, [r7, #3]
 80023e4:	6879      	ldr	r1, [r7, #4]
 80023e6:	4613      	mov	r3, r2
 80023e8:	011b      	lsls	r3, r3, #4
 80023ea:	1a9b      	subs	r3, r3, r2
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	440b      	add	r3, r1
 80023f0:	3326      	adds	r3, #38	@ 0x26
 80023f2:	787a      	ldrb	r2, [r7, #1]
 80023f4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80023f6:	7c3b      	ldrb	r3, [r7, #16]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d114      	bne.n	8002426 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80023fc:	78fa      	ldrb	r2, [r7, #3]
 80023fe:	6879      	ldr	r1, [r7, #4]
 8002400:	4613      	mov	r3, r2
 8002402:	011b      	lsls	r3, r3, #4
 8002404:	1a9b      	subs	r3, r3, r2
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	440b      	add	r3, r1
 800240a:	332a      	adds	r3, #42	@ 0x2a
 800240c:	2203      	movs	r2, #3
 800240e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002410:	78fa      	ldrb	r2, [r7, #3]
 8002412:	6879      	ldr	r1, [r7, #4]
 8002414:	4613      	mov	r3, r2
 8002416:	011b      	lsls	r3, r3, #4
 8002418:	1a9b      	subs	r3, r3, r2
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	440b      	add	r3, r1
 800241e:	3319      	adds	r3, #25
 8002420:	7f3a      	ldrb	r2, [r7, #28]
 8002422:	701a      	strb	r2, [r3, #0]
 8002424:	e009      	b.n	800243a <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002426:	78fa      	ldrb	r2, [r7, #3]
 8002428:	6879      	ldr	r1, [r7, #4]
 800242a:	4613      	mov	r3, r2
 800242c:	011b      	lsls	r3, r3, #4
 800242e:	1a9b      	subs	r3, r3, r2
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	440b      	add	r3, r1
 8002434:	332a      	adds	r3, #42	@ 0x2a
 8002436:	2202      	movs	r2, #2
 8002438:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800243a:	787b      	ldrb	r3, [r7, #1]
 800243c:	2b03      	cmp	r3, #3
 800243e:	f200 8102 	bhi.w	8002646 <HAL_HCD_HC_SubmitRequest+0x292>
 8002442:	a201      	add	r2, pc, #4	@ (adr r2, 8002448 <HAL_HCD_HC_SubmitRequest+0x94>)
 8002444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002448:	08002459 	.word	0x08002459
 800244c:	08002631 	.word	0x08002631
 8002450:	0800251d 	.word	0x0800251d
 8002454:	080025a7 	.word	0x080025a7
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8002458:	7c3b      	ldrb	r3, [r7, #16]
 800245a:	2b01      	cmp	r3, #1
 800245c:	f040 80f5 	bne.w	800264a <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8002460:	78bb      	ldrb	r3, [r7, #2]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d12d      	bne.n	80024c2 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8002466:	8b3b      	ldrh	r3, [r7, #24]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d109      	bne.n	8002480 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 800246c:	78fa      	ldrb	r2, [r7, #3]
 800246e:	6879      	ldr	r1, [r7, #4]
 8002470:	4613      	mov	r3, r2
 8002472:	011b      	lsls	r3, r3, #4
 8002474:	1a9b      	subs	r3, r3, r2
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	440b      	add	r3, r1
 800247a:	333d      	adds	r3, #61	@ 0x3d
 800247c:	2201      	movs	r2, #1
 800247e:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8002480:	78fa      	ldrb	r2, [r7, #3]
 8002482:	6879      	ldr	r1, [r7, #4]
 8002484:	4613      	mov	r3, r2
 8002486:	011b      	lsls	r3, r3, #4
 8002488:	1a9b      	subs	r3, r3, r2
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	440b      	add	r3, r1
 800248e:	333d      	adds	r3, #61	@ 0x3d
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d10a      	bne.n	80024ac <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002496:	78fa      	ldrb	r2, [r7, #3]
 8002498:	6879      	ldr	r1, [r7, #4]
 800249a:	4613      	mov	r3, r2
 800249c:	011b      	lsls	r3, r3, #4
 800249e:	1a9b      	subs	r3, r3, r2
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	440b      	add	r3, r1
 80024a4:	332a      	adds	r3, #42	@ 0x2a
 80024a6:	2200      	movs	r2, #0
 80024a8:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 80024aa:	e0ce      	b.n	800264a <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80024ac:	78fa      	ldrb	r2, [r7, #3]
 80024ae:	6879      	ldr	r1, [r7, #4]
 80024b0:	4613      	mov	r3, r2
 80024b2:	011b      	lsls	r3, r3, #4
 80024b4:	1a9b      	subs	r3, r3, r2
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	440b      	add	r3, r1
 80024ba:	332a      	adds	r3, #42	@ 0x2a
 80024bc:	2202      	movs	r2, #2
 80024be:	701a      	strb	r2, [r3, #0]
      break;
 80024c0:	e0c3      	b.n	800264a <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 80024c2:	78fa      	ldrb	r2, [r7, #3]
 80024c4:	6879      	ldr	r1, [r7, #4]
 80024c6:	4613      	mov	r3, r2
 80024c8:	011b      	lsls	r3, r3, #4
 80024ca:	1a9b      	subs	r3, r3, r2
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	440b      	add	r3, r1
 80024d0:	331a      	adds	r3, #26
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	f040 80b8 	bne.w	800264a <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 80024da:	78fa      	ldrb	r2, [r7, #3]
 80024dc:	6879      	ldr	r1, [r7, #4]
 80024de:	4613      	mov	r3, r2
 80024e0:	011b      	lsls	r3, r3, #4
 80024e2:	1a9b      	subs	r3, r3, r2
 80024e4:	009b      	lsls	r3, r3, #2
 80024e6:	440b      	add	r3, r1
 80024e8:	333c      	adds	r3, #60	@ 0x3c
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d10a      	bne.n	8002506 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80024f0:	78fa      	ldrb	r2, [r7, #3]
 80024f2:	6879      	ldr	r1, [r7, #4]
 80024f4:	4613      	mov	r3, r2
 80024f6:	011b      	lsls	r3, r3, #4
 80024f8:	1a9b      	subs	r3, r3, r2
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	440b      	add	r3, r1
 80024fe:	332a      	adds	r3, #42	@ 0x2a
 8002500:	2200      	movs	r2, #0
 8002502:	701a      	strb	r2, [r3, #0]
      break;
 8002504:	e0a1      	b.n	800264a <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002506:	78fa      	ldrb	r2, [r7, #3]
 8002508:	6879      	ldr	r1, [r7, #4]
 800250a:	4613      	mov	r3, r2
 800250c:	011b      	lsls	r3, r3, #4
 800250e:	1a9b      	subs	r3, r3, r2
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	440b      	add	r3, r1
 8002514:	332a      	adds	r3, #42	@ 0x2a
 8002516:	2202      	movs	r2, #2
 8002518:	701a      	strb	r2, [r3, #0]
      break;
 800251a:	e096      	b.n	800264a <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800251c:	78bb      	ldrb	r3, [r7, #2]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d120      	bne.n	8002564 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002522:	78fa      	ldrb	r2, [r7, #3]
 8002524:	6879      	ldr	r1, [r7, #4]
 8002526:	4613      	mov	r3, r2
 8002528:	011b      	lsls	r3, r3, #4
 800252a:	1a9b      	subs	r3, r3, r2
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	440b      	add	r3, r1
 8002530:	333d      	adds	r3, #61	@ 0x3d
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d10a      	bne.n	800254e <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002538:	78fa      	ldrb	r2, [r7, #3]
 800253a:	6879      	ldr	r1, [r7, #4]
 800253c:	4613      	mov	r3, r2
 800253e:	011b      	lsls	r3, r3, #4
 8002540:	1a9b      	subs	r3, r3, r2
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	440b      	add	r3, r1
 8002546:	332a      	adds	r3, #42	@ 0x2a
 8002548:	2200      	movs	r2, #0
 800254a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800254c:	e07e      	b.n	800264c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800254e:	78fa      	ldrb	r2, [r7, #3]
 8002550:	6879      	ldr	r1, [r7, #4]
 8002552:	4613      	mov	r3, r2
 8002554:	011b      	lsls	r3, r3, #4
 8002556:	1a9b      	subs	r3, r3, r2
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	440b      	add	r3, r1
 800255c:	332a      	adds	r3, #42	@ 0x2a
 800255e:	2202      	movs	r2, #2
 8002560:	701a      	strb	r2, [r3, #0]
      break;
 8002562:	e073      	b.n	800264c <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002564:	78fa      	ldrb	r2, [r7, #3]
 8002566:	6879      	ldr	r1, [r7, #4]
 8002568:	4613      	mov	r3, r2
 800256a:	011b      	lsls	r3, r3, #4
 800256c:	1a9b      	subs	r3, r3, r2
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	440b      	add	r3, r1
 8002572:	333c      	adds	r3, #60	@ 0x3c
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d10a      	bne.n	8002590 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800257a:	78fa      	ldrb	r2, [r7, #3]
 800257c:	6879      	ldr	r1, [r7, #4]
 800257e:	4613      	mov	r3, r2
 8002580:	011b      	lsls	r3, r3, #4
 8002582:	1a9b      	subs	r3, r3, r2
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	440b      	add	r3, r1
 8002588:	332a      	adds	r3, #42	@ 0x2a
 800258a:	2200      	movs	r2, #0
 800258c:	701a      	strb	r2, [r3, #0]
      break;
 800258e:	e05d      	b.n	800264c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002590:	78fa      	ldrb	r2, [r7, #3]
 8002592:	6879      	ldr	r1, [r7, #4]
 8002594:	4613      	mov	r3, r2
 8002596:	011b      	lsls	r3, r3, #4
 8002598:	1a9b      	subs	r3, r3, r2
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	440b      	add	r3, r1
 800259e:	332a      	adds	r3, #42	@ 0x2a
 80025a0:	2202      	movs	r2, #2
 80025a2:	701a      	strb	r2, [r3, #0]
      break;
 80025a4:	e052      	b.n	800264c <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80025a6:	78bb      	ldrb	r3, [r7, #2]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d120      	bne.n	80025ee <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80025ac:	78fa      	ldrb	r2, [r7, #3]
 80025ae:	6879      	ldr	r1, [r7, #4]
 80025b0:	4613      	mov	r3, r2
 80025b2:	011b      	lsls	r3, r3, #4
 80025b4:	1a9b      	subs	r3, r3, r2
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	440b      	add	r3, r1
 80025ba:	333d      	adds	r3, #61	@ 0x3d
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d10a      	bne.n	80025d8 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80025c2:	78fa      	ldrb	r2, [r7, #3]
 80025c4:	6879      	ldr	r1, [r7, #4]
 80025c6:	4613      	mov	r3, r2
 80025c8:	011b      	lsls	r3, r3, #4
 80025ca:	1a9b      	subs	r3, r3, r2
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	440b      	add	r3, r1
 80025d0:	332a      	adds	r3, #42	@ 0x2a
 80025d2:	2200      	movs	r2, #0
 80025d4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80025d6:	e039      	b.n	800264c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80025d8:	78fa      	ldrb	r2, [r7, #3]
 80025da:	6879      	ldr	r1, [r7, #4]
 80025dc:	4613      	mov	r3, r2
 80025de:	011b      	lsls	r3, r3, #4
 80025e0:	1a9b      	subs	r3, r3, r2
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	440b      	add	r3, r1
 80025e6:	332a      	adds	r3, #42	@ 0x2a
 80025e8:	2202      	movs	r2, #2
 80025ea:	701a      	strb	r2, [r3, #0]
      break;
 80025ec:	e02e      	b.n	800264c <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80025ee:	78fa      	ldrb	r2, [r7, #3]
 80025f0:	6879      	ldr	r1, [r7, #4]
 80025f2:	4613      	mov	r3, r2
 80025f4:	011b      	lsls	r3, r3, #4
 80025f6:	1a9b      	subs	r3, r3, r2
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	440b      	add	r3, r1
 80025fc:	333c      	adds	r3, #60	@ 0x3c
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d10a      	bne.n	800261a <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002604:	78fa      	ldrb	r2, [r7, #3]
 8002606:	6879      	ldr	r1, [r7, #4]
 8002608:	4613      	mov	r3, r2
 800260a:	011b      	lsls	r3, r3, #4
 800260c:	1a9b      	subs	r3, r3, r2
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	440b      	add	r3, r1
 8002612:	332a      	adds	r3, #42	@ 0x2a
 8002614:	2200      	movs	r2, #0
 8002616:	701a      	strb	r2, [r3, #0]
      break;
 8002618:	e018      	b.n	800264c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800261a:	78fa      	ldrb	r2, [r7, #3]
 800261c:	6879      	ldr	r1, [r7, #4]
 800261e:	4613      	mov	r3, r2
 8002620:	011b      	lsls	r3, r3, #4
 8002622:	1a9b      	subs	r3, r3, r2
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	440b      	add	r3, r1
 8002628:	332a      	adds	r3, #42	@ 0x2a
 800262a:	2202      	movs	r2, #2
 800262c:	701a      	strb	r2, [r3, #0]
      break;
 800262e:	e00d      	b.n	800264c <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002630:	78fa      	ldrb	r2, [r7, #3]
 8002632:	6879      	ldr	r1, [r7, #4]
 8002634:	4613      	mov	r3, r2
 8002636:	011b      	lsls	r3, r3, #4
 8002638:	1a9b      	subs	r3, r3, r2
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	440b      	add	r3, r1
 800263e:	332a      	adds	r3, #42	@ 0x2a
 8002640:	2200      	movs	r2, #0
 8002642:	701a      	strb	r2, [r3, #0]
      break;
 8002644:	e002      	b.n	800264c <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8002646:	bf00      	nop
 8002648:	e000      	b.n	800264c <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 800264a:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800264c:	78fa      	ldrb	r2, [r7, #3]
 800264e:	6879      	ldr	r1, [r7, #4]
 8002650:	4613      	mov	r3, r2
 8002652:	011b      	lsls	r3, r3, #4
 8002654:	1a9b      	subs	r3, r3, r2
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	440b      	add	r3, r1
 800265a:	332c      	adds	r3, #44	@ 0x2c
 800265c:	697a      	ldr	r2, [r7, #20]
 800265e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002660:	78fa      	ldrb	r2, [r7, #3]
 8002662:	8b39      	ldrh	r1, [r7, #24]
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	4613      	mov	r3, r2
 8002668:	011b      	lsls	r3, r3, #4
 800266a:	1a9b      	subs	r3, r3, r2
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	4403      	add	r3, r0
 8002670:	3334      	adds	r3, #52	@ 0x34
 8002672:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002674:	78fa      	ldrb	r2, [r7, #3]
 8002676:	6879      	ldr	r1, [r7, #4]
 8002678:	4613      	mov	r3, r2
 800267a:	011b      	lsls	r3, r3, #4
 800267c:	1a9b      	subs	r3, r3, r2
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	440b      	add	r3, r1
 8002682:	334c      	adds	r3, #76	@ 0x4c
 8002684:	2200      	movs	r2, #0
 8002686:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002688:	78fa      	ldrb	r2, [r7, #3]
 800268a:	6879      	ldr	r1, [r7, #4]
 800268c:	4613      	mov	r3, r2
 800268e:	011b      	lsls	r3, r3, #4
 8002690:	1a9b      	subs	r3, r3, r2
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	440b      	add	r3, r1
 8002696:	3338      	adds	r3, #56	@ 0x38
 8002698:	2200      	movs	r2, #0
 800269a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800269c:	78fa      	ldrb	r2, [r7, #3]
 800269e:	6879      	ldr	r1, [r7, #4]
 80026a0:	4613      	mov	r3, r2
 80026a2:	011b      	lsls	r3, r3, #4
 80026a4:	1a9b      	subs	r3, r3, r2
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	440b      	add	r3, r1
 80026aa:	3315      	adds	r3, #21
 80026ac:	78fa      	ldrb	r2, [r7, #3]
 80026ae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80026b0:	78fa      	ldrb	r2, [r7, #3]
 80026b2:	6879      	ldr	r1, [r7, #4]
 80026b4:	4613      	mov	r3, r2
 80026b6:	011b      	lsls	r3, r3, #4
 80026b8:	1a9b      	subs	r3, r3, r2
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	440b      	add	r3, r1
 80026be:	334d      	adds	r3, #77	@ 0x4d
 80026c0:	2200      	movs	r2, #0
 80026c2:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6818      	ldr	r0, [r3, #0]
 80026c8:	78fa      	ldrb	r2, [r7, #3]
 80026ca:	4613      	mov	r3, r2
 80026cc:	011b      	lsls	r3, r3, #4
 80026ce:	1a9b      	subs	r3, r3, r2
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	3310      	adds	r3, #16
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	4413      	add	r3, r2
 80026d8:	1d19      	adds	r1, r3, #4
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	799b      	ldrb	r3, [r3, #6]
 80026de:	461a      	mov	r2, r3
 80026e0:	f004 ffa2 	bl	8007628 <USB_HC_StartXfer>
 80026e4:	4603      	mov	r3, r0
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3708      	adds	r7, #8
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop

080026f0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b086      	sub	sp, #24
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4618      	mov	r0, r3
 8002708:	f004 fc96 	bl	8007038 <USB_GetMode>
 800270c:	4603      	mov	r3, r0
 800270e:	2b01      	cmp	r3, #1
 8002710:	f040 80fb 	bne.w	800290a <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4618      	mov	r0, r3
 800271a:	f004 fc59 	bl	8006fd0 <USB_ReadInterrupts>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	f000 80f1 	beq.w	8002908 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4618      	mov	r0, r3
 800272c:	f004 fc50 	bl	8006fd0 <USB_ReadInterrupts>
 8002730:	4603      	mov	r3, r0
 8002732:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002736:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800273a:	d104      	bne.n	8002746 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002744:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4618      	mov	r0, r3
 800274c:	f004 fc40 	bl	8006fd0 <USB_ReadInterrupts>
 8002750:	4603      	mov	r3, r0
 8002752:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002756:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800275a:	d104      	bne.n	8002766 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002764:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4618      	mov	r0, r3
 800276c:	f004 fc30 	bl	8006fd0 <USB_ReadInterrupts>
 8002770:	4603      	mov	r3, r0
 8002772:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002776:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800277a:	d104      	bne.n	8002786 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002784:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4618      	mov	r0, r3
 800278c:	f004 fc20 	bl	8006fd0 <USB_ReadInterrupts>
 8002790:	4603      	mov	r3, r0
 8002792:	f003 0302 	and.w	r3, r3, #2
 8002796:	2b02      	cmp	r3, #2
 8002798:	d103      	bne.n	80027a2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	2202      	movs	r2, #2
 80027a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4618      	mov	r0, r3
 80027a8:	f004 fc12 	bl	8006fd0 <USB_ReadInterrupts>
 80027ac:	4603      	mov	r3, r0
 80027ae:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80027b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80027b6:	d120      	bne.n	80027fa <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80027c0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0301 	and.w	r3, r3, #1
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d113      	bne.n	80027fa <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80027d2:	2110      	movs	r1, #16
 80027d4:	6938      	ldr	r0, [r7, #16]
 80027d6:	f004 fb05 	bl	8006de4 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80027da:	6938      	ldr	r0, [r7, #16]
 80027dc:	f004 fb34 	bl	8006e48 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	7a5b      	ldrb	r3, [r3, #9]
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d105      	bne.n	80027f4 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	2101      	movs	r1, #1
 80027ee:	4618      	mov	r0, r3
 80027f0:	f004 fd26 	bl	8007240 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	f00a ff1b 	bl	800d630 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4618      	mov	r0, r3
 8002800:	f004 fbe6 	bl	8006fd0 <USB_ReadInterrupts>
 8002804:	4603      	mov	r3, r0
 8002806:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800280a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800280e:	d102      	bne.n	8002816 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f001 fd33 	bl	800427c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4618      	mov	r0, r3
 800281c:	f004 fbd8 	bl	8006fd0 <USB_ReadInterrupts>
 8002820:	4603      	mov	r3, r0
 8002822:	f003 0308 	and.w	r3, r3, #8
 8002826:	2b08      	cmp	r3, #8
 8002828:	d106      	bne.n	8002838 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f00a fee4 	bl	800d5f8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	2208      	movs	r2, #8
 8002836:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4618      	mov	r0, r3
 800283e:	f004 fbc7 	bl	8006fd0 <USB_ReadInterrupts>
 8002842:	4603      	mov	r3, r0
 8002844:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002848:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800284c:	d139      	bne.n	80028c2 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4618      	mov	r0, r3
 8002854:	f005 f962 	bl	8007b1c <USB_HC_ReadInterrupt>
 8002858:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800285a:	2300      	movs	r3, #0
 800285c:	617b      	str	r3, [r7, #20]
 800285e:	e025      	b.n	80028ac <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	f003 030f 	and.w	r3, r3, #15
 8002866:	68ba      	ldr	r2, [r7, #8]
 8002868:	fa22 f303 	lsr.w	r3, r2, r3
 800286c:	f003 0301 	and.w	r3, r3, #1
 8002870:	2b00      	cmp	r3, #0
 8002872:	d018      	beq.n	80028a6 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	015a      	lsls	r2, r3, #5
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	4413      	add	r3, r2
 800287c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002886:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800288a:	d106      	bne.n	800289a <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	b2db      	uxtb	r3, r3
 8002890:	4619      	mov	r1, r3
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f000 f905 	bl	8002aa2 <HCD_HC_IN_IRQHandler>
 8002898:	e005      	b.n	80028a6 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	b2db      	uxtb	r3, r3
 800289e:	4619      	mov	r1, r3
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f000 ff67 	bl	8003774 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	3301      	adds	r3, #1
 80028aa:	617b      	str	r3, [r7, #20]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	795b      	ldrb	r3, [r3, #5]
 80028b0:	461a      	mov	r2, r3
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d3d3      	bcc.n	8002860 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80028c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4618      	mov	r0, r3
 80028c8:	f004 fb82 	bl	8006fd0 <USB_ReadInterrupts>
 80028cc:	4603      	mov	r3, r0
 80028ce:	f003 0310 	and.w	r3, r3, #16
 80028d2:	2b10      	cmp	r3, #16
 80028d4:	d101      	bne.n	80028da <HAL_HCD_IRQHandler+0x1ea>
 80028d6:	2301      	movs	r3, #1
 80028d8:	e000      	b.n	80028dc <HAL_HCD_IRQHandler+0x1ec>
 80028da:	2300      	movs	r3, #0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d014      	beq.n	800290a <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	699a      	ldr	r2, [r3, #24]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f022 0210 	bic.w	r2, r2, #16
 80028ee:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f001 fbe4 	bl	80040be <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	699a      	ldr	r2, [r3, #24]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f042 0210 	orr.w	r2, r2, #16
 8002904:	619a      	str	r2, [r3, #24]
 8002906:	e000      	b.n	800290a <HAL_HCD_IRQHandler+0x21a>
      return;
 8002908:	bf00      	nop
    }
  }
}
 800290a:	3718      	adds	r7, #24
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800291e:	2b01      	cmp	r3, #1
 8002920:	d101      	bne.n	8002926 <HAL_HCD_Start+0x16>
 8002922:	2302      	movs	r3, #2
 8002924:	e013      	b.n	800294e <HAL_HCD_Start+0x3e>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2201      	movs	r2, #1
 800292a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	2101      	movs	r1, #1
 8002934:	4618      	mov	r0, r3
 8002936:	f004 fcea 	bl	800730e <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4618      	mov	r0, r3
 8002940:	f004 f9e2 	bl	8006d08 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2200      	movs	r2, #0
 8002948:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 800294c:	2300      	movs	r3, #0
}
 800294e:	4618      	mov	r0, r3
 8002950:	3708      	adds	r7, #8
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}

08002956 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002956:	b580      	push	{r7, lr}
 8002958:	b082      	sub	sp, #8
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002964:	2b01      	cmp	r3, #1
 8002966:	d101      	bne.n	800296c <HAL_HCD_Stop+0x16>
 8002968:	2302      	movs	r3, #2
 800296a:	e00d      	b.n	8002988 <HAL_HCD_Stop+0x32>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4618      	mov	r0, r3
 800297a:	f005 fa3d 	bl	8007df8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002986:	2300      	movs	r3, #0
}
 8002988:	4618      	mov	r0, r3
 800298a:	3708      	adds	r7, #8
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}

08002990 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4618      	mov	r0, r3
 800299e:	f004 fc8c 	bl	80072ba <USB_ResetPort>
 80029a2:	4603      	mov	r3, r0
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3708      	adds	r7, #8
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}

080029ac <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	460b      	mov	r3, r1
 80029b6:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80029b8:	78fa      	ldrb	r2, [r7, #3]
 80029ba:	6879      	ldr	r1, [r7, #4]
 80029bc:	4613      	mov	r3, r2
 80029be:	011b      	lsls	r3, r3, #4
 80029c0:	1a9b      	subs	r3, r3, r2
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	440b      	add	r3, r1
 80029c6:	334c      	adds	r3, #76	@ 0x4c
 80029c8:	781b      	ldrb	r3, [r3, #0]
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	370c      	adds	r7, #12
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr

080029d6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80029d6:	b480      	push	{r7}
 80029d8:	b083      	sub	sp, #12
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]
 80029de:	460b      	mov	r3, r1
 80029e0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80029e2:	78fa      	ldrb	r2, [r7, #3]
 80029e4:	6879      	ldr	r1, [r7, #4]
 80029e6:	4613      	mov	r3, r2
 80029e8:	011b      	lsls	r3, r3, #4
 80029ea:	1a9b      	subs	r3, r3, r2
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	440b      	add	r3, r1
 80029f0:	3338      	adds	r3, #56	@ 0x38
 80029f2:	681b      	ldr	r3, [r3, #0]
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr

08002a00 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f004 fcce 	bl	80073ae <USB_GetCurrentFrame>
 8002a12:	4603      	mov	r3, r0
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3708      	adds	r7, #8
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f004 fca9 	bl	8007380 <USB_GetHostSpeed>
 8002a2e:	4603      	mov	r3, r0
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3708      	adds	r7, #8
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	460b      	mov	r3, r1
 8002a42:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8002a44:	78fa      	ldrb	r2, [r7, #3]
 8002a46:	6879      	ldr	r1, [r7, #4]
 8002a48:	4613      	mov	r3, r2
 8002a4a:	011b      	lsls	r3, r3, #4
 8002a4c:	1a9b      	subs	r3, r3, r2
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	440b      	add	r3, r1
 8002a52:	331a      	adds	r3, #26
 8002a54:	2200      	movs	r2, #0
 8002a56:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8002a58:	78fa      	ldrb	r2, [r7, #3]
 8002a5a:	6879      	ldr	r1, [r7, #4]
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	011b      	lsls	r3, r3, #4
 8002a60:	1a9b      	subs	r3, r3, r2
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	440b      	add	r3, r1
 8002a66:	331b      	adds	r3, #27
 8002a68:	2200      	movs	r2, #0
 8002a6a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8002a6c:	78fa      	ldrb	r2, [r7, #3]
 8002a6e:	6879      	ldr	r1, [r7, #4]
 8002a70:	4613      	mov	r3, r2
 8002a72:	011b      	lsls	r3, r3, #4
 8002a74:	1a9b      	subs	r3, r3, r2
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	440b      	add	r3, r1
 8002a7a:	3325      	adds	r3, #37	@ 0x25
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8002a80:	78fa      	ldrb	r2, [r7, #3]
 8002a82:	6879      	ldr	r1, [r7, #4]
 8002a84:	4613      	mov	r3, r2
 8002a86:	011b      	lsls	r3, r3, #4
 8002a88:	1a9b      	subs	r3, r3, r2
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	440b      	add	r3, r1
 8002a8e:	3324      	adds	r3, #36	@ 0x24
 8002a90:	2200      	movs	r2, #0
 8002a92:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	370c      	adds	r7, #12
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr

08002aa2 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002aa2:	b580      	push	{r7, lr}
 8002aa4:	b086      	sub	sp, #24
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
 8002aaa:	460b      	mov	r3, r1
 8002aac:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	78fa      	ldrb	r2, [r7, #3]
 8002abe:	4611      	mov	r1, r2
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f004 fa98 	bl	8006ff6 <USB_ReadChInterrupts>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	f003 0304 	and.w	r3, r3, #4
 8002acc:	2b04      	cmp	r3, #4
 8002ace:	d11a      	bne.n	8002b06 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002ad0:	78fb      	ldrb	r3, [r7, #3]
 8002ad2:	015a      	lsls	r2, r3, #5
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	4413      	add	r3, r2
 8002ad8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002adc:	461a      	mov	r2, r3
 8002ade:	2304      	movs	r3, #4
 8002ae0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002ae2:	78fa      	ldrb	r2, [r7, #3]
 8002ae4:	6879      	ldr	r1, [r7, #4]
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	011b      	lsls	r3, r3, #4
 8002aea:	1a9b      	subs	r3, r3, r2
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	440b      	add	r3, r1
 8002af0:	334d      	adds	r3, #77	@ 0x4d
 8002af2:	2207      	movs	r2, #7
 8002af4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	78fa      	ldrb	r2, [r7, #3]
 8002afc:	4611      	mov	r1, r2
 8002afe:	4618      	mov	r0, r3
 8002b00:	f005 f81d 	bl	8007b3e <USB_HC_Halt>
 8002b04:	e09e      	b.n	8002c44 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	78fa      	ldrb	r2, [r7, #3]
 8002b0c:	4611      	mov	r1, r2
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f004 fa71 	bl	8006ff6 <USB_ReadChInterrupts>
 8002b14:	4603      	mov	r3, r0
 8002b16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b1e:	d11b      	bne.n	8002b58 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8002b20:	78fb      	ldrb	r3, [r7, #3]
 8002b22:	015a      	lsls	r2, r3, #5
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	4413      	add	r3, r2
 8002b28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002b32:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8002b34:	78fa      	ldrb	r2, [r7, #3]
 8002b36:	6879      	ldr	r1, [r7, #4]
 8002b38:	4613      	mov	r3, r2
 8002b3a:	011b      	lsls	r3, r3, #4
 8002b3c:	1a9b      	subs	r3, r3, r2
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	440b      	add	r3, r1
 8002b42:	334d      	adds	r3, #77	@ 0x4d
 8002b44:	2208      	movs	r2, #8
 8002b46:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	78fa      	ldrb	r2, [r7, #3]
 8002b4e:	4611      	mov	r1, r2
 8002b50:	4618      	mov	r0, r3
 8002b52:	f004 fff4 	bl	8007b3e <USB_HC_Halt>
 8002b56:	e075      	b.n	8002c44 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	78fa      	ldrb	r2, [r7, #3]
 8002b5e:	4611      	mov	r1, r2
 8002b60:	4618      	mov	r0, r3
 8002b62:	f004 fa48 	bl	8006ff6 <USB_ReadChInterrupts>
 8002b66:	4603      	mov	r3, r0
 8002b68:	f003 0308 	and.w	r3, r3, #8
 8002b6c:	2b08      	cmp	r3, #8
 8002b6e:	d11a      	bne.n	8002ba6 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002b70:	78fb      	ldrb	r3, [r7, #3]
 8002b72:	015a      	lsls	r2, r3, #5
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	4413      	add	r3, r2
 8002b78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	2308      	movs	r3, #8
 8002b80:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002b82:	78fa      	ldrb	r2, [r7, #3]
 8002b84:	6879      	ldr	r1, [r7, #4]
 8002b86:	4613      	mov	r3, r2
 8002b88:	011b      	lsls	r3, r3, #4
 8002b8a:	1a9b      	subs	r3, r3, r2
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	440b      	add	r3, r1
 8002b90:	334d      	adds	r3, #77	@ 0x4d
 8002b92:	2206      	movs	r2, #6
 8002b94:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	78fa      	ldrb	r2, [r7, #3]
 8002b9c:	4611      	mov	r1, r2
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f004 ffcd 	bl	8007b3e <USB_HC_Halt>
 8002ba4:	e04e      	b.n	8002c44 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	78fa      	ldrb	r2, [r7, #3]
 8002bac:	4611      	mov	r1, r2
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f004 fa21 	bl	8006ff6 <USB_ReadChInterrupts>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bbe:	d11b      	bne.n	8002bf8 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002bc0:	78fb      	ldrb	r3, [r7, #3]
 8002bc2:	015a      	lsls	r2, r3, #5
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	4413      	add	r3, r2
 8002bc8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bcc:	461a      	mov	r2, r3
 8002bce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002bd2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002bd4:	78fa      	ldrb	r2, [r7, #3]
 8002bd6:	6879      	ldr	r1, [r7, #4]
 8002bd8:	4613      	mov	r3, r2
 8002bda:	011b      	lsls	r3, r3, #4
 8002bdc:	1a9b      	subs	r3, r3, r2
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	440b      	add	r3, r1
 8002be2:	334d      	adds	r3, #77	@ 0x4d
 8002be4:	2209      	movs	r2, #9
 8002be6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	78fa      	ldrb	r2, [r7, #3]
 8002bee:	4611      	mov	r1, r2
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f004 ffa4 	bl	8007b3e <USB_HC_Halt>
 8002bf6:	e025      	b.n	8002c44 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	78fa      	ldrb	r2, [r7, #3]
 8002bfe:	4611      	mov	r1, r2
 8002c00:	4618      	mov	r0, r3
 8002c02:	f004 f9f8 	bl	8006ff6 <USB_ReadChInterrupts>
 8002c06:	4603      	mov	r3, r0
 8002c08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c0c:	2b80      	cmp	r3, #128	@ 0x80
 8002c0e:	d119      	bne.n	8002c44 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002c10:	78fb      	ldrb	r3, [r7, #3]
 8002c12:	015a      	lsls	r2, r3, #5
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	4413      	add	r3, r2
 8002c18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	2380      	movs	r3, #128	@ 0x80
 8002c20:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002c22:	78fa      	ldrb	r2, [r7, #3]
 8002c24:	6879      	ldr	r1, [r7, #4]
 8002c26:	4613      	mov	r3, r2
 8002c28:	011b      	lsls	r3, r3, #4
 8002c2a:	1a9b      	subs	r3, r3, r2
 8002c2c:	009b      	lsls	r3, r3, #2
 8002c2e:	440b      	add	r3, r1
 8002c30:	334d      	adds	r3, #77	@ 0x4d
 8002c32:	2207      	movs	r2, #7
 8002c34:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	78fa      	ldrb	r2, [r7, #3]
 8002c3c:	4611      	mov	r1, r2
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f004 ff7d 	bl	8007b3e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	78fa      	ldrb	r2, [r7, #3]
 8002c4a:	4611      	mov	r1, r2
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f004 f9d2 	bl	8006ff6 <USB_ReadChInterrupts>
 8002c52:	4603      	mov	r3, r0
 8002c54:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c5c:	d112      	bne.n	8002c84 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	78fa      	ldrb	r2, [r7, #3]
 8002c64:	4611      	mov	r1, r2
 8002c66:	4618      	mov	r0, r3
 8002c68:	f004 ff69 	bl	8007b3e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002c6c:	78fb      	ldrb	r3, [r7, #3]
 8002c6e:	015a      	lsls	r2, r3, #5
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	4413      	add	r3, r2
 8002c74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c78:	461a      	mov	r2, r3
 8002c7a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002c7e:	6093      	str	r3, [r2, #8]
 8002c80:	f000 bd75 	b.w	800376e <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	78fa      	ldrb	r2, [r7, #3]
 8002c8a:	4611      	mov	r1, r2
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f004 f9b2 	bl	8006ff6 <USB_ReadChInterrupts>
 8002c92:	4603      	mov	r3, r0
 8002c94:	f003 0301 	and.w	r3, r3, #1
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	f040 8128 	bne.w	8002eee <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002c9e:	78fb      	ldrb	r3, [r7, #3]
 8002ca0:	015a      	lsls	r2, r3, #5
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	4413      	add	r3, r2
 8002ca6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002caa:	461a      	mov	r2, r3
 8002cac:	2320      	movs	r3, #32
 8002cae:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002cb0:	78fa      	ldrb	r2, [r7, #3]
 8002cb2:	6879      	ldr	r1, [r7, #4]
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	011b      	lsls	r3, r3, #4
 8002cb8:	1a9b      	subs	r3, r3, r2
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	440b      	add	r3, r1
 8002cbe:	331b      	adds	r3, #27
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d119      	bne.n	8002cfa <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002cc6:	78fa      	ldrb	r2, [r7, #3]
 8002cc8:	6879      	ldr	r1, [r7, #4]
 8002cca:	4613      	mov	r3, r2
 8002ccc:	011b      	lsls	r3, r3, #4
 8002cce:	1a9b      	subs	r3, r3, r2
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	440b      	add	r3, r1
 8002cd4:	331b      	adds	r3, #27
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002cda:	78fb      	ldrb	r3, [r7, #3]
 8002cdc:	015a      	lsls	r2, r3, #5
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	4413      	add	r3, r2
 8002ce2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	78fa      	ldrb	r2, [r7, #3]
 8002cea:	0151      	lsls	r1, r2, #5
 8002cec:	693a      	ldr	r2, [r7, #16]
 8002cee:	440a      	add	r2, r1
 8002cf0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002cf4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cf8:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	799b      	ldrb	r3, [r3, #6]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d01b      	beq.n	8002d3a <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002d02:	78fa      	ldrb	r2, [r7, #3]
 8002d04:	6879      	ldr	r1, [r7, #4]
 8002d06:	4613      	mov	r3, r2
 8002d08:	011b      	lsls	r3, r3, #4
 8002d0a:	1a9b      	subs	r3, r3, r2
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	440b      	add	r3, r1
 8002d10:	3330      	adds	r3, #48	@ 0x30
 8002d12:	6819      	ldr	r1, [r3, #0]
 8002d14:	78fb      	ldrb	r3, [r7, #3]
 8002d16:	015a      	lsls	r2, r3, #5
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	4413      	add	r3, r2
 8002d1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d20:	691b      	ldr	r3, [r3, #16]
 8002d22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d26:	78fa      	ldrb	r2, [r7, #3]
 8002d28:	1ac9      	subs	r1, r1, r3
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	011b      	lsls	r3, r3, #4
 8002d30:	1a9b      	subs	r3, r3, r2
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	4403      	add	r3, r0
 8002d36:	3338      	adds	r3, #56	@ 0x38
 8002d38:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8002d3a:	78fa      	ldrb	r2, [r7, #3]
 8002d3c:	6879      	ldr	r1, [r7, #4]
 8002d3e:	4613      	mov	r3, r2
 8002d40:	011b      	lsls	r3, r3, #4
 8002d42:	1a9b      	subs	r3, r3, r2
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	440b      	add	r3, r1
 8002d48:	334d      	adds	r3, #77	@ 0x4d
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8002d4e:	78fa      	ldrb	r2, [r7, #3]
 8002d50:	6879      	ldr	r1, [r7, #4]
 8002d52:	4613      	mov	r3, r2
 8002d54:	011b      	lsls	r3, r3, #4
 8002d56:	1a9b      	subs	r3, r3, r2
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	440b      	add	r3, r1
 8002d5c:	3344      	adds	r3, #68	@ 0x44
 8002d5e:	2200      	movs	r2, #0
 8002d60:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002d62:	78fb      	ldrb	r3, [r7, #3]
 8002d64:	015a      	lsls	r2, r3, #5
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	4413      	add	r3, r2
 8002d6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d6e:	461a      	mov	r2, r3
 8002d70:	2301      	movs	r3, #1
 8002d72:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002d74:	78fa      	ldrb	r2, [r7, #3]
 8002d76:	6879      	ldr	r1, [r7, #4]
 8002d78:	4613      	mov	r3, r2
 8002d7a:	011b      	lsls	r3, r3, #4
 8002d7c:	1a9b      	subs	r3, r3, r2
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	440b      	add	r3, r1
 8002d82:	3326      	adds	r3, #38	@ 0x26
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d00a      	beq.n	8002da0 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002d8a:	78fa      	ldrb	r2, [r7, #3]
 8002d8c:	6879      	ldr	r1, [r7, #4]
 8002d8e:	4613      	mov	r3, r2
 8002d90:	011b      	lsls	r3, r3, #4
 8002d92:	1a9b      	subs	r3, r3, r2
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	440b      	add	r3, r1
 8002d98:	3326      	adds	r3, #38	@ 0x26
 8002d9a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	d110      	bne.n	8002dc2 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	78fa      	ldrb	r2, [r7, #3]
 8002da6:	4611      	mov	r1, r2
 8002da8:	4618      	mov	r0, r3
 8002daa:	f004 fec8 	bl	8007b3e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002dae:	78fb      	ldrb	r3, [r7, #3]
 8002db0:	015a      	lsls	r2, r3, #5
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	4413      	add	r3, r2
 8002db6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002dba:	461a      	mov	r2, r3
 8002dbc:	2310      	movs	r3, #16
 8002dbe:	6093      	str	r3, [r2, #8]
 8002dc0:	e03d      	b.n	8002e3e <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002dc2:	78fa      	ldrb	r2, [r7, #3]
 8002dc4:	6879      	ldr	r1, [r7, #4]
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	011b      	lsls	r3, r3, #4
 8002dca:	1a9b      	subs	r3, r3, r2
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	440b      	add	r3, r1
 8002dd0:	3326      	adds	r3, #38	@ 0x26
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	2b03      	cmp	r3, #3
 8002dd6:	d00a      	beq.n	8002dee <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002dd8:	78fa      	ldrb	r2, [r7, #3]
 8002dda:	6879      	ldr	r1, [r7, #4]
 8002ddc:	4613      	mov	r3, r2
 8002dde:	011b      	lsls	r3, r3, #4
 8002de0:	1a9b      	subs	r3, r3, r2
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	440b      	add	r3, r1
 8002de6:	3326      	adds	r3, #38	@ 0x26
 8002de8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d127      	bne.n	8002e3e <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002dee:	78fb      	ldrb	r3, [r7, #3]
 8002df0:	015a      	lsls	r2, r3, #5
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	4413      	add	r3, r2
 8002df6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	78fa      	ldrb	r2, [r7, #3]
 8002dfe:	0151      	lsls	r1, r2, #5
 8002e00:	693a      	ldr	r2, [r7, #16]
 8002e02:	440a      	add	r2, r1
 8002e04:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002e08:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002e0c:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002e0e:	78fa      	ldrb	r2, [r7, #3]
 8002e10:	6879      	ldr	r1, [r7, #4]
 8002e12:	4613      	mov	r3, r2
 8002e14:	011b      	lsls	r3, r3, #4
 8002e16:	1a9b      	subs	r3, r3, r2
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	440b      	add	r3, r1
 8002e1c:	334c      	adds	r3, #76	@ 0x4c
 8002e1e:	2201      	movs	r2, #1
 8002e20:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002e22:	78fa      	ldrb	r2, [r7, #3]
 8002e24:	6879      	ldr	r1, [r7, #4]
 8002e26:	4613      	mov	r3, r2
 8002e28:	011b      	lsls	r3, r3, #4
 8002e2a:	1a9b      	subs	r3, r3, r2
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	440b      	add	r3, r1
 8002e30:	334c      	adds	r3, #76	@ 0x4c
 8002e32:	781a      	ldrb	r2, [r3, #0]
 8002e34:	78fb      	ldrb	r3, [r7, #3]
 8002e36:	4619      	mov	r1, r3
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f00a fc07 	bl	800d64c <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	799b      	ldrb	r3, [r3, #6]
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d13b      	bne.n	8002ebe <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8002e46:	78fa      	ldrb	r2, [r7, #3]
 8002e48:	6879      	ldr	r1, [r7, #4]
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	011b      	lsls	r3, r3, #4
 8002e4e:	1a9b      	subs	r3, r3, r2
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	440b      	add	r3, r1
 8002e54:	3338      	adds	r3, #56	@ 0x38
 8002e56:	6819      	ldr	r1, [r3, #0]
 8002e58:	78fa      	ldrb	r2, [r7, #3]
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	011b      	lsls	r3, r3, #4
 8002e60:	1a9b      	subs	r3, r3, r2
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	4403      	add	r3, r0
 8002e66:	3328      	adds	r3, #40	@ 0x28
 8002e68:	881b      	ldrh	r3, [r3, #0]
 8002e6a:	440b      	add	r3, r1
 8002e6c:	1e59      	subs	r1, r3, #1
 8002e6e:	78fa      	ldrb	r2, [r7, #3]
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	4613      	mov	r3, r2
 8002e74:	011b      	lsls	r3, r3, #4
 8002e76:	1a9b      	subs	r3, r3, r2
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	4403      	add	r3, r0
 8002e7c:	3328      	adds	r3, #40	@ 0x28
 8002e7e:	881b      	ldrh	r3, [r3, #0]
 8002e80:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e84:	f003 0301 	and.w	r3, r3, #1
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	f000 8470 	beq.w	800376e <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8002e8e:	78fa      	ldrb	r2, [r7, #3]
 8002e90:	6879      	ldr	r1, [r7, #4]
 8002e92:	4613      	mov	r3, r2
 8002e94:	011b      	lsls	r3, r3, #4
 8002e96:	1a9b      	subs	r3, r3, r2
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	440b      	add	r3, r1
 8002e9c:	333c      	adds	r3, #60	@ 0x3c
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	78fa      	ldrb	r2, [r7, #3]
 8002ea2:	f083 0301 	eor.w	r3, r3, #1
 8002ea6:	b2d8      	uxtb	r0, r3
 8002ea8:	6879      	ldr	r1, [r7, #4]
 8002eaa:	4613      	mov	r3, r2
 8002eac:	011b      	lsls	r3, r3, #4
 8002eae:	1a9b      	subs	r3, r3, r2
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	440b      	add	r3, r1
 8002eb4:	333c      	adds	r3, #60	@ 0x3c
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	701a      	strb	r2, [r3, #0]
 8002eba:	f000 bc58 	b.w	800376e <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8002ebe:	78fa      	ldrb	r2, [r7, #3]
 8002ec0:	6879      	ldr	r1, [r7, #4]
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	011b      	lsls	r3, r3, #4
 8002ec6:	1a9b      	subs	r3, r3, r2
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	440b      	add	r3, r1
 8002ecc:	333c      	adds	r3, #60	@ 0x3c
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	78fa      	ldrb	r2, [r7, #3]
 8002ed2:	f083 0301 	eor.w	r3, r3, #1
 8002ed6:	b2d8      	uxtb	r0, r3
 8002ed8:	6879      	ldr	r1, [r7, #4]
 8002eda:	4613      	mov	r3, r2
 8002edc:	011b      	lsls	r3, r3, #4
 8002ede:	1a9b      	subs	r3, r3, r2
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	440b      	add	r3, r1
 8002ee4:	333c      	adds	r3, #60	@ 0x3c
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	701a      	strb	r2, [r3, #0]
 8002eea:	f000 bc40 	b.w	800376e <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	78fa      	ldrb	r2, [r7, #3]
 8002ef4:	4611      	mov	r1, r2
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f004 f87d 	bl	8006ff6 <USB_ReadChInterrupts>
 8002efc:	4603      	mov	r3, r0
 8002efe:	f003 0320 	and.w	r3, r3, #32
 8002f02:	2b20      	cmp	r3, #32
 8002f04:	d131      	bne.n	8002f6a <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002f06:	78fb      	ldrb	r3, [r7, #3]
 8002f08:	015a      	lsls	r2, r3, #5
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	4413      	add	r3, r2
 8002f0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f12:	461a      	mov	r2, r3
 8002f14:	2320      	movs	r3, #32
 8002f16:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8002f18:	78fa      	ldrb	r2, [r7, #3]
 8002f1a:	6879      	ldr	r1, [r7, #4]
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	011b      	lsls	r3, r3, #4
 8002f20:	1a9b      	subs	r3, r3, r2
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	440b      	add	r3, r1
 8002f26:	331a      	adds	r3, #26
 8002f28:	781b      	ldrb	r3, [r3, #0]
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	f040 841f 	bne.w	800376e <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8002f30:	78fa      	ldrb	r2, [r7, #3]
 8002f32:	6879      	ldr	r1, [r7, #4]
 8002f34:	4613      	mov	r3, r2
 8002f36:	011b      	lsls	r3, r3, #4
 8002f38:	1a9b      	subs	r3, r3, r2
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	440b      	add	r3, r1
 8002f3e:	331b      	adds	r3, #27
 8002f40:	2201      	movs	r2, #1
 8002f42:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002f44:	78fa      	ldrb	r2, [r7, #3]
 8002f46:	6879      	ldr	r1, [r7, #4]
 8002f48:	4613      	mov	r3, r2
 8002f4a:	011b      	lsls	r3, r3, #4
 8002f4c:	1a9b      	subs	r3, r3, r2
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	440b      	add	r3, r1
 8002f52:	334d      	adds	r3, #77	@ 0x4d
 8002f54:	2203      	movs	r2, #3
 8002f56:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	78fa      	ldrb	r2, [r7, #3]
 8002f5e:	4611      	mov	r1, r2
 8002f60:	4618      	mov	r0, r3
 8002f62:	f004 fdec 	bl	8007b3e <USB_HC_Halt>
 8002f66:	f000 bc02 	b.w	800376e <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	78fa      	ldrb	r2, [r7, #3]
 8002f70:	4611      	mov	r1, r2
 8002f72:	4618      	mov	r0, r3
 8002f74:	f004 f83f 	bl	8006ff6 <USB_ReadChInterrupts>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	f003 0302 	and.w	r3, r3, #2
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	f040 8305 	bne.w	800358e <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002f84:	78fb      	ldrb	r3, [r7, #3]
 8002f86:	015a      	lsls	r2, r3, #5
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	4413      	add	r3, r2
 8002f8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f90:	461a      	mov	r2, r3
 8002f92:	2302      	movs	r3, #2
 8002f94:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002f96:	78fa      	ldrb	r2, [r7, #3]
 8002f98:	6879      	ldr	r1, [r7, #4]
 8002f9a:	4613      	mov	r3, r2
 8002f9c:	011b      	lsls	r3, r3, #4
 8002f9e:	1a9b      	subs	r3, r3, r2
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	440b      	add	r3, r1
 8002fa4:	334d      	adds	r3, #77	@ 0x4d
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d114      	bne.n	8002fd6 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002fac:	78fa      	ldrb	r2, [r7, #3]
 8002fae:	6879      	ldr	r1, [r7, #4]
 8002fb0:	4613      	mov	r3, r2
 8002fb2:	011b      	lsls	r3, r3, #4
 8002fb4:	1a9b      	subs	r3, r3, r2
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	440b      	add	r3, r1
 8002fba:	334d      	adds	r3, #77	@ 0x4d
 8002fbc:	2202      	movs	r2, #2
 8002fbe:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002fc0:	78fa      	ldrb	r2, [r7, #3]
 8002fc2:	6879      	ldr	r1, [r7, #4]
 8002fc4:	4613      	mov	r3, r2
 8002fc6:	011b      	lsls	r3, r3, #4
 8002fc8:	1a9b      	subs	r3, r3, r2
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	440b      	add	r3, r1
 8002fce:	334c      	adds	r3, #76	@ 0x4c
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	701a      	strb	r2, [r3, #0]
 8002fd4:	e2cc      	b.n	8003570 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002fd6:	78fa      	ldrb	r2, [r7, #3]
 8002fd8:	6879      	ldr	r1, [r7, #4]
 8002fda:	4613      	mov	r3, r2
 8002fdc:	011b      	lsls	r3, r3, #4
 8002fde:	1a9b      	subs	r3, r3, r2
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	440b      	add	r3, r1
 8002fe4:	334d      	adds	r3, #77	@ 0x4d
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	2b06      	cmp	r3, #6
 8002fea:	d114      	bne.n	8003016 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002fec:	78fa      	ldrb	r2, [r7, #3]
 8002fee:	6879      	ldr	r1, [r7, #4]
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	011b      	lsls	r3, r3, #4
 8002ff4:	1a9b      	subs	r3, r3, r2
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	440b      	add	r3, r1
 8002ffa:	334d      	adds	r3, #77	@ 0x4d
 8002ffc:	2202      	movs	r2, #2
 8002ffe:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8003000:	78fa      	ldrb	r2, [r7, #3]
 8003002:	6879      	ldr	r1, [r7, #4]
 8003004:	4613      	mov	r3, r2
 8003006:	011b      	lsls	r3, r3, #4
 8003008:	1a9b      	subs	r3, r3, r2
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	440b      	add	r3, r1
 800300e:	334c      	adds	r3, #76	@ 0x4c
 8003010:	2205      	movs	r2, #5
 8003012:	701a      	strb	r2, [r3, #0]
 8003014:	e2ac      	b.n	8003570 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003016:	78fa      	ldrb	r2, [r7, #3]
 8003018:	6879      	ldr	r1, [r7, #4]
 800301a:	4613      	mov	r3, r2
 800301c:	011b      	lsls	r3, r3, #4
 800301e:	1a9b      	subs	r3, r3, r2
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	440b      	add	r3, r1
 8003024:	334d      	adds	r3, #77	@ 0x4d
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	2b07      	cmp	r3, #7
 800302a:	d00b      	beq.n	8003044 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800302c:	78fa      	ldrb	r2, [r7, #3]
 800302e:	6879      	ldr	r1, [r7, #4]
 8003030:	4613      	mov	r3, r2
 8003032:	011b      	lsls	r3, r3, #4
 8003034:	1a9b      	subs	r3, r3, r2
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	440b      	add	r3, r1
 800303a:	334d      	adds	r3, #77	@ 0x4d
 800303c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800303e:	2b09      	cmp	r3, #9
 8003040:	f040 80a6 	bne.w	8003190 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003044:	78fa      	ldrb	r2, [r7, #3]
 8003046:	6879      	ldr	r1, [r7, #4]
 8003048:	4613      	mov	r3, r2
 800304a:	011b      	lsls	r3, r3, #4
 800304c:	1a9b      	subs	r3, r3, r2
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	440b      	add	r3, r1
 8003052:	334d      	adds	r3, #77	@ 0x4d
 8003054:	2202      	movs	r2, #2
 8003056:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003058:	78fa      	ldrb	r2, [r7, #3]
 800305a:	6879      	ldr	r1, [r7, #4]
 800305c:	4613      	mov	r3, r2
 800305e:	011b      	lsls	r3, r3, #4
 8003060:	1a9b      	subs	r3, r3, r2
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	440b      	add	r3, r1
 8003066:	3344      	adds	r3, #68	@ 0x44
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	1c59      	adds	r1, r3, #1
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	4613      	mov	r3, r2
 8003070:	011b      	lsls	r3, r3, #4
 8003072:	1a9b      	subs	r3, r3, r2
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	4403      	add	r3, r0
 8003078:	3344      	adds	r3, #68	@ 0x44
 800307a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800307c:	78fa      	ldrb	r2, [r7, #3]
 800307e:	6879      	ldr	r1, [r7, #4]
 8003080:	4613      	mov	r3, r2
 8003082:	011b      	lsls	r3, r3, #4
 8003084:	1a9b      	subs	r3, r3, r2
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	440b      	add	r3, r1
 800308a:	3344      	adds	r3, #68	@ 0x44
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	2b02      	cmp	r3, #2
 8003090:	d943      	bls.n	800311a <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003092:	78fa      	ldrb	r2, [r7, #3]
 8003094:	6879      	ldr	r1, [r7, #4]
 8003096:	4613      	mov	r3, r2
 8003098:	011b      	lsls	r3, r3, #4
 800309a:	1a9b      	subs	r3, r3, r2
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	440b      	add	r3, r1
 80030a0:	3344      	adds	r3, #68	@ 0x44
 80030a2:	2200      	movs	r2, #0
 80030a4:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80030a6:	78fa      	ldrb	r2, [r7, #3]
 80030a8:	6879      	ldr	r1, [r7, #4]
 80030aa:	4613      	mov	r3, r2
 80030ac:	011b      	lsls	r3, r3, #4
 80030ae:	1a9b      	subs	r3, r3, r2
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	440b      	add	r3, r1
 80030b4:	331a      	adds	r3, #26
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d123      	bne.n	8003104 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 80030bc:	78fa      	ldrb	r2, [r7, #3]
 80030be:	6879      	ldr	r1, [r7, #4]
 80030c0:	4613      	mov	r3, r2
 80030c2:	011b      	lsls	r3, r3, #4
 80030c4:	1a9b      	subs	r3, r3, r2
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	440b      	add	r3, r1
 80030ca:	331b      	adds	r3, #27
 80030cc:	2200      	movs	r2, #0
 80030ce:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 80030d0:	78fa      	ldrb	r2, [r7, #3]
 80030d2:	6879      	ldr	r1, [r7, #4]
 80030d4:	4613      	mov	r3, r2
 80030d6:	011b      	lsls	r3, r3, #4
 80030d8:	1a9b      	subs	r3, r3, r2
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	440b      	add	r3, r1
 80030de:	331c      	adds	r3, #28
 80030e0:	2200      	movs	r2, #0
 80030e2:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80030e4:	78fb      	ldrb	r3, [r7, #3]
 80030e6:	015a      	lsls	r2, r3, #5
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	4413      	add	r3, r2
 80030ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	78fa      	ldrb	r2, [r7, #3]
 80030f4:	0151      	lsls	r1, r2, #5
 80030f6:	693a      	ldr	r2, [r7, #16]
 80030f8:	440a      	add	r2, r1
 80030fa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80030fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003102:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003104:	78fa      	ldrb	r2, [r7, #3]
 8003106:	6879      	ldr	r1, [r7, #4]
 8003108:	4613      	mov	r3, r2
 800310a:	011b      	lsls	r3, r3, #4
 800310c:	1a9b      	subs	r3, r3, r2
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	440b      	add	r3, r1
 8003112:	334c      	adds	r3, #76	@ 0x4c
 8003114:	2204      	movs	r2, #4
 8003116:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003118:	e229      	b.n	800356e <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800311a:	78fa      	ldrb	r2, [r7, #3]
 800311c:	6879      	ldr	r1, [r7, #4]
 800311e:	4613      	mov	r3, r2
 8003120:	011b      	lsls	r3, r3, #4
 8003122:	1a9b      	subs	r3, r3, r2
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	440b      	add	r3, r1
 8003128:	334c      	adds	r3, #76	@ 0x4c
 800312a:	2202      	movs	r2, #2
 800312c:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800312e:	78fa      	ldrb	r2, [r7, #3]
 8003130:	6879      	ldr	r1, [r7, #4]
 8003132:	4613      	mov	r3, r2
 8003134:	011b      	lsls	r3, r3, #4
 8003136:	1a9b      	subs	r3, r3, r2
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	440b      	add	r3, r1
 800313c:	3326      	adds	r3, #38	@ 0x26
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d00b      	beq.n	800315c <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003144:	78fa      	ldrb	r2, [r7, #3]
 8003146:	6879      	ldr	r1, [r7, #4]
 8003148:	4613      	mov	r3, r2
 800314a:	011b      	lsls	r3, r3, #4
 800314c:	1a9b      	subs	r3, r3, r2
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	440b      	add	r3, r1
 8003152:	3326      	adds	r3, #38	@ 0x26
 8003154:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003156:	2b02      	cmp	r3, #2
 8003158:	f040 8209 	bne.w	800356e <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800315c:	78fb      	ldrb	r3, [r7, #3]
 800315e:	015a      	lsls	r2, r3, #5
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	4413      	add	r3, r2
 8003164:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003172:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800317a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800317c:	78fb      	ldrb	r3, [r7, #3]
 800317e:	015a      	lsls	r2, r3, #5
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	4413      	add	r3, r2
 8003184:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003188:	461a      	mov	r2, r3
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800318e:	e1ee      	b.n	800356e <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003190:	78fa      	ldrb	r2, [r7, #3]
 8003192:	6879      	ldr	r1, [r7, #4]
 8003194:	4613      	mov	r3, r2
 8003196:	011b      	lsls	r3, r3, #4
 8003198:	1a9b      	subs	r3, r3, r2
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	440b      	add	r3, r1
 800319e:	334d      	adds	r3, #77	@ 0x4d
 80031a0:	781b      	ldrb	r3, [r3, #0]
 80031a2:	2b05      	cmp	r3, #5
 80031a4:	f040 80c8 	bne.w	8003338 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80031a8:	78fa      	ldrb	r2, [r7, #3]
 80031aa:	6879      	ldr	r1, [r7, #4]
 80031ac:	4613      	mov	r3, r2
 80031ae:	011b      	lsls	r3, r3, #4
 80031b0:	1a9b      	subs	r3, r3, r2
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	440b      	add	r3, r1
 80031b6:	334d      	adds	r3, #77	@ 0x4d
 80031b8:	2202      	movs	r2, #2
 80031ba:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80031bc:	78fa      	ldrb	r2, [r7, #3]
 80031be:	6879      	ldr	r1, [r7, #4]
 80031c0:	4613      	mov	r3, r2
 80031c2:	011b      	lsls	r3, r3, #4
 80031c4:	1a9b      	subs	r3, r3, r2
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	440b      	add	r3, r1
 80031ca:	331b      	adds	r3, #27
 80031cc:	781b      	ldrb	r3, [r3, #0]
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	f040 81ce 	bne.w	8003570 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80031d4:	78fa      	ldrb	r2, [r7, #3]
 80031d6:	6879      	ldr	r1, [r7, #4]
 80031d8:	4613      	mov	r3, r2
 80031da:	011b      	lsls	r3, r3, #4
 80031dc:	1a9b      	subs	r3, r3, r2
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	440b      	add	r3, r1
 80031e2:	3326      	adds	r3, #38	@ 0x26
 80031e4:	781b      	ldrb	r3, [r3, #0]
 80031e6:	2b03      	cmp	r3, #3
 80031e8:	d16b      	bne.n	80032c2 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 80031ea:	78fa      	ldrb	r2, [r7, #3]
 80031ec:	6879      	ldr	r1, [r7, #4]
 80031ee:	4613      	mov	r3, r2
 80031f0:	011b      	lsls	r3, r3, #4
 80031f2:	1a9b      	subs	r3, r3, r2
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	440b      	add	r3, r1
 80031f8:	3348      	adds	r3, #72	@ 0x48
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	1c59      	adds	r1, r3, #1
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	4613      	mov	r3, r2
 8003202:	011b      	lsls	r3, r3, #4
 8003204:	1a9b      	subs	r3, r3, r2
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	4403      	add	r3, r0
 800320a:	3348      	adds	r3, #72	@ 0x48
 800320c:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 800320e:	78fa      	ldrb	r2, [r7, #3]
 8003210:	6879      	ldr	r1, [r7, #4]
 8003212:	4613      	mov	r3, r2
 8003214:	011b      	lsls	r3, r3, #4
 8003216:	1a9b      	subs	r3, r3, r2
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	440b      	add	r3, r1
 800321c:	3348      	adds	r3, #72	@ 0x48
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2b02      	cmp	r3, #2
 8003222:	d943      	bls.n	80032ac <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8003224:	78fa      	ldrb	r2, [r7, #3]
 8003226:	6879      	ldr	r1, [r7, #4]
 8003228:	4613      	mov	r3, r2
 800322a:	011b      	lsls	r3, r3, #4
 800322c:	1a9b      	subs	r3, r3, r2
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	440b      	add	r3, r1
 8003232:	3348      	adds	r3, #72	@ 0x48
 8003234:	2200      	movs	r2, #0
 8003236:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8003238:	78fa      	ldrb	r2, [r7, #3]
 800323a:	6879      	ldr	r1, [r7, #4]
 800323c:	4613      	mov	r3, r2
 800323e:	011b      	lsls	r3, r3, #4
 8003240:	1a9b      	subs	r3, r3, r2
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	440b      	add	r3, r1
 8003246:	331b      	adds	r3, #27
 8003248:	2200      	movs	r2, #0
 800324a:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 800324c:	78fa      	ldrb	r2, [r7, #3]
 800324e:	6879      	ldr	r1, [r7, #4]
 8003250:	4613      	mov	r3, r2
 8003252:	011b      	lsls	r3, r3, #4
 8003254:	1a9b      	subs	r3, r3, r2
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	440b      	add	r3, r1
 800325a:	3344      	adds	r3, #68	@ 0x44
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	2b02      	cmp	r3, #2
 8003260:	d809      	bhi.n	8003276 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8003262:	78fa      	ldrb	r2, [r7, #3]
 8003264:	6879      	ldr	r1, [r7, #4]
 8003266:	4613      	mov	r3, r2
 8003268:	011b      	lsls	r3, r3, #4
 800326a:	1a9b      	subs	r3, r3, r2
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	440b      	add	r3, r1
 8003270:	331c      	adds	r3, #28
 8003272:	2201      	movs	r2, #1
 8003274:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003276:	78fb      	ldrb	r3, [r7, #3]
 8003278:	015a      	lsls	r2, r3, #5
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	4413      	add	r3, r2
 800327e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	78fa      	ldrb	r2, [r7, #3]
 8003286:	0151      	lsls	r1, r2, #5
 8003288:	693a      	ldr	r2, [r7, #16]
 800328a:	440a      	add	r2, r1
 800328c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003290:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003294:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8003296:	78fa      	ldrb	r2, [r7, #3]
 8003298:	6879      	ldr	r1, [r7, #4]
 800329a:	4613      	mov	r3, r2
 800329c:	011b      	lsls	r3, r3, #4
 800329e:	1a9b      	subs	r3, r3, r2
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	440b      	add	r3, r1
 80032a4:	334c      	adds	r3, #76	@ 0x4c
 80032a6:	2204      	movs	r2, #4
 80032a8:	701a      	strb	r2, [r3, #0]
 80032aa:	e014      	b.n	80032d6 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80032ac:	78fa      	ldrb	r2, [r7, #3]
 80032ae:	6879      	ldr	r1, [r7, #4]
 80032b0:	4613      	mov	r3, r2
 80032b2:	011b      	lsls	r3, r3, #4
 80032b4:	1a9b      	subs	r3, r3, r2
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	440b      	add	r3, r1
 80032ba:	334c      	adds	r3, #76	@ 0x4c
 80032bc:	2202      	movs	r2, #2
 80032be:	701a      	strb	r2, [r3, #0]
 80032c0:	e009      	b.n	80032d6 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80032c2:	78fa      	ldrb	r2, [r7, #3]
 80032c4:	6879      	ldr	r1, [r7, #4]
 80032c6:	4613      	mov	r3, r2
 80032c8:	011b      	lsls	r3, r3, #4
 80032ca:	1a9b      	subs	r3, r3, r2
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	440b      	add	r3, r1
 80032d0:	334c      	adds	r3, #76	@ 0x4c
 80032d2:	2202      	movs	r2, #2
 80032d4:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80032d6:	78fa      	ldrb	r2, [r7, #3]
 80032d8:	6879      	ldr	r1, [r7, #4]
 80032da:	4613      	mov	r3, r2
 80032dc:	011b      	lsls	r3, r3, #4
 80032de:	1a9b      	subs	r3, r3, r2
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	440b      	add	r3, r1
 80032e4:	3326      	adds	r3, #38	@ 0x26
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d00b      	beq.n	8003304 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80032ec:	78fa      	ldrb	r2, [r7, #3]
 80032ee:	6879      	ldr	r1, [r7, #4]
 80032f0:	4613      	mov	r3, r2
 80032f2:	011b      	lsls	r3, r3, #4
 80032f4:	1a9b      	subs	r3, r3, r2
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	440b      	add	r3, r1
 80032fa:	3326      	adds	r3, #38	@ 0x26
 80032fc:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80032fe:	2b02      	cmp	r3, #2
 8003300:	f040 8136 	bne.w	8003570 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003304:	78fb      	ldrb	r3, [r7, #3]
 8003306:	015a      	lsls	r2, r3, #5
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	4413      	add	r3, r2
 800330c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800331a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003322:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003324:	78fb      	ldrb	r3, [r7, #3]
 8003326:	015a      	lsls	r2, r3, #5
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	4413      	add	r3, r2
 800332c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003330:	461a      	mov	r2, r3
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	6013      	str	r3, [r2, #0]
 8003336:	e11b      	b.n	8003570 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003338:	78fa      	ldrb	r2, [r7, #3]
 800333a:	6879      	ldr	r1, [r7, #4]
 800333c:	4613      	mov	r3, r2
 800333e:	011b      	lsls	r3, r3, #4
 8003340:	1a9b      	subs	r3, r3, r2
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	440b      	add	r3, r1
 8003346:	334d      	adds	r3, #77	@ 0x4d
 8003348:	781b      	ldrb	r3, [r3, #0]
 800334a:	2b03      	cmp	r3, #3
 800334c:	f040 8081 	bne.w	8003452 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003350:	78fa      	ldrb	r2, [r7, #3]
 8003352:	6879      	ldr	r1, [r7, #4]
 8003354:	4613      	mov	r3, r2
 8003356:	011b      	lsls	r3, r3, #4
 8003358:	1a9b      	subs	r3, r3, r2
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	440b      	add	r3, r1
 800335e:	334d      	adds	r3, #77	@ 0x4d
 8003360:	2202      	movs	r2, #2
 8003362:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003364:	78fa      	ldrb	r2, [r7, #3]
 8003366:	6879      	ldr	r1, [r7, #4]
 8003368:	4613      	mov	r3, r2
 800336a:	011b      	lsls	r3, r3, #4
 800336c:	1a9b      	subs	r3, r3, r2
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	440b      	add	r3, r1
 8003372:	331b      	adds	r3, #27
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	2b01      	cmp	r3, #1
 8003378:	f040 80fa 	bne.w	8003570 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800337c:	78fa      	ldrb	r2, [r7, #3]
 800337e:	6879      	ldr	r1, [r7, #4]
 8003380:	4613      	mov	r3, r2
 8003382:	011b      	lsls	r3, r3, #4
 8003384:	1a9b      	subs	r3, r3, r2
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	440b      	add	r3, r1
 800338a:	334c      	adds	r3, #76	@ 0x4c
 800338c:	2202      	movs	r2, #2
 800338e:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8003390:	78fb      	ldrb	r3, [r7, #3]
 8003392:	015a      	lsls	r2, r3, #5
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	4413      	add	r3, r2
 8003398:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	78fa      	ldrb	r2, [r7, #3]
 80033a0:	0151      	lsls	r1, r2, #5
 80033a2:	693a      	ldr	r2, [r7, #16]
 80033a4:	440a      	add	r2, r1
 80033a6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80033aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033ae:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80033b0:	78fb      	ldrb	r3, [r7, #3]
 80033b2:	015a      	lsls	r2, r3, #5
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	4413      	add	r3, r2
 80033b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033bc:	68db      	ldr	r3, [r3, #12]
 80033be:	78fa      	ldrb	r2, [r7, #3]
 80033c0:	0151      	lsls	r1, r2, #5
 80033c2:	693a      	ldr	r2, [r7, #16]
 80033c4:	440a      	add	r2, r1
 80033c6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80033ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80033ce:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 80033d0:	78fb      	ldrb	r3, [r7, #3]
 80033d2:	015a      	lsls	r2, r3, #5
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	4413      	add	r3, r2
 80033d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033dc:	68db      	ldr	r3, [r3, #12]
 80033de:	78fa      	ldrb	r2, [r7, #3]
 80033e0:	0151      	lsls	r1, r2, #5
 80033e2:	693a      	ldr	r2, [r7, #16]
 80033e4:	440a      	add	r2, r1
 80033e6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80033ea:	f023 0320 	bic.w	r3, r3, #32
 80033ee:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80033f0:	78fa      	ldrb	r2, [r7, #3]
 80033f2:	6879      	ldr	r1, [r7, #4]
 80033f4:	4613      	mov	r3, r2
 80033f6:	011b      	lsls	r3, r3, #4
 80033f8:	1a9b      	subs	r3, r3, r2
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	440b      	add	r3, r1
 80033fe:	3326      	adds	r3, #38	@ 0x26
 8003400:	781b      	ldrb	r3, [r3, #0]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d00b      	beq.n	800341e <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003406:	78fa      	ldrb	r2, [r7, #3]
 8003408:	6879      	ldr	r1, [r7, #4]
 800340a:	4613      	mov	r3, r2
 800340c:	011b      	lsls	r3, r3, #4
 800340e:	1a9b      	subs	r3, r3, r2
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	440b      	add	r3, r1
 8003414:	3326      	adds	r3, #38	@ 0x26
 8003416:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003418:	2b02      	cmp	r3, #2
 800341a:	f040 80a9 	bne.w	8003570 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800341e:	78fb      	ldrb	r3, [r7, #3]
 8003420:	015a      	lsls	r2, r3, #5
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	4413      	add	r3, r2
 8003426:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003434:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800343c:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800343e:	78fb      	ldrb	r3, [r7, #3]
 8003440:	015a      	lsls	r2, r3, #5
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	4413      	add	r3, r2
 8003446:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800344a:	461a      	mov	r2, r3
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6013      	str	r3, [r2, #0]
 8003450:	e08e      	b.n	8003570 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003452:	78fa      	ldrb	r2, [r7, #3]
 8003454:	6879      	ldr	r1, [r7, #4]
 8003456:	4613      	mov	r3, r2
 8003458:	011b      	lsls	r3, r3, #4
 800345a:	1a9b      	subs	r3, r3, r2
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	440b      	add	r3, r1
 8003460:	334d      	adds	r3, #77	@ 0x4d
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	2b04      	cmp	r3, #4
 8003466:	d143      	bne.n	80034f0 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003468:	78fa      	ldrb	r2, [r7, #3]
 800346a:	6879      	ldr	r1, [r7, #4]
 800346c:	4613      	mov	r3, r2
 800346e:	011b      	lsls	r3, r3, #4
 8003470:	1a9b      	subs	r3, r3, r2
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	440b      	add	r3, r1
 8003476:	334d      	adds	r3, #77	@ 0x4d
 8003478:	2202      	movs	r2, #2
 800347a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800347c:	78fa      	ldrb	r2, [r7, #3]
 800347e:	6879      	ldr	r1, [r7, #4]
 8003480:	4613      	mov	r3, r2
 8003482:	011b      	lsls	r3, r3, #4
 8003484:	1a9b      	subs	r3, r3, r2
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	440b      	add	r3, r1
 800348a:	334c      	adds	r3, #76	@ 0x4c
 800348c:	2202      	movs	r2, #2
 800348e:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003490:	78fa      	ldrb	r2, [r7, #3]
 8003492:	6879      	ldr	r1, [r7, #4]
 8003494:	4613      	mov	r3, r2
 8003496:	011b      	lsls	r3, r3, #4
 8003498:	1a9b      	subs	r3, r3, r2
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	440b      	add	r3, r1
 800349e:	3326      	adds	r3, #38	@ 0x26
 80034a0:	781b      	ldrb	r3, [r3, #0]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d00a      	beq.n	80034bc <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80034a6:	78fa      	ldrb	r2, [r7, #3]
 80034a8:	6879      	ldr	r1, [r7, #4]
 80034aa:	4613      	mov	r3, r2
 80034ac:	011b      	lsls	r3, r3, #4
 80034ae:	1a9b      	subs	r3, r3, r2
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	440b      	add	r3, r1
 80034b4:	3326      	adds	r3, #38	@ 0x26
 80034b6:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	d159      	bne.n	8003570 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80034bc:	78fb      	ldrb	r3, [r7, #3]
 80034be:	015a      	lsls	r2, r3, #5
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	4413      	add	r3, r2
 80034c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80034d2:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80034da:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80034dc:	78fb      	ldrb	r3, [r7, #3]
 80034de:	015a      	lsls	r2, r3, #5
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	4413      	add	r3, r2
 80034e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034e8:	461a      	mov	r2, r3
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	6013      	str	r3, [r2, #0]
 80034ee:	e03f      	b.n	8003570 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 80034f0:	78fa      	ldrb	r2, [r7, #3]
 80034f2:	6879      	ldr	r1, [r7, #4]
 80034f4:	4613      	mov	r3, r2
 80034f6:	011b      	lsls	r3, r3, #4
 80034f8:	1a9b      	subs	r3, r3, r2
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	440b      	add	r3, r1
 80034fe:	334d      	adds	r3, #77	@ 0x4d
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	2b08      	cmp	r3, #8
 8003504:	d126      	bne.n	8003554 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003506:	78fa      	ldrb	r2, [r7, #3]
 8003508:	6879      	ldr	r1, [r7, #4]
 800350a:	4613      	mov	r3, r2
 800350c:	011b      	lsls	r3, r3, #4
 800350e:	1a9b      	subs	r3, r3, r2
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	440b      	add	r3, r1
 8003514:	334d      	adds	r3, #77	@ 0x4d
 8003516:	2202      	movs	r2, #2
 8003518:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800351a:	78fa      	ldrb	r2, [r7, #3]
 800351c:	6879      	ldr	r1, [r7, #4]
 800351e:	4613      	mov	r3, r2
 8003520:	011b      	lsls	r3, r3, #4
 8003522:	1a9b      	subs	r3, r3, r2
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	440b      	add	r3, r1
 8003528:	3344      	adds	r3, #68	@ 0x44
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	1c59      	adds	r1, r3, #1
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	4613      	mov	r3, r2
 8003532:	011b      	lsls	r3, r3, #4
 8003534:	1a9b      	subs	r3, r3, r2
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	4403      	add	r3, r0
 800353a:	3344      	adds	r3, #68	@ 0x44
 800353c:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 800353e:	78fa      	ldrb	r2, [r7, #3]
 8003540:	6879      	ldr	r1, [r7, #4]
 8003542:	4613      	mov	r3, r2
 8003544:	011b      	lsls	r3, r3, #4
 8003546:	1a9b      	subs	r3, r3, r2
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	440b      	add	r3, r1
 800354c:	334c      	adds	r3, #76	@ 0x4c
 800354e:	2204      	movs	r2, #4
 8003550:	701a      	strb	r2, [r3, #0]
 8003552:	e00d      	b.n	8003570 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8003554:	78fa      	ldrb	r2, [r7, #3]
 8003556:	6879      	ldr	r1, [r7, #4]
 8003558:	4613      	mov	r3, r2
 800355a:	011b      	lsls	r3, r3, #4
 800355c:	1a9b      	subs	r3, r3, r2
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	440b      	add	r3, r1
 8003562:	334d      	adds	r3, #77	@ 0x4d
 8003564:	781b      	ldrb	r3, [r3, #0]
 8003566:	2b02      	cmp	r3, #2
 8003568:	f000 8100 	beq.w	800376c <HCD_HC_IN_IRQHandler+0xcca>
 800356c:	e000      	b.n	8003570 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800356e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003570:	78fa      	ldrb	r2, [r7, #3]
 8003572:	6879      	ldr	r1, [r7, #4]
 8003574:	4613      	mov	r3, r2
 8003576:	011b      	lsls	r3, r3, #4
 8003578:	1a9b      	subs	r3, r3, r2
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	440b      	add	r3, r1
 800357e:	334c      	adds	r3, #76	@ 0x4c
 8003580:	781a      	ldrb	r2, [r3, #0]
 8003582:	78fb      	ldrb	r3, [r7, #3]
 8003584:	4619      	mov	r1, r3
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f00a f860 	bl	800d64c <HAL_HCD_HC_NotifyURBChange_Callback>
 800358c:	e0ef      	b.n	800376e <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	78fa      	ldrb	r2, [r7, #3]
 8003594:	4611      	mov	r1, r2
 8003596:	4618      	mov	r0, r3
 8003598:	f003 fd2d 	bl	8006ff6 <USB_ReadChInterrupts>
 800359c:	4603      	mov	r3, r0
 800359e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035a2:	2b40      	cmp	r3, #64	@ 0x40
 80035a4:	d12f      	bne.n	8003606 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80035a6:	78fb      	ldrb	r3, [r7, #3]
 80035a8:	015a      	lsls	r2, r3, #5
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	4413      	add	r3, r2
 80035ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035b2:	461a      	mov	r2, r3
 80035b4:	2340      	movs	r3, #64	@ 0x40
 80035b6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 80035b8:	78fa      	ldrb	r2, [r7, #3]
 80035ba:	6879      	ldr	r1, [r7, #4]
 80035bc:	4613      	mov	r3, r2
 80035be:	011b      	lsls	r3, r3, #4
 80035c0:	1a9b      	subs	r3, r3, r2
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	440b      	add	r3, r1
 80035c6:	334d      	adds	r3, #77	@ 0x4d
 80035c8:	2205      	movs	r2, #5
 80035ca:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80035cc:	78fa      	ldrb	r2, [r7, #3]
 80035ce:	6879      	ldr	r1, [r7, #4]
 80035d0:	4613      	mov	r3, r2
 80035d2:	011b      	lsls	r3, r3, #4
 80035d4:	1a9b      	subs	r3, r3, r2
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	440b      	add	r3, r1
 80035da:	331a      	adds	r3, #26
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d109      	bne.n	80035f6 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80035e2:	78fa      	ldrb	r2, [r7, #3]
 80035e4:	6879      	ldr	r1, [r7, #4]
 80035e6:	4613      	mov	r3, r2
 80035e8:	011b      	lsls	r3, r3, #4
 80035ea:	1a9b      	subs	r3, r3, r2
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	440b      	add	r3, r1
 80035f0:	3344      	adds	r3, #68	@ 0x44
 80035f2:	2200      	movs	r2, #0
 80035f4:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	78fa      	ldrb	r2, [r7, #3]
 80035fc:	4611      	mov	r1, r2
 80035fe:	4618      	mov	r0, r3
 8003600:	f004 fa9d 	bl	8007b3e <USB_HC_Halt>
 8003604:	e0b3      	b.n	800376e <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	78fa      	ldrb	r2, [r7, #3]
 800360c:	4611      	mov	r1, r2
 800360e:	4618      	mov	r0, r3
 8003610:	f003 fcf1 	bl	8006ff6 <USB_ReadChInterrupts>
 8003614:	4603      	mov	r3, r0
 8003616:	f003 0310 	and.w	r3, r3, #16
 800361a:	2b10      	cmp	r3, #16
 800361c:	f040 80a7 	bne.w	800376e <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003620:	78fa      	ldrb	r2, [r7, #3]
 8003622:	6879      	ldr	r1, [r7, #4]
 8003624:	4613      	mov	r3, r2
 8003626:	011b      	lsls	r3, r3, #4
 8003628:	1a9b      	subs	r3, r3, r2
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	440b      	add	r3, r1
 800362e:	3326      	adds	r3, #38	@ 0x26
 8003630:	781b      	ldrb	r3, [r3, #0]
 8003632:	2b03      	cmp	r3, #3
 8003634:	d11b      	bne.n	800366e <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003636:	78fa      	ldrb	r2, [r7, #3]
 8003638:	6879      	ldr	r1, [r7, #4]
 800363a:	4613      	mov	r3, r2
 800363c:	011b      	lsls	r3, r3, #4
 800363e:	1a9b      	subs	r3, r3, r2
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	440b      	add	r3, r1
 8003644:	3344      	adds	r3, #68	@ 0x44
 8003646:	2200      	movs	r2, #0
 8003648:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 800364a:	78fa      	ldrb	r2, [r7, #3]
 800364c:	6879      	ldr	r1, [r7, #4]
 800364e:	4613      	mov	r3, r2
 8003650:	011b      	lsls	r3, r3, #4
 8003652:	1a9b      	subs	r3, r3, r2
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	440b      	add	r3, r1
 8003658:	334d      	adds	r3, #77	@ 0x4d
 800365a:	2204      	movs	r2, #4
 800365c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	78fa      	ldrb	r2, [r7, #3]
 8003664:	4611      	mov	r1, r2
 8003666:	4618      	mov	r0, r3
 8003668:	f004 fa69 	bl	8007b3e <USB_HC_Halt>
 800366c:	e03f      	b.n	80036ee <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800366e:	78fa      	ldrb	r2, [r7, #3]
 8003670:	6879      	ldr	r1, [r7, #4]
 8003672:	4613      	mov	r3, r2
 8003674:	011b      	lsls	r3, r3, #4
 8003676:	1a9b      	subs	r3, r3, r2
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	440b      	add	r3, r1
 800367c:	3326      	adds	r3, #38	@ 0x26
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d00a      	beq.n	800369a <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003684:	78fa      	ldrb	r2, [r7, #3]
 8003686:	6879      	ldr	r1, [r7, #4]
 8003688:	4613      	mov	r3, r2
 800368a:	011b      	lsls	r3, r3, #4
 800368c:	1a9b      	subs	r3, r3, r2
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	440b      	add	r3, r1
 8003692:	3326      	adds	r3, #38	@ 0x26
 8003694:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003696:	2b02      	cmp	r3, #2
 8003698:	d129      	bne.n	80036ee <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800369a:	78fa      	ldrb	r2, [r7, #3]
 800369c:	6879      	ldr	r1, [r7, #4]
 800369e:	4613      	mov	r3, r2
 80036a0:	011b      	lsls	r3, r3, #4
 80036a2:	1a9b      	subs	r3, r3, r2
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	440b      	add	r3, r1
 80036a8:	3344      	adds	r3, #68	@ 0x44
 80036aa:	2200      	movs	r2, #0
 80036ac:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	799b      	ldrb	r3, [r3, #6]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d00a      	beq.n	80036cc <HCD_HC_IN_IRQHandler+0xc2a>
 80036b6:	78fa      	ldrb	r2, [r7, #3]
 80036b8:	6879      	ldr	r1, [r7, #4]
 80036ba:	4613      	mov	r3, r2
 80036bc:	011b      	lsls	r3, r3, #4
 80036be:	1a9b      	subs	r3, r3, r2
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	440b      	add	r3, r1
 80036c4:	331b      	adds	r3, #27
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d110      	bne.n	80036ee <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 80036cc:	78fa      	ldrb	r2, [r7, #3]
 80036ce:	6879      	ldr	r1, [r7, #4]
 80036d0:	4613      	mov	r3, r2
 80036d2:	011b      	lsls	r3, r3, #4
 80036d4:	1a9b      	subs	r3, r3, r2
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	440b      	add	r3, r1
 80036da:	334d      	adds	r3, #77	@ 0x4d
 80036dc:	2204      	movs	r2, #4
 80036de:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	78fa      	ldrb	r2, [r7, #3]
 80036e6:	4611      	mov	r1, r2
 80036e8:	4618      	mov	r0, r3
 80036ea:	f004 fa28 	bl	8007b3e <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 80036ee:	78fa      	ldrb	r2, [r7, #3]
 80036f0:	6879      	ldr	r1, [r7, #4]
 80036f2:	4613      	mov	r3, r2
 80036f4:	011b      	lsls	r3, r3, #4
 80036f6:	1a9b      	subs	r3, r3, r2
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	440b      	add	r3, r1
 80036fc:	331b      	adds	r3, #27
 80036fe:	781b      	ldrb	r3, [r3, #0]
 8003700:	2b01      	cmp	r3, #1
 8003702:	d129      	bne.n	8003758 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003704:	78fa      	ldrb	r2, [r7, #3]
 8003706:	6879      	ldr	r1, [r7, #4]
 8003708:	4613      	mov	r3, r2
 800370a:	011b      	lsls	r3, r3, #4
 800370c:	1a9b      	subs	r3, r3, r2
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	440b      	add	r3, r1
 8003712:	331b      	adds	r3, #27
 8003714:	2200      	movs	r2, #0
 8003716:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003718:	78fb      	ldrb	r3, [r7, #3]
 800371a:	015a      	lsls	r2, r3, #5
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	4413      	add	r3, r2
 8003720:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	78fa      	ldrb	r2, [r7, #3]
 8003728:	0151      	lsls	r1, r2, #5
 800372a:	693a      	ldr	r2, [r7, #16]
 800372c:	440a      	add	r2, r1
 800372e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003732:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003736:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8003738:	78fb      	ldrb	r3, [r7, #3]
 800373a:	015a      	lsls	r2, r3, #5
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	4413      	add	r3, r2
 8003740:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003744:	68db      	ldr	r3, [r3, #12]
 8003746:	78fa      	ldrb	r2, [r7, #3]
 8003748:	0151      	lsls	r1, r2, #5
 800374a:	693a      	ldr	r2, [r7, #16]
 800374c:	440a      	add	r2, r1
 800374e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003752:	f043 0320 	orr.w	r3, r3, #32
 8003756:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003758:	78fb      	ldrb	r3, [r7, #3]
 800375a:	015a      	lsls	r2, r3, #5
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	4413      	add	r3, r2
 8003760:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003764:	461a      	mov	r2, r3
 8003766:	2310      	movs	r3, #16
 8003768:	6093      	str	r3, [r2, #8]
 800376a:	e000      	b.n	800376e <HCD_HC_IN_IRQHandler+0xccc>
        return;
 800376c:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 800376e:	3718      	adds	r7, #24
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}

08003774 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b086      	sub	sp, #24
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	460b      	mov	r3, r1
 800377e:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	78fa      	ldrb	r2, [r7, #3]
 8003790:	4611      	mov	r1, r2
 8003792:	4618      	mov	r0, r3
 8003794:	f003 fc2f 	bl	8006ff6 <USB_ReadChInterrupts>
 8003798:	4603      	mov	r3, r0
 800379a:	f003 0304 	and.w	r3, r3, #4
 800379e:	2b04      	cmp	r3, #4
 80037a0:	d11b      	bne.n	80037da <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80037a2:	78fb      	ldrb	r3, [r7, #3]
 80037a4:	015a      	lsls	r2, r3, #5
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	4413      	add	r3, r2
 80037aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037ae:	461a      	mov	r2, r3
 80037b0:	2304      	movs	r3, #4
 80037b2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80037b4:	78fa      	ldrb	r2, [r7, #3]
 80037b6:	6879      	ldr	r1, [r7, #4]
 80037b8:	4613      	mov	r3, r2
 80037ba:	011b      	lsls	r3, r3, #4
 80037bc:	1a9b      	subs	r3, r3, r2
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	440b      	add	r3, r1
 80037c2:	334d      	adds	r3, #77	@ 0x4d
 80037c4:	2207      	movs	r2, #7
 80037c6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	78fa      	ldrb	r2, [r7, #3]
 80037ce:	4611      	mov	r1, r2
 80037d0:	4618      	mov	r0, r3
 80037d2:	f004 f9b4 	bl	8007b3e <USB_HC_Halt>
 80037d6:	f000 bc6f 	b.w	80040b8 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	78fa      	ldrb	r2, [r7, #3]
 80037e0:	4611      	mov	r1, r2
 80037e2:	4618      	mov	r0, r3
 80037e4:	f003 fc07 	bl	8006ff6 <USB_ReadChInterrupts>
 80037e8:	4603      	mov	r3, r0
 80037ea:	f003 0320 	and.w	r3, r3, #32
 80037ee:	2b20      	cmp	r3, #32
 80037f0:	f040 8082 	bne.w	80038f8 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80037f4:	78fb      	ldrb	r3, [r7, #3]
 80037f6:	015a      	lsls	r2, r3, #5
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	4413      	add	r3, r2
 80037fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003800:	461a      	mov	r2, r3
 8003802:	2320      	movs	r3, #32
 8003804:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8003806:	78fa      	ldrb	r2, [r7, #3]
 8003808:	6879      	ldr	r1, [r7, #4]
 800380a:	4613      	mov	r3, r2
 800380c:	011b      	lsls	r3, r3, #4
 800380e:	1a9b      	subs	r3, r3, r2
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	440b      	add	r3, r1
 8003814:	3319      	adds	r3, #25
 8003816:	781b      	ldrb	r3, [r3, #0]
 8003818:	2b01      	cmp	r3, #1
 800381a:	d124      	bne.n	8003866 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 800381c:	78fa      	ldrb	r2, [r7, #3]
 800381e:	6879      	ldr	r1, [r7, #4]
 8003820:	4613      	mov	r3, r2
 8003822:	011b      	lsls	r3, r3, #4
 8003824:	1a9b      	subs	r3, r3, r2
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	440b      	add	r3, r1
 800382a:	3319      	adds	r3, #25
 800382c:	2200      	movs	r2, #0
 800382e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003830:	78fa      	ldrb	r2, [r7, #3]
 8003832:	6879      	ldr	r1, [r7, #4]
 8003834:	4613      	mov	r3, r2
 8003836:	011b      	lsls	r3, r3, #4
 8003838:	1a9b      	subs	r3, r3, r2
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	440b      	add	r3, r1
 800383e:	334c      	adds	r3, #76	@ 0x4c
 8003840:	2202      	movs	r2, #2
 8003842:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003844:	78fa      	ldrb	r2, [r7, #3]
 8003846:	6879      	ldr	r1, [r7, #4]
 8003848:	4613      	mov	r3, r2
 800384a:	011b      	lsls	r3, r3, #4
 800384c:	1a9b      	subs	r3, r3, r2
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	440b      	add	r3, r1
 8003852:	334d      	adds	r3, #77	@ 0x4d
 8003854:	2203      	movs	r2, #3
 8003856:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	78fa      	ldrb	r2, [r7, #3]
 800385e:	4611      	mov	r1, r2
 8003860:	4618      	mov	r0, r3
 8003862:	f004 f96c 	bl	8007b3e <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8003866:	78fa      	ldrb	r2, [r7, #3]
 8003868:	6879      	ldr	r1, [r7, #4]
 800386a:	4613      	mov	r3, r2
 800386c:	011b      	lsls	r3, r3, #4
 800386e:	1a9b      	subs	r3, r3, r2
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	440b      	add	r3, r1
 8003874:	331a      	adds	r3, #26
 8003876:	781b      	ldrb	r3, [r3, #0]
 8003878:	2b01      	cmp	r3, #1
 800387a:	f040 841d 	bne.w	80040b8 <HCD_HC_OUT_IRQHandler+0x944>
 800387e:	78fa      	ldrb	r2, [r7, #3]
 8003880:	6879      	ldr	r1, [r7, #4]
 8003882:	4613      	mov	r3, r2
 8003884:	011b      	lsls	r3, r3, #4
 8003886:	1a9b      	subs	r3, r3, r2
 8003888:	009b      	lsls	r3, r3, #2
 800388a:	440b      	add	r3, r1
 800388c:	331b      	adds	r3, #27
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	2b00      	cmp	r3, #0
 8003892:	f040 8411 	bne.w	80040b8 <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8003896:	78fa      	ldrb	r2, [r7, #3]
 8003898:	6879      	ldr	r1, [r7, #4]
 800389a:	4613      	mov	r3, r2
 800389c:	011b      	lsls	r3, r3, #4
 800389e:	1a9b      	subs	r3, r3, r2
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	440b      	add	r3, r1
 80038a4:	3326      	adds	r3, #38	@ 0x26
 80038a6:	781b      	ldrb	r3, [r3, #0]
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d009      	beq.n	80038c0 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 80038ac:	78fa      	ldrb	r2, [r7, #3]
 80038ae:	6879      	ldr	r1, [r7, #4]
 80038b0:	4613      	mov	r3, r2
 80038b2:	011b      	lsls	r3, r3, #4
 80038b4:	1a9b      	subs	r3, r3, r2
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	440b      	add	r3, r1
 80038ba:	331b      	adds	r3, #27
 80038bc:	2201      	movs	r2, #1
 80038be:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 80038c0:	78fa      	ldrb	r2, [r7, #3]
 80038c2:	6879      	ldr	r1, [r7, #4]
 80038c4:	4613      	mov	r3, r2
 80038c6:	011b      	lsls	r3, r3, #4
 80038c8:	1a9b      	subs	r3, r3, r2
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	440b      	add	r3, r1
 80038ce:	334d      	adds	r3, #77	@ 0x4d
 80038d0:	2203      	movs	r2, #3
 80038d2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	78fa      	ldrb	r2, [r7, #3]
 80038da:	4611      	mov	r1, r2
 80038dc:	4618      	mov	r0, r3
 80038de:	f004 f92e 	bl	8007b3e <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 80038e2:	78fa      	ldrb	r2, [r7, #3]
 80038e4:	6879      	ldr	r1, [r7, #4]
 80038e6:	4613      	mov	r3, r2
 80038e8:	011b      	lsls	r3, r3, #4
 80038ea:	1a9b      	subs	r3, r3, r2
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	440b      	add	r3, r1
 80038f0:	3344      	adds	r3, #68	@ 0x44
 80038f2:	2200      	movs	r2, #0
 80038f4:	601a      	str	r2, [r3, #0]
 80038f6:	e3df      	b.n	80040b8 <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	78fa      	ldrb	r2, [r7, #3]
 80038fe:	4611      	mov	r1, r2
 8003900:	4618      	mov	r0, r3
 8003902:	f003 fb78 	bl	8006ff6 <USB_ReadChInterrupts>
 8003906:	4603      	mov	r3, r0
 8003908:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800390c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003910:	d111      	bne.n	8003936 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003912:	78fb      	ldrb	r3, [r7, #3]
 8003914:	015a      	lsls	r2, r3, #5
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	4413      	add	r3, r2
 800391a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800391e:	461a      	mov	r2, r3
 8003920:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003924:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	78fa      	ldrb	r2, [r7, #3]
 800392c:	4611      	mov	r1, r2
 800392e:	4618      	mov	r0, r3
 8003930:	f004 f905 	bl	8007b3e <USB_HC_Halt>
 8003934:	e3c0      	b.n	80040b8 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	78fa      	ldrb	r2, [r7, #3]
 800393c:	4611      	mov	r1, r2
 800393e:	4618      	mov	r0, r3
 8003940:	f003 fb59 	bl	8006ff6 <USB_ReadChInterrupts>
 8003944:	4603      	mov	r3, r0
 8003946:	f003 0301 	and.w	r3, r3, #1
 800394a:	2b01      	cmp	r3, #1
 800394c:	d168      	bne.n	8003a20 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800394e:	78fa      	ldrb	r2, [r7, #3]
 8003950:	6879      	ldr	r1, [r7, #4]
 8003952:	4613      	mov	r3, r2
 8003954:	011b      	lsls	r3, r3, #4
 8003956:	1a9b      	subs	r3, r3, r2
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	440b      	add	r3, r1
 800395c:	3344      	adds	r3, #68	@ 0x44
 800395e:	2200      	movs	r2, #0
 8003960:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	78fa      	ldrb	r2, [r7, #3]
 8003968:	4611      	mov	r1, r2
 800396a:	4618      	mov	r0, r3
 800396c:	f003 fb43 	bl	8006ff6 <USB_ReadChInterrupts>
 8003970:	4603      	mov	r3, r0
 8003972:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003976:	2b40      	cmp	r3, #64	@ 0x40
 8003978:	d112      	bne.n	80039a0 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800397a:	78fa      	ldrb	r2, [r7, #3]
 800397c:	6879      	ldr	r1, [r7, #4]
 800397e:	4613      	mov	r3, r2
 8003980:	011b      	lsls	r3, r3, #4
 8003982:	1a9b      	subs	r3, r3, r2
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	440b      	add	r3, r1
 8003988:	3319      	adds	r3, #25
 800398a:	2201      	movs	r2, #1
 800398c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800398e:	78fb      	ldrb	r3, [r7, #3]
 8003990:	015a      	lsls	r2, r3, #5
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	4413      	add	r3, r2
 8003996:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800399a:	461a      	mov	r2, r3
 800399c:	2340      	movs	r3, #64	@ 0x40
 800399e:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 80039a0:	78fa      	ldrb	r2, [r7, #3]
 80039a2:	6879      	ldr	r1, [r7, #4]
 80039a4:	4613      	mov	r3, r2
 80039a6:	011b      	lsls	r3, r3, #4
 80039a8:	1a9b      	subs	r3, r3, r2
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	440b      	add	r3, r1
 80039ae:	331b      	adds	r3, #27
 80039b0:	781b      	ldrb	r3, [r3, #0]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d019      	beq.n	80039ea <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80039b6:	78fa      	ldrb	r2, [r7, #3]
 80039b8:	6879      	ldr	r1, [r7, #4]
 80039ba:	4613      	mov	r3, r2
 80039bc:	011b      	lsls	r3, r3, #4
 80039be:	1a9b      	subs	r3, r3, r2
 80039c0:	009b      	lsls	r3, r3, #2
 80039c2:	440b      	add	r3, r1
 80039c4:	331b      	adds	r3, #27
 80039c6:	2200      	movs	r2, #0
 80039c8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80039ca:	78fb      	ldrb	r3, [r7, #3]
 80039cc:	015a      	lsls	r2, r3, #5
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	4413      	add	r3, r2
 80039d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	78fa      	ldrb	r2, [r7, #3]
 80039da:	0151      	lsls	r1, r2, #5
 80039dc:	693a      	ldr	r2, [r7, #16]
 80039de:	440a      	add	r2, r1
 80039e0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80039e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039e8:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80039ea:	78fb      	ldrb	r3, [r7, #3]
 80039ec:	015a      	lsls	r2, r3, #5
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	4413      	add	r3, r2
 80039f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039f6:	461a      	mov	r2, r3
 80039f8:	2301      	movs	r3, #1
 80039fa:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 80039fc:	78fa      	ldrb	r2, [r7, #3]
 80039fe:	6879      	ldr	r1, [r7, #4]
 8003a00:	4613      	mov	r3, r2
 8003a02:	011b      	lsls	r3, r3, #4
 8003a04:	1a9b      	subs	r3, r3, r2
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	440b      	add	r3, r1
 8003a0a:	334d      	adds	r3, #77	@ 0x4d
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	78fa      	ldrb	r2, [r7, #3]
 8003a16:	4611      	mov	r1, r2
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f004 f890 	bl	8007b3e <USB_HC_Halt>
 8003a1e:	e34b      	b.n	80040b8 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	78fa      	ldrb	r2, [r7, #3]
 8003a26:	4611      	mov	r1, r2
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f003 fae4 	bl	8006ff6 <USB_ReadChInterrupts>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a34:	2b40      	cmp	r3, #64	@ 0x40
 8003a36:	d139      	bne.n	8003aac <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8003a38:	78fa      	ldrb	r2, [r7, #3]
 8003a3a:	6879      	ldr	r1, [r7, #4]
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	011b      	lsls	r3, r3, #4
 8003a40:	1a9b      	subs	r3, r3, r2
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	440b      	add	r3, r1
 8003a46:	334d      	adds	r3, #77	@ 0x4d
 8003a48:	2205      	movs	r2, #5
 8003a4a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003a4c:	78fa      	ldrb	r2, [r7, #3]
 8003a4e:	6879      	ldr	r1, [r7, #4]
 8003a50:	4613      	mov	r3, r2
 8003a52:	011b      	lsls	r3, r3, #4
 8003a54:	1a9b      	subs	r3, r3, r2
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	440b      	add	r3, r1
 8003a5a:	331a      	adds	r3, #26
 8003a5c:	781b      	ldrb	r3, [r3, #0]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d109      	bne.n	8003a76 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003a62:	78fa      	ldrb	r2, [r7, #3]
 8003a64:	6879      	ldr	r1, [r7, #4]
 8003a66:	4613      	mov	r3, r2
 8003a68:	011b      	lsls	r3, r3, #4
 8003a6a:	1a9b      	subs	r3, r3, r2
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	440b      	add	r3, r1
 8003a70:	3319      	adds	r3, #25
 8003a72:	2201      	movs	r2, #1
 8003a74:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8003a76:	78fa      	ldrb	r2, [r7, #3]
 8003a78:	6879      	ldr	r1, [r7, #4]
 8003a7a:	4613      	mov	r3, r2
 8003a7c:	011b      	lsls	r3, r3, #4
 8003a7e:	1a9b      	subs	r3, r3, r2
 8003a80:	009b      	lsls	r3, r3, #2
 8003a82:	440b      	add	r3, r1
 8003a84:	3344      	adds	r3, #68	@ 0x44
 8003a86:	2200      	movs	r2, #0
 8003a88:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	78fa      	ldrb	r2, [r7, #3]
 8003a90:	4611      	mov	r1, r2
 8003a92:	4618      	mov	r0, r3
 8003a94:	f004 f853 	bl	8007b3e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003a98:	78fb      	ldrb	r3, [r7, #3]
 8003a9a:	015a      	lsls	r2, r3, #5
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	4413      	add	r3, r2
 8003aa0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	2340      	movs	r3, #64	@ 0x40
 8003aa8:	6093      	str	r3, [r2, #8]
 8003aaa:	e305      	b.n	80040b8 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	78fa      	ldrb	r2, [r7, #3]
 8003ab2:	4611      	mov	r1, r2
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f003 fa9e 	bl	8006ff6 <USB_ReadChInterrupts>
 8003aba:	4603      	mov	r3, r0
 8003abc:	f003 0308 	and.w	r3, r3, #8
 8003ac0:	2b08      	cmp	r3, #8
 8003ac2:	d11a      	bne.n	8003afa <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003ac4:	78fb      	ldrb	r3, [r7, #3]
 8003ac6:	015a      	lsls	r2, r3, #5
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	4413      	add	r3, r2
 8003acc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	2308      	movs	r3, #8
 8003ad4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003ad6:	78fa      	ldrb	r2, [r7, #3]
 8003ad8:	6879      	ldr	r1, [r7, #4]
 8003ada:	4613      	mov	r3, r2
 8003adc:	011b      	lsls	r3, r3, #4
 8003ade:	1a9b      	subs	r3, r3, r2
 8003ae0:	009b      	lsls	r3, r3, #2
 8003ae2:	440b      	add	r3, r1
 8003ae4:	334d      	adds	r3, #77	@ 0x4d
 8003ae6:	2206      	movs	r2, #6
 8003ae8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	78fa      	ldrb	r2, [r7, #3]
 8003af0:	4611      	mov	r1, r2
 8003af2:	4618      	mov	r0, r3
 8003af4:	f004 f823 	bl	8007b3e <USB_HC_Halt>
 8003af8:	e2de      	b.n	80040b8 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	78fa      	ldrb	r2, [r7, #3]
 8003b00:	4611      	mov	r1, r2
 8003b02:	4618      	mov	r0, r3
 8003b04:	f003 fa77 	bl	8006ff6 <USB_ReadChInterrupts>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	f003 0310 	and.w	r3, r3, #16
 8003b0e:	2b10      	cmp	r3, #16
 8003b10:	d144      	bne.n	8003b9c <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003b12:	78fa      	ldrb	r2, [r7, #3]
 8003b14:	6879      	ldr	r1, [r7, #4]
 8003b16:	4613      	mov	r3, r2
 8003b18:	011b      	lsls	r3, r3, #4
 8003b1a:	1a9b      	subs	r3, r3, r2
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	440b      	add	r3, r1
 8003b20:	3344      	adds	r3, #68	@ 0x44
 8003b22:	2200      	movs	r2, #0
 8003b24:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8003b26:	78fa      	ldrb	r2, [r7, #3]
 8003b28:	6879      	ldr	r1, [r7, #4]
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	011b      	lsls	r3, r3, #4
 8003b2e:	1a9b      	subs	r3, r3, r2
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	440b      	add	r3, r1
 8003b34:	334d      	adds	r3, #77	@ 0x4d
 8003b36:	2204      	movs	r2, #4
 8003b38:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8003b3a:	78fa      	ldrb	r2, [r7, #3]
 8003b3c:	6879      	ldr	r1, [r7, #4]
 8003b3e:	4613      	mov	r3, r2
 8003b40:	011b      	lsls	r3, r3, #4
 8003b42:	1a9b      	subs	r3, r3, r2
 8003b44:	009b      	lsls	r3, r3, #2
 8003b46:	440b      	add	r3, r1
 8003b48:	3319      	adds	r3, #25
 8003b4a:	781b      	ldrb	r3, [r3, #0]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d114      	bne.n	8003b7a <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8003b50:	78fa      	ldrb	r2, [r7, #3]
 8003b52:	6879      	ldr	r1, [r7, #4]
 8003b54:	4613      	mov	r3, r2
 8003b56:	011b      	lsls	r3, r3, #4
 8003b58:	1a9b      	subs	r3, r3, r2
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	440b      	add	r3, r1
 8003b5e:	3318      	adds	r3, #24
 8003b60:	781b      	ldrb	r3, [r3, #0]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d109      	bne.n	8003b7a <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8003b66:	78fa      	ldrb	r2, [r7, #3]
 8003b68:	6879      	ldr	r1, [r7, #4]
 8003b6a:	4613      	mov	r3, r2
 8003b6c:	011b      	lsls	r3, r3, #4
 8003b6e:	1a9b      	subs	r3, r3, r2
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	440b      	add	r3, r1
 8003b74:	3319      	adds	r3, #25
 8003b76:	2201      	movs	r2, #1
 8003b78:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	78fa      	ldrb	r2, [r7, #3]
 8003b80:	4611      	mov	r1, r2
 8003b82:	4618      	mov	r0, r3
 8003b84:	f003 ffdb 	bl	8007b3e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003b88:	78fb      	ldrb	r3, [r7, #3]
 8003b8a:	015a      	lsls	r2, r3, #5
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	4413      	add	r3, r2
 8003b90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b94:	461a      	mov	r2, r3
 8003b96:	2310      	movs	r3, #16
 8003b98:	6093      	str	r3, [r2, #8]
 8003b9a:	e28d      	b.n	80040b8 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	78fa      	ldrb	r2, [r7, #3]
 8003ba2:	4611      	mov	r1, r2
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f003 fa26 	bl	8006ff6 <USB_ReadChInterrupts>
 8003baa:	4603      	mov	r3, r0
 8003bac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bb0:	2b80      	cmp	r3, #128	@ 0x80
 8003bb2:	d169      	bne.n	8003c88 <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	799b      	ldrb	r3, [r3, #6]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d111      	bne.n	8003be0 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8003bbc:	78fa      	ldrb	r2, [r7, #3]
 8003bbe:	6879      	ldr	r1, [r7, #4]
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	011b      	lsls	r3, r3, #4
 8003bc4:	1a9b      	subs	r3, r3, r2
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	440b      	add	r3, r1
 8003bca:	334d      	adds	r3, #77	@ 0x4d
 8003bcc:	2207      	movs	r2, #7
 8003bce:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	78fa      	ldrb	r2, [r7, #3]
 8003bd6:	4611      	mov	r1, r2
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f003 ffb0 	bl	8007b3e <USB_HC_Halt>
 8003bde:	e049      	b.n	8003c74 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8003be0:	78fa      	ldrb	r2, [r7, #3]
 8003be2:	6879      	ldr	r1, [r7, #4]
 8003be4:	4613      	mov	r3, r2
 8003be6:	011b      	lsls	r3, r3, #4
 8003be8:	1a9b      	subs	r3, r3, r2
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	440b      	add	r3, r1
 8003bee:	3344      	adds	r3, #68	@ 0x44
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	1c59      	adds	r1, r3, #1
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	4613      	mov	r3, r2
 8003bf8:	011b      	lsls	r3, r3, #4
 8003bfa:	1a9b      	subs	r3, r3, r2
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	4403      	add	r3, r0
 8003c00:	3344      	adds	r3, #68	@ 0x44
 8003c02:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003c04:	78fa      	ldrb	r2, [r7, #3]
 8003c06:	6879      	ldr	r1, [r7, #4]
 8003c08:	4613      	mov	r3, r2
 8003c0a:	011b      	lsls	r3, r3, #4
 8003c0c:	1a9b      	subs	r3, r3, r2
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	440b      	add	r3, r1
 8003c12:	3344      	adds	r3, #68	@ 0x44
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	d922      	bls.n	8003c60 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003c1a:	78fa      	ldrb	r2, [r7, #3]
 8003c1c:	6879      	ldr	r1, [r7, #4]
 8003c1e:	4613      	mov	r3, r2
 8003c20:	011b      	lsls	r3, r3, #4
 8003c22:	1a9b      	subs	r3, r3, r2
 8003c24:	009b      	lsls	r3, r3, #2
 8003c26:	440b      	add	r3, r1
 8003c28:	3344      	adds	r3, #68	@ 0x44
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003c2e:	78fa      	ldrb	r2, [r7, #3]
 8003c30:	6879      	ldr	r1, [r7, #4]
 8003c32:	4613      	mov	r3, r2
 8003c34:	011b      	lsls	r3, r3, #4
 8003c36:	1a9b      	subs	r3, r3, r2
 8003c38:	009b      	lsls	r3, r3, #2
 8003c3a:	440b      	add	r3, r1
 8003c3c:	334c      	adds	r3, #76	@ 0x4c
 8003c3e:	2204      	movs	r2, #4
 8003c40:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003c42:	78fa      	ldrb	r2, [r7, #3]
 8003c44:	6879      	ldr	r1, [r7, #4]
 8003c46:	4613      	mov	r3, r2
 8003c48:	011b      	lsls	r3, r3, #4
 8003c4a:	1a9b      	subs	r3, r3, r2
 8003c4c:	009b      	lsls	r3, r3, #2
 8003c4e:	440b      	add	r3, r1
 8003c50:	334c      	adds	r3, #76	@ 0x4c
 8003c52:	781a      	ldrb	r2, [r3, #0]
 8003c54:	78fb      	ldrb	r3, [r7, #3]
 8003c56:	4619      	mov	r1, r3
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f009 fcf7 	bl	800d64c <HAL_HCD_HC_NotifyURBChange_Callback>
 8003c5e:	e009      	b.n	8003c74 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003c60:	78fa      	ldrb	r2, [r7, #3]
 8003c62:	6879      	ldr	r1, [r7, #4]
 8003c64:	4613      	mov	r3, r2
 8003c66:	011b      	lsls	r3, r3, #4
 8003c68:	1a9b      	subs	r3, r3, r2
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	440b      	add	r3, r1
 8003c6e:	334c      	adds	r3, #76	@ 0x4c
 8003c70:	2202      	movs	r2, #2
 8003c72:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003c74:	78fb      	ldrb	r3, [r7, #3]
 8003c76:	015a      	lsls	r2, r3, #5
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	4413      	add	r3, r2
 8003c7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c80:	461a      	mov	r2, r3
 8003c82:	2380      	movs	r3, #128	@ 0x80
 8003c84:	6093      	str	r3, [r2, #8]
 8003c86:	e217      	b.n	80040b8 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	78fa      	ldrb	r2, [r7, #3]
 8003c8e:	4611      	mov	r1, r2
 8003c90:	4618      	mov	r0, r3
 8003c92:	f003 f9b0 	bl	8006ff6 <USB_ReadChInterrupts>
 8003c96:	4603      	mov	r3, r0
 8003c98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ca0:	d11b      	bne.n	8003cda <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003ca2:	78fa      	ldrb	r2, [r7, #3]
 8003ca4:	6879      	ldr	r1, [r7, #4]
 8003ca6:	4613      	mov	r3, r2
 8003ca8:	011b      	lsls	r3, r3, #4
 8003caa:	1a9b      	subs	r3, r3, r2
 8003cac:	009b      	lsls	r3, r3, #2
 8003cae:	440b      	add	r3, r1
 8003cb0:	334d      	adds	r3, #77	@ 0x4d
 8003cb2:	2209      	movs	r2, #9
 8003cb4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	78fa      	ldrb	r2, [r7, #3]
 8003cbc:	4611      	mov	r1, r2
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f003 ff3d 	bl	8007b3e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003cc4:	78fb      	ldrb	r3, [r7, #3]
 8003cc6:	015a      	lsls	r2, r3, #5
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	4413      	add	r3, r2
 8003ccc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003cd6:	6093      	str	r3, [r2, #8]
 8003cd8:	e1ee      	b.n	80040b8 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	78fa      	ldrb	r2, [r7, #3]
 8003ce0:	4611      	mov	r1, r2
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f003 f987 	bl	8006ff6 <USB_ReadChInterrupts>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	f003 0302 	and.w	r3, r3, #2
 8003cee:	2b02      	cmp	r3, #2
 8003cf0:	f040 81df 	bne.w	80040b2 <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003cf4:	78fb      	ldrb	r3, [r7, #3]
 8003cf6:	015a      	lsls	r2, r3, #5
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	4413      	add	r3, r2
 8003cfc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d00:	461a      	mov	r2, r3
 8003d02:	2302      	movs	r3, #2
 8003d04:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003d06:	78fa      	ldrb	r2, [r7, #3]
 8003d08:	6879      	ldr	r1, [r7, #4]
 8003d0a:	4613      	mov	r3, r2
 8003d0c:	011b      	lsls	r3, r3, #4
 8003d0e:	1a9b      	subs	r3, r3, r2
 8003d10:	009b      	lsls	r3, r3, #2
 8003d12:	440b      	add	r3, r1
 8003d14:	334d      	adds	r3, #77	@ 0x4d
 8003d16:	781b      	ldrb	r3, [r3, #0]
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	f040 8093 	bne.w	8003e44 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003d1e:	78fa      	ldrb	r2, [r7, #3]
 8003d20:	6879      	ldr	r1, [r7, #4]
 8003d22:	4613      	mov	r3, r2
 8003d24:	011b      	lsls	r3, r3, #4
 8003d26:	1a9b      	subs	r3, r3, r2
 8003d28:	009b      	lsls	r3, r3, #2
 8003d2a:	440b      	add	r3, r1
 8003d2c:	334d      	adds	r3, #77	@ 0x4d
 8003d2e:	2202      	movs	r2, #2
 8003d30:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003d32:	78fa      	ldrb	r2, [r7, #3]
 8003d34:	6879      	ldr	r1, [r7, #4]
 8003d36:	4613      	mov	r3, r2
 8003d38:	011b      	lsls	r3, r3, #4
 8003d3a:	1a9b      	subs	r3, r3, r2
 8003d3c:	009b      	lsls	r3, r3, #2
 8003d3e:	440b      	add	r3, r1
 8003d40:	334c      	adds	r3, #76	@ 0x4c
 8003d42:	2201      	movs	r2, #1
 8003d44:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003d46:	78fa      	ldrb	r2, [r7, #3]
 8003d48:	6879      	ldr	r1, [r7, #4]
 8003d4a:	4613      	mov	r3, r2
 8003d4c:	011b      	lsls	r3, r3, #4
 8003d4e:	1a9b      	subs	r3, r3, r2
 8003d50:	009b      	lsls	r3, r3, #2
 8003d52:	440b      	add	r3, r1
 8003d54:	3326      	adds	r3, #38	@ 0x26
 8003d56:	781b      	ldrb	r3, [r3, #0]
 8003d58:	2b02      	cmp	r3, #2
 8003d5a:	d00b      	beq.n	8003d74 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003d5c:	78fa      	ldrb	r2, [r7, #3]
 8003d5e:	6879      	ldr	r1, [r7, #4]
 8003d60:	4613      	mov	r3, r2
 8003d62:	011b      	lsls	r3, r3, #4
 8003d64:	1a9b      	subs	r3, r3, r2
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	440b      	add	r3, r1
 8003d6a:	3326      	adds	r3, #38	@ 0x26
 8003d6c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003d6e:	2b03      	cmp	r3, #3
 8003d70:	f040 8190 	bne.w	8004094 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	799b      	ldrb	r3, [r3, #6]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d115      	bne.n	8003da8 <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8003d7c:	78fa      	ldrb	r2, [r7, #3]
 8003d7e:	6879      	ldr	r1, [r7, #4]
 8003d80:	4613      	mov	r3, r2
 8003d82:	011b      	lsls	r3, r3, #4
 8003d84:	1a9b      	subs	r3, r3, r2
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	440b      	add	r3, r1
 8003d8a:	333d      	adds	r3, #61	@ 0x3d
 8003d8c:	781b      	ldrb	r3, [r3, #0]
 8003d8e:	78fa      	ldrb	r2, [r7, #3]
 8003d90:	f083 0301 	eor.w	r3, r3, #1
 8003d94:	b2d8      	uxtb	r0, r3
 8003d96:	6879      	ldr	r1, [r7, #4]
 8003d98:	4613      	mov	r3, r2
 8003d9a:	011b      	lsls	r3, r3, #4
 8003d9c:	1a9b      	subs	r3, r3, r2
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	440b      	add	r3, r1
 8003da2:	333d      	adds	r3, #61	@ 0x3d
 8003da4:	4602      	mov	r2, r0
 8003da6:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	799b      	ldrb	r3, [r3, #6]
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	f040 8171 	bne.w	8004094 <HCD_HC_OUT_IRQHandler+0x920>
 8003db2:	78fa      	ldrb	r2, [r7, #3]
 8003db4:	6879      	ldr	r1, [r7, #4]
 8003db6:	4613      	mov	r3, r2
 8003db8:	011b      	lsls	r3, r3, #4
 8003dba:	1a9b      	subs	r3, r3, r2
 8003dbc:	009b      	lsls	r3, r3, #2
 8003dbe:	440b      	add	r3, r1
 8003dc0:	3334      	adds	r3, #52	@ 0x34
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	f000 8165 	beq.w	8004094 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8003dca:	78fa      	ldrb	r2, [r7, #3]
 8003dcc:	6879      	ldr	r1, [r7, #4]
 8003dce:	4613      	mov	r3, r2
 8003dd0:	011b      	lsls	r3, r3, #4
 8003dd2:	1a9b      	subs	r3, r3, r2
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	440b      	add	r3, r1
 8003dd8:	3334      	adds	r3, #52	@ 0x34
 8003dda:	6819      	ldr	r1, [r3, #0]
 8003ddc:	78fa      	ldrb	r2, [r7, #3]
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	4613      	mov	r3, r2
 8003de2:	011b      	lsls	r3, r3, #4
 8003de4:	1a9b      	subs	r3, r3, r2
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	4403      	add	r3, r0
 8003dea:	3328      	adds	r3, #40	@ 0x28
 8003dec:	881b      	ldrh	r3, [r3, #0]
 8003dee:	440b      	add	r3, r1
 8003df0:	1e59      	subs	r1, r3, #1
 8003df2:	78fa      	ldrb	r2, [r7, #3]
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	4613      	mov	r3, r2
 8003df8:	011b      	lsls	r3, r3, #4
 8003dfa:	1a9b      	subs	r3, r3, r2
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	4403      	add	r3, r0
 8003e00:	3328      	adds	r3, #40	@ 0x28
 8003e02:	881b      	ldrh	r3, [r3, #0]
 8003e04:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e08:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	f003 0301 	and.w	r3, r3, #1
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	f000 813f 	beq.w	8004094 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8003e16:	78fa      	ldrb	r2, [r7, #3]
 8003e18:	6879      	ldr	r1, [r7, #4]
 8003e1a:	4613      	mov	r3, r2
 8003e1c:	011b      	lsls	r3, r3, #4
 8003e1e:	1a9b      	subs	r3, r3, r2
 8003e20:	009b      	lsls	r3, r3, #2
 8003e22:	440b      	add	r3, r1
 8003e24:	333d      	adds	r3, #61	@ 0x3d
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	78fa      	ldrb	r2, [r7, #3]
 8003e2a:	f083 0301 	eor.w	r3, r3, #1
 8003e2e:	b2d8      	uxtb	r0, r3
 8003e30:	6879      	ldr	r1, [r7, #4]
 8003e32:	4613      	mov	r3, r2
 8003e34:	011b      	lsls	r3, r3, #4
 8003e36:	1a9b      	subs	r3, r3, r2
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	440b      	add	r3, r1
 8003e3c:	333d      	adds	r3, #61	@ 0x3d
 8003e3e:	4602      	mov	r2, r0
 8003e40:	701a      	strb	r2, [r3, #0]
 8003e42:	e127      	b.n	8004094 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003e44:	78fa      	ldrb	r2, [r7, #3]
 8003e46:	6879      	ldr	r1, [r7, #4]
 8003e48:	4613      	mov	r3, r2
 8003e4a:	011b      	lsls	r3, r3, #4
 8003e4c:	1a9b      	subs	r3, r3, r2
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	440b      	add	r3, r1
 8003e52:	334d      	adds	r3, #77	@ 0x4d
 8003e54:	781b      	ldrb	r3, [r3, #0]
 8003e56:	2b03      	cmp	r3, #3
 8003e58:	d120      	bne.n	8003e9c <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003e5a:	78fa      	ldrb	r2, [r7, #3]
 8003e5c:	6879      	ldr	r1, [r7, #4]
 8003e5e:	4613      	mov	r3, r2
 8003e60:	011b      	lsls	r3, r3, #4
 8003e62:	1a9b      	subs	r3, r3, r2
 8003e64:	009b      	lsls	r3, r3, #2
 8003e66:	440b      	add	r3, r1
 8003e68:	334d      	adds	r3, #77	@ 0x4d
 8003e6a:	2202      	movs	r2, #2
 8003e6c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003e6e:	78fa      	ldrb	r2, [r7, #3]
 8003e70:	6879      	ldr	r1, [r7, #4]
 8003e72:	4613      	mov	r3, r2
 8003e74:	011b      	lsls	r3, r3, #4
 8003e76:	1a9b      	subs	r3, r3, r2
 8003e78:	009b      	lsls	r3, r3, #2
 8003e7a:	440b      	add	r3, r1
 8003e7c:	331b      	adds	r3, #27
 8003e7e:	781b      	ldrb	r3, [r3, #0]
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	f040 8107 	bne.w	8004094 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003e86:	78fa      	ldrb	r2, [r7, #3]
 8003e88:	6879      	ldr	r1, [r7, #4]
 8003e8a:	4613      	mov	r3, r2
 8003e8c:	011b      	lsls	r3, r3, #4
 8003e8e:	1a9b      	subs	r3, r3, r2
 8003e90:	009b      	lsls	r3, r3, #2
 8003e92:	440b      	add	r3, r1
 8003e94:	334c      	adds	r3, #76	@ 0x4c
 8003e96:	2202      	movs	r2, #2
 8003e98:	701a      	strb	r2, [r3, #0]
 8003e9a:	e0fb      	b.n	8004094 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003e9c:	78fa      	ldrb	r2, [r7, #3]
 8003e9e:	6879      	ldr	r1, [r7, #4]
 8003ea0:	4613      	mov	r3, r2
 8003ea2:	011b      	lsls	r3, r3, #4
 8003ea4:	1a9b      	subs	r3, r3, r2
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	440b      	add	r3, r1
 8003eaa:	334d      	adds	r3, #77	@ 0x4d
 8003eac:	781b      	ldrb	r3, [r3, #0]
 8003eae:	2b04      	cmp	r3, #4
 8003eb0:	d13a      	bne.n	8003f28 <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003eb2:	78fa      	ldrb	r2, [r7, #3]
 8003eb4:	6879      	ldr	r1, [r7, #4]
 8003eb6:	4613      	mov	r3, r2
 8003eb8:	011b      	lsls	r3, r3, #4
 8003eba:	1a9b      	subs	r3, r3, r2
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	440b      	add	r3, r1
 8003ec0:	334d      	adds	r3, #77	@ 0x4d
 8003ec2:	2202      	movs	r2, #2
 8003ec4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003ec6:	78fa      	ldrb	r2, [r7, #3]
 8003ec8:	6879      	ldr	r1, [r7, #4]
 8003eca:	4613      	mov	r3, r2
 8003ecc:	011b      	lsls	r3, r3, #4
 8003ece:	1a9b      	subs	r3, r3, r2
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	440b      	add	r3, r1
 8003ed4:	334c      	adds	r3, #76	@ 0x4c
 8003ed6:	2202      	movs	r2, #2
 8003ed8:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003eda:	78fa      	ldrb	r2, [r7, #3]
 8003edc:	6879      	ldr	r1, [r7, #4]
 8003ede:	4613      	mov	r3, r2
 8003ee0:	011b      	lsls	r3, r3, #4
 8003ee2:	1a9b      	subs	r3, r3, r2
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	440b      	add	r3, r1
 8003ee8:	331b      	adds	r3, #27
 8003eea:	781b      	ldrb	r3, [r3, #0]
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	f040 80d1 	bne.w	8004094 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8003ef2:	78fa      	ldrb	r2, [r7, #3]
 8003ef4:	6879      	ldr	r1, [r7, #4]
 8003ef6:	4613      	mov	r3, r2
 8003ef8:	011b      	lsls	r3, r3, #4
 8003efa:	1a9b      	subs	r3, r3, r2
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	440b      	add	r3, r1
 8003f00:	331b      	adds	r3, #27
 8003f02:	2200      	movs	r2, #0
 8003f04:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003f06:	78fb      	ldrb	r3, [r7, #3]
 8003f08:	015a      	lsls	r2, r3, #5
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	4413      	add	r3, r2
 8003f0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	78fa      	ldrb	r2, [r7, #3]
 8003f16:	0151      	lsls	r1, r2, #5
 8003f18:	693a      	ldr	r2, [r7, #16]
 8003f1a:	440a      	add	r2, r1
 8003f1c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003f20:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f24:	6053      	str	r3, [r2, #4]
 8003f26:	e0b5      	b.n	8004094 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003f28:	78fa      	ldrb	r2, [r7, #3]
 8003f2a:	6879      	ldr	r1, [r7, #4]
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	011b      	lsls	r3, r3, #4
 8003f30:	1a9b      	subs	r3, r3, r2
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	440b      	add	r3, r1
 8003f36:	334d      	adds	r3, #77	@ 0x4d
 8003f38:	781b      	ldrb	r3, [r3, #0]
 8003f3a:	2b05      	cmp	r3, #5
 8003f3c:	d114      	bne.n	8003f68 <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003f3e:	78fa      	ldrb	r2, [r7, #3]
 8003f40:	6879      	ldr	r1, [r7, #4]
 8003f42:	4613      	mov	r3, r2
 8003f44:	011b      	lsls	r3, r3, #4
 8003f46:	1a9b      	subs	r3, r3, r2
 8003f48:	009b      	lsls	r3, r3, #2
 8003f4a:	440b      	add	r3, r1
 8003f4c:	334d      	adds	r3, #77	@ 0x4d
 8003f4e:	2202      	movs	r2, #2
 8003f50:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8003f52:	78fa      	ldrb	r2, [r7, #3]
 8003f54:	6879      	ldr	r1, [r7, #4]
 8003f56:	4613      	mov	r3, r2
 8003f58:	011b      	lsls	r3, r3, #4
 8003f5a:	1a9b      	subs	r3, r3, r2
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	440b      	add	r3, r1
 8003f60:	334c      	adds	r3, #76	@ 0x4c
 8003f62:	2202      	movs	r2, #2
 8003f64:	701a      	strb	r2, [r3, #0]
 8003f66:	e095      	b.n	8004094 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003f68:	78fa      	ldrb	r2, [r7, #3]
 8003f6a:	6879      	ldr	r1, [r7, #4]
 8003f6c:	4613      	mov	r3, r2
 8003f6e:	011b      	lsls	r3, r3, #4
 8003f70:	1a9b      	subs	r3, r3, r2
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	440b      	add	r3, r1
 8003f76:	334d      	adds	r3, #77	@ 0x4d
 8003f78:	781b      	ldrb	r3, [r3, #0]
 8003f7a:	2b06      	cmp	r3, #6
 8003f7c:	d114      	bne.n	8003fa8 <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003f7e:	78fa      	ldrb	r2, [r7, #3]
 8003f80:	6879      	ldr	r1, [r7, #4]
 8003f82:	4613      	mov	r3, r2
 8003f84:	011b      	lsls	r3, r3, #4
 8003f86:	1a9b      	subs	r3, r3, r2
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	440b      	add	r3, r1
 8003f8c:	334d      	adds	r3, #77	@ 0x4d
 8003f8e:	2202      	movs	r2, #2
 8003f90:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8003f92:	78fa      	ldrb	r2, [r7, #3]
 8003f94:	6879      	ldr	r1, [r7, #4]
 8003f96:	4613      	mov	r3, r2
 8003f98:	011b      	lsls	r3, r3, #4
 8003f9a:	1a9b      	subs	r3, r3, r2
 8003f9c:	009b      	lsls	r3, r3, #2
 8003f9e:	440b      	add	r3, r1
 8003fa0:	334c      	adds	r3, #76	@ 0x4c
 8003fa2:	2205      	movs	r2, #5
 8003fa4:	701a      	strb	r2, [r3, #0]
 8003fa6:	e075      	b.n	8004094 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003fa8:	78fa      	ldrb	r2, [r7, #3]
 8003faa:	6879      	ldr	r1, [r7, #4]
 8003fac:	4613      	mov	r3, r2
 8003fae:	011b      	lsls	r3, r3, #4
 8003fb0:	1a9b      	subs	r3, r3, r2
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	440b      	add	r3, r1
 8003fb6:	334d      	adds	r3, #77	@ 0x4d
 8003fb8:	781b      	ldrb	r3, [r3, #0]
 8003fba:	2b07      	cmp	r3, #7
 8003fbc:	d00a      	beq.n	8003fd4 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003fbe:	78fa      	ldrb	r2, [r7, #3]
 8003fc0:	6879      	ldr	r1, [r7, #4]
 8003fc2:	4613      	mov	r3, r2
 8003fc4:	011b      	lsls	r3, r3, #4
 8003fc6:	1a9b      	subs	r3, r3, r2
 8003fc8:	009b      	lsls	r3, r3, #2
 8003fca:	440b      	add	r3, r1
 8003fcc:	334d      	adds	r3, #77	@ 0x4d
 8003fce:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003fd0:	2b09      	cmp	r3, #9
 8003fd2:	d170      	bne.n	80040b6 <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003fd4:	78fa      	ldrb	r2, [r7, #3]
 8003fd6:	6879      	ldr	r1, [r7, #4]
 8003fd8:	4613      	mov	r3, r2
 8003fda:	011b      	lsls	r3, r3, #4
 8003fdc:	1a9b      	subs	r3, r3, r2
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	440b      	add	r3, r1
 8003fe2:	334d      	adds	r3, #77	@ 0x4d
 8003fe4:	2202      	movs	r2, #2
 8003fe6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003fe8:	78fa      	ldrb	r2, [r7, #3]
 8003fea:	6879      	ldr	r1, [r7, #4]
 8003fec:	4613      	mov	r3, r2
 8003fee:	011b      	lsls	r3, r3, #4
 8003ff0:	1a9b      	subs	r3, r3, r2
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	440b      	add	r3, r1
 8003ff6:	3344      	adds	r3, #68	@ 0x44
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	1c59      	adds	r1, r3, #1
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	4613      	mov	r3, r2
 8004000:	011b      	lsls	r3, r3, #4
 8004002:	1a9b      	subs	r3, r3, r2
 8004004:	009b      	lsls	r3, r3, #2
 8004006:	4403      	add	r3, r0
 8004008:	3344      	adds	r3, #68	@ 0x44
 800400a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800400c:	78fa      	ldrb	r2, [r7, #3]
 800400e:	6879      	ldr	r1, [r7, #4]
 8004010:	4613      	mov	r3, r2
 8004012:	011b      	lsls	r3, r3, #4
 8004014:	1a9b      	subs	r3, r3, r2
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	440b      	add	r3, r1
 800401a:	3344      	adds	r3, #68	@ 0x44
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	2b02      	cmp	r3, #2
 8004020:	d914      	bls.n	800404c <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004022:	78fa      	ldrb	r2, [r7, #3]
 8004024:	6879      	ldr	r1, [r7, #4]
 8004026:	4613      	mov	r3, r2
 8004028:	011b      	lsls	r3, r3, #4
 800402a:	1a9b      	subs	r3, r3, r2
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	440b      	add	r3, r1
 8004030:	3344      	adds	r3, #68	@ 0x44
 8004032:	2200      	movs	r2, #0
 8004034:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004036:	78fa      	ldrb	r2, [r7, #3]
 8004038:	6879      	ldr	r1, [r7, #4]
 800403a:	4613      	mov	r3, r2
 800403c:	011b      	lsls	r3, r3, #4
 800403e:	1a9b      	subs	r3, r3, r2
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	440b      	add	r3, r1
 8004044:	334c      	adds	r3, #76	@ 0x4c
 8004046:	2204      	movs	r2, #4
 8004048:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800404a:	e022      	b.n	8004092 <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800404c:	78fa      	ldrb	r2, [r7, #3]
 800404e:	6879      	ldr	r1, [r7, #4]
 8004050:	4613      	mov	r3, r2
 8004052:	011b      	lsls	r3, r3, #4
 8004054:	1a9b      	subs	r3, r3, r2
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	440b      	add	r3, r1
 800405a:	334c      	adds	r3, #76	@ 0x4c
 800405c:	2202      	movs	r2, #2
 800405e:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004060:	78fb      	ldrb	r3, [r7, #3]
 8004062:	015a      	lsls	r2, r3, #5
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	4413      	add	r3, r2
 8004068:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004076:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800407e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004080:	78fb      	ldrb	r3, [r7, #3]
 8004082:	015a      	lsls	r2, r3, #5
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	4413      	add	r3, r2
 8004088:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800408c:	461a      	mov	r2, r3
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004092:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004094:	78fa      	ldrb	r2, [r7, #3]
 8004096:	6879      	ldr	r1, [r7, #4]
 8004098:	4613      	mov	r3, r2
 800409a:	011b      	lsls	r3, r3, #4
 800409c:	1a9b      	subs	r3, r3, r2
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	440b      	add	r3, r1
 80040a2:	334c      	adds	r3, #76	@ 0x4c
 80040a4:	781a      	ldrb	r2, [r3, #0]
 80040a6:	78fb      	ldrb	r3, [r7, #3]
 80040a8:	4619      	mov	r1, r3
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f009 face 	bl	800d64c <HAL_HCD_HC_NotifyURBChange_Callback>
 80040b0:	e002      	b.n	80040b8 <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80040b2:	bf00      	nop
 80040b4:	e000      	b.n	80040b8 <HCD_HC_OUT_IRQHandler+0x944>
      return;
 80040b6:	bf00      	nop
  }
}
 80040b8:	3718      	adds	r7, #24
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}

080040be <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80040be:	b580      	push	{r7, lr}
 80040c0:	b08a      	sub	sp, #40	@ 0x28
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ce:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	6a1b      	ldr	r3, [r3, #32]
 80040d6:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80040d8:	69fb      	ldr	r3, [r7, #28]
 80040da:	f003 030f 	and.w	r3, r3, #15
 80040de:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	0c5b      	lsrs	r3, r3, #17
 80040e4:	f003 030f 	and.w	r3, r3, #15
 80040e8:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	091b      	lsrs	r3, r3, #4
 80040ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80040f2:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	2b02      	cmp	r3, #2
 80040f8:	d004      	beq.n	8004104 <HCD_RXQLVL_IRQHandler+0x46>
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	2b05      	cmp	r3, #5
 80040fe:	f000 80b6 	beq.w	800426e <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004102:	e0b7      	b.n	8004274 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	2b00      	cmp	r3, #0
 8004108:	f000 80b3 	beq.w	8004272 <HCD_RXQLVL_IRQHandler+0x1b4>
 800410c:	6879      	ldr	r1, [r7, #4]
 800410e:	69ba      	ldr	r2, [r7, #24]
 8004110:	4613      	mov	r3, r2
 8004112:	011b      	lsls	r3, r3, #4
 8004114:	1a9b      	subs	r3, r3, r2
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	440b      	add	r3, r1
 800411a:	332c      	adds	r3, #44	@ 0x2c
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	2b00      	cmp	r3, #0
 8004120:	f000 80a7 	beq.w	8004272 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8004124:	6879      	ldr	r1, [r7, #4]
 8004126:	69ba      	ldr	r2, [r7, #24]
 8004128:	4613      	mov	r3, r2
 800412a:	011b      	lsls	r3, r3, #4
 800412c:	1a9b      	subs	r3, r3, r2
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	440b      	add	r3, r1
 8004132:	3338      	adds	r3, #56	@ 0x38
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	18d1      	adds	r1, r2, r3
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	69ba      	ldr	r2, [r7, #24]
 800413e:	4613      	mov	r3, r2
 8004140:	011b      	lsls	r3, r3, #4
 8004142:	1a9b      	subs	r3, r3, r2
 8004144:	009b      	lsls	r3, r3, #2
 8004146:	4403      	add	r3, r0
 8004148:	3334      	adds	r3, #52	@ 0x34
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4299      	cmp	r1, r3
 800414e:	f200 8083 	bhi.w	8004258 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6818      	ldr	r0, [r3, #0]
 8004156:	6879      	ldr	r1, [r7, #4]
 8004158:	69ba      	ldr	r2, [r7, #24]
 800415a:	4613      	mov	r3, r2
 800415c:	011b      	lsls	r3, r3, #4
 800415e:	1a9b      	subs	r3, r3, r2
 8004160:	009b      	lsls	r3, r3, #2
 8004162:	440b      	add	r3, r1
 8004164:	332c      	adds	r3, #44	@ 0x2c
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	693a      	ldr	r2, [r7, #16]
 800416a:	b292      	uxth	r2, r2
 800416c:	4619      	mov	r1, r3
 800416e:	f002 fed7 	bl	8006f20 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8004172:	6879      	ldr	r1, [r7, #4]
 8004174:	69ba      	ldr	r2, [r7, #24]
 8004176:	4613      	mov	r3, r2
 8004178:	011b      	lsls	r3, r3, #4
 800417a:	1a9b      	subs	r3, r3, r2
 800417c:	009b      	lsls	r3, r3, #2
 800417e:	440b      	add	r3, r1
 8004180:	332c      	adds	r3, #44	@ 0x2c
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	18d1      	adds	r1, r2, r3
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	69ba      	ldr	r2, [r7, #24]
 800418c:	4613      	mov	r3, r2
 800418e:	011b      	lsls	r3, r3, #4
 8004190:	1a9b      	subs	r3, r3, r2
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	4403      	add	r3, r0
 8004196:	332c      	adds	r3, #44	@ 0x2c
 8004198:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 800419a:	6879      	ldr	r1, [r7, #4]
 800419c:	69ba      	ldr	r2, [r7, #24]
 800419e:	4613      	mov	r3, r2
 80041a0:	011b      	lsls	r3, r3, #4
 80041a2:	1a9b      	subs	r3, r3, r2
 80041a4:	009b      	lsls	r3, r3, #2
 80041a6:	440b      	add	r3, r1
 80041a8:	3338      	adds	r3, #56	@ 0x38
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	18d1      	adds	r1, r2, r3
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	69ba      	ldr	r2, [r7, #24]
 80041b4:	4613      	mov	r3, r2
 80041b6:	011b      	lsls	r3, r3, #4
 80041b8:	1a9b      	subs	r3, r3, r2
 80041ba:	009b      	lsls	r3, r3, #2
 80041bc:	4403      	add	r3, r0
 80041be:	3338      	adds	r3, #56	@ 0x38
 80041c0:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80041c2:	69bb      	ldr	r3, [r7, #24]
 80041c4:	015a      	lsls	r2, r3, #5
 80041c6:	6a3b      	ldr	r3, [r7, #32]
 80041c8:	4413      	add	r3, r2
 80041ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041ce:	691b      	ldr	r3, [r3, #16]
 80041d0:	0cdb      	lsrs	r3, r3, #19
 80041d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041d6:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80041d8:	6879      	ldr	r1, [r7, #4]
 80041da:	69ba      	ldr	r2, [r7, #24]
 80041dc:	4613      	mov	r3, r2
 80041de:	011b      	lsls	r3, r3, #4
 80041e0:	1a9b      	subs	r3, r3, r2
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	440b      	add	r3, r1
 80041e6:	3328      	adds	r3, #40	@ 0x28
 80041e8:	881b      	ldrh	r3, [r3, #0]
 80041ea:	461a      	mov	r2, r3
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d13f      	bne.n	8004272 <HCD_RXQLVL_IRQHandler+0x1b4>
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d03c      	beq.n	8004272 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80041f8:	69bb      	ldr	r3, [r7, #24]
 80041fa:	015a      	lsls	r2, r3, #5
 80041fc:	6a3b      	ldr	r3, [r7, #32]
 80041fe:	4413      	add	r3, r2
 8004200:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800420e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004216:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8004218:	69bb      	ldr	r3, [r7, #24]
 800421a:	015a      	lsls	r2, r3, #5
 800421c:	6a3b      	ldr	r3, [r7, #32]
 800421e:	4413      	add	r3, r2
 8004220:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004224:	461a      	mov	r2, r3
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 800422a:	6879      	ldr	r1, [r7, #4]
 800422c:	69ba      	ldr	r2, [r7, #24]
 800422e:	4613      	mov	r3, r2
 8004230:	011b      	lsls	r3, r3, #4
 8004232:	1a9b      	subs	r3, r3, r2
 8004234:	009b      	lsls	r3, r3, #2
 8004236:	440b      	add	r3, r1
 8004238:	333c      	adds	r3, #60	@ 0x3c
 800423a:	781b      	ldrb	r3, [r3, #0]
 800423c:	f083 0301 	eor.w	r3, r3, #1
 8004240:	b2d8      	uxtb	r0, r3
 8004242:	6879      	ldr	r1, [r7, #4]
 8004244:	69ba      	ldr	r2, [r7, #24]
 8004246:	4613      	mov	r3, r2
 8004248:	011b      	lsls	r3, r3, #4
 800424a:	1a9b      	subs	r3, r3, r2
 800424c:	009b      	lsls	r3, r3, #2
 800424e:	440b      	add	r3, r1
 8004250:	333c      	adds	r3, #60	@ 0x3c
 8004252:	4602      	mov	r2, r0
 8004254:	701a      	strb	r2, [r3, #0]
      break;
 8004256:	e00c      	b.n	8004272 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8004258:	6879      	ldr	r1, [r7, #4]
 800425a:	69ba      	ldr	r2, [r7, #24]
 800425c:	4613      	mov	r3, r2
 800425e:	011b      	lsls	r3, r3, #4
 8004260:	1a9b      	subs	r3, r3, r2
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	440b      	add	r3, r1
 8004266:	334c      	adds	r3, #76	@ 0x4c
 8004268:	2204      	movs	r2, #4
 800426a:	701a      	strb	r2, [r3, #0]
      break;
 800426c:	e001      	b.n	8004272 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 800426e:	bf00      	nop
 8004270:	e000      	b.n	8004274 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8004272:	bf00      	nop
  }
}
 8004274:	bf00      	nop
 8004276:	3728      	adds	r7, #40	@ 0x28
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b086      	sub	sp, #24
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80042a8:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	f003 0302 	and.w	r3, r3, #2
 80042b0:	2b02      	cmp	r3, #2
 80042b2:	d10b      	bne.n	80042cc <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f003 0301 	and.w	r3, r3, #1
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d102      	bne.n	80042c4 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f009 f9a8 	bl	800d614 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	f043 0302 	orr.w	r3, r3, #2
 80042ca:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f003 0308 	and.w	r3, r3, #8
 80042d2:	2b08      	cmp	r3, #8
 80042d4:	d132      	bne.n	800433c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	f043 0308 	orr.w	r3, r3, #8
 80042dc:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	f003 0304 	and.w	r3, r3, #4
 80042e4:	2b04      	cmp	r3, #4
 80042e6:	d126      	bne.n	8004336 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	7a5b      	ldrb	r3, [r3, #9]
 80042ec:	2b02      	cmp	r3, #2
 80042ee:	d113      	bne.n	8004318 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80042f6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80042fa:	d106      	bne.n	800430a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	2102      	movs	r1, #2
 8004302:	4618      	mov	r0, r3
 8004304:	f002 ff9c 	bl	8007240 <USB_InitFSLSPClkSel>
 8004308:	e011      	b.n	800432e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	2101      	movs	r1, #1
 8004310:	4618      	mov	r0, r3
 8004312:	f002 ff95 	bl	8007240 <USB_InitFSLSPClkSel>
 8004316:	e00a      	b.n	800432e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	79db      	ldrb	r3, [r3, #7]
 800431c:	2b01      	cmp	r3, #1
 800431e:	d106      	bne.n	800432e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004326:	461a      	mov	r2, r3
 8004328:	f64e 2360 	movw	r3, #60000	@ 0xea60
 800432c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f009 f99e 	bl	800d670 <HAL_HCD_PortEnabled_Callback>
 8004334:	e002      	b.n	800433c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f009 f9a8 	bl	800d68c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f003 0320 	and.w	r3, r3, #32
 8004342:	2b20      	cmp	r3, #32
 8004344:	d103      	bne.n	800434e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	f043 0320 	orr.w	r3, r3, #32
 800434c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004354:	461a      	mov	r2, r3
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	6013      	str	r3, [r2, #0]
}
 800435a:	bf00      	nop
 800435c:	3718      	adds	r7, #24
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}
	...

08004364 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b084      	sub	sp, #16
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d101      	bne.n	8004376 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e12b      	b.n	80045ce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800437c:	b2db      	uxtb	r3, r3
 800437e:	2b00      	cmp	r3, #0
 8004380:	d106      	bne.n	8004390 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f7fc fd5c 	bl	8000e48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2224      	movs	r2, #36	@ 0x24
 8004394:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f022 0201 	bic.w	r2, r2, #1
 80043a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80043b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80043c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80043c8:	f001 f964 	bl	8005694 <HAL_RCC_GetPCLK1Freq>
 80043cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	4a81      	ldr	r2, [pc, #516]	@ (80045d8 <HAL_I2C_Init+0x274>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d807      	bhi.n	80043e8 <HAL_I2C_Init+0x84>
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	4a80      	ldr	r2, [pc, #512]	@ (80045dc <HAL_I2C_Init+0x278>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	bf94      	ite	ls
 80043e0:	2301      	movls	r3, #1
 80043e2:	2300      	movhi	r3, #0
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	e006      	b.n	80043f6 <HAL_I2C_Init+0x92>
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	4a7d      	ldr	r2, [pc, #500]	@ (80045e0 <HAL_I2C_Init+0x27c>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	bf94      	ite	ls
 80043f0:	2301      	movls	r3, #1
 80043f2:	2300      	movhi	r3, #0
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d001      	beq.n	80043fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e0e7      	b.n	80045ce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	4a78      	ldr	r2, [pc, #480]	@ (80045e4 <HAL_I2C_Init+0x280>)
 8004402:	fba2 2303 	umull	r2, r3, r2, r3
 8004406:	0c9b      	lsrs	r3, r3, #18
 8004408:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	68ba      	ldr	r2, [r7, #8]
 800441a:	430a      	orrs	r2, r1
 800441c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	6a1b      	ldr	r3, [r3, #32]
 8004424:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	4a6a      	ldr	r2, [pc, #424]	@ (80045d8 <HAL_I2C_Init+0x274>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d802      	bhi.n	8004438 <HAL_I2C_Init+0xd4>
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	3301      	adds	r3, #1
 8004436:	e009      	b.n	800444c <HAL_I2C_Init+0xe8>
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800443e:	fb02 f303 	mul.w	r3, r2, r3
 8004442:	4a69      	ldr	r2, [pc, #420]	@ (80045e8 <HAL_I2C_Init+0x284>)
 8004444:	fba2 2303 	umull	r2, r3, r2, r3
 8004448:	099b      	lsrs	r3, r3, #6
 800444a:	3301      	adds	r3, #1
 800444c:	687a      	ldr	r2, [r7, #4]
 800444e:	6812      	ldr	r2, [r2, #0]
 8004450:	430b      	orrs	r3, r1
 8004452:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	69db      	ldr	r3, [r3, #28]
 800445a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800445e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	495c      	ldr	r1, [pc, #368]	@ (80045d8 <HAL_I2C_Init+0x274>)
 8004468:	428b      	cmp	r3, r1
 800446a:	d819      	bhi.n	80044a0 <HAL_I2C_Init+0x13c>
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	1e59      	subs	r1, r3, #1
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	005b      	lsls	r3, r3, #1
 8004476:	fbb1 f3f3 	udiv	r3, r1, r3
 800447a:	1c59      	adds	r1, r3, #1
 800447c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004480:	400b      	ands	r3, r1
 8004482:	2b00      	cmp	r3, #0
 8004484:	d00a      	beq.n	800449c <HAL_I2C_Init+0x138>
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	1e59      	subs	r1, r3, #1
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	005b      	lsls	r3, r3, #1
 8004490:	fbb1 f3f3 	udiv	r3, r1, r3
 8004494:	3301      	adds	r3, #1
 8004496:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800449a:	e051      	b.n	8004540 <HAL_I2C_Init+0x1dc>
 800449c:	2304      	movs	r3, #4
 800449e:	e04f      	b.n	8004540 <HAL_I2C_Init+0x1dc>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d111      	bne.n	80044cc <HAL_I2C_Init+0x168>
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	1e58      	subs	r0, r3, #1
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6859      	ldr	r1, [r3, #4]
 80044b0:	460b      	mov	r3, r1
 80044b2:	005b      	lsls	r3, r3, #1
 80044b4:	440b      	add	r3, r1
 80044b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80044ba:	3301      	adds	r3, #1
 80044bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	bf0c      	ite	eq
 80044c4:	2301      	moveq	r3, #1
 80044c6:	2300      	movne	r3, #0
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	e012      	b.n	80044f2 <HAL_I2C_Init+0x18e>
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	1e58      	subs	r0, r3, #1
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6859      	ldr	r1, [r3, #4]
 80044d4:	460b      	mov	r3, r1
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	440b      	add	r3, r1
 80044da:	0099      	lsls	r1, r3, #2
 80044dc:	440b      	add	r3, r1
 80044de:	fbb0 f3f3 	udiv	r3, r0, r3
 80044e2:	3301      	adds	r3, #1
 80044e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	bf0c      	ite	eq
 80044ec:	2301      	moveq	r3, #1
 80044ee:	2300      	movne	r3, #0
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d001      	beq.n	80044fa <HAL_I2C_Init+0x196>
 80044f6:	2301      	movs	r3, #1
 80044f8:	e022      	b.n	8004540 <HAL_I2C_Init+0x1dc>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d10e      	bne.n	8004520 <HAL_I2C_Init+0x1bc>
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	1e58      	subs	r0, r3, #1
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6859      	ldr	r1, [r3, #4]
 800450a:	460b      	mov	r3, r1
 800450c:	005b      	lsls	r3, r3, #1
 800450e:	440b      	add	r3, r1
 8004510:	fbb0 f3f3 	udiv	r3, r0, r3
 8004514:	3301      	adds	r3, #1
 8004516:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800451a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800451e:	e00f      	b.n	8004540 <HAL_I2C_Init+0x1dc>
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	1e58      	subs	r0, r3, #1
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6859      	ldr	r1, [r3, #4]
 8004528:	460b      	mov	r3, r1
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	440b      	add	r3, r1
 800452e:	0099      	lsls	r1, r3, #2
 8004530:	440b      	add	r3, r1
 8004532:	fbb0 f3f3 	udiv	r3, r0, r3
 8004536:	3301      	adds	r3, #1
 8004538:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800453c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004540:	6879      	ldr	r1, [r7, #4]
 8004542:	6809      	ldr	r1, [r1, #0]
 8004544:	4313      	orrs	r3, r2
 8004546:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	69da      	ldr	r2, [r3, #28]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6a1b      	ldr	r3, [r3, #32]
 800455a:	431a      	orrs	r2, r3
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	430a      	orrs	r2, r1
 8004562:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800456e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	6911      	ldr	r1, [r2, #16]
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	68d2      	ldr	r2, [r2, #12]
 800457a:	4311      	orrs	r1, r2
 800457c:	687a      	ldr	r2, [r7, #4]
 800457e:	6812      	ldr	r2, [r2, #0]
 8004580:	430b      	orrs	r3, r1
 8004582:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	68db      	ldr	r3, [r3, #12]
 800458a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	695a      	ldr	r2, [r3, #20]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	699b      	ldr	r3, [r3, #24]
 8004596:	431a      	orrs	r2, r3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	430a      	orrs	r2, r1
 800459e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f042 0201 	orr.w	r2, r2, #1
 80045ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2220      	movs	r2, #32
 80045ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80045cc:	2300      	movs	r3, #0
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3710      	adds	r7, #16
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	bf00      	nop
 80045d8:	000186a0 	.word	0x000186a0
 80045dc:	001e847f 	.word	0x001e847f
 80045e0:	003d08ff 	.word	0x003d08ff
 80045e4:	431bde83 	.word	0x431bde83
 80045e8:	10624dd3 	.word	0x10624dd3

080045ec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b083      	sub	sp, #12
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
 80045f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	2b20      	cmp	r3, #32
 8004600:	d129      	bne.n	8004656 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2224      	movs	r2, #36	@ 0x24
 8004606:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f022 0201 	bic.w	r2, r2, #1
 8004618:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f022 0210 	bic.w	r2, r2, #16
 8004628:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	683a      	ldr	r2, [r7, #0]
 8004636:	430a      	orrs	r2, r1
 8004638:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f042 0201 	orr.w	r2, r2, #1
 8004648:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2220      	movs	r2, #32
 800464e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8004652:	2300      	movs	r3, #0
 8004654:	e000      	b.n	8004658 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004656:	2302      	movs	r3, #2
  }
}
 8004658:	4618      	mov	r0, r3
 800465a:	370c      	adds	r7, #12
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr

08004664 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004664:	b480      	push	{r7}
 8004666:	b085      	sub	sp, #20
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
 800466c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800466e:	2300      	movs	r3, #0
 8004670:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004678:	b2db      	uxtb	r3, r3
 800467a:	2b20      	cmp	r3, #32
 800467c:	d12a      	bne.n	80046d4 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2224      	movs	r2, #36	@ 0x24
 8004682:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f022 0201 	bic.w	r2, r2, #1
 8004694:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800469c:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800469e:	89fb      	ldrh	r3, [r7, #14]
 80046a0:	f023 030f 	bic.w	r3, r3, #15
 80046a4:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	b29a      	uxth	r2, r3
 80046aa:	89fb      	ldrh	r3, [r7, #14]
 80046ac:	4313      	orrs	r3, r2
 80046ae:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	89fa      	ldrh	r2, [r7, #14]
 80046b6:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f042 0201 	orr.w	r2, r2, #1
 80046c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2220      	movs	r2, #32
 80046cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80046d0:	2300      	movs	r3, #0
 80046d2:	e000      	b.n	80046d6 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80046d4:	2302      	movs	r3, #2
  }
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3714      	adds	r7, #20
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr
	...

080046e4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b084      	sub	sp, #16
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d101      	bne.n	80046f6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e0bf      	b.n	8004876 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d106      	bne.n	8004710 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2200      	movs	r2, #0
 8004706:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f7fc fc06 	bl	8000f1c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2202      	movs	r2, #2
 8004714:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	699a      	ldr	r2, [r3, #24]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8004726:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	6999      	ldr	r1, [r3, #24]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	685a      	ldr	r2, [r3, #4]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800473c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	691b      	ldr	r3, [r3, #16]
 8004742:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	430a      	orrs	r2, r1
 800474a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	6899      	ldr	r1, [r3, #8]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	4b4a      	ldr	r3, [pc, #296]	@ (8004880 <HAL_LTDC_Init+0x19c>)
 8004758:	400b      	ands	r3, r1
 800475a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	695b      	ldr	r3, [r3, #20]
 8004760:	041b      	lsls	r3, r3, #16
 8004762:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	6899      	ldr	r1, [r3, #8]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	699a      	ldr	r2, [r3, #24]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	431a      	orrs	r2, r3
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	430a      	orrs	r2, r1
 8004778:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	68d9      	ldr	r1, [r3, #12]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	4b3e      	ldr	r3, [pc, #248]	@ (8004880 <HAL_LTDC_Init+0x19c>)
 8004786:	400b      	ands	r3, r1
 8004788:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	69db      	ldr	r3, [r3, #28]
 800478e:	041b      	lsls	r3, r3, #16
 8004790:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	68d9      	ldr	r1, [r3, #12]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6a1a      	ldr	r2, [r3, #32]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	431a      	orrs	r2, r3
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	430a      	orrs	r2, r1
 80047a6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	6919      	ldr	r1, [r3, #16]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	4b33      	ldr	r3, [pc, #204]	@ (8004880 <HAL_LTDC_Init+0x19c>)
 80047b4:	400b      	ands	r3, r1
 80047b6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047bc:	041b      	lsls	r3, r3, #16
 80047be:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	6919      	ldr	r1, [r3, #16]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	431a      	orrs	r2, r3
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	430a      	orrs	r2, r1
 80047d4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	6959      	ldr	r1, [r3, #20]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	4b27      	ldr	r3, [pc, #156]	@ (8004880 <HAL_LTDC_Init+0x19c>)
 80047e2:	400b      	ands	r3, r1
 80047e4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047ea:	041b      	lsls	r3, r3, #16
 80047ec:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	6959      	ldr	r1, [r3, #20]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	431a      	orrs	r2, r3
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	430a      	orrs	r2, r1
 8004802:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800480a:	021b      	lsls	r3, r3, #8
 800480c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8004814:	041b      	lsls	r3, r3, #16
 8004816:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8004826:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800482e:	68ba      	ldr	r2, [r7, #8]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	4313      	orrs	r3, r2
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 800483a:	431a      	orrs	r2, r3
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	430a      	orrs	r2, r1
 8004842:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f042 0206 	orr.w	r2, r2, #6
 8004852:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	699a      	ldr	r2, [r3, #24]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f042 0201 	orr.w	r2, r2, #1
 8004862:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2200      	movs	r2, #0
 8004868:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2201      	movs	r2, #1
 8004870:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8004874:	2300      	movs	r3, #0
}
 8004876:	4618      	mov	r0, r3
 8004878:	3710      	adds	r7, #16
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop
 8004880:	f000f800 	.word	0xf000f800

08004884 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b084      	sub	sp, #16
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004892:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800489a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	f003 0304 	and.w	r3, r3, #4
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d023      	beq.n	80048ee <HAL_LTDC_IRQHandler+0x6a>
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	f003 0304 	and.w	r3, r3, #4
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d01e      	beq.n	80048ee <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f022 0204 	bic.w	r2, r2, #4
 80048be:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	2204      	movs	r2, #4
 80048c6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80048ce:	f043 0201 	orr.w	r2, r3, #1
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2204      	movs	r2, #4
 80048dc:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2200      	movs	r2, #0
 80048e4:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f000 f86f 	bl	80049cc <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	f003 0302 	and.w	r3, r3, #2
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d023      	beq.n	8004940 <HAL_LTDC_IRQHandler+0xbc>
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	f003 0302 	and.w	r3, r3, #2
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d01e      	beq.n	8004940 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f022 0202 	bic.w	r2, r2, #2
 8004910:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	2202      	movs	r2, #2
 8004918:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004920:	f043 0202 	orr.w	r2, r3, #2
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2204      	movs	r2, #4
 800492e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2200      	movs	r2, #0
 8004936:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f000 f846 	bl	80049cc <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f003 0301 	and.w	r3, r3, #1
 8004946:	2b00      	cmp	r3, #0
 8004948:	d01b      	beq.n	8004982 <HAL_LTDC_IRQHandler+0xfe>
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	f003 0301 	and.w	r3, r3, #1
 8004950:	2b00      	cmp	r3, #0
 8004952:	d016      	beq.n	8004982 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f022 0201 	bic.w	r2, r2, #1
 8004962:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	2201      	movs	r2, #1
 800496a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2200      	movs	r2, #0
 8004978:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f000 f82f 	bl	80049e0 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	f003 0308 	and.w	r3, r3, #8
 8004988:	2b00      	cmp	r3, #0
 800498a:	d01b      	beq.n	80049c4 <HAL_LTDC_IRQHandler+0x140>
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	f003 0308 	and.w	r3, r3, #8
 8004992:	2b00      	cmp	r3, #0
 8004994:	d016      	beq.n	80049c4 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f022 0208 	bic.w	r2, r2, #8
 80049a4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	2208      	movs	r2, #8
 80049ac:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2201      	movs	r2, #1
 80049b2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2200      	movs	r2, #0
 80049ba:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f000 f818 	bl	80049f4 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80049c4:	bf00      	nop
 80049c6:	3710      	adds	r7, #16
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}

080049cc <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b083      	sub	sp, #12
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80049d4:	bf00      	nop
 80049d6:	370c      	adds	r7, #12
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr

080049e0 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b083      	sub	sp, #12
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80049e8:	bf00      	nop
 80049ea:	370c      	adds	r7, #12
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr

080049f4 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b083      	sub	sp, #12
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80049fc:	bf00      	nop
 80049fe:	370c      	adds	r7, #12
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr

08004a08 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004a08:	b5b0      	push	{r4, r5, r7, lr}
 8004a0a:	b084      	sub	sp, #16
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	60f8      	str	r0, [r7, #12]
 8004a10:	60b9      	str	r1, [r7, #8]
 8004a12:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d101      	bne.n	8004a22 <HAL_LTDC_ConfigLayer+0x1a>
 8004a1e:	2302      	movs	r3, #2
 8004a20:	e02c      	b.n	8004a7c <HAL_LTDC_ConfigLayer+0x74>
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2201      	movs	r2, #1
 8004a26:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2202      	movs	r2, #2
 8004a2e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004a32:	68fa      	ldr	r2, [r7, #12]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2134      	movs	r1, #52	@ 0x34
 8004a38:	fb01 f303 	mul.w	r3, r1, r3
 8004a3c:	4413      	add	r3, r2
 8004a3e:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	4614      	mov	r4, r2
 8004a46:	461d      	mov	r5, r3
 8004a48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004a4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004a50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004a54:	682b      	ldr	r3, [r5, #0]
 8004a56:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	68b9      	ldr	r1, [r7, #8]
 8004a5c:	68f8      	ldr	r0, [r7, #12]
 8004a5e:	f000 f811 	bl	8004a84 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	2201      	movs	r2, #1
 8004a68:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2200      	movs	r2, #0
 8004a76:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8004a7a:	2300      	movs	r3, #0
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3710      	adds	r7, #16
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bdb0      	pop	{r4, r5, r7, pc}

08004a84 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b089      	sub	sp, #36	@ 0x24
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	60f8      	str	r0, [r7, #12]
 8004a8c:	60b9      	str	r1, [r7, #8]
 8004a8e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	685a      	ldr	r2, [r3, #4]
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	0c1b      	lsrs	r3, r3, #16
 8004a9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004aa0:	4413      	add	r3, r2
 8004aa2:	041b      	lsls	r3, r3, #16
 8004aa4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	461a      	mov	r2, r3
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	01db      	lsls	r3, r3, #7
 8004ab0:	4413      	add	r3, r2
 8004ab2:	3384      	adds	r3, #132	@ 0x84
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	68fa      	ldr	r2, [r7, #12]
 8004ab8:	6812      	ldr	r2, [r2, #0]
 8004aba:	4611      	mov	r1, r2
 8004abc:	687a      	ldr	r2, [r7, #4]
 8004abe:	01d2      	lsls	r2, r2, #7
 8004ac0:	440a      	add	r2, r1
 8004ac2:	3284      	adds	r2, #132	@ 0x84
 8004ac4:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004ac8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	0c1b      	lsrs	r3, r3, #16
 8004ad6:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004ada:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004adc:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4619      	mov	r1, r3
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	01db      	lsls	r3, r3, #7
 8004ae8:	440b      	add	r3, r1
 8004aea:	3384      	adds	r3, #132	@ 0x84
 8004aec:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004aee:	69fb      	ldr	r3, [r7, #28]
 8004af0:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004af2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	68da      	ldr	r2, [r3, #12]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	68db      	ldr	r3, [r3, #12]
 8004afe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b02:	4413      	add	r3, r2
 8004b04:	041b      	lsls	r3, r3, #16
 8004b06:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	461a      	mov	r2, r3
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	01db      	lsls	r3, r3, #7
 8004b12:	4413      	add	r3, r2
 8004b14:	3384      	adds	r3, #132	@ 0x84
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	68fa      	ldr	r2, [r7, #12]
 8004b1a:	6812      	ldr	r2, [r2, #0]
 8004b1c:	4611      	mov	r1, r2
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	01d2      	lsls	r2, r2, #7
 8004b22:	440a      	add	r2, r1
 8004b24:	3284      	adds	r2, #132	@ 0x84
 8004b26:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004b2a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	689a      	ldr	r2, [r3, #8]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b3a:	4413      	add	r3, r2
 8004b3c:	1c5a      	adds	r2, r3, #1
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4619      	mov	r1, r3
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	01db      	lsls	r3, r3, #7
 8004b48:	440b      	add	r3, r1
 8004b4a:	3384      	adds	r3, #132	@ 0x84
 8004b4c:	4619      	mov	r1, r3
 8004b4e:	69fb      	ldr	r3, [r7, #28]
 8004b50:	4313      	orrs	r3, r2
 8004b52:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	461a      	mov	r2, r3
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	01db      	lsls	r3, r3, #7
 8004b5e:	4413      	add	r3, r2
 8004b60:	3384      	adds	r3, #132	@ 0x84
 8004b62:	691b      	ldr	r3, [r3, #16]
 8004b64:	68fa      	ldr	r2, [r7, #12]
 8004b66:	6812      	ldr	r2, [r2, #0]
 8004b68:	4611      	mov	r1, r2
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	01d2      	lsls	r2, r2, #7
 8004b6e:	440a      	add	r2, r1
 8004b70:	3284      	adds	r2, #132	@ 0x84
 8004b72:	f023 0307 	bic.w	r3, r3, #7
 8004b76:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	461a      	mov	r2, r3
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	01db      	lsls	r3, r3, #7
 8004b82:	4413      	add	r3, r2
 8004b84:	3384      	adds	r3, #132	@ 0x84
 8004b86:	461a      	mov	r2, r3
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	691b      	ldr	r3, [r3, #16]
 8004b8c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004b94:	021b      	lsls	r3, r3, #8
 8004b96:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004b9e:	041b      	lsls	r3, r3, #16
 8004ba0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	699b      	ldr	r3, [r3, #24]
 8004ba6:	061b      	lsls	r3, r3, #24
 8004ba8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	461a      	mov	r2, r3
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	01db      	lsls	r3, r3, #7
 8004bb4:	4413      	add	r3, r2
 8004bb6:	3384      	adds	r3, #132	@ 0x84
 8004bb8:	699b      	ldr	r3, [r3, #24]
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	01db      	lsls	r3, r3, #7
 8004bc4:	4413      	add	r3, r2
 8004bc6:	3384      	adds	r3, #132	@ 0x84
 8004bc8:	461a      	mov	r2, r3
 8004bca:	2300      	movs	r3, #0
 8004bcc:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004bd4:	461a      	mov	r2, r3
 8004bd6:	69fb      	ldr	r3, [r7, #28]
 8004bd8:	431a      	orrs	r2, r3
 8004bda:	69bb      	ldr	r3, [r7, #24]
 8004bdc:	431a      	orrs	r2, r3
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4619      	mov	r1, r3
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	01db      	lsls	r3, r3, #7
 8004be8:	440b      	add	r3, r1
 8004bea:	3384      	adds	r3, #132	@ 0x84
 8004bec:	4619      	mov	r1, r3
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	461a      	mov	r2, r3
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	01db      	lsls	r3, r3, #7
 8004bfe:	4413      	add	r3, r2
 8004c00:	3384      	adds	r3, #132	@ 0x84
 8004c02:	695b      	ldr	r3, [r3, #20]
 8004c04:	68fa      	ldr	r2, [r7, #12]
 8004c06:	6812      	ldr	r2, [r2, #0]
 8004c08:	4611      	mov	r1, r2
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	01d2      	lsls	r2, r2, #7
 8004c0e:	440a      	add	r2, r1
 8004c10:	3284      	adds	r2, #132	@ 0x84
 8004c12:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004c16:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	461a      	mov	r2, r3
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	01db      	lsls	r3, r3, #7
 8004c22:	4413      	add	r3, r2
 8004c24:	3384      	adds	r3, #132	@ 0x84
 8004c26:	461a      	mov	r2, r3
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	695b      	ldr	r3, [r3, #20]
 8004c2c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	461a      	mov	r2, r3
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	01db      	lsls	r3, r3, #7
 8004c38:	4413      	add	r3, r2
 8004c3a:	3384      	adds	r3, #132	@ 0x84
 8004c3c:	69db      	ldr	r3, [r3, #28]
 8004c3e:	68fa      	ldr	r2, [r7, #12]
 8004c40:	6812      	ldr	r2, [r2, #0]
 8004c42:	4611      	mov	r1, r2
 8004c44:	687a      	ldr	r2, [r7, #4]
 8004c46:	01d2      	lsls	r2, r2, #7
 8004c48:	440a      	add	r2, r1
 8004c4a:	3284      	adds	r2, #132	@ 0x84
 8004c4c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004c50:	f023 0307 	bic.w	r3, r3, #7
 8004c54:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	69da      	ldr	r2, [r3, #28]
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	6a1b      	ldr	r3, [r3, #32]
 8004c5e:	68f9      	ldr	r1, [r7, #12]
 8004c60:	6809      	ldr	r1, [r1, #0]
 8004c62:	4608      	mov	r0, r1
 8004c64:	6879      	ldr	r1, [r7, #4]
 8004c66:	01c9      	lsls	r1, r1, #7
 8004c68:	4401      	add	r1, r0
 8004c6a:	3184      	adds	r1, #132	@ 0x84
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	461a      	mov	r2, r3
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	01db      	lsls	r3, r3, #7
 8004c7a:	4413      	add	r3, r2
 8004c7c:	3384      	adds	r3, #132	@ 0x84
 8004c7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	461a      	mov	r2, r3
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	01db      	lsls	r3, r3, #7
 8004c8a:	4413      	add	r3, r2
 8004c8c:	3384      	adds	r3, #132	@ 0x84
 8004c8e:	461a      	mov	r2, r3
 8004c90:	2300      	movs	r3, #0
 8004c92:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	461a      	mov	r2, r3
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	01db      	lsls	r3, r3, #7
 8004c9e:	4413      	add	r3, r2
 8004ca0:	3384      	adds	r3, #132	@ 0x84
 8004ca2:	461a      	mov	r2, r3
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ca8:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	691b      	ldr	r3, [r3, #16]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d102      	bne.n	8004cb8 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8004cb2:	2304      	movs	r3, #4
 8004cb4:	61fb      	str	r3, [r7, #28]
 8004cb6:	e01b      	b.n	8004cf0 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	691b      	ldr	r3, [r3, #16]
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d102      	bne.n	8004cc6 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004cc0:	2303      	movs	r3, #3
 8004cc2:	61fb      	str	r3, [r7, #28]
 8004cc4:	e014      	b.n	8004cf0 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	691b      	ldr	r3, [r3, #16]
 8004cca:	2b04      	cmp	r3, #4
 8004ccc:	d00b      	beq.n	8004ce6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004cd2:	2b02      	cmp	r3, #2
 8004cd4:	d007      	beq.n	8004ce6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004cda:	2b03      	cmp	r3, #3
 8004cdc:	d003      	beq.n	8004ce6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004ce2:	2b07      	cmp	r3, #7
 8004ce4:	d102      	bne.n	8004cec <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8004ce6:	2302      	movs	r3, #2
 8004ce8:	61fb      	str	r3, [r7, #28]
 8004cea:	e001      	b.n	8004cf0 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8004cec:	2301      	movs	r3, #1
 8004cee:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	01db      	lsls	r3, r3, #7
 8004cfa:	4413      	add	r3, r2
 8004cfc:	3384      	adds	r3, #132	@ 0x84
 8004cfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d00:	68fa      	ldr	r2, [r7, #12]
 8004d02:	6812      	ldr	r2, [r2, #0]
 8004d04:	4611      	mov	r1, r2
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	01d2      	lsls	r2, r2, #7
 8004d0a:	440a      	add	r2, r1
 8004d0c:	3284      	adds	r2, #132	@ 0x84
 8004d0e:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8004d12:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d18:	69fa      	ldr	r2, [r7, #28]
 8004d1a:	fb02 f303 	mul.w	r3, r2, r3
 8004d1e:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	6859      	ldr	r1, [r3, #4]
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	1acb      	subs	r3, r1, r3
 8004d2a:	69f9      	ldr	r1, [r7, #28]
 8004d2c:	fb01 f303 	mul.w	r3, r1, r3
 8004d30:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004d32:	68f9      	ldr	r1, [r7, #12]
 8004d34:	6809      	ldr	r1, [r1, #0]
 8004d36:	4608      	mov	r0, r1
 8004d38:	6879      	ldr	r1, [r7, #4]
 8004d3a:	01c9      	lsls	r1, r1, #7
 8004d3c:	4401      	add	r1, r0
 8004d3e:	3184      	adds	r1, #132	@ 0x84
 8004d40:	4313      	orrs	r3, r2
 8004d42:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	461a      	mov	r2, r3
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	01db      	lsls	r3, r3, #7
 8004d4e:	4413      	add	r3, r2
 8004d50:	3384      	adds	r3, #132	@ 0x84
 8004d52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d54:	68fa      	ldr	r2, [r7, #12]
 8004d56:	6812      	ldr	r2, [r2, #0]
 8004d58:	4611      	mov	r1, r2
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	01d2      	lsls	r2, r2, #7
 8004d5e:	440a      	add	r2, r1
 8004d60:	3284      	adds	r2, #132	@ 0x84
 8004d62:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004d66:	f023 0307 	bic.w	r3, r3, #7
 8004d6a:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	461a      	mov	r2, r3
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	01db      	lsls	r3, r3, #7
 8004d76:	4413      	add	r3, r2
 8004d78:	3384      	adds	r3, #132	@ 0x84
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d80:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	461a      	mov	r2, r3
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	01db      	lsls	r3, r3, #7
 8004d8c:	4413      	add	r3, r2
 8004d8e:	3384      	adds	r3, #132	@ 0x84
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	68fa      	ldr	r2, [r7, #12]
 8004d94:	6812      	ldr	r2, [r2, #0]
 8004d96:	4611      	mov	r1, r2
 8004d98:	687a      	ldr	r2, [r7, #4]
 8004d9a:	01d2      	lsls	r2, r2, #7
 8004d9c:	440a      	add	r2, r1
 8004d9e:	3284      	adds	r2, #132	@ 0x84
 8004da0:	f043 0301 	orr.w	r3, r3, #1
 8004da4:	6013      	str	r3, [r2, #0]
}
 8004da6:	bf00      	nop
 8004da8:	3724      	adds	r7, #36	@ 0x24
 8004daa:	46bd      	mov	sp, r7
 8004dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db0:	4770      	bx	lr
	...

08004db4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b086      	sub	sp, #24
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d101      	bne.n	8004dc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e267      	b.n	8005296 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 0301 	and.w	r3, r3, #1
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d075      	beq.n	8004ebe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004dd2:	4b88      	ldr	r3, [pc, #544]	@ (8004ff4 <HAL_RCC_OscConfig+0x240>)
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	f003 030c 	and.w	r3, r3, #12
 8004dda:	2b04      	cmp	r3, #4
 8004ddc:	d00c      	beq.n	8004df8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004dde:	4b85      	ldr	r3, [pc, #532]	@ (8004ff4 <HAL_RCC_OscConfig+0x240>)
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004de6:	2b08      	cmp	r3, #8
 8004de8:	d112      	bne.n	8004e10 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004dea:	4b82      	ldr	r3, [pc, #520]	@ (8004ff4 <HAL_RCC_OscConfig+0x240>)
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004df2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004df6:	d10b      	bne.n	8004e10 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004df8:	4b7e      	ldr	r3, [pc, #504]	@ (8004ff4 <HAL_RCC_OscConfig+0x240>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d05b      	beq.n	8004ebc <HAL_RCC_OscConfig+0x108>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d157      	bne.n	8004ebc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e242      	b.n	8005296 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e18:	d106      	bne.n	8004e28 <HAL_RCC_OscConfig+0x74>
 8004e1a:	4b76      	ldr	r3, [pc, #472]	@ (8004ff4 <HAL_RCC_OscConfig+0x240>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a75      	ldr	r2, [pc, #468]	@ (8004ff4 <HAL_RCC_OscConfig+0x240>)
 8004e20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e24:	6013      	str	r3, [r2, #0]
 8004e26:	e01d      	b.n	8004e64 <HAL_RCC_OscConfig+0xb0>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004e30:	d10c      	bne.n	8004e4c <HAL_RCC_OscConfig+0x98>
 8004e32:	4b70      	ldr	r3, [pc, #448]	@ (8004ff4 <HAL_RCC_OscConfig+0x240>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a6f      	ldr	r2, [pc, #444]	@ (8004ff4 <HAL_RCC_OscConfig+0x240>)
 8004e38:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004e3c:	6013      	str	r3, [r2, #0]
 8004e3e:	4b6d      	ldr	r3, [pc, #436]	@ (8004ff4 <HAL_RCC_OscConfig+0x240>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a6c      	ldr	r2, [pc, #432]	@ (8004ff4 <HAL_RCC_OscConfig+0x240>)
 8004e44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e48:	6013      	str	r3, [r2, #0]
 8004e4a:	e00b      	b.n	8004e64 <HAL_RCC_OscConfig+0xb0>
 8004e4c:	4b69      	ldr	r3, [pc, #420]	@ (8004ff4 <HAL_RCC_OscConfig+0x240>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a68      	ldr	r2, [pc, #416]	@ (8004ff4 <HAL_RCC_OscConfig+0x240>)
 8004e52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e56:	6013      	str	r3, [r2, #0]
 8004e58:	4b66      	ldr	r3, [pc, #408]	@ (8004ff4 <HAL_RCC_OscConfig+0x240>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a65      	ldr	r2, [pc, #404]	@ (8004ff4 <HAL_RCC_OscConfig+0x240>)
 8004e5e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004e62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d013      	beq.n	8004e94 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e6c:	f7fc fc42 	bl	80016f4 <HAL_GetTick>
 8004e70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e72:	e008      	b.n	8004e86 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e74:	f7fc fc3e 	bl	80016f4 <HAL_GetTick>
 8004e78:	4602      	mov	r2, r0
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	1ad3      	subs	r3, r2, r3
 8004e7e:	2b64      	cmp	r3, #100	@ 0x64
 8004e80:	d901      	bls.n	8004e86 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004e82:	2303      	movs	r3, #3
 8004e84:	e207      	b.n	8005296 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e86:	4b5b      	ldr	r3, [pc, #364]	@ (8004ff4 <HAL_RCC_OscConfig+0x240>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d0f0      	beq.n	8004e74 <HAL_RCC_OscConfig+0xc0>
 8004e92:	e014      	b.n	8004ebe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e94:	f7fc fc2e 	bl	80016f4 <HAL_GetTick>
 8004e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e9a:	e008      	b.n	8004eae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e9c:	f7fc fc2a 	bl	80016f4 <HAL_GetTick>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	1ad3      	subs	r3, r2, r3
 8004ea6:	2b64      	cmp	r3, #100	@ 0x64
 8004ea8:	d901      	bls.n	8004eae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004eaa:	2303      	movs	r3, #3
 8004eac:	e1f3      	b.n	8005296 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004eae:	4b51      	ldr	r3, [pc, #324]	@ (8004ff4 <HAL_RCC_OscConfig+0x240>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d1f0      	bne.n	8004e9c <HAL_RCC_OscConfig+0xe8>
 8004eba:	e000      	b.n	8004ebe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ebc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f003 0302 	and.w	r3, r3, #2
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d063      	beq.n	8004f92 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004eca:	4b4a      	ldr	r3, [pc, #296]	@ (8004ff4 <HAL_RCC_OscConfig+0x240>)
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	f003 030c 	and.w	r3, r3, #12
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d00b      	beq.n	8004eee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ed6:	4b47      	ldr	r3, [pc, #284]	@ (8004ff4 <HAL_RCC_OscConfig+0x240>)
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004ede:	2b08      	cmp	r3, #8
 8004ee0:	d11c      	bne.n	8004f1c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ee2:	4b44      	ldr	r3, [pc, #272]	@ (8004ff4 <HAL_RCC_OscConfig+0x240>)
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d116      	bne.n	8004f1c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004eee:	4b41      	ldr	r3, [pc, #260]	@ (8004ff4 <HAL_RCC_OscConfig+0x240>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 0302 	and.w	r3, r3, #2
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d005      	beq.n	8004f06 <HAL_RCC_OscConfig+0x152>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	68db      	ldr	r3, [r3, #12]
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d001      	beq.n	8004f06 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	e1c7      	b.n	8005296 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f06:	4b3b      	ldr	r3, [pc, #236]	@ (8004ff4 <HAL_RCC_OscConfig+0x240>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	691b      	ldr	r3, [r3, #16]
 8004f12:	00db      	lsls	r3, r3, #3
 8004f14:	4937      	ldr	r1, [pc, #220]	@ (8004ff4 <HAL_RCC_OscConfig+0x240>)
 8004f16:	4313      	orrs	r3, r2
 8004f18:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f1a:	e03a      	b.n	8004f92 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	68db      	ldr	r3, [r3, #12]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d020      	beq.n	8004f66 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f24:	4b34      	ldr	r3, [pc, #208]	@ (8004ff8 <HAL_RCC_OscConfig+0x244>)
 8004f26:	2201      	movs	r2, #1
 8004f28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f2a:	f7fc fbe3 	bl	80016f4 <HAL_GetTick>
 8004f2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f30:	e008      	b.n	8004f44 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f32:	f7fc fbdf 	bl	80016f4 <HAL_GetTick>
 8004f36:	4602      	mov	r2, r0
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	1ad3      	subs	r3, r2, r3
 8004f3c:	2b02      	cmp	r3, #2
 8004f3e:	d901      	bls.n	8004f44 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004f40:	2303      	movs	r3, #3
 8004f42:	e1a8      	b.n	8005296 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f44:	4b2b      	ldr	r3, [pc, #172]	@ (8004ff4 <HAL_RCC_OscConfig+0x240>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f003 0302 	and.w	r3, r3, #2
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d0f0      	beq.n	8004f32 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f50:	4b28      	ldr	r3, [pc, #160]	@ (8004ff4 <HAL_RCC_OscConfig+0x240>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	691b      	ldr	r3, [r3, #16]
 8004f5c:	00db      	lsls	r3, r3, #3
 8004f5e:	4925      	ldr	r1, [pc, #148]	@ (8004ff4 <HAL_RCC_OscConfig+0x240>)
 8004f60:	4313      	orrs	r3, r2
 8004f62:	600b      	str	r3, [r1, #0]
 8004f64:	e015      	b.n	8004f92 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f66:	4b24      	ldr	r3, [pc, #144]	@ (8004ff8 <HAL_RCC_OscConfig+0x244>)
 8004f68:	2200      	movs	r2, #0
 8004f6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f6c:	f7fc fbc2 	bl	80016f4 <HAL_GetTick>
 8004f70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f72:	e008      	b.n	8004f86 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f74:	f7fc fbbe 	bl	80016f4 <HAL_GetTick>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	1ad3      	subs	r3, r2, r3
 8004f7e:	2b02      	cmp	r3, #2
 8004f80:	d901      	bls.n	8004f86 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004f82:	2303      	movs	r3, #3
 8004f84:	e187      	b.n	8005296 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f86:	4b1b      	ldr	r3, [pc, #108]	@ (8004ff4 <HAL_RCC_OscConfig+0x240>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f003 0302 	and.w	r3, r3, #2
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d1f0      	bne.n	8004f74 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f003 0308 	and.w	r3, r3, #8
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d036      	beq.n	800500c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	695b      	ldr	r3, [r3, #20]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d016      	beq.n	8004fd4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004fa6:	4b15      	ldr	r3, [pc, #84]	@ (8004ffc <HAL_RCC_OscConfig+0x248>)
 8004fa8:	2201      	movs	r2, #1
 8004faa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fac:	f7fc fba2 	bl	80016f4 <HAL_GetTick>
 8004fb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fb2:	e008      	b.n	8004fc6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004fb4:	f7fc fb9e 	bl	80016f4 <HAL_GetTick>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	1ad3      	subs	r3, r2, r3
 8004fbe:	2b02      	cmp	r3, #2
 8004fc0:	d901      	bls.n	8004fc6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004fc2:	2303      	movs	r3, #3
 8004fc4:	e167      	b.n	8005296 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fc6:	4b0b      	ldr	r3, [pc, #44]	@ (8004ff4 <HAL_RCC_OscConfig+0x240>)
 8004fc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fca:	f003 0302 	and.w	r3, r3, #2
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d0f0      	beq.n	8004fb4 <HAL_RCC_OscConfig+0x200>
 8004fd2:	e01b      	b.n	800500c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004fd4:	4b09      	ldr	r3, [pc, #36]	@ (8004ffc <HAL_RCC_OscConfig+0x248>)
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fda:	f7fc fb8b 	bl	80016f4 <HAL_GetTick>
 8004fde:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fe0:	e00e      	b.n	8005000 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004fe2:	f7fc fb87 	bl	80016f4 <HAL_GetTick>
 8004fe6:	4602      	mov	r2, r0
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	1ad3      	subs	r3, r2, r3
 8004fec:	2b02      	cmp	r3, #2
 8004fee:	d907      	bls.n	8005000 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004ff0:	2303      	movs	r3, #3
 8004ff2:	e150      	b.n	8005296 <HAL_RCC_OscConfig+0x4e2>
 8004ff4:	40023800 	.word	0x40023800
 8004ff8:	42470000 	.word	0x42470000
 8004ffc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005000:	4b88      	ldr	r3, [pc, #544]	@ (8005224 <HAL_RCC_OscConfig+0x470>)
 8005002:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005004:	f003 0302 	and.w	r3, r3, #2
 8005008:	2b00      	cmp	r3, #0
 800500a:	d1ea      	bne.n	8004fe2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f003 0304 	and.w	r3, r3, #4
 8005014:	2b00      	cmp	r3, #0
 8005016:	f000 8097 	beq.w	8005148 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800501a:	2300      	movs	r3, #0
 800501c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800501e:	4b81      	ldr	r3, [pc, #516]	@ (8005224 <HAL_RCC_OscConfig+0x470>)
 8005020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005022:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005026:	2b00      	cmp	r3, #0
 8005028:	d10f      	bne.n	800504a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800502a:	2300      	movs	r3, #0
 800502c:	60bb      	str	r3, [r7, #8]
 800502e:	4b7d      	ldr	r3, [pc, #500]	@ (8005224 <HAL_RCC_OscConfig+0x470>)
 8005030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005032:	4a7c      	ldr	r2, [pc, #496]	@ (8005224 <HAL_RCC_OscConfig+0x470>)
 8005034:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005038:	6413      	str	r3, [r2, #64]	@ 0x40
 800503a:	4b7a      	ldr	r3, [pc, #488]	@ (8005224 <HAL_RCC_OscConfig+0x470>)
 800503c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800503e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005042:	60bb      	str	r3, [r7, #8]
 8005044:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005046:	2301      	movs	r3, #1
 8005048:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800504a:	4b77      	ldr	r3, [pc, #476]	@ (8005228 <HAL_RCC_OscConfig+0x474>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005052:	2b00      	cmp	r3, #0
 8005054:	d118      	bne.n	8005088 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005056:	4b74      	ldr	r3, [pc, #464]	@ (8005228 <HAL_RCC_OscConfig+0x474>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a73      	ldr	r2, [pc, #460]	@ (8005228 <HAL_RCC_OscConfig+0x474>)
 800505c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005060:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005062:	f7fc fb47 	bl	80016f4 <HAL_GetTick>
 8005066:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005068:	e008      	b.n	800507c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800506a:	f7fc fb43 	bl	80016f4 <HAL_GetTick>
 800506e:	4602      	mov	r2, r0
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	1ad3      	subs	r3, r2, r3
 8005074:	2b02      	cmp	r3, #2
 8005076:	d901      	bls.n	800507c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005078:	2303      	movs	r3, #3
 800507a:	e10c      	b.n	8005296 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800507c:	4b6a      	ldr	r3, [pc, #424]	@ (8005228 <HAL_RCC_OscConfig+0x474>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005084:	2b00      	cmp	r3, #0
 8005086:	d0f0      	beq.n	800506a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	2b01      	cmp	r3, #1
 800508e:	d106      	bne.n	800509e <HAL_RCC_OscConfig+0x2ea>
 8005090:	4b64      	ldr	r3, [pc, #400]	@ (8005224 <HAL_RCC_OscConfig+0x470>)
 8005092:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005094:	4a63      	ldr	r2, [pc, #396]	@ (8005224 <HAL_RCC_OscConfig+0x470>)
 8005096:	f043 0301 	orr.w	r3, r3, #1
 800509a:	6713      	str	r3, [r2, #112]	@ 0x70
 800509c:	e01c      	b.n	80050d8 <HAL_RCC_OscConfig+0x324>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	2b05      	cmp	r3, #5
 80050a4:	d10c      	bne.n	80050c0 <HAL_RCC_OscConfig+0x30c>
 80050a6:	4b5f      	ldr	r3, [pc, #380]	@ (8005224 <HAL_RCC_OscConfig+0x470>)
 80050a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050aa:	4a5e      	ldr	r2, [pc, #376]	@ (8005224 <HAL_RCC_OscConfig+0x470>)
 80050ac:	f043 0304 	orr.w	r3, r3, #4
 80050b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80050b2:	4b5c      	ldr	r3, [pc, #368]	@ (8005224 <HAL_RCC_OscConfig+0x470>)
 80050b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050b6:	4a5b      	ldr	r2, [pc, #364]	@ (8005224 <HAL_RCC_OscConfig+0x470>)
 80050b8:	f043 0301 	orr.w	r3, r3, #1
 80050bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80050be:	e00b      	b.n	80050d8 <HAL_RCC_OscConfig+0x324>
 80050c0:	4b58      	ldr	r3, [pc, #352]	@ (8005224 <HAL_RCC_OscConfig+0x470>)
 80050c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050c4:	4a57      	ldr	r2, [pc, #348]	@ (8005224 <HAL_RCC_OscConfig+0x470>)
 80050c6:	f023 0301 	bic.w	r3, r3, #1
 80050ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80050cc:	4b55      	ldr	r3, [pc, #340]	@ (8005224 <HAL_RCC_OscConfig+0x470>)
 80050ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050d0:	4a54      	ldr	r2, [pc, #336]	@ (8005224 <HAL_RCC_OscConfig+0x470>)
 80050d2:	f023 0304 	bic.w	r3, r3, #4
 80050d6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d015      	beq.n	800510c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050e0:	f7fc fb08 	bl	80016f4 <HAL_GetTick>
 80050e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050e6:	e00a      	b.n	80050fe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050e8:	f7fc fb04 	bl	80016f4 <HAL_GetTick>
 80050ec:	4602      	mov	r2, r0
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	1ad3      	subs	r3, r2, r3
 80050f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d901      	bls.n	80050fe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	e0cb      	b.n	8005296 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050fe:	4b49      	ldr	r3, [pc, #292]	@ (8005224 <HAL_RCC_OscConfig+0x470>)
 8005100:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005102:	f003 0302 	and.w	r3, r3, #2
 8005106:	2b00      	cmp	r3, #0
 8005108:	d0ee      	beq.n	80050e8 <HAL_RCC_OscConfig+0x334>
 800510a:	e014      	b.n	8005136 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800510c:	f7fc faf2 	bl	80016f4 <HAL_GetTick>
 8005110:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005112:	e00a      	b.n	800512a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005114:	f7fc faee 	bl	80016f4 <HAL_GetTick>
 8005118:	4602      	mov	r2, r0
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	1ad3      	subs	r3, r2, r3
 800511e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005122:	4293      	cmp	r3, r2
 8005124:	d901      	bls.n	800512a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005126:	2303      	movs	r3, #3
 8005128:	e0b5      	b.n	8005296 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800512a:	4b3e      	ldr	r3, [pc, #248]	@ (8005224 <HAL_RCC_OscConfig+0x470>)
 800512c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800512e:	f003 0302 	and.w	r3, r3, #2
 8005132:	2b00      	cmp	r3, #0
 8005134:	d1ee      	bne.n	8005114 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005136:	7dfb      	ldrb	r3, [r7, #23]
 8005138:	2b01      	cmp	r3, #1
 800513a:	d105      	bne.n	8005148 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800513c:	4b39      	ldr	r3, [pc, #228]	@ (8005224 <HAL_RCC_OscConfig+0x470>)
 800513e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005140:	4a38      	ldr	r2, [pc, #224]	@ (8005224 <HAL_RCC_OscConfig+0x470>)
 8005142:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005146:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	699b      	ldr	r3, [r3, #24]
 800514c:	2b00      	cmp	r3, #0
 800514e:	f000 80a1 	beq.w	8005294 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005152:	4b34      	ldr	r3, [pc, #208]	@ (8005224 <HAL_RCC_OscConfig+0x470>)
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	f003 030c 	and.w	r3, r3, #12
 800515a:	2b08      	cmp	r3, #8
 800515c:	d05c      	beq.n	8005218 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	699b      	ldr	r3, [r3, #24]
 8005162:	2b02      	cmp	r3, #2
 8005164:	d141      	bne.n	80051ea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005166:	4b31      	ldr	r3, [pc, #196]	@ (800522c <HAL_RCC_OscConfig+0x478>)
 8005168:	2200      	movs	r2, #0
 800516a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800516c:	f7fc fac2 	bl	80016f4 <HAL_GetTick>
 8005170:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005172:	e008      	b.n	8005186 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005174:	f7fc fabe 	bl	80016f4 <HAL_GetTick>
 8005178:	4602      	mov	r2, r0
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	1ad3      	subs	r3, r2, r3
 800517e:	2b02      	cmp	r3, #2
 8005180:	d901      	bls.n	8005186 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005182:	2303      	movs	r3, #3
 8005184:	e087      	b.n	8005296 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005186:	4b27      	ldr	r3, [pc, #156]	@ (8005224 <HAL_RCC_OscConfig+0x470>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800518e:	2b00      	cmp	r3, #0
 8005190:	d1f0      	bne.n	8005174 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	69da      	ldr	r2, [r3, #28]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6a1b      	ldr	r3, [r3, #32]
 800519a:	431a      	orrs	r2, r3
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051a0:	019b      	lsls	r3, r3, #6
 80051a2:	431a      	orrs	r2, r3
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051a8:	085b      	lsrs	r3, r3, #1
 80051aa:	3b01      	subs	r3, #1
 80051ac:	041b      	lsls	r3, r3, #16
 80051ae:	431a      	orrs	r2, r3
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051b4:	061b      	lsls	r3, r3, #24
 80051b6:	491b      	ldr	r1, [pc, #108]	@ (8005224 <HAL_RCC_OscConfig+0x470>)
 80051b8:	4313      	orrs	r3, r2
 80051ba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051bc:	4b1b      	ldr	r3, [pc, #108]	@ (800522c <HAL_RCC_OscConfig+0x478>)
 80051be:	2201      	movs	r2, #1
 80051c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051c2:	f7fc fa97 	bl	80016f4 <HAL_GetTick>
 80051c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051c8:	e008      	b.n	80051dc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051ca:	f7fc fa93 	bl	80016f4 <HAL_GetTick>
 80051ce:	4602      	mov	r2, r0
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	1ad3      	subs	r3, r2, r3
 80051d4:	2b02      	cmp	r3, #2
 80051d6:	d901      	bls.n	80051dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80051d8:	2303      	movs	r3, #3
 80051da:	e05c      	b.n	8005296 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051dc:	4b11      	ldr	r3, [pc, #68]	@ (8005224 <HAL_RCC_OscConfig+0x470>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d0f0      	beq.n	80051ca <HAL_RCC_OscConfig+0x416>
 80051e8:	e054      	b.n	8005294 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051ea:	4b10      	ldr	r3, [pc, #64]	@ (800522c <HAL_RCC_OscConfig+0x478>)
 80051ec:	2200      	movs	r2, #0
 80051ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051f0:	f7fc fa80 	bl	80016f4 <HAL_GetTick>
 80051f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051f6:	e008      	b.n	800520a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051f8:	f7fc fa7c 	bl	80016f4 <HAL_GetTick>
 80051fc:	4602      	mov	r2, r0
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	1ad3      	subs	r3, r2, r3
 8005202:	2b02      	cmp	r3, #2
 8005204:	d901      	bls.n	800520a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005206:	2303      	movs	r3, #3
 8005208:	e045      	b.n	8005296 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800520a:	4b06      	ldr	r3, [pc, #24]	@ (8005224 <HAL_RCC_OscConfig+0x470>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005212:	2b00      	cmp	r3, #0
 8005214:	d1f0      	bne.n	80051f8 <HAL_RCC_OscConfig+0x444>
 8005216:	e03d      	b.n	8005294 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	699b      	ldr	r3, [r3, #24]
 800521c:	2b01      	cmp	r3, #1
 800521e:	d107      	bne.n	8005230 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005220:	2301      	movs	r3, #1
 8005222:	e038      	b.n	8005296 <HAL_RCC_OscConfig+0x4e2>
 8005224:	40023800 	.word	0x40023800
 8005228:	40007000 	.word	0x40007000
 800522c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005230:	4b1b      	ldr	r3, [pc, #108]	@ (80052a0 <HAL_RCC_OscConfig+0x4ec>)
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	699b      	ldr	r3, [r3, #24]
 800523a:	2b01      	cmp	r3, #1
 800523c:	d028      	beq.n	8005290 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005248:	429a      	cmp	r2, r3
 800524a:	d121      	bne.n	8005290 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005256:	429a      	cmp	r2, r3
 8005258:	d11a      	bne.n	8005290 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800525a:	68fa      	ldr	r2, [r7, #12]
 800525c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005260:	4013      	ands	r3, r2
 8005262:	687a      	ldr	r2, [r7, #4]
 8005264:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005266:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005268:	4293      	cmp	r3, r2
 800526a:	d111      	bne.n	8005290 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005276:	085b      	lsrs	r3, r3, #1
 8005278:	3b01      	subs	r3, #1
 800527a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800527c:	429a      	cmp	r2, r3
 800527e:	d107      	bne.n	8005290 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800528a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800528c:	429a      	cmp	r2, r3
 800528e:	d001      	beq.n	8005294 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005290:	2301      	movs	r3, #1
 8005292:	e000      	b.n	8005296 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005294:	2300      	movs	r3, #0
}
 8005296:	4618      	mov	r0, r3
 8005298:	3718      	adds	r7, #24
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}
 800529e:	bf00      	nop
 80052a0:	40023800 	.word	0x40023800

080052a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b084      	sub	sp, #16
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d101      	bne.n	80052b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	e0cc      	b.n	8005452 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80052b8:	4b68      	ldr	r3, [pc, #416]	@ (800545c <HAL_RCC_ClockConfig+0x1b8>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 030f 	and.w	r3, r3, #15
 80052c0:	683a      	ldr	r2, [r7, #0]
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d90c      	bls.n	80052e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052c6:	4b65      	ldr	r3, [pc, #404]	@ (800545c <HAL_RCC_ClockConfig+0x1b8>)
 80052c8:	683a      	ldr	r2, [r7, #0]
 80052ca:	b2d2      	uxtb	r2, r2
 80052cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052ce:	4b63      	ldr	r3, [pc, #396]	@ (800545c <HAL_RCC_ClockConfig+0x1b8>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f003 030f 	and.w	r3, r3, #15
 80052d6:	683a      	ldr	r2, [r7, #0]
 80052d8:	429a      	cmp	r2, r3
 80052da:	d001      	beq.n	80052e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	e0b8      	b.n	8005452 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f003 0302 	and.w	r3, r3, #2
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d020      	beq.n	800532e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f003 0304 	and.w	r3, r3, #4
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d005      	beq.n	8005304 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80052f8:	4b59      	ldr	r3, [pc, #356]	@ (8005460 <HAL_RCC_ClockConfig+0x1bc>)
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	4a58      	ldr	r2, [pc, #352]	@ (8005460 <HAL_RCC_ClockConfig+0x1bc>)
 80052fe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005302:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f003 0308 	and.w	r3, r3, #8
 800530c:	2b00      	cmp	r3, #0
 800530e:	d005      	beq.n	800531c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005310:	4b53      	ldr	r3, [pc, #332]	@ (8005460 <HAL_RCC_ClockConfig+0x1bc>)
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	4a52      	ldr	r2, [pc, #328]	@ (8005460 <HAL_RCC_ClockConfig+0x1bc>)
 8005316:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800531a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800531c:	4b50      	ldr	r3, [pc, #320]	@ (8005460 <HAL_RCC_ClockConfig+0x1bc>)
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	494d      	ldr	r1, [pc, #308]	@ (8005460 <HAL_RCC_ClockConfig+0x1bc>)
 800532a:	4313      	orrs	r3, r2
 800532c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f003 0301 	and.w	r3, r3, #1
 8005336:	2b00      	cmp	r3, #0
 8005338:	d044      	beq.n	80053c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	2b01      	cmp	r3, #1
 8005340:	d107      	bne.n	8005352 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005342:	4b47      	ldr	r3, [pc, #284]	@ (8005460 <HAL_RCC_ClockConfig+0x1bc>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800534a:	2b00      	cmp	r3, #0
 800534c:	d119      	bne.n	8005382 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	e07f      	b.n	8005452 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	2b02      	cmp	r3, #2
 8005358:	d003      	beq.n	8005362 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800535e:	2b03      	cmp	r3, #3
 8005360:	d107      	bne.n	8005372 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005362:	4b3f      	ldr	r3, [pc, #252]	@ (8005460 <HAL_RCC_ClockConfig+0x1bc>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800536a:	2b00      	cmp	r3, #0
 800536c:	d109      	bne.n	8005382 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	e06f      	b.n	8005452 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005372:	4b3b      	ldr	r3, [pc, #236]	@ (8005460 <HAL_RCC_ClockConfig+0x1bc>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f003 0302 	and.w	r3, r3, #2
 800537a:	2b00      	cmp	r3, #0
 800537c:	d101      	bne.n	8005382 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	e067      	b.n	8005452 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005382:	4b37      	ldr	r3, [pc, #220]	@ (8005460 <HAL_RCC_ClockConfig+0x1bc>)
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	f023 0203 	bic.w	r2, r3, #3
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	4934      	ldr	r1, [pc, #208]	@ (8005460 <HAL_RCC_ClockConfig+0x1bc>)
 8005390:	4313      	orrs	r3, r2
 8005392:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005394:	f7fc f9ae 	bl	80016f4 <HAL_GetTick>
 8005398:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800539a:	e00a      	b.n	80053b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800539c:	f7fc f9aa 	bl	80016f4 <HAL_GetTick>
 80053a0:	4602      	mov	r2, r0
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	1ad3      	subs	r3, r2, r3
 80053a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d901      	bls.n	80053b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80053ae:	2303      	movs	r3, #3
 80053b0:	e04f      	b.n	8005452 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053b2:	4b2b      	ldr	r3, [pc, #172]	@ (8005460 <HAL_RCC_ClockConfig+0x1bc>)
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	f003 020c 	and.w	r2, r3, #12
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d1eb      	bne.n	800539c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80053c4:	4b25      	ldr	r3, [pc, #148]	@ (800545c <HAL_RCC_ClockConfig+0x1b8>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f003 030f 	and.w	r3, r3, #15
 80053cc:	683a      	ldr	r2, [r7, #0]
 80053ce:	429a      	cmp	r2, r3
 80053d0:	d20c      	bcs.n	80053ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053d2:	4b22      	ldr	r3, [pc, #136]	@ (800545c <HAL_RCC_ClockConfig+0x1b8>)
 80053d4:	683a      	ldr	r2, [r7, #0]
 80053d6:	b2d2      	uxtb	r2, r2
 80053d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053da:	4b20      	ldr	r3, [pc, #128]	@ (800545c <HAL_RCC_ClockConfig+0x1b8>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f003 030f 	and.w	r3, r3, #15
 80053e2:	683a      	ldr	r2, [r7, #0]
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d001      	beq.n	80053ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80053e8:	2301      	movs	r3, #1
 80053ea:	e032      	b.n	8005452 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f003 0304 	and.w	r3, r3, #4
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d008      	beq.n	800540a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053f8:	4b19      	ldr	r3, [pc, #100]	@ (8005460 <HAL_RCC_ClockConfig+0x1bc>)
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	68db      	ldr	r3, [r3, #12]
 8005404:	4916      	ldr	r1, [pc, #88]	@ (8005460 <HAL_RCC_ClockConfig+0x1bc>)
 8005406:	4313      	orrs	r3, r2
 8005408:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f003 0308 	and.w	r3, r3, #8
 8005412:	2b00      	cmp	r3, #0
 8005414:	d009      	beq.n	800542a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005416:	4b12      	ldr	r3, [pc, #72]	@ (8005460 <HAL_RCC_ClockConfig+0x1bc>)
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	691b      	ldr	r3, [r3, #16]
 8005422:	00db      	lsls	r3, r3, #3
 8005424:	490e      	ldr	r1, [pc, #56]	@ (8005460 <HAL_RCC_ClockConfig+0x1bc>)
 8005426:	4313      	orrs	r3, r2
 8005428:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800542a:	f000 f821 	bl	8005470 <HAL_RCC_GetSysClockFreq>
 800542e:	4602      	mov	r2, r0
 8005430:	4b0b      	ldr	r3, [pc, #44]	@ (8005460 <HAL_RCC_ClockConfig+0x1bc>)
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	091b      	lsrs	r3, r3, #4
 8005436:	f003 030f 	and.w	r3, r3, #15
 800543a:	490a      	ldr	r1, [pc, #40]	@ (8005464 <HAL_RCC_ClockConfig+0x1c0>)
 800543c:	5ccb      	ldrb	r3, [r1, r3]
 800543e:	fa22 f303 	lsr.w	r3, r2, r3
 8005442:	4a09      	ldr	r2, [pc, #36]	@ (8005468 <HAL_RCC_ClockConfig+0x1c4>)
 8005444:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005446:	4b09      	ldr	r3, [pc, #36]	@ (800546c <HAL_RCC_ClockConfig+0x1c8>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4618      	mov	r0, r3
 800544c:	f7fb ffe4 	bl	8001418 <HAL_InitTick>

  return HAL_OK;
 8005450:	2300      	movs	r3, #0
}
 8005452:	4618      	mov	r0, r3
 8005454:	3710      	adds	r7, #16
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}
 800545a:	bf00      	nop
 800545c:	40023c00 	.word	0x40023c00
 8005460:	40023800 	.word	0x40023800
 8005464:	0800ddcc 	.word	0x0800ddcc
 8005468:	20000000 	.word	0x20000000
 800546c:	20000004 	.word	0x20000004

08005470 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005470:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005474:	b094      	sub	sp, #80	@ 0x50
 8005476:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005478:	2300      	movs	r3, #0
 800547a:	647b      	str	r3, [r7, #68]	@ 0x44
 800547c:	2300      	movs	r3, #0
 800547e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005480:	2300      	movs	r3, #0
 8005482:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005484:	2300      	movs	r3, #0
 8005486:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005488:	4b79      	ldr	r3, [pc, #484]	@ (8005670 <HAL_RCC_GetSysClockFreq+0x200>)
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	f003 030c 	and.w	r3, r3, #12
 8005490:	2b08      	cmp	r3, #8
 8005492:	d00d      	beq.n	80054b0 <HAL_RCC_GetSysClockFreq+0x40>
 8005494:	2b08      	cmp	r3, #8
 8005496:	f200 80e1 	bhi.w	800565c <HAL_RCC_GetSysClockFreq+0x1ec>
 800549a:	2b00      	cmp	r3, #0
 800549c:	d002      	beq.n	80054a4 <HAL_RCC_GetSysClockFreq+0x34>
 800549e:	2b04      	cmp	r3, #4
 80054a0:	d003      	beq.n	80054aa <HAL_RCC_GetSysClockFreq+0x3a>
 80054a2:	e0db      	b.n	800565c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80054a4:	4b73      	ldr	r3, [pc, #460]	@ (8005674 <HAL_RCC_GetSysClockFreq+0x204>)
 80054a6:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80054a8:	e0db      	b.n	8005662 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80054aa:	4b73      	ldr	r3, [pc, #460]	@ (8005678 <HAL_RCC_GetSysClockFreq+0x208>)
 80054ac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80054ae:	e0d8      	b.n	8005662 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80054b0:	4b6f      	ldr	r3, [pc, #444]	@ (8005670 <HAL_RCC_GetSysClockFreq+0x200>)
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80054b8:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80054ba:	4b6d      	ldr	r3, [pc, #436]	@ (8005670 <HAL_RCC_GetSysClockFreq+0x200>)
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d063      	beq.n	800558e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054c6:	4b6a      	ldr	r3, [pc, #424]	@ (8005670 <HAL_RCC_GetSysClockFreq+0x200>)
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	099b      	lsrs	r3, r3, #6
 80054cc:	2200      	movs	r2, #0
 80054ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 80054d0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80054d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80054da:	2300      	movs	r3, #0
 80054dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80054de:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80054e2:	4622      	mov	r2, r4
 80054e4:	462b      	mov	r3, r5
 80054e6:	f04f 0000 	mov.w	r0, #0
 80054ea:	f04f 0100 	mov.w	r1, #0
 80054ee:	0159      	lsls	r1, r3, #5
 80054f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80054f4:	0150      	lsls	r0, r2, #5
 80054f6:	4602      	mov	r2, r0
 80054f8:	460b      	mov	r3, r1
 80054fa:	4621      	mov	r1, r4
 80054fc:	1a51      	subs	r1, r2, r1
 80054fe:	6139      	str	r1, [r7, #16]
 8005500:	4629      	mov	r1, r5
 8005502:	eb63 0301 	sbc.w	r3, r3, r1
 8005506:	617b      	str	r3, [r7, #20]
 8005508:	f04f 0200 	mov.w	r2, #0
 800550c:	f04f 0300 	mov.w	r3, #0
 8005510:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005514:	4659      	mov	r1, fp
 8005516:	018b      	lsls	r3, r1, #6
 8005518:	4651      	mov	r1, sl
 800551a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800551e:	4651      	mov	r1, sl
 8005520:	018a      	lsls	r2, r1, #6
 8005522:	4651      	mov	r1, sl
 8005524:	ebb2 0801 	subs.w	r8, r2, r1
 8005528:	4659      	mov	r1, fp
 800552a:	eb63 0901 	sbc.w	r9, r3, r1
 800552e:	f04f 0200 	mov.w	r2, #0
 8005532:	f04f 0300 	mov.w	r3, #0
 8005536:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800553a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800553e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005542:	4690      	mov	r8, r2
 8005544:	4699      	mov	r9, r3
 8005546:	4623      	mov	r3, r4
 8005548:	eb18 0303 	adds.w	r3, r8, r3
 800554c:	60bb      	str	r3, [r7, #8]
 800554e:	462b      	mov	r3, r5
 8005550:	eb49 0303 	adc.w	r3, r9, r3
 8005554:	60fb      	str	r3, [r7, #12]
 8005556:	f04f 0200 	mov.w	r2, #0
 800555a:	f04f 0300 	mov.w	r3, #0
 800555e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005562:	4629      	mov	r1, r5
 8005564:	024b      	lsls	r3, r1, #9
 8005566:	4621      	mov	r1, r4
 8005568:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800556c:	4621      	mov	r1, r4
 800556e:	024a      	lsls	r2, r1, #9
 8005570:	4610      	mov	r0, r2
 8005572:	4619      	mov	r1, r3
 8005574:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005576:	2200      	movs	r2, #0
 8005578:	62bb      	str	r3, [r7, #40]	@ 0x28
 800557a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800557c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005580:	f7fa fe36 	bl	80001f0 <__aeabi_uldivmod>
 8005584:	4602      	mov	r2, r0
 8005586:	460b      	mov	r3, r1
 8005588:	4613      	mov	r3, r2
 800558a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800558c:	e058      	b.n	8005640 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800558e:	4b38      	ldr	r3, [pc, #224]	@ (8005670 <HAL_RCC_GetSysClockFreq+0x200>)
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	099b      	lsrs	r3, r3, #6
 8005594:	2200      	movs	r2, #0
 8005596:	4618      	mov	r0, r3
 8005598:	4611      	mov	r1, r2
 800559a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800559e:	623b      	str	r3, [r7, #32]
 80055a0:	2300      	movs	r3, #0
 80055a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80055a4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80055a8:	4642      	mov	r2, r8
 80055aa:	464b      	mov	r3, r9
 80055ac:	f04f 0000 	mov.w	r0, #0
 80055b0:	f04f 0100 	mov.w	r1, #0
 80055b4:	0159      	lsls	r1, r3, #5
 80055b6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80055ba:	0150      	lsls	r0, r2, #5
 80055bc:	4602      	mov	r2, r0
 80055be:	460b      	mov	r3, r1
 80055c0:	4641      	mov	r1, r8
 80055c2:	ebb2 0a01 	subs.w	sl, r2, r1
 80055c6:	4649      	mov	r1, r9
 80055c8:	eb63 0b01 	sbc.w	fp, r3, r1
 80055cc:	f04f 0200 	mov.w	r2, #0
 80055d0:	f04f 0300 	mov.w	r3, #0
 80055d4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80055d8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80055dc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80055e0:	ebb2 040a 	subs.w	r4, r2, sl
 80055e4:	eb63 050b 	sbc.w	r5, r3, fp
 80055e8:	f04f 0200 	mov.w	r2, #0
 80055ec:	f04f 0300 	mov.w	r3, #0
 80055f0:	00eb      	lsls	r3, r5, #3
 80055f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80055f6:	00e2      	lsls	r2, r4, #3
 80055f8:	4614      	mov	r4, r2
 80055fa:	461d      	mov	r5, r3
 80055fc:	4643      	mov	r3, r8
 80055fe:	18e3      	adds	r3, r4, r3
 8005600:	603b      	str	r3, [r7, #0]
 8005602:	464b      	mov	r3, r9
 8005604:	eb45 0303 	adc.w	r3, r5, r3
 8005608:	607b      	str	r3, [r7, #4]
 800560a:	f04f 0200 	mov.w	r2, #0
 800560e:	f04f 0300 	mov.w	r3, #0
 8005612:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005616:	4629      	mov	r1, r5
 8005618:	028b      	lsls	r3, r1, #10
 800561a:	4621      	mov	r1, r4
 800561c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005620:	4621      	mov	r1, r4
 8005622:	028a      	lsls	r2, r1, #10
 8005624:	4610      	mov	r0, r2
 8005626:	4619      	mov	r1, r3
 8005628:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800562a:	2200      	movs	r2, #0
 800562c:	61bb      	str	r3, [r7, #24]
 800562e:	61fa      	str	r2, [r7, #28]
 8005630:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005634:	f7fa fddc 	bl	80001f0 <__aeabi_uldivmod>
 8005638:	4602      	mov	r2, r0
 800563a:	460b      	mov	r3, r1
 800563c:	4613      	mov	r3, r2
 800563e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005640:	4b0b      	ldr	r3, [pc, #44]	@ (8005670 <HAL_RCC_GetSysClockFreq+0x200>)
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	0c1b      	lsrs	r3, r3, #16
 8005646:	f003 0303 	and.w	r3, r3, #3
 800564a:	3301      	adds	r3, #1
 800564c:	005b      	lsls	r3, r3, #1
 800564e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8005650:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005652:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005654:	fbb2 f3f3 	udiv	r3, r2, r3
 8005658:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800565a:	e002      	b.n	8005662 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800565c:	4b05      	ldr	r3, [pc, #20]	@ (8005674 <HAL_RCC_GetSysClockFreq+0x204>)
 800565e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005660:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005662:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005664:	4618      	mov	r0, r3
 8005666:	3750      	adds	r7, #80	@ 0x50
 8005668:	46bd      	mov	sp, r7
 800566a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800566e:	bf00      	nop
 8005670:	40023800 	.word	0x40023800
 8005674:	00f42400 	.word	0x00f42400
 8005678:	007a1200 	.word	0x007a1200

0800567c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800567c:	b480      	push	{r7}
 800567e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005680:	4b03      	ldr	r3, [pc, #12]	@ (8005690 <HAL_RCC_GetHCLKFreq+0x14>)
 8005682:	681b      	ldr	r3, [r3, #0]
}
 8005684:	4618      	mov	r0, r3
 8005686:	46bd      	mov	sp, r7
 8005688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568c:	4770      	bx	lr
 800568e:	bf00      	nop
 8005690:	20000000 	.word	0x20000000

08005694 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005698:	f7ff fff0 	bl	800567c <HAL_RCC_GetHCLKFreq>
 800569c:	4602      	mov	r2, r0
 800569e:	4b05      	ldr	r3, [pc, #20]	@ (80056b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	0a9b      	lsrs	r3, r3, #10
 80056a4:	f003 0307 	and.w	r3, r3, #7
 80056a8:	4903      	ldr	r1, [pc, #12]	@ (80056b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80056aa:	5ccb      	ldrb	r3, [r1, r3]
 80056ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	bd80      	pop	{r7, pc}
 80056b4:	40023800 	.word	0x40023800
 80056b8:	0800dddc 	.word	0x0800dddc

080056bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80056c0:	f7ff ffdc 	bl	800567c <HAL_RCC_GetHCLKFreq>
 80056c4:	4602      	mov	r2, r0
 80056c6:	4b05      	ldr	r3, [pc, #20]	@ (80056dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	0b5b      	lsrs	r3, r3, #13
 80056cc:	f003 0307 	and.w	r3, r3, #7
 80056d0:	4903      	ldr	r1, [pc, #12]	@ (80056e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80056d2:	5ccb      	ldrb	r3, [r1, r3]
 80056d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056d8:	4618      	mov	r0, r3
 80056da:	bd80      	pop	{r7, pc}
 80056dc:	40023800 	.word	0x40023800
 80056e0:	0800dddc 	.word	0x0800dddc

080056e4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b083      	sub	sp, #12
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
 80056ec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	220f      	movs	r2, #15
 80056f2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80056f4:	4b12      	ldr	r3, [pc, #72]	@ (8005740 <HAL_RCC_GetClockConfig+0x5c>)
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	f003 0203 	and.w	r2, r3, #3
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005700:	4b0f      	ldr	r3, [pc, #60]	@ (8005740 <HAL_RCC_GetClockConfig+0x5c>)
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800570c:	4b0c      	ldr	r3, [pc, #48]	@ (8005740 <HAL_RCC_GetClockConfig+0x5c>)
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005718:	4b09      	ldr	r3, [pc, #36]	@ (8005740 <HAL_RCC_GetClockConfig+0x5c>)
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	08db      	lsrs	r3, r3, #3
 800571e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005726:	4b07      	ldr	r3, [pc, #28]	@ (8005744 <HAL_RCC_GetClockConfig+0x60>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f003 020f 	and.w	r2, r3, #15
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	601a      	str	r2, [r3, #0]
}
 8005732:	bf00      	nop
 8005734:	370c      	adds	r7, #12
 8005736:	46bd      	mov	sp, r7
 8005738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573c:	4770      	bx	lr
 800573e:	bf00      	nop
 8005740:	40023800 	.word	0x40023800
 8005744:	40023c00 	.word	0x40023c00

08005748 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b086      	sub	sp, #24
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005750:	2300      	movs	r3, #0
 8005752:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005754:	2300      	movs	r3, #0
 8005756:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f003 0301 	and.w	r3, r3, #1
 8005760:	2b00      	cmp	r3, #0
 8005762:	d10b      	bne.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800576c:	2b00      	cmp	r3, #0
 800576e:	d105      	bne.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f003 0340 	and.w	r3, r3, #64	@ 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005778:	2b00      	cmp	r3, #0
 800577a:	d075      	beq.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800577c:	4b91      	ldr	r3, [pc, #580]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800577e:	2200      	movs	r2, #0
 8005780:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005782:	f7fb ffb7 	bl	80016f4 <HAL_GetTick>
 8005786:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005788:	e008      	b.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800578a:	f7fb ffb3 	bl	80016f4 <HAL_GetTick>
 800578e:	4602      	mov	r2, r0
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	1ad3      	subs	r3, r2, r3
 8005794:	2b02      	cmp	r3, #2
 8005796:	d901      	bls.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005798:	2303      	movs	r3, #3
 800579a:	e189      	b.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800579c:	4b8a      	ldr	r3, [pc, #552]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d1f0      	bne.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f003 0301 	and.w	r3, r3, #1
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d009      	beq.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	019a      	lsls	r2, r3, #6
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	689b      	ldr	r3, [r3, #8]
 80057be:	071b      	lsls	r3, r3, #28
 80057c0:	4981      	ldr	r1, [pc, #516]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80057c2:	4313      	orrs	r3, r2
 80057c4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f003 0302 	and.w	r3, r3, #2
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d01f      	beq.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80057d4:	4b7c      	ldr	r3, [pc, #496]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80057d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80057da:	0f1b      	lsrs	r3, r3, #28
 80057dc:	f003 0307 	and.w	r3, r3, #7
 80057e0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	019a      	lsls	r2, r3, #6
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	68db      	ldr	r3, [r3, #12]
 80057ec:	061b      	lsls	r3, r3, #24
 80057ee:	431a      	orrs	r2, r3
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	071b      	lsls	r3, r3, #28
 80057f4:	4974      	ldr	r1, [pc, #464]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80057f6:	4313      	orrs	r3, r2
 80057f8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80057fc:	4b72      	ldr	r3, [pc, #456]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80057fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005802:	f023 021f 	bic.w	r2, r3, #31
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	69db      	ldr	r3, [r3, #28]
 800580a:	3b01      	subs	r3, #1
 800580c:	496e      	ldr	r1, [pc, #440]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800580e:	4313      	orrs	r3, r2
 8005810:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800581c:	2b00      	cmp	r3, #0
 800581e:	d00d      	beq.n	800583c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	019a      	lsls	r2, r3, #6
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	68db      	ldr	r3, [r3, #12]
 800582a:	061b      	lsls	r3, r3, #24
 800582c:	431a      	orrs	r2, r3
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	689b      	ldr	r3, [r3, #8]
 8005832:	071b      	lsls	r3, r3, #28
 8005834:	4964      	ldr	r1, [pc, #400]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005836:	4313      	orrs	r3, r2
 8005838:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800583c:	4b61      	ldr	r3, [pc, #388]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800583e:	2201      	movs	r2, #1
 8005840:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005842:	f7fb ff57 	bl	80016f4 <HAL_GetTick>
 8005846:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005848:	e008      	b.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800584a:	f7fb ff53 	bl	80016f4 <HAL_GetTick>
 800584e:	4602      	mov	r2, r0
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	1ad3      	subs	r3, r2, r3
 8005854:	2b02      	cmp	r3, #2
 8005856:	d901      	bls.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005858:	2303      	movs	r3, #3
 800585a:	e129      	b.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800585c:	4b5a      	ldr	r3, [pc, #360]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005864:	2b00      	cmp	r3, #0
 8005866:	d0f0      	beq.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f003 0304 	and.w	r3, r3, #4
 8005870:	2b00      	cmp	r3, #0
 8005872:	d105      	bne.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800587c:	2b00      	cmp	r3, #0
 800587e:	d079      	beq.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005880:	4b52      	ldr	r3, [pc, #328]	@ (80059cc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005882:	2200      	movs	r2, #0
 8005884:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005886:	f7fb ff35 	bl	80016f4 <HAL_GetTick>
 800588a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800588c:	e008      	b.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800588e:	f7fb ff31 	bl	80016f4 <HAL_GetTick>
 8005892:	4602      	mov	r2, r0
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	1ad3      	subs	r3, r2, r3
 8005898:	2b02      	cmp	r3, #2
 800589a:	d901      	bls.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800589c:	2303      	movs	r3, #3
 800589e:	e107      	b.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80058a0:	4b49      	ldr	r3, [pc, #292]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80058a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80058ac:	d0ef      	beq.n	800588e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f003 0304 	and.w	r3, r3, #4
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d020      	beq.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80058ba:	4b43      	ldr	r3, [pc, #268]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80058bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058c0:	0f1b      	lsrs	r3, r3, #28
 80058c2:	f003 0307 	and.w	r3, r3, #7
 80058c6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	691b      	ldr	r3, [r3, #16]
 80058cc:	019a      	lsls	r2, r3, #6
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	695b      	ldr	r3, [r3, #20]
 80058d2:	061b      	lsls	r3, r3, #24
 80058d4:	431a      	orrs	r2, r3
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	071b      	lsls	r3, r3, #28
 80058da:	493b      	ldr	r1, [pc, #236]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80058dc:	4313      	orrs	r3, r2
 80058de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80058e2:	4b39      	ldr	r3, [pc, #228]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80058e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80058e8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6a1b      	ldr	r3, [r3, #32]
 80058f0:	3b01      	subs	r3, #1
 80058f2:	021b      	lsls	r3, r3, #8
 80058f4:	4934      	ldr	r1, [pc, #208]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80058f6:	4313      	orrs	r3, r2
 80058f8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f003 0308 	and.w	r3, r3, #8
 8005904:	2b00      	cmp	r3, #0
 8005906:	d01e      	beq.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005908:	4b2f      	ldr	r3, [pc, #188]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800590a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800590e:	0e1b      	lsrs	r3, r3, #24
 8005910:	f003 030f 	and.w	r3, r3, #15
 8005914:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	691b      	ldr	r3, [r3, #16]
 800591a:	019a      	lsls	r2, r3, #6
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	061b      	lsls	r3, r3, #24
 8005920:	431a      	orrs	r2, r3
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	699b      	ldr	r3, [r3, #24]
 8005926:	071b      	lsls	r3, r3, #28
 8005928:	4927      	ldr	r1, [pc, #156]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800592a:	4313      	orrs	r3, r2
 800592c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005930:	4b25      	ldr	r3, [pc, #148]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005932:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005936:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800593e:	4922      	ldr	r1, [pc, #136]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005940:	4313      	orrs	r3, r2
 8005942:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005946:	4b21      	ldr	r3, [pc, #132]	@ (80059cc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005948:	2201      	movs	r2, #1
 800594a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800594c:	f7fb fed2 	bl	80016f4 <HAL_GetTick>
 8005950:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005952:	e008      	b.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005954:	f7fb fece 	bl	80016f4 <HAL_GetTick>
 8005958:	4602      	mov	r2, r0
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	1ad3      	subs	r3, r2, r3
 800595e:	2b02      	cmp	r3, #2
 8005960:	d901      	bls.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005962:	2303      	movs	r3, #3
 8005964:	e0a4      	b.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005966:	4b18      	ldr	r3, [pc, #96]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800596e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005972:	d1ef      	bne.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f003 0320 	and.w	r3, r3, #32
 800597c:	2b00      	cmp	r3, #0
 800597e:	f000 808b 	beq.w	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005982:	2300      	movs	r3, #0
 8005984:	60fb      	str	r3, [r7, #12]
 8005986:	4b10      	ldr	r3, [pc, #64]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800598a:	4a0f      	ldr	r2, [pc, #60]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800598c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005990:	6413      	str	r3, [r2, #64]	@ 0x40
 8005992:	4b0d      	ldr	r3, [pc, #52]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005996:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800599a:	60fb      	str	r3, [r7, #12]
 800599c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800599e:	4b0c      	ldr	r3, [pc, #48]	@ (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a0b      	ldr	r2, [pc, #44]	@ (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80059a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80059a8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80059aa:	f7fb fea3 	bl	80016f4 <HAL_GetTick>
 80059ae:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80059b0:	e010      	b.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80059b2:	f7fb fe9f 	bl	80016f4 <HAL_GetTick>
 80059b6:	4602      	mov	r2, r0
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	1ad3      	subs	r3, r2, r3
 80059bc:	2b02      	cmp	r3, #2
 80059be:	d909      	bls.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80059c0:	2303      	movs	r3, #3
 80059c2:	e075      	b.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80059c4:	42470068 	.word	0x42470068
 80059c8:	40023800 	.word	0x40023800
 80059cc:	42470070 	.word	0x42470070
 80059d0:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80059d4:	4b38      	ldr	r3, [pc, #224]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d0e8      	beq.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80059e0:	4b36      	ldr	r3, [pc, #216]	@ (8005abc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80059e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059e4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80059e8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d02f      	beq.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059f4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80059f8:	693a      	ldr	r2, [r7, #16]
 80059fa:	429a      	cmp	r2, r3
 80059fc:	d028      	beq.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80059fe:	4b2f      	ldr	r3, [pc, #188]	@ (8005abc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005a00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a02:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a06:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005a08:	4b2d      	ldr	r3, [pc, #180]	@ (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005a0e:	4b2c      	ldr	r3, [pc, #176]	@ (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005a10:	2200      	movs	r2, #0
 8005a12:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005a14:	4a29      	ldr	r2, [pc, #164]	@ (8005abc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005a1a:	4b28      	ldr	r3, [pc, #160]	@ (8005abc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005a1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a1e:	f003 0301 	and.w	r3, r3, #1
 8005a22:	2b01      	cmp	r3, #1
 8005a24:	d114      	bne.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005a26:	f7fb fe65 	bl	80016f4 <HAL_GetTick>
 8005a2a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a2c:	e00a      	b.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a2e:	f7fb fe61 	bl	80016f4 <HAL_GetTick>
 8005a32:	4602      	mov	r2, r0
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	1ad3      	subs	r3, r2, r3
 8005a38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d901      	bls.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8005a40:	2303      	movs	r3, #3
 8005a42:	e035      	b.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a44:	4b1d      	ldr	r3, [pc, #116]	@ (8005abc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005a46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a48:	f003 0302 	and.w	r3, r3, #2
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d0ee      	beq.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a54:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a58:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005a5c:	d10d      	bne.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005a5e:	4b17      	ldr	r3, [pc, #92]	@ (8005abc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a6a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005a6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a72:	4912      	ldr	r1, [pc, #72]	@ (8005abc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005a74:	4313      	orrs	r3, r2
 8005a76:	608b      	str	r3, [r1, #8]
 8005a78:	e005      	b.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8005a7a:	4b10      	ldr	r3, [pc, #64]	@ (8005abc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	4a0f      	ldr	r2, [pc, #60]	@ (8005abc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005a80:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005a84:	6093      	str	r3, [r2, #8]
 8005a86:	4b0d      	ldr	r3, [pc, #52]	@ (8005abc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005a88:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a92:	490a      	ldr	r1, [pc, #40]	@ (8005abc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005a94:	4313      	orrs	r3, r2
 8005a96:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f003 0310 	and.w	r3, r3, #16
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d004      	beq.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8005aaa:	4b06      	ldr	r3, [pc, #24]	@ (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005aac:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005aae:	2300      	movs	r3, #0
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3718      	adds	r7, #24
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}
 8005ab8:	40007000 	.word	0x40007000
 8005abc:	40023800 	.word	0x40023800
 8005ac0:	42470e40 	.word	0x42470e40
 8005ac4:	424711e0 	.word	0x424711e0

08005ac8 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b082      	sub	sp, #8
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d101      	bne.n	8005adc <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	e025      	b.n	8005b28 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005ae2:	b2db      	uxtb	r3, r3
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d106      	bne.n	8005af6 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2200      	movs	r2, #0
 8005aec:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	f7fb fc87 	bl	8001404 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2202      	movs	r2, #2
 8005afa:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	3304      	adds	r3, #4
 8005b06:	4619      	mov	r1, r3
 8005b08:	4610      	mov	r0, r2
 8005b0a:	f000 ffd3 	bl	8006ab4 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6818      	ldr	r0, [r3, #0]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	461a      	mov	r2, r3
 8005b18:	6839      	ldr	r1, [r7, #0]
 8005b1a:	f001 f828 	bl	8006b6e <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2201      	movs	r2, #1
 8005b22:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8005b26:	2300      	movs	r3, #0
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3708      	adds	r7, #8
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}

08005b30 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b082      	sub	sp, #8
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d101      	bne.n	8005b42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	e07b      	b.n	8005c3a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d108      	bne.n	8005b5c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005b52:	d009      	beq.n	8005b68 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2200      	movs	r2, #0
 8005b58:	61da      	str	r2, [r3, #28]
 8005b5a:	e005      	b.n	8005b68 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2200      	movs	r2, #0
 8005b66:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005b74:	b2db      	uxtb	r3, r3
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d106      	bne.n	8005b88 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f7fb fafa 	bl	800117c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2202      	movs	r2, #2
 8005b8c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	681a      	ldr	r2, [r3, #0]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005b9e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005bb0:	431a      	orrs	r2, r3
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	68db      	ldr	r3, [r3, #12]
 8005bb6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005bba:	431a      	orrs	r2, r3
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	691b      	ldr	r3, [r3, #16]
 8005bc0:	f003 0302 	and.w	r3, r3, #2
 8005bc4:	431a      	orrs	r2, r3
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	695b      	ldr	r3, [r3, #20]
 8005bca:	f003 0301 	and.w	r3, r3, #1
 8005bce:	431a      	orrs	r2, r3
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	699b      	ldr	r3, [r3, #24]
 8005bd4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005bd8:	431a      	orrs	r2, r3
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	69db      	ldr	r3, [r3, #28]
 8005bde:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005be2:	431a      	orrs	r2, r3
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6a1b      	ldr	r3, [r3, #32]
 8005be8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bec:	ea42 0103 	orr.w	r1, r2, r3
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bf4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	430a      	orrs	r2, r1
 8005bfe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	699b      	ldr	r3, [r3, #24]
 8005c04:	0c1b      	lsrs	r3, r3, #16
 8005c06:	f003 0104 	and.w	r1, r3, #4
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c0e:	f003 0210 	and.w	r2, r3, #16
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	430a      	orrs	r2, r1
 8005c18:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	69da      	ldr	r2, [r3, #28]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005c28:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2201      	movs	r2, #1
 8005c34:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005c38:	2300      	movs	r3, #0
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3708      	adds	r7, #8
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}

08005c42 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c42:	b580      	push	{r7, lr}
 8005c44:	b082      	sub	sp, #8
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d101      	bne.n	8005c54 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c50:	2301      	movs	r3, #1
 8005c52:	e041      	b.n	8005cd8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c5a:	b2db      	uxtb	r3, r3
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d106      	bne.n	8005c6e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2200      	movs	r2, #0
 8005c64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f7fb facf 	bl	800120c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2202      	movs	r2, #2
 8005c72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681a      	ldr	r2, [r3, #0]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	3304      	adds	r3, #4
 8005c7e:	4619      	mov	r1, r3
 8005c80:	4610      	mov	r0, r2
 8005c82:	f000 fa7d 	bl	8006180 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2201      	movs	r2, #1
 8005c8a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2201      	movs	r2, #1
 8005c92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2201      	movs	r2, #1
 8005c9a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2201      	movs	r2, #1
 8005caa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2201      	movs	r2, #1
 8005cba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2201      	movs	r2, #1
 8005cca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005cd6:	2300      	movs	r3, #0
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	3708      	adds	r7, #8
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}

08005ce0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b085      	sub	sp, #20
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005cee:	b2db      	uxtb	r3, r3
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d001      	beq.n	8005cf8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	e04e      	b.n	8005d96 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2202      	movs	r2, #2
 8005cfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	68da      	ldr	r2, [r3, #12]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f042 0201 	orr.w	r2, r2, #1
 8005d0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a23      	ldr	r2, [pc, #140]	@ (8005da4 <HAL_TIM_Base_Start_IT+0xc4>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d022      	beq.n	8005d60 <HAL_TIM_Base_Start_IT+0x80>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d22:	d01d      	beq.n	8005d60 <HAL_TIM_Base_Start_IT+0x80>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a1f      	ldr	r2, [pc, #124]	@ (8005da8 <HAL_TIM_Base_Start_IT+0xc8>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d018      	beq.n	8005d60 <HAL_TIM_Base_Start_IT+0x80>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a1e      	ldr	r2, [pc, #120]	@ (8005dac <HAL_TIM_Base_Start_IT+0xcc>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d013      	beq.n	8005d60 <HAL_TIM_Base_Start_IT+0x80>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a1c      	ldr	r2, [pc, #112]	@ (8005db0 <HAL_TIM_Base_Start_IT+0xd0>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d00e      	beq.n	8005d60 <HAL_TIM_Base_Start_IT+0x80>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a1b      	ldr	r2, [pc, #108]	@ (8005db4 <HAL_TIM_Base_Start_IT+0xd4>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d009      	beq.n	8005d60 <HAL_TIM_Base_Start_IT+0x80>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a19      	ldr	r2, [pc, #100]	@ (8005db8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d004      	beq.n	8005d60 <HAL_TIM_Base_Start_IT+0x80>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a18      	ldr	r2, [pc, #96]	@ (8005dbc <HAL_TIM_Base_Start_IT+0xdc>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d111      	bne.n	8005d84 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	689b      	ldr	r3, [r3, #8]
 8005d66:	f003 0307 	and.w	r3, r3, #7
 8005d6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2b06      	cmp	r3, #6
 8005d70:	d010      	beq.n	8005d94 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	681a      	ldr	r2, [r3, #0]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f042 0201 	orr.w	r2, r2, #1
 8005d80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d82:	e007      	b.n	8005d94 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	681a      	ldr	r2, [r3, #0]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f042 0201 	orr.w	r2, r2, #1
 8005d92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005d94:	2300      	movs	r3, #0
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3714      	adds	r7, #20
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da0:	4770      	bx	lr
 8005da2:	bf00      	nop
 8005da4:	40010000 	.word	0x40010000
 8005da8:	40000400 	.word	0x40000400
 8005dac:	40000800 	.word	0x40000800
 8005db0:	40000c00 	.word	0x40000c00
 8005db4:	40010400 	.word	0x40010400
 8005db8:	40014000 	.word	0x40014000
 8005dbc:	40001800 	.word	0x40001800

08005dc0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b084      	sub	sp, #16
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	68db      	ldr	r3, [r3, #12]
 8005dce:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	691b      	ldr	r3, [r3, #16]
 8005dd6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	f003 0302 	and.w	r3, r3, #2
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d020      	beq.n	8005e24 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	f003 0302 	and.w	r3, r3, #2
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d01b      	beq.n	8005e24 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f06f 0202 	mvn.w	r2, #2
 8005df4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2201      	movs	r2, #1
 8005dfa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	699b      	ldr	r3, [r3, #24]
 8005e02:	f003 0303 	and.w	r3, r3, #3
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d003      	beq.n	8005e12 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f000 f999 	bl	8006142 <HAL_TIM_IC_CaptureCallback>
 8005e10:	e005      	b.n	8005e1e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f000 f98b 	bl	800612e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f000 f99c 	bl	8006156 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2200      	movs	r2, #0
 8005e22:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	f003 0304 	and.w	r3, r3, #4
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d020      	beq.n	8005e70 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	f003 0304 	and.w	r3, r3, #4
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d01b      	beq.n	8005e70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f06f 0204 	mvn.w	r2, #4
 8005e40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2202      	movs	r2, #2
 8005e46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	699b      	ldr	r3, [r3, #24]
 8005e4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d003      	beq.n	8005e5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f000 f973 	bl	8006142 <HAL_TIM_IC_CaptureCallback>
 8005e5c:	e005      	b.n	8005e6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f000 f965 	bl	800612e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	f000 f976 	bl	8006156 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	f003 0308 	and.w	r3, r3, #8
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d020      	beq.n	8005ebc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	f003 0308 	and.w	r3, r3, #8
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d01b      	beq.n	8005ebc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f06f 0208 	mvn.w	r2, #8
 8005e8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2204      	movs	r2, #4
 8005e92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	69db      	ldr	r3, [r3, #28]
 8005e9a:	f003 0303 	and.w	r3, r3, #3
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d003      	beq.n	8005eaa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f000 f94d 	bl	8006142 <HAL_TIM_IC_CaptureCallback>
 8005ea8:	e005      	b.n	8005eb6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f000 f93f 	bl	800612e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f000 f950 	bl	8006156 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	f003 0310 	and.w	r3, r3, #16
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d020      	beq.n	8005f08 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	f003 0310 	and.w	r3, r3, #16
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d01b      	beq.n	8005f08 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f06f 0210 	mvn.w	r2, #16
 8005ed8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2208      	movs	r2, #8
 8005ede:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	69db      	ldr	r3, [r3, #28]
 8005ee6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d003      	beq.n	8005ef6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f000 f927 	bl	8006142 <HAL_TIM_IC_CaptureCallback>
 8005ef4:	e005      	b.n	8005f02 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f000 f919 	bl	800612e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f000 f92a 	bl	8006156 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2200      	movs	r2, #0
 8005f06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	f003 0301 	and.w	r3, r3, #1
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d00c      	beq.n	8005f2c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	f003 0301 	and.w	r3, r3, #1
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d007      	beq.n	8005f2c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f06f 0201 	mvn.w	r2, #1
 8005f24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f7fa ff00 	bl	8000d2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d00c      	beq.n	8005f50 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d007      	beq.n	8005f50 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005f48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f000 fae4 	bl	8006518 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d00c      	beq.n	8005f74 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d007      	beq.n	8005f74 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005f6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f000 f8fb 	bl	800616a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	f003 0320 	and.w	r3, r3, #32
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d00c      	beq.n	8005f98 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	f003 0320 	and.w	r3, r3, #32
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d007      	beq.n	8005f98 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f06f 0220 	mvn.w	r2, #32
 8005f90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f000 fab6 	bl	8006504 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f98:	bf00      	nop
 8005f9a:	3710      	adds	r7, #16
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bd80      	pop	{r7, pc}

08005fa0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b084      	sub	sp, #16
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005faa:	2300      	movs	r3, #0
 8005fac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005fb4:	2b01      	cmp	r3, #1
 8005fb6:	d101      	bne.n	8005fbc <HAL_TIM_ConfigClockSource+0x1c>
 8005fb8:	2302      	movs	r3, #2
 8005fba:	e0b4      	b.n	8006126 <HAL_TIM_ConfigClockSource+0x186>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2202      	movs	r2, #2
 8005fc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005fda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005fe2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	68ba      	ldr	r2, [r7, #8]
 8005fea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ff4:	d03e      	beq.n	8006074 <HAL_TIM_ConfigClockSource+0xd4>
 8005ff6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ffa:	f200 8087 	bhi.w	800610c <HAL_TIM_ConfigClockSource+0x16c>
 8005ffe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006002:	f000 8086 	beq.w	8006112 <HAL_TIM_ConfigClockSource+0x172>
 8006006:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800600a:	d87f      	bhi.n	800610c <HAL_TIM_ConfigClockSource+0x16c>
 800600c:	2b70      	cmp	r3, #112	@ 0x70
 800600e:	d01a      	beq.n	8006046 <HAL_TIM_ConfigClockSource+0xa6>
 8006010:	2b70      	cmp	r3, #112	@ 0x70
 8006012:	d87b      	bhi.n	800610c <HAL_TIM_ConfigClockSource+0x16c>
 8006014:	2b60      	cmp	r3, #96	@ 0x60
 8006016:	d050      	beq.n	80060ba <HAL_TIM_ConfigClockSource+0x11a>
 8006018:	2b60      	cmp	r3, #96	@ 0x60
 800601a:	d877      	bhi.n	800610c <HAL_TIM_ConfigClockSource+0x16c>
 800601c:	2b50      	cmp	r3, #80	@ 0x50
 800601e:	d03c      	beq.n	800609a <HAL_TIM_ConfigClockSource+0xfa>
 8006020:	2b50      	cmp	r3, #80	@ 0x50
 8006022:	d873      	bhi.n	800610c <HAL_TIM_ConfigClockSource+0x16c>
 8006024:	2b40      	cmp	r3, #64	@ 0x40
 8006026:	d058      	beq.n	80060da <HAL_TIM_ConfigClockSource+0x13a>
 8006028:	2b40      	cmp	r3, #64	@ 0x40
 800602a:	d86f      	bhi.n	800610c <HAL_TIM_ConfigClockSource+0x16c>
 800602c:	2b30      	cmp	r3, #48	@ 0x30
 800602e:	d064      	beq.n	80060fa <HAL_TIM_ConfigClockSource+0x15a>
 8006030:	2b30      	cmp	r3, #48	@ 0x30
 8006032:	d86b      	bhi.n	800610c <HAL_TIM_ConfigClockSource+0x16c>
 8006034:	2b20      	cmp	r3, #32
 8006036:	d060      	beq.n	80060fa <HAL_TIM_ConfigClockSource+0x15a>
 8006038:	2b20      	cmp	r3, #32
 800603a:	d867      	bhi.n	800610c <HAL_TIM_ConfigClockSource+0x16c>
 800603c:	2b00      	cmp	r3, #0
 800603e:	d05c      	beq.n	80060fa <HAL_TIM_ConfigClockSource+0x15a>
 8006040:	2b10      	cmp	r3, #16
 8006042:	d05a      	beq.n	80060fa <HAL_TIM_ConfigClockSource+0x15a>
 8006044:	e062      	b.n	800610c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006056:	f000 f9b9 	bl	80063cc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006068:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	68ba      	ldr	r2, [r7, #8]
 8006070:	609a      	str	r2, [r3, #8]
      break;
 8006072:	e04f      	b.n	8006114 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006084:	f000 f9a2 	bl	80063cc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	689a      	ldr	r2, [r3, #8]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006096:	609a      	str	r2, [r3, #8]
      break;
 8006098:	e03c      	b.n	8006114 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80060a6:	461a      	mov	r2, r3
 80060a8:	f000 f916 	bl	80062d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	2150      	movs	r1, #80	@ 0x50
 80060b2:	4618      	mov	r0, r3
 80060b4:	f000 f96f 	bl	8006396 <TIM_ITRx_SetConfig>
      break;
 80060b8:	e02c      	b.n	8006114 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80060c6:	461a      	mov	r2, r3
 80060c8:	f000 f935 	bl	8006336 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	2160      	movs	r1, #96	@ 0x60
 80060d2:	4618      	mov	r0, r3
 80060d4:	f000 f95f 	bl	8006396 <TIM_ITRx_SetConfig>
      break;
 80060d8:	e01c      	b.n	8006114 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80060e6:	461a      	mov	r2, r3
 80060e8:	f000 f8f6 	bl	80062d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	2140      	movs	r1, #64	@ 0x40
 80060f2:	4618      	mov	r0, r3
 80060f4:	f000 f94f 	bl	8006396 <TIM_ITRx_SetConfig>
      break;
 80060f8:	e00c      	b.n	8006114 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681a      	ldr	r2, [r3, #0]
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4619      	mov	r1, r3
 8006104:	4610      	mov	r0, r2
 8006106:	f000 f946 	bl	8006396 <TIM_ITRx_SetConfig>
      break;
 800610a:	e003      	b.n	8006114 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800610c:	2301      	movs	r3, #1
 800610e:	73fb      	strb	r3, [r7, #15]
      break;
 8006110:	e000      	b.n	8006114 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006112:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2201      	movs	r2, #1
 8006118:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2200      	movs	r2, #0
 8006120:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006124:	7bfb      	ldrb	r3, [r7, #15]
}
 8006126:	4618      	mov	r0, r3
 8006128:	3710      	adds	r7, #16
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}

0800612e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800612e:	b480      	push	{r7}
 8006130:	b083      	sub	sp, #12
 8006132:	af00      	add	r7, sp, #0
 8006134:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006136:	bf00      	nop
 8006138:	370c      	adds	r7, #12
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr

08006142 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006142:	b480      	push	{r7}
 8006144:	b083      	sub	sp, #12
 8006146:	af00      	add	r7, sp, #0
 8006148:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800614a:	bf00      	nop
 800614c:	370c      	adds	r7, #12
 800614e:	46bd      	mov	sp, r7
 8006150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006154:	4770      	bx	lr

08006156 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006156:	b480      	push	{r7}
 8006158:	b083      	sub	sp, #12
 800615a:	af00      	add	r7, sp, #0
 800615c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800615e:	bf00      	nop
 8006160:	370c      	adds	r7, #12
 8006162:	46bd      	mov	sp, r7
 8006164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006168:	4770      	bx	lr

0800616a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800616a:	b480      	push	{r7}
 800616c:	b083      	sub	sp, #12
 800616e:	af00      	add	r7, sp, #0
 8006170:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006172:	bf00      	nop
 8006174:	370c      	adds	r7, #12
 8006176:	46bd      	mov	sp, r7
 8006178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617c:	4770      	bx	lr
	...

08006180 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006180:	b480      	push	{r7}
 8006182:	b085      	sub	sp, #20
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
 8006188:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	4a46      	ldr	r2, [pc, #280]	@ (80062ac <TIM_Base_SetConfig+0x12c>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d013      	beq.n	80061c0 <TIM_Base_SetConfig+0x40>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800619e:	d00f      	beq.n	80061c0 <TIM_Base_SetConfig+0x40>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	4a43      	ldr	r2, [pc, #268]	@ (80062b0 <TIM_Base_SetConfig+0x130>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d00b      	beq.n	80061c0 <TIM_Base_SetConfig+0x40>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	4a42      	ldr	r2, [pc, #264]	@ (80062b4 <TIM_Base_SetConfig+0x134>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d007      	beq.n	80061c0 <TIM_Base_SetConfig+0x40>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	4a41      	ldr	r2, [pc, #260]	@ (80062b8 <TIM_Base_SetConfig+0x138>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d003      	beq.n	80061c0 <TIM_Base_SetConfig+0x40>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	4a40      	ldr	r2, [pc, #256]	@ (80062bc <TIM_Base_SetConfig+0x13c>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d108      	bne.n	80061d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	68fa      	ldr	r2, [r7, #12]
 80061ce:	4313      	orrs	r3, r2
 80061d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	4a35      	ldr	r2, [pc, #212]	@ (80062ac <TIM_Base_SetConfig+0x12c>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d02b      	beq.n	8006232 <TIM_Base_SetConfig+0xb2>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061e0:	d027      	beq.n	8006232 <TIM_Base_SetConfig+0xb2>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	4a32      	ldr	r2, [pc, #200]	@ (80062b0 <TIM_Base_SetConfig+0x130>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d023      	beq.n	8006232 <TIM_Base_SetConfig+0xb2>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	4a31      	ldr	r2, [pc, #196]	@ (80062b4 <TIM_Base_SetConfig+0x134>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d01f      	beq.n	8006232 <TIM_Base_SetConfig+0xb2>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	4a30      	ldr	r2, [pc, #192]	@ (80062b8 <TIM_Base_SetConfig+0x138>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d01b      	beq.n	8006232 <TIM_Base_SetConfig+0xb2>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	4a2f      	ldr	r2, [pc, #188]	@ (80062bc <TIM_Base_SetConfig+0x13c>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d017      	beq.n	8006232 <TIM_Base_SetConfig+0xb2>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	4a2e      	ldr	r2, [pc, #184]	@ (80062c0 <TIM_Base_SetConfig+0x140>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d013      	beq.n	8006232 <TIM_Base_SetConfig+0xb2>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	4a2d      	ldr	r2, [pc, #180]	@ (80062c4 <TIM_Base_SetConfig+0x144>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d00f      	beq.n	8006232 <TIM_Base_SetConfig+0xb2>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	4a2c      	ldr	r2, [pc, #176]	@ (80062c8 <TIM_Base_SetConfig+0x148>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d00b      	beq.n	8006232 <TIM_Base_SetConfig+0xb2>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	4a2b      	ldr	r2, [pc, #172]	@ (80062cc <TIM_Base_SetConfig+0x14c>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d007      	beq.n	8006232 <TIM_Base_SetConfig+0xb2>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	4a2a      	ldr	r2, [pc, #168]	@ (80062d0 <TIM_Base_SetConfig+0x150>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d003      	beq.n	8006232 <TIM_Base_SetConfig+0xb2>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	4a29      	ldr	r2, [pc, #164]	@ (80062d4 <TIM_Base_SetConfig+0x154>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d108      	bne.n	8006244 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006238:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	68db      	ldr	r3, [r3, #12]
 800623e:	68fa      	ldr	r2, [r7, #12]
 8006240:	4313      	orrs	r3, r2
 8006242:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	695b      	ldr	r3, [r3, #20]
 800624e:	4313      	orrs	r3, r2
 8006250:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	68fa      	ldr	r2, [r7, #12]
 8006256:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	689a      	ldr	r2, [r3, #8]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	681a      	ldr	r2, [r3, #0]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	4a10      	ldr	r2, [pc, #64]	@ (80062ac <TIM_Base_SetConfig+0x12c>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d003      	beq.n	8006278 <TIM_Base_SetConfig+0xf8>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	4a12      	ldr	r2, [pc, #72]	@ (80062bc <TIM_Base_SetConfig+0x13c>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d103      	bne.n	8006280 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	691a      	ldr	r2, [r3, #16]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2201      	movs	r2, #1
 8006284:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	691b      	ldr	r3, [r3, #16]
 800628a:	f003 0301 	and.w	r3, r3, #1
 800628e:	2b01      	cmp	r3, #1
 8006290:	d105      	bne.n	800629e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	691b      	ldr	r3, [r3, #16]
 8006296:	f023 0201 	bic.w	r2, r3, #1
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	611a      	str	r2, [r3, #16]
  }
}
 800629e:	bf00      	nop
 80062a0:	3714      	adds	r7, #20
 80062a2:	46bd      	mov	sp, r7
 80062a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a8:	4770      	bx	lr
 80062aa:	bf00      	nop
 80062ac:	40010000 	.word	0x40010000
 80062b0:	40000400 	.word	0x40000400
 80062b4:	40000800 	.word	0x40000800
 80062b8:	40000c00 	.word	0x40000c00
 80062bc:	40010400 	.word	0x40010400
 80062c0:	40014000 	.word	0x40014000
 80062c4:	40014400 	.word	0x40014400
 80062c8:	40014800 	.word	0x40014800
 80062cc:	40001800 	.word	0x40001800
 80062d0:	40001c00 	.word	0x40001c00
 80062d4:	40002000 	.word	0x40002000

080062d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062d8:	b480      	push	{r7}
 80062da:	b087      	sub	sp, #28
 80062dc:	af00      	add	r7, sp, #0
 80062de:	60f8      	str	r0, [r7, #12]
 80062e0:	60b9      	str	r1, [r7, #8]
 80062e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	6a1b      	ldr	r3, [r3, #32]
 80062e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	6a1b      	ldr	r3, [r3, #32]
 80062ee:	f023 0201 	bic.w	r2, r3, #1
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	699b      	ldr	r3, [r3, #24]
 80062fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006302:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	011b      	lsls	r3, r3, #4
 8006308:	693a      	ldr	r2, [r7, #16]
 800630a:	4313      	orrs	r3, r2
 800630c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	f023 030a 	bic.w	r3, r3, #10
 8006314:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006316:	697a      	ldr	r2, [r7, #20]
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	4313      	orrs	r3, r2
 800631c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	693a      	ldr	r2, [r7, #16]
 8006322:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	697a      	ldr	r2, [r7, #20]
 8006328:	621a      	str	r2, [r3, #32]
}
 800632a:	bf00      	nop
 800632c:	371c      	adds	r7, #28
 800632e:	46bd      	mov	sp, r7
 8006330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006334:	4770      	bx	lr

08006336 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006336:	b480      	push	{r7}
 8006338:	b087      	sub	sp, #28
 800633a:	af00      	add	r7, sp, #0
 800633c:	60f8      	str	r0, [r7, #12]
 800633e:	60b9      	str	r1, [r7, #8]
 8006340:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	6a1b      	ldr	r3, [r3, #32]
 8006346:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	6a1b      	ldr	r3, [r3, #32]
 800634c:	f023 0210 	bic.w	r2, r3, #16
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	699b      	ldr	r3, [r3, #24]
 8006358:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006360:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	031b      	lsls	r3, r3, #12
 8006366:	693a      	ldr	r2, [r7, #16]
 8006368:	4313      	orrs	r3, r2
 800636a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006372:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	011b      	lsls	r3, r3, #4
 8006378:	697a      	ldr	r2, [r7, #20]
 800637a:	4313      	orrs	r3, r2
 800637c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	693a      	ldr	r2, [r7, #16]
 8006382:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	697a      	ldr	r2, [r7, #20]
 8006388:	621a      	str	r2, [r3, #32]
}
 800638a:	bf00      	nop
 800638c:	371c      	adds	r7, #28
 800638e:	46bd      	mov	sp, r7
 8006390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006394:	4770      	bx	lr

08006396 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006396:	b480      	push	{r7}
 8006398:	b085      	sub	sp, #20
 800639a:	af00      	add	r7, sp, #0
 800639c:	6078      	str	r0, [r7, #4]
 800639e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	689b      	ldr	r3, [r3, #8]
 80063a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80063ae:	683a      	ldr	r2, [r7, #0]
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	4313      	orrs	r3, r2
 80063b4:	f043 0307 	orr.w	r3, r3, #7
 80063b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	68fa      	ldr	r2, [r7, #12]
 80063be:	609a      	str	r2, [r3, #8]
}
 80063c0:	bf00      	nop
 80063c2:	3714      	adds	r7, #20
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr

080063cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b087      	sub	sp, #28
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	60f8      	str	r0, [r7, #12]
 80063d4:	60b9      	str	r1, [r7, #8]
 80063d6:	607a      	str	r2, [r7, #4]
 80063d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	689b      	ldr	r3, [r3, #8]
 80063de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80063e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	021a      	lsls	r2, r3, #8
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	431a      	orrs	r2, r3
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	4313      	orrs	r3, r2
 80063f4:	697a      	ldr	r2, [r7, #20]
 80063f6:	4313      	orrs	r3, r2
 80063f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	697a      	ldr	r2, [r7, #20]
 80063fe:	609a      	str	r2, [r3, #8]
}
 8006400:	bf00      	nop
 8006402:	371c      	adds	r7, #28
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	4770      	bx	lr

0800640c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800640c:	b480      	push	{r7}
 800640e:	b085      	sub	sp, #20
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
 8006414:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800641c:	2b01      	cmp	r3, #1
 800641e:	d101      	bne.n	8006424 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006420:	2302      	movs	r3, #2
 8006422:	e05a      	b.n	80064da <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2201      	movs	r2, #1
 8006428:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2202      	movs	r2, #2
 8006430:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	689b      	ldr	r3, [r3, #8]
 8006442:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800644a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	68fa      	ldr	r2, [r7, #12]
 8006452:	4313      	orrs	r3, r2
 8006454:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	68fa      	ldr	r2, [r7, #12]
 800645c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a21      	ldr	r2, [pc, #132]	@ (80064e8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d022      	beq.n	80064ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006470:	d01d      	beq.n	80064ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a1d      	ldr	r2, [pc, #116]	@ (80064ec <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d018      	beq.n	80064ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a1b      	ldr	r2, [pc, #108]	@ (80064f0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d013      	beq.n	80064ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a1a      	ldr	r2, [pc, #104]	@ (80064f4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d00e      	beq.n	80064ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a18      	ldr	r2, [pc, #96]	@ (80064f8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d009      	beq.n	80064ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a17      	ldr	r2, [pc, #92]	@ (80064fc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d004      	beq.n	80064ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a15      	ldr	r2, [pc, #84]	@ (8006500 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d10c      	bne.n	80064c8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80064b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	68ba      	ldr	r2, [r7, #8]
 80064bc:	4313      	orrs	r3, r2
 80064be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	68ba      	ldr	r2, [r7, #8]
 80064c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2201      	movs	r2, #1
 80064cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2200      	movs	r2, #0
 80064d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80064d8:	2300      	movs	r3, #0
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3714      	adds	r7, #20
 80064de:	46bd      	mov	sp, r7
 80064e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e4:	4770      	bx	lr
 80064e6:	bf00      	nop
 80064e8:	40010000 	.word	0x40010000
 80064ec:	40000400 	.word	0x40000400
 80064f0:	40000800 	.word	0x40000800
 80064f4:	40000c00 	.word	0x40000c00
 80064f8:	40010400 	.word	0x40010400
 80064fc:	40014000 	.word	0x40014000
 8006500:	40001800 	.word	0x40001800

08006504 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006504:	b480      	push	{r7}
 8006506:	b083      	sub	sp, #12
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800650c:	bf00      	nop
 800650e:	370c      	adds	r7, #12
 8006510:	46bd      	mov	sp, r7
 8006512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006516:	4770      	bx	lr

08006518 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006518:	b480      	push	{r7}
 800651a:	b083      	sub	sp, #12
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006520:	bf00      	nop
 8006522:	370c      	adds	r7, #12
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr

0800652c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b082      	sub	sp, #8
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d101      	bne.n	800653e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800653a:	2301      	movs	r3, #1
 800653c:	e042      	b.n	80065c4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006544:	b2db      	uxtb	r3, r3
 8006546:	2b00      	cmp	r3, #0
 8006548:	d106      	bne.n	8006558 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2200      	movs	r2, #0
 800654e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f7fa fe7c 	bl	8001250 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2224      	movs	r2, #36	@ 0x24
 800655c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	68da      	ldr	r2, [r3, #12]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800656e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f000 f82b 	bl	80065cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	691a      	ldr	r2, [r3, #16]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006584:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	695a      	ldr	r2, [r3, #20]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006594:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	68da      	ldr	r2, [r3, #12]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80065a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2200      	movs	r2, #0
 80065aa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2220      	movs	r2, #32
 80065b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2220      	movs	r2, #32
 80065b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2200      	movs	r2, #0
 80065c0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80065c2:	2300      	movs	r3, #0
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	3708      	adds	r7, #8
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}

080065cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80065cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80065d0:	b0c0      	sub	sp, #256	@ 0x100
 80065d2:	af00      	add	r7, sp, #0
 80065d4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80065d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	691b      	ldr	r3, [r3, #16]
 80065e0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80065e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065e8:	68d9      	ldr	r1, [r3, #12]
 80065ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065ee:	681a      	ldr	r2, [r3, #0]
 80065f0:	ea40 0301 	orr.w	r3, r0, r1
 80065f4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80065f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065fa:	689a      	ldr	r2, [r3, #8]
 80065fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006600:	691b      	ldr	r3, [r3, #16]
 8006602:	431a      	orrs	r2, r3
 8006604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006608:	695b      	ldr	r3, [r3, #20]
 800660a:	431a      	orrs	r2, r3
 800660c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006610:	69db      	ldr	r3, [r3, #28]
 8006612:	4313      	orrs	r3, r2
 8006614:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	68db      	ldr	r3, [r3, #12]
 8006620:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006624:	f021 010c 	bic.w	r1, r1, #12
 8006628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800662c:	681a      	ldr	r2, [r3, #0]
 800662e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006632:	430b      	orrs	r3, r1
 8006634:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006636:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	695b      	ldr	r3, [r3, #20]
 800663e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006642:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006646:	6999      	ldr	r1, [r3, #24]
 8006648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800664c:	681a      	ldr	r2, [r3, #0]
 800664e:	ea40 0301 	orr.w	r3, r0, r1
 8006652:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006658:	681a      	ldr	r2, [r3, #0]
 800665a:	4b8f      	ldr	r3, [pc, #572]	@ (8006898 <UART_SetConfig+0x2cc>)
 800665c:	429a      	cmp	r2, r3
 800665e:	d005      	beq.n	800666c <UART_SetConfig+0xa0>
 8006660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006664:	681a      	ldr	r2, [r3, #0]
 8006666:	4b8d      	ldr	r3, [pc, #564]	@ (800689c <UART_SetConfig+0x2d0>)
 8006668:	429a      	cmp	r2, r3
 800666a:	d104      	bne.n	8006676 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800666c:	f7ff f826 	bl	80056bc <HAL_RCC_GetPCLK2Freq>
 8006670:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006674:	e003      	b.n	800667e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006676:	f7ff f80d 	bl	8005694 <HAL_RCC_GetPCLK1Freq>
 800667a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800667e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006682:	69db      	ldr	r3, [r3, #28]
 8006684:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006688:	f040 810c 	bne.w	80068a4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800668c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006690:	2200      	movs	r2, #0
 8006692:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006696:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800669a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800669e:	4622      	mov	r2, r4
 80066a0:	462b      	mov	r3, r5
 80066a2:	1891      	adds	r1, r2, r2
 80066a4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80066a6:	415b      	adcs	r3, r3
 80066a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80066aa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80066ae:	4621      	mov	r1, r4
 80066b0:	eb12 0801 	adds.w	r8, r2, r1
 80066b4:	4629      	mov	r1, r5
 80066b6:	eb43 0901 	adc.w	r9, r3, r1
 80066ba:	f04f 0200 	mov.w	r2, #0
 80066be:	f04f 0300 	mov.w	r3, #0
 80066c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80066c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80066ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80066ce:	4690      	mov	r8, r2
 80066d0:	4699      	mov	r9, r3
 80066d2:	4623      	mov	r3, r4
 80066d4:	eb18 0303 	adds.w	r3, r8, r3
 80066d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80066dc:	462b      	mov	r3, r5
 80066de:	eb49 0303 	adc.w	r3, r9, r3
 80066e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80066e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	2200      	movs	r2, #0
 80066ee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80066f2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80066f6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80066fa:	460b      	mov	r3, r1
 80066fc:	18db      	adds	r3, r3, r3
 80066fe:	653b      	str	r3, [r7, #80]	@ 0x50
 8006700:	4613      	mov	r3, r2
 8006702:	eb42 0303 	adc.w	r3, r2, r3
 8006706:	657b      	str	r3, [r7, #84]	@ 0x54
 8006708:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800670c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006710:	f7f9 fd6e 	bl	80001f0 <__aeabi_uldivmod>
 8006714:	4602      	mov	r2, r0
 8006716:	460b      	mov	r3, r1
 8006718:	4b61      	ldr	r3, [pc, #388]	@ (80068a0 <UART_SetConfig+0x2d4>)
 800671a:	fba3 2302 	umull	r2, r3, r3, r2
 800671e:	095b      	lsrs	r3, r3, #5
 8006720:	011c      	lsls	r4, r3, #4
 8006722:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006726:	2200      	movs	r2, #0
 8006728:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800672c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006730:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006734:	4642      	mov	r2, r8
 8006736:	464b      	mov	r3, r9
 8006738:	1891      	adds	r1, r2, r2
 800673a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800673c:	415b      	adcs	r3, r3
 800673e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006740:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006744:	4641      	mov	r1, r8
 8006746:	eb12 0a01 	adds.w	sl, r2, r1
 800674a:	4649      	mov	r1, r9
 800674c:	eb43 0b01 	adc.w	fp, r3, r1
 8006750:	f04f 0200 	mov.w	r2, #0
 8006754:	f04f 0300 	mov.w	r3, #0
 8006758:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800675c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006760:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006764:	4692      	mov	sl, r2
 8006766:	469b      	mov	fp, r3
 8006768:	4643      	mov	r3, r8
 800676a:	eb1a 0303 	adds.w	r3, sl, r3
 800676e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006772:	464b      	mov	r3, r9
 8006774:	eb4b 0303 	adc.w	r3, fp, r3
 8006778:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800677c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	2200      	movs	r2, #0
 8006784:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006788:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800678c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006790:	460b      	mov	r3, r1
 8006792:	18db      	adds	r3, r3, r3
 8006794:	643b      	str	r3, [r7, #64]	@ 0x40
 8006796:	4613      	mov	r3, r2
 8006798:	eb42 0303 	adc.w	r3, r2, r3
 800679c:	647b      	str	r3, [r7, #68]	@ 0x44
 800679e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80067a2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80067a6:	f7f9 fd23 	bl	80001f0 <__aeabi_uldivmod>
 80067aa:	4602      	mov	r2, r0
 80067ac:	460b      	mov	r3, r1
 80067ae:	4611      	mov	r1, r2
 80067b0:	4b3b      	ldr	r3, [pc, #236]	@ (80068a0 <UART_SetConfig+0x2d4>)
 80067b2:	fba3 2301 	umull	r2, r3, r3, r1
 80067b6:	095b      	lsrs	r3, r3, #5
 80067b8:	2264      	movs	r2, #100	@ 0x64
 80067ba:	fb02 f303 	mul.w	r3, r2, r3
 80067be:	1acb      	subs	r3, r1, r3
 80067c0:	00db      	lsls	r3, r3, #3
 80067c2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80067c6:	4b36      	ldr	r3, [pc, #216]	@ (80068a0 <UART_SetConfig+0x2d4>)
 80067c8:	fba3 2302 	umull	r2, r3, r3, r2
 80067cc:	095b      	lsrs	r3, r3, #5
 80067ce:	005b      	lsls	r3, r3, #1
 80067d0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80067d4:	441c      	add	r4, r3
 80067d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80067da:	2200      	movs	r2, #0
 80067dc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80067e0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80067e4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80067e8:	4642      	mov	r2, r8
 80067ea:	464b      	mov	r3, r9
 80067ec:	1891      	adds	r1, r2, r2
 80067ee:	63b9      	str	r1, [r7, #56]	@ 0x38
 80067f0:	415b      	adcs	r3, r3
 80067f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80067f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80067f8:	4641      	mov	r1, r8
 80067fa:	1851      	adds	r1, r2, r1
 80067fc:	6339      	str	r1, [r7, #48]	@ 0x30
 80067fe:	4649      	mov	r1, r9
 8006800:	414b      	adcs	r3, r1
 8006802:	637b      	str	r3, [r7, #52]	@ 0x34
 8006804:	f04f 0200 	mov.w	r2, #0
 8006808:	f04f 0300 	mov.w	r3, #0
 800680c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006810:	4659      	mov	r1, fp
 8006812:	00cb      	lsls	r3, r1, #3
 8006814:	4651      	mov	r1, sl
 8006816:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800681a:	4651      	mov	r1, sl
 800681c:	00ca      	lsls	r2, r1, #3
 800681e:	4610      	mov	r0, r2
 8006820:	4619      	mov	r1, r3
 8006822:	4603      	mov	r3, r0
 8006824:	4642      	mov	r2, r8
 8006826:	189b      	adds	r3, r3, r2
 8006828:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800682c:	464b      	mov	r3, r9
 800682e:	460a      	mov	r2, r1
 8006830:	eb42 0303 	adc.w	r3, r2, r3
 8006834:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800683c:	685b      	ldr	r3, [r3, #4]
 800683e:	2200      	movs	r2, #0
 8006840:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006844:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006848:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800684c:	460b      	mov	r3, r1
 800684e:	18db      	adds	r3, r3, r3
 8006850:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006852:	4613      	mov	r3, r2
 8006854:	eb42 0303 	adc.w	r3, r2, r3
 8006858:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800685a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800685e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006862:	f7f9 fcc5 	bl	80001f0 <__aeabi_uldivmod>
 8006866:	4602      	mov	r2, r0
 8006868:	460b      	mov	r3, r1
 800686a:	4b0d      	ldr	r3, [pc, #52]	@ (80068a0 <UART_SetConfig+0x2d4>)
 800686c:	fba3 1302 	umull	r1, r3, r3, r2
 8006870:	095b      	lsrs	r3, r3, #5
 8006872:	2164      	movs	r1, #100	@ 0x64
 8006874:	fb01 f303 	mul.w	r3, r1, r3
 8006878:	1ad3      	subs	r3, r2, r3
 800687a:	00db      	lsls	r3, r3, #3
 800687c:	3332      	adds	r3, #50	@ 0x32
 800687e:	4a08      	ldr	r2, [pc, #32]	@ (80068a0 <UART_SetConfig+0x2d4>)
 8006880:	fba2 2303 	umull	r2, r3, r2, r3
 8006884:	095b      	lsrs	r3, r3, #5
 8006886:	f003 0207 	and.w	r2, r3, #7
 800688a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4422      	add	r2, r4
 8006892:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006894:	e106      	b.n	8006aa4 <UART_SetConfig+0x4d8>
 8006896:	bf00      	nop
 8006898:	40011000 	.word	0x40011000
 800689c:	40011400 	.word	0x40011400
 80068a0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80068a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80068a8:	2200      	movs	r2, #0
 80068aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80068ae:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80068b2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80068b6:	4642      	mov	r2, r8
 80068b8:	464b      	mov	r3, r9
 80068ba:	1891      	adds	r1, r2, r2
 80068bc:	6239      	str	r1, [r7, #32]
 80068be:	415b      	adcs	r3, r3
 80068c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80068c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80068c6:	4641      	mov	r1, r8
 80068c8:	1854      	adds	r4, r2, r1
 80068ca:	4649      	mov	r1, r9
 80068cc:	eb43 0501 	adc.w	r5, r3, r1
 80068d0:	f04f 0200 	mov.w	r2, #0
 80068d4:	f04f 0300 	mov.w	r3, #0
 80068d8:	00eb      	lsls	r3, r5, #3
 80068da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80068de:	00e2      	lsls	r2, r4, #3
 80068e0:	4614      	mov	r4, r2
 80068e2:	461d      	mov	r5, r3
 80068e4:	4643      	mov	r3, r8
 80068e6:	18e3      	adds	r3, r4, r3
 80068e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80068ec:	464b      	mov	r3, r9
 80068ee:	eb45 0303 	adc.w	r3, r5, r3
 80068f2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80068f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068fa:	685b      	ldr	r3, [r3, #4]
 80068fc:	2200      	movs	r2, #0
 80068fe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006902:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006906:	f04f 0200 	mov.w	r2, #0
 800690a:	f04f 0300 	mov.w	r3, #0
 800690e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006912:	4629      	mov	r1, r5
 8006914:	008b      	lsls	r3, r1, #2
 8006916:	4621      	mov	r1, r4
 8006918:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800691c:	4621      	mov	r1, r4
 800691e:	008a      	lsls	r2, r1, #2
 8006920:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006924:	f7f9 fc64 	bl	80001f0 <__aeabi_uldivmod>
 8006928:	4602      	mov	r2, r0
 800692a:	460b      	mov	r3, r1
 800692c:	4b60      	ldr	r3, [pc, #384]	@ (8006ab0 <UART_SetConfig+0x4e4>)
 800692e:	fba3 2302 	umull	r2, r3, r3, r2
 8006932:	095b      	lsrs	r3, r3, #5
 8006934:	011c      	lsls	r4, r3, #4
 8006936:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800693a:	2200      	movs	r2, #0
 800693c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006940:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006944:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006948:	4642      	mov	r2, r8
 800694a:	464b      	mov	r3, r9
 800694c:	1891      	adds	r1, r2, r2
 800694e:	61b9      	str	r1, [r7, #24]
 8006950:	415b      	adcs	r3, r3
 8006952:	61fb      	str	r3, [r7, #28]
 8006954:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006958:	4641      	mov	r1, r8
 800695a:	1851      	adds	r1, r2, r1
 800695c:	6139      	str	r1, [r7, #16]
 800695e:	4649      	mov	r1, r9
 8006960:	414b      	adcs	r3, r1
 8006962:	617b      	str	r3, [r7, #20]
 8006964:	f04f 0200 	mov.w	r2, #0
 8006968:	f04f 0300 	mov.w	r3, #0
 800696c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006970:	4659      	mov	r1, fp
 8006972:	00cb      	lsls	r3, r1, #3
 8006974:	4651      	mov	r1, sl
 8006976:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800697a:	4651      	mov	r1, sl
 800697c:	00ca      	lsls	r2, r1, #3
 800697e:	4610      	mov	r0, r2
 8006980:	4619      	mov	r1, r3
 8006982:	4603      	mov	r3, r0
 8006984:	4642      	mov	r2, r8
 8006986:	189b      	adds	r3, r3, r2
 8006988:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800698c:	464b      	mov	r3, r9
 800698e:	460a      	mov	r2, r1
 8006990:	eb42 0303 	adc.w	r3, r2, r3
 8006994:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	2200      	movs	r2, #0
 80069a0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80069a2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80069a4:	f04f 0200 	mov.w	r2, #0
 80069a8:	f04f 0300 	mov.w	r3, #0
 80069ac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80069b0:	4649      	mov	r1, r9
 80069b2:	008b      	lsls	r3, r1, #2
 80069b4:	4641      	mov	r1, r8
 80069b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80069ba:	4641      	mov	r1, r8
 80069bc:	008a      	lsls	r2, r1, #2
 80069be:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80069c2:	f7f9 fc15 	bl	80001f0 <__aeabi_uldivmod>
 80069c6:	4602      	mov	r2, r0
 80069c8:	460b      	mov	r3, r1
 80069ca:	4611      	mov	r1, r2
 80069cc:	4b38      	ldr	r3, [pc, #224]	@ (8006ab0 <UART_SetConfig+0x4e4>)
 80069ce:	fba3 2301 	umull	r2, r3, r3, r1
 80069d2:	095b      	lsrs	r3, r3, #5
 80069d4:	2264      	movs	r2, #100	@ 0x64
 80069d6:	fb02 f303 	mul.w	r3, r2, r3
 80069da:	1acb      	subs	r3, r1, r3
 80069dc:	011b      	lsls	r3, r3, #4
 80069de:	3332      	adds	r3, #50	@ 0x32
 80069e0:	4a33      	ldr	r2, [pc, #204]	@ (8006ab0 <UART_SetConfig+0x4e4>)
 80069e2:	fba2 2303 	umull	r2, r3, r2, r3
 80069e6:	095b      	lsrs	r3, r3, #5
 80069e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80069ec:	441c      	add	r4, r3
 80069ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80069f2:	2200      	movs	r2, #0
 80069f4:	673b      	str	r3, [r7, #112]	@ 0x70
 80069f6:	677a      	str	r2, [r7, #116]	@ 0x74
 80069f8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80069fc:	4642      	mov	r2, r8
 80069fe:	464b      	mov	r3, r9
 8006a00:	1891      	adds	r1, r2, r2
 8006a02:	60b9      	str	r1, [r7, #8]
 8006a04:	415b      	adcs	r3, r3
 8006a06:	60fb      	str	r3, [r7, #12]
 8006a08:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006a0c:	4641      	mov	r1, r8
 8006a0e:	1851      	adds	r1, r2, r1
 8006a10:	6039      	str	r1, [r7, #0]
 8006a12:	4649      	mov	r1, r9
 8006a14:	414b      	adcs	r3, r1
 8006a16:	607b      	str	r3, [r7, #4]
 8006a18:	f04f 0200 	mov.w	r2, #0
 8006a1c:	f04f 0300 	mov.w	r3, #0
 8006a20:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006a24:	4659      	mov	r1, fp
 8006a26:	00cb      	lsls	r3, r1, #3
 8006a28:	4651      	mov	r1, sl
 8006a2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a2e:	4651      	mov	r1, sl
 8006a30:	00ca      	lsls	r2, r1, #3
 8006a32:	4610      	mov	r0, r2
 8006a34:	4619      	mov	r1, r3
 8006a36:	4603      	mov	r3, r0
 8006a38:	4642      	mov	r2, r8
 8006a3a:	189b      	adds	r3, r3, r2
 8006a3c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006a3e:	464b      	mov	r3, r9
 8006a40:	460a      	mov	r2, r1
 8006a42:	eb42 0303 	adc.w	r3, r2, r3
 8006a46:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a4c:	685b      	ldr	r3, [r3, #4]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	663b      	str	r3, [r7, #96]	@ 0x60
 8006a52:	667a      	str	r2, [r7, #100]	@ 0x64
 8006a54:	f04f 0200 	mov.w	r2, #0
 8006a58:	f04f 0300 	mov.w	r3, #0
 8006a5c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006a60:	4649      	mov	r1, r9
 8006a62:	008b      	lsls	r3, r1, #2
 8006a64:	4641      	mov	r1, r8
 8006a66:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a6a:	4641      	mov	r1, r8
 8006a6c:	008a      	lsls	r2, r1, #2
 8006a6e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006a72:	f7f9 fbbd 	bl	80001f0 <__aeabi_uldivmod>
 8006a76:	4602      	mov	r2, r0
 8006a78:	460b      	mov	r3, r1
 8006a7a:	4b0d      	ldr	r3, [pc, #52]	@ (8006ab0 <UART_SetConfig+0x4e4>)
 8006a7c:	fba3 1302 	umull	r1, r3, r3, r2
 8006a80:	095b      	lsrs	r3, r3, #5
 8006a82:	2164      	movs	r1, #100	@ 0x64
 8006a84:	fb01 f303 	mul.w	r3, r1, r3
 8006a88:	1ad3      	subs	r3, r2, r3
 8006a8a:	011b      	lsls	r3, r3, #4
 8006a8c:	3332      	adds	r3, #50	@ 0x32
 8006a8e:	4a08      	ldr	r2, [pc, #32]	@ (8006ab0 <UART_SetConfig+0x4e4>)
 8006a90:	fba2 2303 	umull	r2, r3, r2, r3
 8006a94:	095b      	lsrs	r3, r3, #5
 8006a96:	f003 020f 	and.w	r2, r3, #15
 8006a9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4422      	add	r2, r4
 8006aa2:	609a      	str	r2, [r3, #8]
}
 8006aa4:	bf00      	nop
 8006aa6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ab0:	51eb851f 	.word	0x51eb851f

08006ab4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b083      	sub	sp, #12
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
 8006abc:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d123      	bne.n	8006b0e <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8006ace:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006ad2:	683a      	ldr	r2, [r7, #0]
 8006ad4:	6851      	ldr	r1, [r2, #4]
 8006ad6:	683a      	ldr	r2, [r7, #0]
 8006ad8:	6892      	ldr	r2, [r2, #8]
 8006ada:	4311      	orrs	r1, r2
 8006adc:	683a      	ldr	r2, [r7, #0]
 8006ade:	68d2      	ldr	r2, [r2, #12]
 8006ae0:	4311      	orrs	r1, r2
 8006ae2:	683a      	ldr	r2, [r7, #0]
 8006ae4:	6912      	ldr	r2, [r2, #16]
 8006ae6:	4311      	orrs	r1, r2
 8006ae8:	683a      	ldr	r2, [r7, #0]
 8006aea:	6952      	ldr	r2, [r2, #20]
 8006aec:	4311      	orrs	r1, r2
 8006aee:	683a      	ldr	r2, [r7, #0]
 8006af0:	6992      	ldr	r2, [r2, #24]
 8006af2:	4311      	orrs	r1, r2
 8006af4:	683a      	ldr	r2, [r7, #0]
 8006af6:	69d2      	ldr	r2, [r2, #28]
 8006af8:	4311      	orrs	r1, r2
 8006afa:	683a      	ldr	r2, [r7, #0]
 8006afc:	6a12      	ldr	r2, [r2, #32]
 8006afe:	4311      	orrs	r1, r2
 8006b00:	683a      	ldr	r2, [r7, #0]
 8006b02:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006b04:	430a      	orrs	r2, r1
 8006b06:	431a      	orrs	r2, r3
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	601a      	str	r2, [r3, #0]
 8006b0c:	e028      	b.n	8006b60 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	69d9      	ldr	r1, [r3, #28]
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	6a1b      	ldr	r3, [r3, #32]
 8006b1e:	4319      	orrs	r1, r3
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b24:	430b      	orrs	r3, r1
 8006b26:	431a      	orrs	r2, r3
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8006b34:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006b38:	683a      	ldr	r2, [r7, #0]
 8006b3a:	6851      	ldr	r1, [r2, #4]
 8006b3c:	683a      	ldr	r2, [r7, #0]
 8006b3e:	6892      	ldr	r2, [r2, #8]
 8006b40:	4311      	orrs	r1, r2
 8006b42:	683a      	ldr	r2, [r7, #0]
 8006b44:	68d2      	ldr	r2, [r2, #12]
 8006b46:	4311      	orrs	r1, r2
 8006b48:	683a      	ldr	r2, [r7, #0]
 8006b4a:	6912      	ldr	r2, [r2, #16]
 8006b4c:	4311      	orrs	r1, r2
 8006b4e:	683a      	ldr	r2, [r7, #0]
 8006b50:	6952      	ldr	r2, [r2, #20]
 8006b52:	4311      	orrs	r1, r2
 8006b54:	683a      	ldr	r2, [r7, #0]
 8006b56:	6992      	ldr	r2, [r2, #24]
 8006b58:	430a      	orrs	r2, r1
 8006b5a:	431a      	orrs	r2, r3
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8006b60:	2300      	movs	r3, #0
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	370c      	adds	r7, #12
 8006b66:	46bd      	mov	sp, r7
 8006b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6c:	4770      	bx	lr

08006b6e <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006b6e:	b480      	push	{r7}
 8006b70:	b085      	sub	sp, #20
 8006b72:	af00      	add	r7, sp, #0
 8006b74:	60f8      	str	r0, [r7, #12]
 8006b76:	60b9      	str	r1, [r7, #8]
 8006b78:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d128      	bne.n	8006bd2 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	689b      	ldr	r3, [r3, #8]
 8006b84:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	1e59      	subs	r1, r3, #1
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	3b01      	subs	r3, #1
 8006b94:	011b      	lsls	r3, r3, #4
 8006b96:	4319      	orrs	r1, r3
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	689b      	ldr	r3, [r3, #8]
 8006b9c:	3b01      	subs	r3, #1
 8006b9e:	021b      	lsls	r3, r3, #8
 8006ba0:	4319      	orrs	r1, r3
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	68db      	ldr	r3, [r3, #12]
 8006ba6:	3b01      	subs	r3, #1
 8006ba8:	031b      	lsls	r3, r3, #12
 8006baa:	4319      	orrs	r1, r3
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	691b      	ldr	r3, [r3, #16]
 8006bb0:	3b01      	subs	r3, #1
 8006bb2:	041b      	lsls	r3, r3, #16
 8006bb4:	4319      	orrs	r1, r3
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	695b      	ldr	r3, [r3, #20]
 8006bba:	3b01      	subs	r3, #1
 8006bbc:	051b      	lsls	r3, r3, #20
 8006bbe:	4319      	orrs	r1, r3
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	699b      	ldr	r3, [r3, #24]
 8006bc4:	3b01      	subs	r3, #1
 8006bc6:	061b      	lsls	r3, r3, #24
 8006bc8:	430b      	orrs	r3, r1
 8006bca:	431a      	orrs	r2, r3
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	609a      	str	r2, [r3, #8]
 8006bd0:	e02f      	b.n	8006c32 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	689b      	ldr	r3, [r3, #8]
 8006bd6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006bda:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006bde:	68ba      	ldr	r2, [r7, #8]
 8006be0:	68d2      	ldr	r2, [r2, #12]
 8006be2:	3a01      	subs	r2, #1
 8006be4:	0311      	lsls	r1, r2, #12
 8006be6:	68ba      	ldr	r2, [r7, #8]
 8006be8:	6952      	ldr	r2, [r2, #20]
 8006bea:	3a01      	subs	r2, #1
 8006bec:	0512      	lsls	r2, r2, #20
 8006bee:	430a      	orrs	r2, r1
 8006bf0:	431a      	orrs	r2, r3
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	68db      	ldr	r3, [r3, #12]
 8006bfa:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	1e59      	subs	r1, r3, #1
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	3b01      	subs	r3, #1
 8006c0a:	011b      	lsls	r3, r3, #4
 8006c0c:	4319      	orrs	r1, r3
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	689b      	ldr	r3, [r3, #8]
 8006c12:	3b01      	subs	r3, #1
 8006c14:	021b      	lsls	r3, r3, #8
 8006c16:	4319      	orrs	r1, r3
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	691b      	ldr	r3, [r3, #16]
 8006c1c:	3b01      	subs	r3, #1
 8006c1e:	041b      	lsls	r3, r3, #16
 8006c20:	4319      	orrs	r1, r3
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	699b      	ldr	r3, [r3, #24]
 8006c26:	3b01      	subs	r3, #1
 8006c28:	061b      	lsls	r3, r3, #24
 8006c2a:	430b      	orrs	r3, r1
 8006c2c:	431a      	orrs	r2, r3
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8006c32:	2300      	movs	r3, #0
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	3714      	adds	r7, #20
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr

08006c40 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006c40:	b084      	sub	sp, #16
 8006c42:	b580      	push	{r7, lr}
 8006c44:	b084      	sub	sp, #16
 8006c46:	af00      	add	r7, sp, #0
 8006c48:	6078      	str	r0, [r7, #4]
 8006c4a:	f107 001c 	add.w	r0, r7, #28
 8006c4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006c52:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006c56:	2b01      	cmp	r3, #1
 8006c58:	d123      	bne.n	8006ca2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c5e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	68db      	ldr	r3, [r3, #12]
 8006c6a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006c6e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c72:	687a      	ldr	r2, [r7, #4]
 8006c74:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	68db      	ldr	r3, [r3, #12]
 8006c7a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006c82:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006c86:	2b01      	cmp	r3, #1
 8006c88:	d105      	bne.n	8006c96 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	68db      	ldr	r3, [r3, #12]
 8006c8e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f000 f9dc 	bl	8007054 <USB_CoreReset>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	73fb      	strb	r3, [r7, #15]
 8006ca0:	e01b      	b.n	8006cda <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	68db      	ldr	r3, [r3, #12]
 8006ca6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f000 f9d0 	bl	8007054 <USB_CoreReset>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006cb8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d106      	bne.n	8006cce <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cc4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	639a      	str	r2, [r3, #56]	@ 0x38
 8006ccc:	e005      	b.n	8006cda <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cd2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006cda:	7fbb      	ldrb	r3, [r7, #30]
 8006cdc:	2b01      	cmp	r3, #1
 8006cde:	d10b      	bne.n	8006cf8 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	689b      	ldr	r3, [r3, #8]
 8006ce4:	f043 0206 	orr.w	r2, r3, #6
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	689b      	ldr	r3, [r3, #8]
 8006cf0:	f043 0220 	orr.w	r2, r3, #32
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3710      	adds	r7, #16
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006d04:	b004      	add	sp, #16
 8006d06:	4770      	bx	lr

08006d08 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b083      	sub	sp, #12
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	689b      	ldr	r3, [r3, #8]
 8006d14:	f043 0201 	orr.w	r2, r3, #1
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006d1c:	2300      	movs	r3, #0
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	370c      	adds	r7, #12
 8006d22:	46bd      	mov	sp, r7
 8006d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d28:	4770      	bx	lr

08006d2a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006d2a:	b480      	push	{r7}
 8006d2c:	b083      	sub	sp, #12
 8006d2e:	af00      	add	r7, sp, #0
 8006d30:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	689b      	ldr	r3, [r3, #8]
 8006d36:	f023 0201 	bic.w	r2, r3, #1
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006d3e:	2300      	movs	r3, #0
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	370c      	adds	r7, #12
 8006d44:	46bd      	mov	sp, r7
 8006d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4a:	4770      	bx	lr

08006d4c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b084      	sub	sp, #16
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
 8006d54:	460b      	mov	r3, r1
 8006d56:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006d58:	2300      	movs	r3, #0
 8006d5a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	68db      	ldr	r3, [r3, #12]
 8006d60:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006d68:	78fb      	ldrb	r3, [r7, #3]
 8006d6a:	2b01      	cmp	r3, #1
 8006d6c:	d115      	bne.n	8006d9a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	68db      	ldr	r3, [r3, #12]
 8006d72:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006d7a:	200a      	movs	r0, #10
 8006d7c:	f7fa fcc6 	bl	800170c <HAL_Delay>
      ms += 10U;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	330a      	adds	r3, #10
 8006d84:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f000 f956 	bl	8007038 <USB_GetMode>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	2b01      	cmp	r3, #1
 8006d90:	d01e      	beq.n	8006dd0 <USB_SetCurrentMode+0x84>
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	2bc7      	cmp	r3, #199	@ 0xc7
 8006d96:	d9f0      	bls.n	8006d7a <USB_SetCurrentMode+0x2e>
 8006d98:	e01a      	b.n	8006dd0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006d9a:	78fb      	ldrb	r3, [r7, #3]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d115      	bne.n	8006dcc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	68db      	ldr	r3, [r3, #12]
 8006da4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006dac:	200a      	movs	r0, #10
 8006dae:	f7fa fcad 	bl	800170c <HAL_Delay>
      ms += 10U;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	330a      	adds	r3, #10
 8006db6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f000 f93d 	bl	8007038 <USB_GetMode>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d005      	beq.n	8006dd0 <USB_SetCurrentMode+0x84>
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	2bc7      	cmp	r3, #199	@ 0xc7
 8006dc8:	d9f0      	bls.n	8006dac <USB_SetCurrentMode+0x60>
 8006dca:	e001      	b.n	8006dd0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006dcc:	2301      	movs	r3, #1
 8006dce:	e005      	b.n	8006ddc <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	2bc8      	cmp	r3, #200	@ 0xc8
 8006dd4:	d101      	bne.n	8006dda <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	e000      	b.n	8006ddc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006dda:	2300      	movs	r3, #0
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	3710      	adds	r7, #16
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd80      	pop	{r7, pc}

08006de4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b085      	sub	sp, #20
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
 8006dec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006dee:	2300      	movs	r3, #0
 8006df0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	3301      	adds	r3, #1
 8006df6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006dfe:	d901      	bls.n	8006e04 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006e00:	2303      	movs	r3, #3
 8006e02:	e01b      	b.n	8006e3c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	691b      	ldr	r3, [r3, #16]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	daf2      	bge.n	8006df2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	019b      	lsls	r3, r3, #6
 8006e14:	f043 0220 	orr.w	r2, r3, #32
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	3301      	adds	r3, #1
 8006e20:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006e28:	d901      	bls.n	8006e2e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006e2a:	2303      	movs	r3, #3
 8006e2c:	e006      	b.n	8006e3c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	691b      	ldr	r3, [r3, #16]
 8006e32:	f003 0320 	and.w	r3, r3, #32
 8006e36:	2b20      	cmp	r3, #32
 8006e38:	d0f0      	beq.n	8006e1c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006e3a:	2300      	movs	r3, #0
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3714      	adds	r7, #20
 8006e40:	46bd      	mov	sp, r7
 8006e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e46:	4770      	bx	lr

08006e48 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b085      	sub	sp, #20
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006e50:	2300      	movs	r3, #0
 8006e52:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	3301      	adds	r3, #1
 8006e58:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006e60:	d901      	bls.n	8006e66 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006e62:	2303      	movs	r3, #3
 8006e64:	e018      	b.n	8006e98 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	691b      	ldr	r3, [r3, #16]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	daf2      	bge.n	8006e54 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006e6e:	2300      	movs	r3, #0
 8006e70:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2210      	movs	r2, #16
 8006e76:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	3301      	adds	r3, #1
 8006e7c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006e84:	d901      	bls.n	8006e8a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006e86:	2303      	movs	r3, #3
 8006e88:	e006      	b.n	8006e98 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	691b      	ldr	r3, [r3, #16]
 8006e8e:	f003 0310 	and.w	r3, r3, #16
 8006e92:	2b10      	cmp	r3, #16
 8006e94:	d0f0      	beq.n	8006e78 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006e96:	2300      	movs	r3, #0
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	3714      	adds	r7, #20
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea2:	4770      	bx	lr

08006ea4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b089      	sub	sp, #36	@ 0x24
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	60f8      	str	r0, [r7, #12]
 8006eac:	60b9      	str	r1, [r7, #8]
 8006eae:	4611      	mov	r1, r2
 8006eb0:	461a      	mov	r2, r3
 8006eb2:	460b      	mov	r3, r1
 8006eb4:	71fb      	strb	r3, [r7, #7]
 8006eb6:	4613      	mov	r3, r2
 8006eb8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006ec2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d123      	bne.n	8006f12 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006eca:	88bb      	ldrh	r3, [r7, #4]
 8006ecc:	3303      	adds	r3, #3
 8006ece:	089b      	lsrs	r3, r3, #2
 8006ed0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	61bb      	str	r3, [r7, #24]
 8006ed6:	e018      	b.n	8006f0a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006ed8:	79fb      	ldrb	r3, [r7, #7]
 8006eda:	031a      	lsls	r2, r3, #12
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	4413      	add	r3, r2
 8006ee0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ee4:	461a      	mov	r2, r3
 8006ee6:	69fb      	ldr	r3, [r7, #28]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006eec:	69fb      	ldr	r3, [r7, #28]
 8006eee:	3301      	adds	r3, #1
 8006ef0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006ef2:	69fb      	ldr	r3, [r7, #28]
 8006ef4:	3301      	adds	r3, #1
 8006ef6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006ef8:	69fb      	ldr	r3, [r7, #28]
 8006efa:	3301      	adds	r3, #1
 8006efc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006efe:	69fb      	ldr	r3, [r7, #28]
 8006f00:	3301      	adds	r3, #1
 8006f02:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006f04:	69bb      	ldr	r3, [r7, #24]
 8006f06:	3301      	adds	r3, #1
 8006f08:	61bb      	str	r3, [r7, #24]
 8006f0a:	69ba      	ldr	r2, [r7, #24]
 8006f0c:	693b      	ldr	r3, [r7, #16]
 8006f0e:	429a      	cmp	r2, r3
 8006f10:	d3e2      	bcc.n	8006ed8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006f12:	2300      	movs	r3, #0
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	3724      	adds	r7, #36	@ 0x24
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1e:	4770      	bx	lr

08006f20 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b08b      	sub	sp, #44	@ 0x2c
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	60f8      	str	r0, [r7, #12]
 8006f28:	60b9      	str	r1, [r7, #8]
 8006f2a:	4613      	mov	r3, r2
 8006f2c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006f36:	88fb      	ldrh	r3, [r7, #6]
 8006f38:	089b      	lsrs	r3, r3, #2
 8006f3a:	b29b      	uxth	r3, r3
 8006f3c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006f3e:	88fb      	ldrh	r3, [r7, #6]
 8006f40:	f003 0303 	and.w	r3, r3, #3
 8006f44:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006f46:	2300      	movs	r3, #0
 8006f48:	623b      	str	r3, [r7, #32]
 8006f4a:	e014      	b.n	8006f76 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006f4c:	69bb      	ldr	r3, [r7, #24]
 8006f4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f52:	681a      	ldr	r2, [r3, #0]
 8006f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f56:	601a      	str	r2, [r3, #0]
    pDest++;
 8006f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f5a:	3301      	adds	r3, #1
 8006f5c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f60:	3301      	adds	r3, #1
 8006f62:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f66:	3301      	adds	r3, #1
 8006f68:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f6c:	3301      	adds	r3, #1
 8006f6e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006f70:	6a3b      	ldr	r3, [r7, #32]
 8006f72:	3301      	adds	r3, #1
 8006f74:	623b      	str	r3, [r7, #32]
 8006f76:	6a3a      	ldr	r2, [r7, #32]
 8006f78:	697b      	ldr	r3, [r7, #20]
 8006f7a:	429a      	cmp	r2, r3
 8006f7c:	d3e6      	bcc.n	8006f4c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006f7e:	8bfb      	ldrh	r3, [r7, #30]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d01e      	beq.n	8006fc2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006f84:	2300      	movs	r3, #0
 8006f86:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006f88:	69bb      	ldr	r3, [r7, #24]
 8006f8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f8e:	461a      	mov	r2, r3
 8006f90:	f107 0310 	add.w	r3, r7, #16
 8006f94:	6812      	ldr	r2, [r2, #0]
 8006f96:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006f98:	693a      	ldr	r2, [r7, #16]
 8006f9a:	6a3b      	ldr	r3, [r7, #32]
 8006f9c:	b2db      	uxtb	r3, r3
 8006f9e:	00db      	lsls	r3, r3, #3
 8006fa0:	fa22 f303 	lsr.w	r3, r2, r3
 8006fa4:	b2da      	uxtb	r2, r3
 8006fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fa8:	701a      	strb	r2, [r3, #0]
      i++;
 8006faa:	6a3b      	ldr	r3, [r7, #32]
 8006fac:	3301      	adds	r3, #1
 8006fae:	623b      	str	r3, [r7, #32]
      pDest++;
 8006fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fb2:	3301      	adds	r3, #1
 8006fb4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006fb6:	8bfb      	ldrh	r3, [r7, #30]
 8006fb8:	3b01      	subs	r3, #1
 8006fba:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006fbc:	8bfb      	ldrh	r3, [r7, #30]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d1ea      	bne.n	8006f98 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	372c      	adds	r7, #44	@ 0x2c
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fce:	4770      	bx	lr

08006fd0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b085      	sub	sp, #20
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	695b      	ldr	r3, [r3, #20]
 8006fdc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	699b      	ldr	r3, [r3, #24]
 8006fe2:	68fa      	ldr	r2, [r7, #12]
 8006fe4:	4013      	ands	r3, r2
 8006fe6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	3714      	adds	r7, #20
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff4:	4770      	bx	lr

08006ff6 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8006ff6:	b480      	push	{r7}
 8006ff8:	b085      	sub	sp, #20
 8006ffa:	af00      	add	r7, sp, #0
 8006ffc:	6078      	str	r0, [r7, #4]
 8006ffe:	460b      	mov	r3, r1
 8007000:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8007006:	78fb      	ldrb	r3, [r7, #3]
 8007008:	015a      	lsls	r2, r3, #5
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	4413      	add	r3, r2
 800700e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007012:	689b      	ldr	r3, [r3, #8]
 8007014:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8007016:	78fb      	ldrb	r3, [r7, #3]
 8007018:	015a      	lsls	r2, r3, #5
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	4413      	add	r3, r2
 800701e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007022:	68db      	ldr	r3, [r3, #12]
 8007024:	68ba      	ldr	r2, [r7, #8]
 8007026:	4013      	ands	r3, r2
 8007028:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800702a:	68bb      	ldr	r3, [r7, #8]
}
 800702c:	4618      	mov	r0, r3
 800702e:	3714      	adds	r7, #20
 8007030:	46bd      	mov	sp, r7
 8007032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007036:	4770      	bx	lr

08007038 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007038:	b480      	push	{r7}
 800703a:	b083      	sub	sp, #12
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	695b      	ldr	r3, [r3, #20]
 8007044:	f003 0301 	and.w	r3, r3, #1
}
 8007048:	4618      	mov	r0, r3
 800704a:	370c      	adds	r7, #12
 800704c:	46bd      	mov	sp, r7
 800704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007052:	4770      	bx	lr

08007054 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007054:	b480      	push	{r7}
 8007056:	b085      	sub	sp, #20
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800705c:	2300      	movs	r3, #0
 800705e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	3301      	adds	r3, #1
 8007064:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800706c:	d901      	bls.n	8007072 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800706e:	2303      	movs	r3, #3
 8007070:	e01b      	b.n	80070aa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	691b      	ldr	r3, [r3, #16]
 8007076:	2b00      	cmp	r3, #0
 8007078:	daf2      	bge.n	8007060 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800707a:	2300      	movs	r3, #0
 800707c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	691b      	ldr	r3, [r3, #16]
 8007082:	f043 0201 	orr.w	r2, r3, #1
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	3301      	adds	r3, #1
 800708e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007096:	d901      	bls.n	800709c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007098:	2303      	movs	r3, #3
 800709a:	e006      	b.n	80070aa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	691b      	ldr	r3, [r3, #16]
 80070a0:	f003 0301 	and.w	r3, r3, #1
 80070a4:	2b01      	cmp	r3, #1
 80070a6:	d0f0      	beq.n	800708a <USB_CoreReset+0x36>

  return HAL_OK;
 80070a8:	2300      	movs	r3, #0
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	3714      	adds	r7, #20
 80070ae:	46bd      	mov	sp, r7
 80070b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b4:	4770      	bx	lr
	...

080070b8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80070b8:	b084      	sub	sp, #16
 80070ba:	b580      	push	{r7, lr}
 80070bc:	b086      	sub	sp, #24
 80070be:	af00      	add	r7, sp, #0
 80070c0:	6078      	str	r0, [r7, #4]
 80070c2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80070c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80070ca:	2300      	movs	r3, #0
 80070cc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80070d8:	461a      	mov	r2, r3
 80070da:	2300      	movs	r3, #0
 80070dc:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070e2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070ee:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070fa:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	68db      	ldr	r3, [r3, #12]
 8007106:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800710a:	2b00      	cmp	r3, #0
 800710c:	d119      	bne.n	8007142 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800710e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007112:	2b01      	cmp	r3, #1
 8007114:	d10a      	bne.n	800712c <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	68fa      	ldr	r2, [r7, #12]
 8007120:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007124:	f043 0304 	orr.w	r3, r3, #4
 8007128:	6013      	str	r3, [r2, #0]
 800712a:	e014      	b.n	8007156 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	68fa      	ldr	r2, [r7, #12]
 8007136:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800713a:	f023 0304 	bic.w	r3, r3, #4
 800713e:	6013      	str	r3, [r2, #0]
 8007140:	e009      	b.n	8007156 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	68fa      	ldr	r2, [r7, #12]
 800714c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007150:	f023 0304 	bic.w	r3, r3, #4
 8007154:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007156:	2110      	movs	r1, #16
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	f7ff fe43 	bl	8006de4 <USB_FlushTxFifo>
 800715e:	4603      	mov	r3, r0
 8007160:	2b00      	cmp	r3, #0
 8007162:	d001      	beq.n	8007168 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8007164:	2301      	movs	r3, #1
 8007166:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f7ff fe6d 	bl	8006e48 <USB_FlushRxFifo>
 800716e:	4603      	mov	r3, r0
 8007170:	2b00      	cmp	r3, #0
 8007172:	d001      	beq.n	8007178 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8007174:	2301      	movs	r3, #1
 8007176:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007178:	2300      	movs	r3, #0
 800717a:	613b      	str	r3, [r7, #16]
 800717c:	e015      	b.n	80071aa <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	015a      	lsls	r2, r3, #5
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	4413      	add	r3, r2
 8007186:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800718a:	461a      	mov	r2, r3
 800718c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007190:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	015a      	lsls	r2, r3, #5
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	4413      	add	r3, r2
 800719a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800719e:	461a      	mov	r2, r3
 80071a0:	2300      	movs	r3, #0
 80071a2:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	3301      	adds	r3, #1
 80071a8:	613b      	str	r3, [r7, #16]
 80071aa:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80071ae:	461a      	mov	r2, r3
 80071b0:	693b      	ldr	r3, [r7, #16]
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d3e3      	bcc.n	800717e <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2200      	movs	r2, #0
 80071ba:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80071c2:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	4a18      	ldr	r2, [pc, #96]	@ (8007228 <USB_HostInit+0x170>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d10b      	bne.n	80071e4 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80071d2:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	4a15      	ldr	r2, [pc, #84]	@ (800722c <USB_HostInit+0x174>)
 80071d8:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	4a14      	ldr	r2, [pc, #80]	@ (8007230 <USB_HostInit+0x178>)
 80071de:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 80071e2:	e009      	b.n	80071f8 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2280      	movs	r2, #128	@ 0x80
 80071e8:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	4a11      	ldr	r2, [pc, #68]	@ (8007234 <USB_HostInit+0x17c>)
 80071ee:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	4a11      	ldr	r2, [pc, #68]	@ (8007238 <USB_HostInit+0x180>)
 80071f4:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80071f8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d105      	bne.n	800720c <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	699b      	ldr	r3, [r3, #24]
 8007204:	f043 0210 	orr.w	r2, r3, #16
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	699a      	ldr	r2, [r3, #24]
 8007210:	4b0a      	ldr	r3, [pc, #40]	@ (800723c <USB_HostInit+0x184>)
 8007212:	4313      	orrs	r3, r2
 8007214:	687a      	ldr	r2, [r7, #4]
 8007216:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8007218:	7dfb      	ldrb	r3, [r7, #23]
}
 800721a:	4618      	mov	r0, r3
 800721c:	3718      	adds	r7, #24
 800721e:	46bd      	mov	sp, r7
 8007220:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007224:	b004      	add	sp, #16
 8007226:	4770      	bx	lr
 8007228:	40040000 	.word	0x40040000
 800722c:	01000200 	.word	0x01000200
 8007230:	00e00300 	.word	0x00e00300
 8007234:	00600080 	.word	0x00600080
 8007238:	004000e0 	.word	0x004000e0
 800723c:	a3200008 	.word	0xa3200008

08007240 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007240:	b480      	push	{r7}
 8007242:	b085      	sub	sp, #20
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
 8007248:	460b      	mov	r3, r1
 800724a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	68fa      	ldr	r2, [r7, #12]
 800725a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800725e:	f023 0303 	bic.w	r3, r3, #3
 8007262:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800726a:	681a      	ldr	r2, [r3, #0]
 800726c:	78fb      	ldrb	r3, [r7, #3]
 800726e:	f003 0303 	and.w	r3, r3, #3
 8007272:	68f9      	ldr	r1, [r7, #12]
 8007274:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8007278:	4313      	orrs	r3, r2
 800727a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800727c:	78fb      	ldrb	r3, [r7, #3]
 800727e:	2b01      	cmp	r3, #1
 8007280:	d107      	bne.n	8007292 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007288:	461a      	mov	r2, r3
 800728a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800728e:	6053      	str	r3, [r2, #4]
 8007290:	e00c      	b.n	80072ac <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8007292:	78fb      	ldrb	r3, [r7, #3]
 8007294:	2b02      	cmp	r3, #2
 8007296:	d107      	bne.n	80072a8 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800729e:	461a      	mov	r2, r3
 80072a0:	f241 7370 	movw	r3, #6000	@ 0x1770
 80072a4:	6053      	str	r3, [r2, #4]
 80072a6:	e001      	b.n	80072ac <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80072a8:	2301      	movs	r3, #1
 80072aa:	e000      	b.n	80072ae <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80072ac:	2300      	movs	r3, #0
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	3714      	adds	r7, #20
 80072b2:	46bd      	mov	sp, r7
 80072b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b8:	4770      	bx	lr

080072ba <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 80072ba:	b580      	push	{r7, lr}
 80072bc:	b084      	sub	sp, #16
 80072be:	af00      	add	r7, sp, #0
 80072c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80072c6:	2300      	movs	r3, #0
 80072c8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80072da:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	68fa      	ldr	r2, [r7, #12]
 80072e0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80072e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80072e8:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80072ea:	2064      	movs	r0, #100	@ 0x64
 80072ec:	f7fa fa0e 	bl	800170c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	68fa      	ldr	r2, [r7, #12]
 80072f4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80072f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80072fc:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80072fe:	200a      	movs	r0, #10
 8007300:	f7fa fa04 	bl	800170c <HAL_Delay>

  return HAL_OK;
 8007304:	2300      	movs	r3, #0
}
 8007306:	4618      	mov	r0, r3
 8007308:	3710      	adds	r7, #16
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}

0800730e <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800730e:	b480      	push	{r7}
 8007310:	b085      	sub	sp, #20
 8007312:	af00      	add	r7, sp, #0
 8007314:	6078      	str	r0, [r7, #4]
 8007316:	460b      	mov	r3, r1
 8007318:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800731e:	2300      	movs	r3, #0
 8007320:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8007332:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800733a:	2b00      	cmp	r3, #0
 800733c:	d109      	bne.n	8007352 <USB_DriveVbus+0x44>
 800733e:	78fb      	ldrb	r3, [r7, #3]
 8007340:	2b01      	cmp	r3, #1
 8007342:	d106      	bne.n	8007352 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	68fa      	ldr	r2, [r7, #12]
 8007348:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800734c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007350:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007358:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800735c:	d109      	bne.n	8007372 <USB_DriveVbus+0x64>
 800735e:	78fb      	ldrb	r3, [r7, #3]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d106      	bne.n	8007372 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	68fa      	ldr	r2, [r7, #12]
 8007368:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800736c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007370:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007372:	2300      	movs	r3, #0
}
 8007374:	4618      	mov	r0, r3
 8007376:	3714      	adds	r7, #20
 8007378:	46bd      	mov	sp, r7
 800737a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737e:	4770      	bx	lr

08007380 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8007380:	b480      	push	{r7}
 8007382:	b085      	sub	sp, #20
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800738c:	2300      	movs	r3, #0
 800738e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	0c5b      	lsrs	r3, r3, #17
 800739e:	f003 0303 	and.w	r3, r3, #3
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	3714      	adds	r7, #20
 80073a6:	46bd      	mov	sp, r7
 80073a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ac:	4770      	bx	lr

080073ae <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 80073ae:	b480      	push	{r7}
 80073b0:	b085      	sub	sp, #20
 80073b2:	af00      	add	r7, sp, #0
 80073b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80073c0:	689b      	ldr	r3, [r3, #8]
 80073c2:	b29b      	uxth	r3, r3
}
 80073c4:	4618      	mov	r0, r3
 80073c6:	3714      	adds	r7, #20
 80073c8:	46bd      	mov	sp, r7
 80073ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ce:	4770      	bx	lr

080073d0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b088      	sub	sp, #32
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
 80073d8:	4608      	mov	r0, r1
 80073da:	4611      	mov	r1, r2
 80073dc:	461a      	mov	r2, r3
 80073de:	4603      	mov	r3, r0
 80073e0:	70fb      	strb	r3, [r7, #3]
 80073e2:	460b      	mov	r3, r1
 80073e4:	70bb      	strb	r3, [r7, #2]
 80073e6:	4613      	mov	r3, r2
 80073e8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80073ea:	2300      	movs	r3, #0
 80073ec:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 80073f2:	78fb      	ldrb	r3, [r7, #3]
 80073f4:	015a      	lsls	r2, r3, #5
 80073f6:	693b      	ldr	r3, [r7, #16]
 80073f8:	4413      	add	r3, r2
 80073fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80073fe:	461a      	mov	r2, r3
 8007400:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007404:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8007406:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800740a:	2b03      	cmp	r3, #3
 800740c:	d87c      	bhi.n	8007508 <USB_HC_Init+0x138>
 800740e:	a201      	add	r2, pc, #4	@ (adr r2, 8007414 <USB_HC_Init+0x44>)
 8007410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007414:	08007425 	.word	0x08007425
 8007418:	080074cb 	.word	0x080074cb
 800741c:	08007425 	.word	0x08007425
 8007420:	0800748d 	.word	0x0800748d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007424:	78fb      	ldrb	r3, [r7, #3]
 8007426:	015a      	lsls	r2, r3, #5
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	4413      	add	r3, r2
 800742c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007430:	461a      	mov	r2, r3
 8007432:	f240 439d 	movw	r3, #1181	@ 0x49d
 8007436:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007438:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800743c:	2b00      	cmp	r3, #0
 800743e:	da10      	bge.n	8007462 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007440:	78fb      	ldrb	r3, [r7, #3]
 8007442:	015a      	lsls	r2, r3, #5
 8007444:	693b      	ldr	r3, [r7, #16]
 8007446:	4413      	add	r3, r2
 8007448:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800744c:	68db      	ldr	r3, [r3, #12]
 800744e:	78fa      	ldrb	r2, [r7, #3]
 8007450:	0151      	lsls	r1, r2, #5
 8007452:	693a      	ldr	r2, [r7, #16]
 8007454:	440a      	add	r2, r1
 8007456:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800745a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800745e:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8007460:	e055      	b.n	800750e <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	4a6f      	ldr	r2, [pc, #444]	@ (8007624 <USB_HC_Init+0x254>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d151      	bne.n	800750e <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800746a:	78fb      	ldrb	r3, [r7, #3]
 800746c:	015a      	lsls	r2, r3, #5
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	4413      	add	r3, r2
 8007472:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007476:	68db      	ldr	r3, [r3, #12]
 8007478:	78fa      	ldrb	r2, [r7, #3]
 800747a:	0151      	lsls	r1, r2, #5
 800747c:	693a      	ldr	r2, [r7, #16]
 800747e:	440a      	add	r2, r1
 8007480:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007484:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007488:	60d3      	str	r3, [r2, #12]
      break;
 800748a:	e040      	b.n	800750e <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800748c:	78fb      	ldrb	r3, [r7, #3]
 800748e:	015a      	lsls	r2, r3, #5
 8007490:	693b      	ldr	r3, [r7, #16]
 8007492:	4413      	add	r3, r2
 8007494:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007498:	461a      	mov	r2, r3
 800749a:	f240 639d 	movw	r3, #1693	@ 0x69d
 800749e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80074a0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	da34      	bge.n	8007512 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80074a8:	78fb      	ldrb	r3, [r7, #3]
 80074aa:	015a      	lsls	r2, r3, #5
 80074ac:	693b      	ldr	r3, [r7, #16]
 80074ae:	4413      	add	r3, r2
 80074b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80074b4:	68db      	ldr	r3, [r3, #12]
 80074b6:	78fa      	ldrb	r2, [r7, #3]
 80074b8:	0151      	lsls	r1, r2, #5
 80074ba:	693a      	ldr	r2, [r7, #16]
 80074bc:	440a      	add	r2, r1
 80074be:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80074c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80074c6:	60d3      	str	r3, [r2, #12]
      }

      break;
 80074c8:	e023      	b.n	8007512 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80074ca:	78fb      	ldrb	r3, [r7, #3]
 80074cc:	015a      	lsls	r2, r3, #5
 80074ce:	693b      	ldr	r3, [r7, #16]
 80074d0:	4413      	add	r3, r2
 80074d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80074d6:	461a      	mov	r2, r3
 80074d8:	f240 2325 	movw	r3, #549	@ 0x225
 80074dc:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80074de:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	da17      	bge.n	8007516 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80074e6:	78fb      	ldrb	r3, [r7, #3]
 80074e8:	015a      	lsls	r2, r3, #5
 80074ea:	693b      	ldr	r3, [r7, #16]
 80074ec:	4413      	add	r3, r2
 80074ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80074f2:	68db      	ldr	r3, [r3, #12]
 80074f4:	78fa      	ldrb	r2, [r7, #3]
 80074f6:	0151      	lsls	r1, r2, #5
 80074f8:	693a      	ldr	r2, [r7, #16]
 80074fa:	440a      	add	r2, r1
 80074fc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007500:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8007504:	60d3      	str	r3, [r2, #12]
      }
      break;
 8007506:	e006      	b.n	8007516 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8007508:	2301      	movs	r3, #1
 800750a:	77fb      	strb	r3, [r7, #31]
      break;
 800750c:	e004      	b.n	8007518 <USB_HC_Init+0x148>
      break;
 800750e:	bf00      	nop
 8007510:	e002      	b.n	8007518 <USB_HC_Init+0x148>
      break;
 8007512:	bf00      	nop
 8007514:	e000      	b.n	8007518 <USB_HC_Init+0x148>
      break;
 8007516:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8007518:	78fb      	ldrb	r3, [r7, #3]
 800751a:	015a      	lsls	r2, r3, #5
 800751c:	693b      	ldr	r3, [r7, #16]
 800751e:	4413      	add	r3, r2
 8007520:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007524:	461a      	mov	r2, r3
 8007526:	2300      	movs	r3, #0
 8007528:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800752a:	78fb      	ldrb	r3, [r7, #3]
 800752c:	015a      	lsls	r2, r3, #5
 800752e:	693b      	ldr	r3, [r7, #16]
 8007530:	4413      	add	r3, r2
 8007532:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007536:	68db      	ldr	r3, [r3, #12]
 8007538:	78fa      	ldrb	r2, [r7, #3]
 800753a:	0151      	lsls	r1, r2, #5
 800753c:	693a      	ldr	r2, [r7, #16]
 800753e:	440a      	add	r2, r1
 8007540:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007544:	f043 0302 	orr.w	r3, r3, #2
 8007548:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800754a:	693b      	ldr	r3, [r7, #16]
 800754c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007550:	699a      	ldr	r2, [r3, #24]
 8007552:	78fb      	ldrb	r3, [r7, #3]
 8007554:	f003 030f 	and.w	r3, r3, #15
 8007558:	2101      	movs	r1, #1
 800755a:	fa01 f303 	lsl.w	r3, r1, r3
 800755e:	6939      	ldr	r1, [r7, #16]
 8007560:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8007564:	4313      	orrs	r3, r2
 8007566:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	699b      	ldr	r3, [r3, #24]
 800756c:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007574:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007578:	2b00      	cmp	r3, #0
 800757a:	da03      	bge.n	8007584 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800757c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007580:	61bb      	str	r3, [r7, #24]
 8007582:	e001      	b.n	8007588 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8007584:	2300      	movs	r3, #0
 8007586:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f7ff fef9 	bl	8007380 <USB_GetHostSpeed>
 800758e:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8007590:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007594:	2b02      	cmp	r3, #2
 8007596:	d106      	bne.n	80075a6 <USB_HC_Init+0x1d6>
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	2b02      	cmp	r3, #2
 800759c:	d003      	beq.n	80075a6 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800759e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80075a2:	617b      	str	r3, [r7, #20]
 80075a4:	e001      	b.n	80075aa <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80075a6:	2300      	movs	r3, #0
 80075a8:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80075aa:	787b      	ldrb	r3, [r7, #1]
 80075ac:	059b      	lsls	r3, r3, #22
 80075ae:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80075b2:	78bb      	ldrb	r3, [r7, #2]
 80075b4:	02db      	lsls	r3, r3, #11
 80075b6:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80075ba:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80075bc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80075c0:	049b      	lsls	r3, r3, #18
 80075c2:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80075c6:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 80075c8:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80075ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80075ce:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80075d0:	69bb      	ldr	r3, [r7, #24]
 80075d2:	431a      	orrs	r2, r3
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80075d8:	78fa      	ldrb	r2, [r7, #3]
 80075da:	0151      	lsls	r1, r2, #5
 80075dc:	693a      	ldr	r2, [r7, #16]
 80075de:	440a      	add	r2, r1
 80075e0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80075e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80075e8:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80075ea:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80075ee:	2b03      	cmp	r3, #3
 80075f0:	d003      	beq.n	80075fa <USB_HC_Init+0x22a>
 80075f2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80075f6:	2b01      	cmp	r3, #1
 80075f8:	d10f      	bne.n	800761a <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80075fa:	78fb      	ldrb	r3, [r7, #3]
 80075fc:	015a      	lsls	r2, r3, #5
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	4413      	add	r3, r2
 8007602:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	78fa      	ldrb	r2, [r7, #3]
 800760a:	0151      	lsls	r1, r2, #5
 800760c:	693a      	ldr	r2, [r7, #16]
 800760e:	440a      	add	r2, r1
 8007610:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007614:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007618:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800761a:	7ffb      	ldrb	r3, [r7, #31]
}
 800761c:	4618      	mov	r0, r3
 800761e:	3720      	adds	r7, #32
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}
 8007624:	40040000 	.word	0x40040000

08007628 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b08c      	sub	sp, #48	@ 0x30
 800762c:	af02      	add	r7, sp, #8
 800762e:	60f8      	str	r0, [r7, #12]
 8007630:	60b9      	str	r1, [r7, #8]
 8007632:	4613      	mov	r3, r2
 8007634:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	785b      	ldrb	r3, [r3, #1]
 800763e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8007640:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007644:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	4a5d      	ldr	r2, [pc, #372]	@ (80077c0 <USB_HC_StartXfer+0x198>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d12f      	bne.n	80076ae <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800764e:	79fb      	ldrb	r3, [r7, #7]
 8007650:	2b01      	cmp	r3, #1
 8007652:	d11c      	bne.n	800768e <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	7c9b      	ldrb	r3, [r3, #18]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d003      	beq.n	8007664 <USB_HC_StartXfer+0x3c>
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	7c9b      	ldrb	r3, [r3, #18]
 8007660:	2b02      	cmp	r3, #2
 8007662:	d124      	bne.n	80076ae <USB_HC_StartXfer+0x86>
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	799b      	ldrb	r3, [r3, #6]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d120      	bne.n	80076ae <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800766c:	69fb      	ldr	r3, [r7, #28]
 800766e:	015a      	lsls	r2, r3, #5
 8007670:	6a3b      	ldr	r3, [r7, #32]
 8007672:	4413      	add	r3, r2
 8007674:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007678:	68db      	ldr	r3, [r3, #12]
 800767a:	69fa      	ldr	r2, [r7, #28]
 800767c:	0151      	lsls	r1, r2, #5
 800767e:	6a3a      	ldr	r2, [r7, #32]
 8007680:	440a      	add	r2, r1
 8007682:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007686:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800768a:	60d3      	str	r3, [r2, #12]
 800768c:	e00f      	b.n	80076ae <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	791b      	ldrb	r3, [r3, #4]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d10b      	bne.n	80076ae <USB_HC_StartXfer+0x86>
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	795b      	ldrb	r3, [r3, #5]
 800769a:	2b01      	cmp	r3, #1
 800769c:	d107      	bne.n	80076ae <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	785b      	ldrb	r3, [r3, #1]
 80076a2:	4619      	mov	r1, r3
 80076a4:	68f8      	ldr	r0, [r7, #12]
 80076a6:	f000 fb6b 	bl	8007d80 <USB_DoPing>
        return HAL_OK;
 80076aa:	2300      	movs	r3, #0
 80076ac:	e232      	b.n	8007b14 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	799b      	ldrb	r3, [r3, #6]
 80076b2:	2b01      	cmp	r3, #1
 80076b4:	d158      	bne.n	8007768 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 80076b6:	2301      	movs	r3, #1
 80076b8:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	78db      	ldrb	r3, [r3, #3]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d007      	beq.n	80076d2 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80076c2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80076c4:	68ba      	ldr	r2, [r7, #8]
 80076c6:	8a92      	ldrh	r2, [r2, #20]
 80076c8:	fb03 f202 	mul.w	r2, r3, r2
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	61da      	str	r2, [r3, #28]
 80076d0:	e07c      	b.n	80077cc <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	7c9b      	ldrb	r3, [r3, #18]
 80076d6:	2b01      	cmp	r3, #1
 80076d8:	d130      	bne.n	800773c <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	6a1b      	ldr	r3, [r3, #32]
 80076de:	2bbc      	cmp	r3, #188	@ 0xbc
 80076e0:	d918      	bls.n	8007714 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	8a9b      	ldrh	r3, [r3, #20]
 80076e6:	461a      	mov	r2, r3
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	69da      	ldr	r2, [r3, #28]
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	68db      	ldr	r3, [r3, #12]
 80076f8:	2b01      	cmp	r3, #1
 80076fa:	d003      	beq.n	8007704 <USB_HC_StartXfer+0xdc>
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	68db      	ldr	r3, [r3, #12]
 8007700:	2b02      	cmp	r3, #2
 8007702:	d103      	bne.n	800770c <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	2202      	movs	r2, #2
 8007708:	60da      	str	r2, [r3, #12]
 800770a:	e05f      	b.n	80077cc <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	2201      	movs	r2, #1
 8007710:	60da      	str	r2, [r3, #12]
 8007712:	e05b      	b.n	80077cc <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	6a1a      	ldr	r2, [r3, #32]
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	68db      	ldr	r3, [r3, #12]
 8007720:	2b01      	cmp	r3, #1
 8007722:	d007      	beq.n	8007734 <USB_HC_StartXfer+0x10c>
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	68db      	ldr	r3, [r3, #12]
 8007728:	2b02      	cmp	r3, #2
 800772a:	d003      	beq.n	8007734 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	2204      	movs	r2, #4
 8007730:	60da      	str	r2, [r3, #12]
 8007732:	e04b      	b.n	80077cc <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	2203      	movs	r2, #3
 8007738:	60da      	str	r2, [r3, #12]
 800773a:	e047      	b.n	80077cc <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 800773c:	79fb      	ldrb	r3, [r7, #7]
 800773e:	2b01      	cmp	r3, #1
 8007740:	d10d      	bne.n	800775e <USB_HC_StartXfer+0x136>
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	6a1b      	ldr	r3, [r3, #32]
 8007746:	68ba      	ldr	r2, [r7, #8]
 8007748:	8a92      	ldrh	r2, [r2, #20]
 800774a:	4293      	cmp	r3, r2
 800774c:	d907      	bls.n	800775e <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800774e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007750:	68ba      	ldr	r2, [r7, #8]
 8007752:	8a92      	ldrh	r2, [r2, #20]
 8007754:	fb03 f202 	mul.w	r2, r3, r2
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	61da      	str	r2, [r3, #28]
 800775c:	e036      	b.n	80077cc <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	6a1a      	ldr	r2, [r3, #32]
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	61da      	str	r2, [r3, #28]
 8007766:	e031      	b.n	80077cc <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	6a1b      	ldr	r3, [r3, #32]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d018      	beq.n	80077a2 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	6a1b      	ldr	r3, [r3, #32]
 8007774:	68ba      	ldr	r2, [r7, #8]
 8007776:	8a92      	ldrh	r2, [r2, #20]
 8007778:	4413      	add	r3, r2
 800777a:	3b01      	subs	r3, #1
 800777c:	68ba      	ldr	r2, [r7, #8]
 800777e:	8a92      	ldrh	r2, [r2, #20]
 8007780:	fbb3 f3f2 	udiv	r3, r3, r2
 8007784:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8007786:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8007788:	8b7b      	ldrh	r3, [r7, #26]
 800778a:	429a      	cmp	r2, r3
 800778c:	d90b      	bls.n	80077a6 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 800778e:	8b7b      	ldrh	r3, [r7, #26]
 8007790:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007792:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007794:	68ba      	ldr	r2, [r7, #8]
 8007796:	8a92      	ldrh	r2, [r2, #20]
 8007798:	fb03 f202 	mul.w	r2, r3, r2
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	61da      	str	r2, [r3, #28]
 80077a0:	e001      	b.n	80077a6 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 80077a2:	2301      	movs	r3, #1
 80077a4:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	78db      	ldrb	r3, [r3, #3]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d00a      	beq.n	80077c4 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80077ae:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80077b0:	68ba      	ldr	r2, [r7, #8]
 80077b2:	8a92      	ldrh	r2, [r2, #20]
 80077b4:	fb03 f202 	mul.w	r2, r3, r2
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	61da      	str	r2, [r3, #28]
 80077bc:	e006      	b.n	80077cc <USB_HC_StartXfer+0x1a4>
 80077be:	bf00      	nop
 80077c0:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	6a1a      	ldr	r2, [r3, #32]
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	69db      	ldr	r3, [r3, #28]
 80077d0:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80077d4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80077d6:	04d9      	lsls	r1, r3, #19
 80077d8:	4ba3      	ldr	r3, [pc, #652]	@ (8007a68 <USB_HC_StartXfer+0x440>)
 80077da:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80077dc:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	7d9b      	ldrb	r3, [r3, #22]
 80077e2:	075b      	lsls	r3, r3, #29
 80077e4:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80077e8:	69f9      	ldr	r1, [r7, #28]
 80077ea:	0148      	lsls	r0, r1, #5
 80077ec:	6a39      	ldr	r1, [r7, #32]
 80077ee:	4401      	add	r1, r0
 80077f0:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80077f4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80077f6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80077f8:	79fb      	ldrb	r3, [r7, #7]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d009      	beq.n	8007812 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	6999      	ldr	r1, [r3, #24]
 8007802:	69fb      	ldr	r3, [r7, #28]
 8007804:	015a      	lsls	r2, r3, #5
 8007806:	6a3b      	ldr	r3, [r7, #32]
 8007808:	4413      	add	r3, r2
 800780a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800780e:	460a      	mov	r2, r1
 8007810:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8007812:	6a3b      	ldr	r3, [r7, #32]
 8007814:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007818:	689b      	ldr	r3, [r3, #8]
 800781a:	f003 0301 	and.w	r3, r3, #1
 800781e:	2b00      	cmp	r3, #0
 8007820:	bf0c      	ite	eq
 8007822:	2301      	moveq	r3, #1
 8007824:	2300      	movne	r3, #0
 8007826:	b2db      	uxtb	r3, r3
 8007828:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800782a:	69fb      	ldr	r3, [r7, #28]
 800782c:	015a      	lsls	r2, r3, #5
 800782e:	6a3b      	ldr	r3, [r7, #32]
 8007830:	4413      	add	r3, r2
 8007832:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	69fa      	ldr	r2, [r7, #28]
 800783a:	0151      	lsls	r1, r2, #5
 800783c:	6a3a      	ldr	r2, [r7, #32]
 800783e:	440a      	add	r2, r1
 8007840:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007844:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007848:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800784a:	69fb      	ldr	r3, [r7, #28]
 800784c:	015a      	lsls	r2, r3, #5
 800784e:	6a3b      	ldr	r3, [r7, #32]
 8007850:	4413      	add	r3, r2
 8007852:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007856:	681a      	ldr	r2, [r3, #0]
 8007858:	7e7b      	ldrb	r3, [r7, #25]
 800785a:	075b      	lsls	r3, r3, #29
 800785c:	69f9      	ldr	r1, [r7, #28]
 800785e:	0148      	lsls	r0, r1, #5
 8007860:	6a39      	ldr	r1, [r7, #32]
 8007862:	4401      	add	r1, r0
 8007864:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8007868:	4313      	orrs	r3, r2
 800786a:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	799b      	ldrb	r3, [r3, #6]
 8007870:	2b01      	cmp	r3, #1
 8007872:	f040 80c3 	bne.w	80079fc <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	7c5b      	ldrb	r3, [r3, #17]
 800787a:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800787c:	68ba      	ldr	r2, [r7, #8]
 800787e:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007880:	4313      	orrs	r3, r2
 8007882:	69fa      	ldr	r2, [r7, #28]
 8007884:	0151      	lsls	r1, r2, #5
 8007886:	6a3a      	ldr	r2, [r7, #32]
 8007888:	440a      	add	r2, r1
 800788a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800788e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007892:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8007894:	69fb      	ldr	r3, [r7, #28]
 8007896:	015a      	lsls	r2, r3, #5
 8007898:	6a3b      	ldr	r3, [r7, #32]
 800789a:	4413      	add	r3, r2
 800789c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80078a0:	68db      	ldr	r3, [r3, #12]
 80078a2:	69fa      	ldr	r2, [r7, #28]
 80078a4:	0151      	lsls	r1, r2, #5
 80078a6:	6a3a      	ldr	r2, [r7, #32]
 80078a8:	440a      	add	r2, r1
 80078aa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80078ae:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80078b2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	79db      	ldrb	r3, [r3, #7]
 80078b8:	2b01      	cmp	r3, #1
 80078ba:	d123      	bne.n	8007904 <USB_HC_StartXfer+0x2dc>
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	78db      	ldrb	r3, [r3, #3]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d11f      	bne.n	8007904 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80078c4:	69fb      	ldr	r3, [r7, #28]
 80078c6:	015a      	lsls	r2, r3, #5
 80078c8:	6a3b      	ldr	r3, [r7, #32]
 80078ca:	4413      	add	r3, r2
 80078cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80078d0:	685b      	ldr	r3, [r3, #4]
 80078d2:	69fa      	ldr	r2, [r7, #28]
 80078d4:	0151      	lsls	r1, r2, #5
 80078d6:	6a3a      	ldr	r2, [r7, #32]
 80078d8:	440a      	add	r2, r1
 80078da:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80078de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80078e2:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80078e4:	69fb      	ldr	r3, [r7, #28]
 80078e6:	015a      	lsls	r2, r3, #5
 80078e8:	6a3b      	ldr	r3, [r7, #32]
 80078ea:	4413      	add	r3, r2
 80078ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80078f0:	68db      	ldr	r3, [r3, #12]
 80078f2:	69fa      	ldr	r2, [r7, #28]
 80078f4:	0151      	lsls	r1, r2, #5
 80078f6:	6a3a      	ldr	r2, [r7, #32]
 80078f8:	440a      	add	r2, r1
 80078fa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80078fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007902:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	7c9b      	ldrb	r3, [r3, #18]
 8007908:	2b01      	cmp	r3, #1
 800790a:	d003      	beq.n	8007914 <USB_HC_StartXfer+0x2ec>
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	7c9b      	ldrb	r3, [r3, #18]
 8007910:	2b03      	cmp	r3, #3
 8007912:	d117      	bne.n	8007944 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8007918:	2b01      	cmp	r3, #1
 800791a:	d113      	bne.n	8007944 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	78db      	ldrb	r3, [r3, #3]
 8007920:	2b01      	cmp	r3, #1
 8007922:	d10f      	bne.n	8007944 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8007924:	69fb      	ldr	r3, [r7, #28]
 8007926:	015a      	lsls	r2, r3, #5
 8007928:	6a3b      	ldr	r3, [r7, #32]
 800792a:	4413      	add	r3, r2
 800792c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007930:	685b      	ldr	r3, [r3, #4]
 8007932:	69fa      	ldr	r2, [r7, #28]
 8007934:	0151      	lsls	r1, r2, #5
 8007936:	6a3a      	ldr	r2, [r7, #32]
 8007938:	440a      	add	r2, r1
 800793a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800793e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007942:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	7c9b      	ldrb	r3, [r3, #18]
 8007948:	2b01      	cmp	r3, #1
 800794a:	d162      	bne.n	8007a12 <USB_HC_StartXfer+0x3ea>
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	78db      	ldrb	r3, [r3, #3]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d15e      	bne.n	8007a12 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	68db      	ldr	r3, [r3, #12]
 8007958:	3b01      	subs	r3, #1
 800795a:	2b03      	cmp	r3, #3
 800795c:	d858      	bhi.n	8007a10 <USB_HC_StartXfer+0x3e8>
 800795e:	a201      	add	r2, pc, #4	@ (adr r2, 8007964 <USB_HC_StartXfer+0x33c>)
 8007960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007964:	08007975 	.word	0x08007975
 8007968:	08007997 	.word	0x08007997
 800796c:	080079b9 	.word	0x080079b9
 8007970:	080079db 	.word	0x080079db
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8007974:	69fb      	ldr	r3, [r7, #28]
 8007976:	015a      	lsls	r2, r3, #5
 8007978:	6a3b      	ldr	r3, [r7, #32]
 800797a:	4413      	add	r3, r2
 800797c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007980:	685b      	ldr	r3, [r3, #4]
 8007982:	69fa      	ldr	r2, [r7, #28]
 8007984:	0151      	lsls	r1, r2, #5
 8007986:	6a3a      	ldr	r2, [r7, #32]
 8007988:	440a      	add	r2, r1
 800798a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800798e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007992:	6053      	str	r3, [r2, #4]
          break;
 8007994:	e03d      	b.n	8007a12 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8007996:	69fb      	ldr	r3, [r7, #28]
 8007998:	015a      	lsls	r2, r3, #5
 800799a:	6a3b      	ldr	r3, [r7, #32]
 800799c:	4413      	add	r3, r2
 800799e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80079a2:	685b      	ldr	r3, [r3, #4]
 80079a4:	69fa      	ldr	r2, [r7, #28]
 80079a6:	0151      	lsls	r1, r2, #5
 80079a8:	6a3a      	ldr	r2, [r7, #32]
 80079aa:	440a      	add	r2, r1
 80079ac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80079b0:	f043 030e 	orr.w	r3, r3, #14
 80079b4:	6053      	str	r3, [r2, #4]
          break;
 80079b6:	e02c      	b.n	8007a12 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 80079b8:	69fb      	ldr	r3, [r7, #28]
 80079ba:	015a      	lsls	r2, r3, #5
 80079bc:	6a3b      	ldr	r3, [r7, #32]
 80079be:	4413      	add	r3, r2
 80079c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80079c4:	685b      	ldr	r3, [r3, #4]
 80079c6:	69fa      	ldr	r2, [r7, #28]
 80079c8:	0151      	lsls	r1, r2, #5
 80079ca:	6a3a      	ldr	r2, [r7, #32]
 80079cc:	440a      	add	r2, r1
 80079ce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80079d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80079d6:	6053      	str	r3, [r2, #4]
          break;
 80079d8:	e01b      	b.n	8007a12 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 80079da:	69fb      	ldr	r3, [r7, #28]
 80079dc:	015a      	lsls	r2, r3, #5
 80079de:	6a3b      	ldr	r3, [r7, #32]
 80079e0:	4413      	add	r3, r2
 80079e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80079e6:	685b      	ldr	r3, [r3, #4]
 80079e8:	69fa      	ldr	r2, [r7, #28]
 80079ea:	0151      	lsls	r1, r2, #5
 80079ec:	6a3a      	ldr	r2, [r7, #32]
 80079ee:	440a      	add	r2, r1
 80079f0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80079f4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80079f8:	6053      	str	r3, [r2, #4]
          break;
 80079fa:	e00a      	b.n	8007a12 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80079fc:	69fb      	ldr	r3, [r7, #28]
 80079fe:	015a      	lsls	r2, r3, #5
 8007a00:	6a3b      	ldr	r3, [r7, #32]
 8007a02:	4413      	add	r3, r2
 8007a04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a08:	461a      	mov	r2, r3
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	6053      	str	r3, [r2, #4]
 8007a0e:	e000      	b.n	8007a12 <USB_HC_StartXfer+0x3ea>
          break;
 8007a10:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007a12:	69fb      	ldr	r3, [r7, #28]
 8007a14:	015a      	lsls	r2, r3, #5
 8007a16:	6a3b      	ldr	r3, [r7, #32]
 8007a18:	4413      	add	r3, r2
 8007a1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007a22:	693b      	ldr	r3, [r7, #16]
 8007a24:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007a28:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	78db      	ldrb	r3, [r3, #3]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d004      	beq.n	8007a3c <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007a32:	693b      	ldr	r3, [r7, #16]
 8007a34:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007a38:	613b      	str	r3, [r7, #16]
 8007a3a:	e003      	b.n	8007a44 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007a3c:	693b      	ldr	r3, [r7, #16]
 8007a3e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007a42:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007a44:	693b      	ldr	r3, [r7, #16]
 8007a46:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007a4a:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007a4c:	69fb      	ldr	r3, [r7, #28]
 8007a4e:	015a      	lsls	r2, r3, #5
 8007a50:	6a3b      	ldr	r3, [r7, #32]
 8007a52:	4413      	add	r3, r2
 8007a54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a58:	461a      	mov	r2, r3
 8007a5a:	693b      	ldr	r3, [r7, #16]
 8007a5c:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8007a5e:	79fb      	ldrb	r3, [r7, #7]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d003      	beq.n	8007a6c <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8007a64:	2300      	movs	r3, #0
 8007a66:	e055      	b.n	8007b14 <USB_HC_StartXfer+0x4ec>
 8007a68:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	78db      	ldrb	r3, [r3, #3]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d14e      	bne.n	8007b12 <USB_HC_StartXfer+0x4ea>
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	6a1b      	ldr	r3, [r3, #32]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d04a      	beq.n	8007b12 <USB_HC_StartXfer+0x4ea>
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	79db      	ldrb	r3, [r3, #7]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d146      	bne.n	8007b12 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8007a84:	68bb      	ldr	r3, [r7, #8]
 8007a86:	7c9b      	ldrb	r3, [r3, #18]
 8007a88:	2b03      	cmp	r3, #3
 8007a8a:	d831      	bhi.n	8007af0 <USB_HC_StartXfer+0x4c8>
 8007a8c:	a201      	add	r2, pc, #4	@ (adr r2, 8007a94 <USB_HC_StartXfer+0x46c>)
 8007a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a92:	bf00      	nop
 8007a94:	08007aa5 	.word	0x08007aa5
 8007a98:	08007ac9 	.word	0x08007ac9
 8007a9c:	08007aa5 	.word	0x08007aa5
 8007aa0:	08007ac9 	.word	0x08007ac9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	6a1b      	ldr	r3, [r3, #32]
 8007aa8:	3303      	adds	r3, #3
 8007aaa:	089b      	lsrs	r3, r3, #2
 8007aac:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007aae:	8afa      	ldrh	r2, [r7, #22]
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ab4:	b29b      	uxth	r3, r3
 8007ab6:	429a      	cmp	r2, r3
 8007ab8:	d91c      	bls.n	8007af4 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	699b      	ldr	r3, [r3, #24]
 8007abe:	f043 0220 	orr.w	r2, r3, #32
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	619a      	str	r2, [r3, #24]
        }
        break;
 8007ac6:	e015      	b.n	8007af4 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007ac8:	68bb      	ldr	r3, [r7, #8]
 8007aca:	6a1b      	ldr	r3, [r3, #32]
 8007acc:	3303      	adds	r3, #3
 8007ace:	089b      	lsrs	r3, r3, #2
 8007ad0:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007ad2:	8afa      	ldrh	r2, [r7, #22]
 8007ad4:	6a3b      	ldr	r3, [r7, #32]
 8007ad6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007ada:	691b      	ldr	r3, [r3, #16]
 8007adc:	b29b      	uxth	r3, r3
 8007ade:	429a      	cmp	r2, r3
 8007ae0:	d90a      	bls.n	8007af8 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	699b      	ldr	r3, [r3, #24]
 8007ae6:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	619a      	str	r2, [r3, #24]
        }
        break;
 8007aee:	e003      	b.n	8007af8 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8007af0:	bf00      	nop
 8007af2:	e002      	b.n	8007afa <USB_HC_StartXfer+0x4d2>
        break;
 8007af4:	bf00      	nop
 8007af6:	e000      	b.n	8007afa <USB_HC_StartXfer+0x4d2>
        break;
 8007af8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	6999      	ldr	r1, [r3, #24]
 8007afe:	68bb      	ldr	r3, [r7, #8]
 8007b00:	785a      	ldrb	r2, [r3, #1]
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	6a1b      	ldr	r3, [r3, #32]
 8007b06:	b29b      	uxth	r3, r3
 8007b08:	2000      	movs	r0, #0
 8007b0a:	9000      	str	r0, [sp, #0]
 8007b0c:	68f8      	ldr	r0, [r7, #12]
 8007b0e:	f7ff f9c9 	bl	8006ea4 <USB_WritePacket>
  }

  return HAL_OK;
 8007b12:	2300      	movs	r3, #0
}
 8007b14:	4618      	mov	r0, r3
 8007b16:	3728      	adds	r7, #40	@ 0x28
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}

08007b1c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b085      	sub	sp, #20
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007b2e:	695b      	ldr	r3, [r3, #20]
 8007b30:	b29b      	uxth	r3, r3
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	3714      	adds	r7, #20
 8007b36:	46bd      	mov	sp, r7
 8007b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3c:	4770      	bx	lr

08007b3e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007b3e:	b480      	push	{r7}
 8007b40:	b089      	sub	sp, #36	@ 0x24
 8007b42:	af00      	add	r7, sp, #0
 8007b44:	6078      	str	r0, [r7, #4]
 8007b46:	460b      	mov	r3, r1
 8007b48:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8007b4e:	78fb      	ldrb	r3, [r7, #3]
 8007b50:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8007b52:	2300      	movs	r3, #0
 8007b54:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007b56:	69bb      	ldr	r3, [r7, #24]
 8007b58:	015a      	lsls	r2, r3, #5
 8007b5a:	69fb      	ldr	r3, [r7, #28]
 8007b5c:	4413      	add	r3, r2
 8007b5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	0c9b      	lsrs	r3, r3, #18
 8007b66:	f003 0303 	and.w	r3, r3, #3
 8007b6a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007b6c:	69bb      	ldr	r3, [r7, #24]
 8007b6e:	015a      	lsls	r2, r3, #5
 8007b70:	69fb      	ldr	r3, [r7, #28]
 8007b72:	4413      	add	r3, r2
 8007b74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	0fdb      	lsrs	r3, r3, #31
 8007b7c:	f003 0301 	and.w	r3, r3, #1
 8007b80:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8007b82:	69bb      	ldr	r3, [r7, #24]
 8007b84:	015a      	lsls	r2, r3, #5
 8007b86:	69fb      	ldr	r3, [r7, #28]
 8007b88:	4413      	add	r3, r2
 8007b8a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b8e:	685b      	ldr	r3, [r3, #4]
 8007b90:	0fdb      	lsrs	r3, r3, #31
 8007b92:	f003 0301 	and.w	r3, r3, #1
 8007b96:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	689b      	ldr	r3, [r3, #8]
 8007b9c:	f003 0320 	and.w	r3, r3, #32
 8007ba0:	2b20      	cmp	r3, #32
 8007ba2:	d10d      	bne.n	8007bc0 <USB_HC_Halt+0x82>
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d10a      	bne.n	8007bc0 <USB_HC_Halt+0x82>
 8007baa:	693b      	ldr	r3, [r7, #16]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d005      	beq.n	8007bbc <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8007bb0:	697b      	ldr	r3, [r7, #20]
 8007bb2:	2b01      	cmp	r3, #1
 8007bb4:	d002      	beq.n	8007bbc <USB_HC_Halt+0x7e>
 8007bb6:	697b      	ldr	r3, [r7, #20]
 8007bb8:	2b03      	cmp	r3, #3
 8007bba:	d101      	bne.n	8007bc0 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	e0d8      	b.n	8007d72 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007bc0:	697b      	ldr	r3, [r7, #20]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d002      	beq.n	8007bcc <USB_HC_Halt+0x8e>
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	2b02      	cmp	r3, #2
 8007bca:	d173      	bne.n	8007cb4 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007bcc:	69bb      	ldr	r3, [r7, #24]
 8007bce:	015a      	lsls	r2, r3, #5
 8007bd0:	69fb      	ldr	r3, [r7, #28]
 8007bd2:	4413      	add	r3, r2
 8007bd4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	69ba      	ldr	r2, [r7, #24]
 8007bdc:	0151      	lsls	r1, r2, #5
 8007bde:	69fa      	ldr	r2, [r7, #28]
 8007be0:	440a      	add	r2, r1
 8007be2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007be6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007bea:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	689b      	ldr	r3, [r3, #8]
 8007bf0:	f003 0320 	and.w	r3, r3, #32
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d14a      	bne.n	8007c8e <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bfc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d133      	bne.n	8007c6c <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007c04:	69bb      	ldr	r3, [r7, #24]
 8007c06:	015a      	lsls	r2, r3, #5
 8007c08:	69fb      	ldr	r3, [r7, #28]
 8007c0a:	4413      	add	r3, r2
 8007c0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	69ba      	ldr	r2, [r7, #24]
 8007c14:	0151      	lsls	r1, r2, #5
 8007c16:	69fa      	ldr	r2, [r7, #28]
 8007c18:	440a      	add	r2, r1
 8007c1a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007c1e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007c22:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007c24:	69bb      	ldr	r3, [r7, #24]
 8007c26:	015a      	lsls	r2, r3, #5
 8007c28:	69fb      	ldr	r3, [r7, #28]
 8007c2a:	4413      	add	r3, r2
 8007c2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	69ba      	ldr	r2, [r7, #24]
 8007c34:	0151      	lsls	r1, r2, #5
 8007c36:	69fa      	ldr	r2, [r7, #28]
 8007c38:	440a      	add	r2, r1
 8007c3a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007c3e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007c42:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	3301      	adds	r3, #1
 8007c48:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007c50:	d82e      	bhi.n	8007cb0 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007c52:	69bb      	ldr	r3, [r7, #24]
 8007c54:	015a      	lsls	r2, r3, #5
 8007c56:	69fb      	ldr	r3, [r7, #28]
 8007c58:	4413      	add	r3, r2
 8007c5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007c64:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007c68:	d0ec      	beq.n	8007c44 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007c6a:	e081      	b.n	8007d70 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007c6c:	69bb      	ldr	r3, [r7, #24]
 8007c6e:	015a      	lsls	r2, r3, #5
 8007c70:	69fb      	ldr	r3, [r7, #28]
 8007c72:	4413      	add	r3, r2
 8007c74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	69ba      	ldr	r2, [r7, #24]
 8007c7c:	0151      	lsls	r1, r2, #5
 8007c7e:	69fa      	ldr	r2, [r7, #28]
 8007c80:	440a      	add	r2, r1
 8007c82:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007c86:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007c8a:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007c8c:	e070      	b.n	8007d70 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007c8e:	69bb      	ldr	r3, [r7, #24]
 8007c90:	015a      	lsls	r2, r3, #5
 8007c92:	69fb      	ldr	r3, [r7, #28]
 8007c94:	4413      	add	r3, r2
 8007c96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	69ba      	ldr	r2, [r7, #24]
 8007c9e:	0151      	lsls	r1, r2, #5
 8007ca0:	69fa      	ldr	r2, [r7, #28]
 8007ca2:	440a      	add	r2, r1
 8007ca4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007ca8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007cac:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007cae:	e05f      	b.n	8007d70 <USB_HC_Halt+0x232>
            break;
 8007cb0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007cb2:	e05d      	b.n	8007d70 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007cb4:	69bb      	ldr	r3, [r7, #24]
 8007cb6:	015a      	lsls	r2, r3, #5
 8007cb8:	69fb      	ldr	r3, [r7, #28]
 8007cba:	4413      	add	r3, r2
 8007cbc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	69ba      	ldr	r2, [r7, #24]
 8007cc4:	0151      	lsls	r1, r2, #5
 8007cc6:	69fa      	ldr	r2, [r7, #28]
 8007cc8:	440a      	add	r2, r1
 8007cca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007cce:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007cd2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007cd4:	69fb      	ldr	r3, [r7, #28]
 8007cd6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007cda:	691b      	ldr	r3, [r3, #16]
 8007cdc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d133      	bne.n	8007d4c <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007ce4:	69bb      	ldr	r3, [r7, #24]
 8007ce6:	015a      	lsls	r2, r3, #5
 8007ce8:	69fb      	ldr	r3, [r7, #28]
 8007cea:	4413      	add	r3, r2
 8007cec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	69ba      	ldr	r2, [r7, #24]
 8007cf4:	0151      	lsls	r1, r2, #5
 8007cf6:	69fa      	ldr	r2, [r7, #28]
 8007cf8:	440a      	add	r2, r1
 8007cfa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007cfe:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007d02:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007d04:	69bb      	ldr	r3, [r7, #24]
 8007d06:	015a      	lsls	r2, r3, #5
 8007d08:	69fb      	ldr	r3, [r7, #28]
 8007d0a:	4413      	add	r3, r2
 8007d0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	69ba      	ldr	r2, [r7, #24]
 8007d14:	0151      	lsls	r1, r2, #5
 8007d16:	69fa      	ldr	r2, [r7, #28]
 8007d18:	440a      	add	r2, r1
 8007d1a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007d1e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007d22:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	3301      	adds	r3, #1
 8007d28:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007d30:	d81d      	bhi.n	8007d6e <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007d32:	69bb      	ldr	r3, [r7, #24]
 8007d34:	015a      	lsls	r2, r3, #5
 8007d36:	69fb      	ldr	r3, [r7, #28]
 8007d38:	4413      	add	r3, r2
 8007d3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007d44:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007d48:	d0ec      	beq.n	8007d24 <USB_HC_Halt+0x1e6>
 8007d4a:	e011      	b.n	8007d70 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007d4c:	69bb      	ldr	r3, [r7, #24]
 8007d4e:	015a      	lsls	r2, r3, #5
 8007d50:	69fb      	ldr	r3, [r7, #28]
 8007d52:	4413      	add	r3, r2
 8007d54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	69ba      	ldr	r2, [r7, #24]
 8007d5c:	0151      	lsls	r1, r2, #5
 8007d5e:	69fa      	ldr	r2, [r7, #28]
 8007d60:	440a      	add	r2, r1
 8007d62:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007d66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007d6a:	6013      	str	r3, [r2, #0]
 8007d6c:	e000      	b.n	8007d70 <USB_HC_Halt+0x232>
          break;
 8007d6e:	bf00      	nop
    }
  }

  return HAL_OK;
 8007d70:	2300      	movs	r3, #0
}
 8007d72:	4618      	mov	r0, r3
 8007d74:	3724      	adds	r7, #36	@ 0x24
 8007d76:	46bd      	mov	sp, r7
 8007d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7c:	4770      	bx	lr
	...

08007d80 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007d80:	b480      	push	{r7}
 8007d82:	b087      	sub	sp, #28
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
 8007d88:	460b      	mov	r3, r1
 8007d8a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007d90:	78fb      	ldrb	r3, [r7, #3]
 8007d92:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007d94:	2301      	movs	r3, #1
 8007d96:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	04da      	lsls	r2, r3, #19
 8007d9c:	4b15      	ldr	r3, [pc, #84]	@ (8007df4 <USB_DoPing+0x74>)
 8007d9e:	4013      	ands	r3, r2
 8007da0:	693a      	ldr	r2, [r7, #16]
 8007da2:	0151      	lsls	r1, r2, #5
 8007da4:	697a      	ldr	r2, [r7, #20]
 8007da6:	440a      	add	r2, r1
 8007da8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007dac:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007db0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8007db2:	693b      	ldr	r3, [r7, #16]
 8007db4:	015a      	lsls	r2, r3, #5
 8007db6:	697b      	ldr	r3, [r7, #20]
 8007db8:	4413      	add	r3, r2
 8007dba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007dc2:	68bb      	ldr	r3, [r7, #8]
 8007dc4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007dc8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007dd0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8007dd2:	693b      	ldr	r3, [r7, #16]
 8007dd4:	015a      	lsls	r2, r3, #5
 8007dd6:	697b      	ldr	r3, [r7, #20]
 8007dd8:	4413      	add	r3, r2
 8007dda:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007dde:	461a      	mov	r2, r3
 8007de0:	68bb      	ldr	r3, [r7, #8]
 8007de2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007de4:	2300      	movs	r3, #0
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	371c      	adds	r7, #28
 8007dea:	46bd      	mov	sp, r7
 8007dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df0:	4770      	bx	lr
 8007df2:	bf00      	nop
 8007df4:	1ff80000 	.word	0x1ff80000

08007df8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b088      	sub	sp, #32
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007e00:	2300      	movs	r3, #0
 8007e02:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8007e08:	2300      	movs	r3, #0
 8007e0a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f7fe ff8c 	bl	8006d2a <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007e12:	2110      	movs	r1, #16
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f7fe ffe5 	bl	8006de4 <USB_FlushTxFifo>
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d001      	beq.n	8007e24 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8007e20:	2301      	movs	r3, #1
 8007e22:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f7ff f80f 	bl	8006e48 <USB_FlushRxFifo>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d001      	beq.n	8007e34 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8007e30:	2301      	movs	r3, #1
 8007e32:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007e34:	2300      	movs	r3, #0
 8007e36:	61bb      	str	r3, [r7, #24]
 8007e38:	e01f      	b.n	8007e7a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8007e3a:	69bb      	ldr	r3, [r7, #24]
 8007e3c:	015a      	lsls	r2, r3, #5
 8007e3e:	697b      	ldr	r3, [r7, #20]
 8007e40:	4413      	add	r3, r2
 8007e42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007e4a:	693b      	ldr	r3, [r7, #16]
 8007e4c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007e50:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007e52:	693b      	ldr	r3, [r7, #16]
 8007e54:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007e58:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007e5a:	693b      	ldr	r3, [r7, #16]
 8007e5c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007e60:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007e62:	69bb      	ldr	r3, [r7, #24]
 8007e64:	015a      	lsls	r2, r3, #5
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	4413      	add	r3, r2
 8007e6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e6e:	461a      	mov	r2, r3
 8007e70:	693b      	ldr	r3, [r7, #16]
 8007e72:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007e74:	69bb      	ldr	r3, [r7, #24]
 8007e76:	3301      	adds	r3, #1
 8007e78:	61bb      	str	r3, [r7, #24]
 8007e7a:	69bb      	ldr	r3, [r7, #24]
 8007e7c:	2b0f      	cmp	r3, #15
 8007e7e:	d9dc      	bls.n	8007e3a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007e80:	2300      	movs	r3, #0
 8007e82:	61bb      	str	r3, [r7, #24]
 8007e84:	e034      	b.n	8007ef0 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8007e86:	69bb      	ldr	r3, [r7, #24]
 8007e88:	015a      	lsls	r2, r3, #5
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	4413      	add	r3, r2
 8007e8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007e96:	693b      	ldr	r3, [r7, #16]
 8007e98:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007e9c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8007e9e:	693b      	ldr	r3, [r7, #16]
 8007ea0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007ea4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007ea6:	693b      	ldr	r3, [r7, #16]
 8007ea8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007eac:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007eae:	69bb      	ldr	r3, [r7, #24]
 8007eb0:	015a      	lsls	r2, r3, #5
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	4413      	add	r3, r2
 8007eb6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007eba:	461a      	mov	r2, r3
 8007ebc:	693b      	ldr	r3, [r7, #16]
 8007ebe:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	3301      	adds	r3, #1
 8007ec4:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007ecc:	d80c      	bhi.n	8007ee8 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007ece:	69bb      	ldr	r3, [r7, #24]
 8007ed0:	015a      	lsls	r2, r3, #5
 8007ed2:	697b      	ldr	r3, [r7, #20]
 8007ed4:	4413      	add	r3, r2
 8007ed6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007ee0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007ee4:	d0ec      	beq.n	8007ec0 <USB_StopHost+0xc8>
 8007ee6:	e000      	b.n	8007eea <USB_StopHost+0xf2>
        break;
 8007ee8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8007eea:	69bb      	ldr	r3, [r7, #24]
 8007eec:	3301      	adds	r3, #1
 8007eee:	61bb      	str	r3, [r7, #24]
 8007ef0:	69bb      	ldr	r3, [r7, #24]
 8007ef2:	2b0f      	cmp	r3, #15
 8007ef4:	d9c7      	bls.n	8007e86 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8007ef6:	697b      	ldr	r3, [r7, #20]
 8007ef8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007efc:	461a      	mov	r2, r3
 8007efe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007f02:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007f0a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f7fe fefb 	bl	8006d08 <USB_EnableGlobalInt>

  return ret;
 8007f12:	7ffb      	ldrb	r3, [r7, #31]
}
 8007f14:	4618      	mov	r0, r3
 8007f16:	3720      	adds	r7, #32
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bd80      	pop	{r7, pc}

08007f1c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007f1c:	b590      	push	{r4, r7, lr}
 8007f1e:	b089      	sub	sp, #36	@ 0x24
 8007f20:	af04      	add	r7, sp, #16
 8007f22:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8007f24:	2301      	movs	r3, #1
 8007f26:	2202      	movs	r2, #2
 8007f28:	2102      	movs	r1, #2
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f000 fcd1 	bl	80088d2 <USBH_FindInterface>
 8007f30:	4603      	mov	r3, r0
 8007f32:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007f34:	7bfb      	ldrb	r3, [r7, #15]
 8007f36:	2bff      	cmp	r3, #255	@ 0xff
 8007f38:	d002      	beq.n	8007f40 <USBH_CDC_InterfaceInit+0x24>
 8007f3a:	7bfb      	ldrb	r3, [r7, #15]
 8007f3c:	2b01      	cmp	r3, #1
 8007f3e:	d901      	bls.n	8007f44 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007f40:	2302      	movs	r3, #2
 8007f42:	e13d      	b.n	80081c0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007f44:	7bfb      	ldrb	r3, [r7, #15]
 8007f46:	4619      	mov	r1, r3
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f000 fca6 	bl	800889a <USBH_SelectInterface>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007f52:	7bbb      	ldrb	r3, [r7, #14]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d001      	beq.n	8007f5c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007f58:	2302      	movs	r3, #2
 8007f5a:	e131      	b.n	80081c0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8007f62:	2050      	movs	r0, #80	@ 0x50
 8007f64:	f005 fda0 	bl	800daa8 <malloc>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007f72:	69db      	ldr	r3, [r3, #28]
 8007f74:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8007f76:	68bb      	ldr	r3, [r7, #8]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d101      	bne.n	8007f80 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8007f7c:	2302      	movs	r3, #2
 8007f7e:	e11f      	b.n	80081c0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007f80:	2250      	movs	r2, #80	@ 0x50
 8007f82:	2100      	movs	r1, #0
 8007f84:	68b8      	ldr	r0, [r7, #8]
 8007f86:	f005 fe4d 	bl	800dc24 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007f8a:	7bfb      	ldrb	r3, [r7, #15]
 8007f8c:	687a      	ldr	r2, [r7, #4]
 8007f8e:	211a      	movs	r1, #26
 8007f90:	fb01 f303 	mul.w	r3, r1, r3
 8007f94:	4413      	add	r3, r2
 8007f96:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007f9a:	781b      	ldrb	r3, [r3, #0]
 8007f9c:	b25b      	sxtb	r3, r3
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	da15      	bge.n	8007fce <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007fa2:	7bfb      	ldrb	r3, [r7, #15]
 8007fa4:	687a      	ldr	r2, [r7, #4]
 8007fa6:	211a      	movs	r1, #26
 8007fa8:	fb01 f303 	mul.w	r3, r1, r3
 8007fac:	4413      	add	r3, r2
 8007fae:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007fb2:	781a      	ldrb	r2, [r3, #0]
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007fb8:	7bfb      	ldrb	r3, [r7, #15]
 8007fba:	687a      	ldr	r2, [r7, #4]
 8007fbc:	211a      	movs	r1, #26
 8007fbe:	fb01 f303 	mul.w	r3, r1, r3
 8007fc2:	4413      	add	r3, r2
 8007fc4:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007fc8:	881a      	ldrh	r2, [r3, #0]
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	785b      	ldrb	r3, [r3, #1]
 8007fd2:	4619      	mov	r1, r3
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f002 fa18 	bl	800a40a <USBH_AllocPipe>
 8007fda:	4603      	mov	r3, r0
 8007fdc:	461a      	mov	r2, r3
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	7819      	ldrb	r1, [r3, #0]
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	7858      	ldrb	r0, [r3, #1]
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007ff6:	68ba      	ldr	r2, [r7, #8]
 8007ff8:	8952      	ldrh	r2, [r2, #10]
 8007ffa:	9202      	str	r2, [sp, #8]
 8007ffc:	2203      	movs	r2, #3
 8007ffe:	9201      	str	r2, [sp, #4]
 8008000:	9300      	str	r3, [sp, #0]
 8008002:	4623      	mov	r3, r4
 8008004:	4602      	mov	r2, r0
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f002 f9d0 	bl	800a3ac <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	781b      	ldrb	r3, [r3, #0]
 8008010:	2200      	movs	r2, #0
 8008012:	4619      	mov	r1, r3
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	f005 fcc1 	bl	800d99c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800801a:	2300      	movs	r3, #0
 800801c:	2200      	movs	r2, #0
 800801e:	210a      	movs	r1, #10
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	f000 fc56 	bl	80088d2 <USBH_FindInterface>
 8008026:	4603      	mov	r3, r0
 8008028:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800802a:	7bfb      	ldrb	r3, [r7, #15]
 800802c:	2bff      	cmp	r3, #255	@ 0xff
 800802e:	d002      	beq.n	8008036 <USBH_CDC_InterfaceInit+0x11a>
 8008030:	7bfb      	ldrb	r3, [r7, #15]
 8008032:	2b01      	cmp	r3, #1
 8008034:	d901      	bls.n	800803a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008036:	2302      	movs	r3, #2
 8008038:	e0c2      	b.n	80081c0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800803a:	7bfb      	ldrb	r3, [r7, #15]
 800803c:	687a      	ldr	r2, [r7, #4]
 800803e:	211a      	movs	r1, #26
 8008040:	fb01 f303 	mul.w	r3, r1, r3
 8008044:	4413      	add	r3, r2
 8008046:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800804a:	781b      	ldrb	r3, [r3, #0]
 800804c:	b25b      	sxtb	r3, r3
 800804e:	2b00      	cmp	r3, #0
 8008050:	da16      	bge.n	8008080 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008052:	7bfb      	ldrb	r3, [r7, #15]
 8008054:	687a      	ldr	r2, [r7, #4]
 8008056:	211a      	movs	r1, #26
 8008058:	fb01 f303 	mul.w	r3, r1, r3
 800805c:	4413      	add	r3, r2
 800805e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008062:	781a      	ldrb	r2, [r3, #0]
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008068:	7bfb      	ldrb	r3, [r7, #15]
 800806a:	687a      	ldr	r2, [r7, #4]
 800806c:	211a      	movs	r1, #26
 800806e:	fb01 f303 	mul.w	r3, r1, r3
 8008072:	4413      	add	r3, r2
 8008074:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008078:	881a      	ldrh	r2, [r3, #0]
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	835a      	strh	r2, [r3, #26]
 800807e:	e015      	b.n	80080ac <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008080:	7bfb      	ldrb	r3, [r7, #15]
 8008082:	687a      	ldr	r2, [r7, #4]
 8008084:	211a      	movs	r1, #26
 8008086:	fb01 f303 	mul.w	r3, r1, r3
 800808a:	4413      	add	r3, r2
 800808c:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008090:	781a      	ldrb	r2, [r3, #0]
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008096:	7bfb      	ldrb	r3, [r7, #15]
 8008098:	687a      	ldr	r2, [r7, #4]
 800809a:	211a      	movs	r1, #26
 800809c:	fb01 f303 	mul.w	r3, r1, r3
 80080a0:	4413      	add	r3, r2
 80080a2:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80080a6:	881a      	ldrh	r2, [r3, #0]
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80080ac:	7bfb      	ldrb	r3, [r7, #15]
 80080ae:	687a      	ldr	r2, [r7, #4]
 80080b0:	211a      	movs	r1, #26
 80080b2:	fb01 f303 	mul.w	r3, r1, r3
 80080b6:	4413      	add	r3, r2
 80080b8:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80080bc:	781b      	ldrb	r3, [r3, #0]
 80080be:	b25b      	sxtb	r3, r3
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	da16      	bge.n	80080f2 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80080c4:	7bfb      	ldrb	r3, [r7, #15]
 80080c6:	687a      	ldr	r2, [r7, #4]
 80080c8:	211a      	movs	r1, #26
 80080ca:	fb01 f303 	mul.w	r3, r1, r3
 80080ce:	4413      	add	r3, r2
 80080d0:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80080d4:	781a      	ldrb	r2, [r3, #0]
 80080d6:	68bb      	ldr	r3, [r7, #8]
 80080d8:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80080da:	7bfb      	ldrb	r3, [r7, #15]
 80080dc:	687a      	ldr	r2, [r7, #4]
 80080de:	211a      	movs	r1, #26
 80080e0:	fb01 f303 	mul.w	r3, r1, r3
 80080e4:	4413      	add	r3, r2
 80080e6:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80080ea:	881a      	ldrh	r2, [r3, #0]
 80080ec:	68bb      	ldr	r3, [r7, #8]
 80080ee:	835a      	strh	r2, [r3, #26]
 80080f0:	e015      	b.n	800811e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80080f2:	7bfb      	ldrb	r3, [r7, #15]
 80080f4:	687a      	ldr	r2, [r7, #4]
 80080f6:	211a      	movs	r1, #26
 80080f8:	fb01 f303 	mul.w	r3, r1, r3
 80080fc:	4413      	add	r3, r2
 80080fe:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8008102:	781a      	ldrb	r2, [r3, #0]
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008108:	7bfb      	ldrb	r3, [r7, #15]
 800810a:	687a      	ldr	r2, [r7, #4]
 800810c:	211a      	movs	r1, #26
 800810e:	fb01 f303 	mul.w	r3, r1, r3
 8008112:	4413      	add	r3, r2
 8008114:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8008118:	881a      	ldrh	r2, [r3, #0]
 800811a:	68bb      	ldr	r3, [r7, #8]
 800811c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	7b9b      	ldrb	r3, [r3, #14]
 8008122:	4619      	mov	r1, r3
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	f002 f970 	bl	800a40a <USBH_AllocPipe>
 800812a:	4603      	mov	r3, r0
 800812c:	461a      	mov	r2, r3
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	7bdb      	ldrb	r3, [r3, #15]
 8008136:	4619      	mov	r1, r3
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f002 f966 	bl	800a40a <USBH_AllocPipe>
 800813e:	4603      	mov	r3, r0
 8008140:	461a      	mov	r2, r3
 8008142:	68bb      	ldr	r3, [r7, #8]
 8008144:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	7b59      	ldrb	r1, [r3, #13]
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	7b98      	ldrb	r0, [r3, #14]
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800815a:	68ba      	ldr	r2, [r7, #8]
 800815c:	8b12      	ldrh	r2, [r2, #24]
 800815e:	9202      	str	r2, [sp, #8]
 8008160:	2202      	movs	r2, #2
 8008162:	9201      	str	r2, [sp, #4]
 8008164:	9300      	str	r3, [sp, #0]
 8008166:	4623      	mov	r3, r4
 8008168:	4602      	mov	r2, r0
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f002 f91e 	bl	800a3ac <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	7b19      	ldrb	r1, [r3, #12]
 8008174:	68bb      	ldr	r3, [r7, #8]
 8008176:	7bd8      	ldrb	r0, [r3, #15]
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008184:	68ba      	ldr	r2, [r7, #8]
 8008186:	8b52      	ldrh	r2, [r2, #26]
 8008188:	9202      	str	r2, [sp, #8]
 800818a:	2202      	movs	r2, #2
 800818c:	9201      	str	r2, [sp, #4]
 800818e:	9300      	str	r3, [sp, #0]
 8008190:	4623      	mov	r3, r4
 8008192:	4602      	mov	r2, r0
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f002 f909 	bl	800a3ac <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	2200      	movs	r2, #0
 800819e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80081a2:	68bb      	ldr	r3, [r7, #8]
 80081a4:	7b5b      	ldrb	r3, [r3, #13]
 80081a6:	2200      	movs	r2, #0
 80081a8:	4619      	mov	r1, r3
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f005 fbf6 	bl	800d99c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	7b1b      	ldrb	r3, [r3, #12]
 80081b4:	2200      	movs	r2, #0
 80081b6:	4619      	mov	r1, r3
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f005 fbef 	bl	800d99c <USBH_LL_SetToggle>

  return USBH_OK;
 80081be:	2300      	movs	r3, #0
}
 80081c0:	4618      	mov	r0, r3
 80081c2:	3714      	adds	r7, #20
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd90      	pop	{r4, r7, pc}

080081c8 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b084      	sub	sp, #16
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80081d6:	69db      	ldr	r3, [r3, #28]
 80081d8:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	781b      	ldrb	r3, [r3, #0]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d00e      	beq.n	8008200 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	781b      	ldrb	r3, [r3, #0]
 80081e6:	4619      	mov	r1, r3
 80081e8:	6878      	ldr	r0, [r7, #4]
 80081ea:	f002 f8fe 	bl	800a3ea <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	781b      	ldrb	r3, [r3, #0]
 80081f2:	4619      	mov	r1, r3
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f002 f929 	bl	800a44c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	2200      	movs	r2, #0
 80081fe:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	7b1b      	ldrb	r3, [r3, #12]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d00e      	beq.n	8008226 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	7b1b      	ldrb	r3, [r3, #12]
 800820c:	4619      	mov	r1, r3
 800820e:	6878      	ldr	r0, [r7, #4]
 8008210:	f002 f8eb 	bl	800a3ea <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	7b1b      	ldrb	r3, [r3, #12]
 8008218:	4619      	mov	r1, r3
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	f002 f916 	bl	800a44c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	2200      	movs	r2, #0
 8008224:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	7b5b      	ldrb	r3, [r3, #13]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d00e      	beq.n	800824c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	7b5b      	ldrb	r3, [r3, #13]
 8008232:	4619      	mov	r1, r3
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	f002 f8d8 	bl	800a3ea <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	7b5b      	ldrb	r3, [r3, #13]
 800823e:	4619      	mov	r1, r3
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	f002 f903 	bl	800a44c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	2200      	movs	r2, #0
 800824a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008252:	69db      	ldr	r3, [r3, #28]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d00b      	beq.n	8008270 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800825e:	69db      	ldr	r3, [r3, #28]
 8008260:	4618      	mov	r0, r3
 8008262:	f005 fc29 	bl	800dab8 <free>
    phost->pActiveClass->pData = 0U;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800826c:	2200      	movs	r2, #0
 800826e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008270:	2300      	movs	r3, #0
}
 8008272:	4618      	mov	r0, r3
 8008274:	3710      	adds	r7, #16
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}

0800827a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800827a:	b580      	push	{r7, lr}
 800827c:	b084      	sub	sp, #16
 800827e:	af00      	add	r7, sp, #0
 8008280:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008288:	69db      	ldr	r3, [r3, #28]
 800828a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	3340      	adds	r3, #64	@ 0x40
 8008290:	4619      	mov	r1, r3
 8008292:	6878      	ldr	r0, [r7, #4]
 8008294:	f000 f8b1 	bl	80083fa <GetLineCoding>
 8008298:	4603      	mov	r3, r0
 800829a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800829c:	7afb      	ldrb	r3, [r7, #11]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d105      	bne.n	80082ae <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80082a8:	2102      	movs	r1, #2
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80082ae:	7afb      	ldrb	r3, [r7, #11]
}
 80082b0:	4618      	mov	r0, r3
 80082b2:	3710      	adds	r7, #16
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}

080082b8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b084      	sub	sp, #16
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80082c0:	2301      	movs	r3, #1
 80082c2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80082c4:	2300      	movs	r3, #0
 80082c6:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80082ce:	69db      	ldr	r3, [r3, #28]
 80082d0:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80082d2:	68bb      	ldr	r3, [r7, #8]
 80082d4:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80082d8:	2b04      	cmp	r3, #4
 80082da:	d877      	bhi.n	80083cc <USBH_CDC_Process+0x114>
 80082dc:	a201      	add	r2, pc, #4	@ (adr r2, 80082e4 <USBH_CDC_Process+0x2c>)
 80082de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082e2:	bf00      	nop
 80082e4:	080082f9 	.word	0x080082f9
 80082e8:	080082ff 	.word	0x080082ff
 80082ec:	0800832f 	.word	0x0800832f
 80082f0:	080083a3 	.word	0x080083a3
 80082f4:	080083b1 	.word	0x080083b1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80082f8:	2300      	movs	r3, #0
 80082fa:	73fb      	strb	r3, [r7, #15]
      break;
 80082fc:	e06d      	b.n	80083da <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80082fe:	68bb      	ldr	r3, [r7, #8]
 8008300:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008302:	4619      	mov	r1, r3
 8008304:	6878      	ldr	r0, [r7, #4]
 8008306:	f000 f897 	bl	8008438 <SetLineCoding>
 800830a:	4603      	mov	r3, r0
 800830c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800830e:	7bbb      	ldrb	r3, [r7, #14]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d104      	bne.n	800831e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	2202      	movs	r2, #2
 8008318:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800831c:	e058      	b.n	80083d0 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800831e:	7bbb      	ldrb	r3, [r7, #14]
 8008320:	2b01      	cmp	r3, #1
 8008322:	d055      	beq.n	80083d0 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	2204      	movs	r2, #4
 8008328:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800832c:	e050      	b.n	80083d0 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800832e:	68bb      	ldr	r3, [r7, #8]
 8008330:	3340      	adds	r3, #64	@ 0x40
 8008332:	4619      	mov	r1, r3
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	f000 f860 	bl	80083fa <GetLineCoding>
 800833a:	4603      	mov	r3, r0
 800833c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800833e:	7bbb      	ldrb	r3, [r7, #14]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d126      	bne.n	8008392 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	2200      	movs	r2, #0
 8008348:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8008352:	68bb      	ldr	r3, [r7, #8]
 8008354:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008356:	791b      	ldrb	r3, [r3, #4]
 8008358:	429a      	cmp	r2, r3
 800835a:	d13b      	bne.n	80083d4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008366:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008368:	429a      	cmp	r2, r3
 800836a:	d133      	bne.n	80083d4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008376:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008378:	429a      	cmp	r2, r3
 800837a:	d12b      	bne.n	80083d4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008384:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008386:	429a      	cmp	r2, r3
 8008388:	d124      	bne.n	80083d4 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f000 f982 	bl	8008694 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008390:	e020      	b.n	80083d4 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8008392:	7bbb      	ldrb	r3, [r7, #14]
 8008394:	2b01      	cmp	r3, #1
 8008396:	d01d      	beq.n	80083d4 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	2204      	movs	r2, #4
 800839c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80083a0:	e018      	b.n	80083d4 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f000 f867 	bl	8008476 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	f000 f8f6 	bl	800859a <CDC_ProcessReception>
      break;
 80083ae:	e014      	b.n	80083da <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80083b0:	2100      	movs	r1, #0
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f001 f984 	bl	80096c0 <USBH_ClrFeature>
 80083b8:	4603      	mov	r3, r0
 80083ba:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80083bc:	7bbb      	ldrb	r3, [r7, #14]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d10a      	bne.n	80083d8 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	2200      	movs	r2, #0
 80083c6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 80083ca:	e005      	b.n	80083d8 <USBH_CDC_Process+0x120>

    default:
      break;
 80083cc:	bf00      	nop
 80083ce:	e004      	b.n	80083da <USBH_CDC_Process+0x122>
      break;
 80083d0:	bf00      	nop
 80083d2:	e002      	b.n	80083da <USBH_CDC_Process+0x122>
      break;
 80083d4:	bf00      	nop
 80083d6:	e000      	b.n	80083da <USBH_CDC_Process+0x122>
      break;
 80083d8:	bf00      	nop

  }

  return status;
 80083da:	7bfb      	ldrb	r3, [r7, #15]
}
 80083dc:	4618      	mov	r0, r3
 80083de:	3710      	adds	r7, #16
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bd80      	pop	{r7, pc}

080083e4 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80083e4:	b480      	push	{r7}
 80083e6:	b083      	sub	sp, #12
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80083ec:	2300      	movs	r3, #0
}
 80083ee:	4618      	mov	r0, r3
 80083f0:	370c      	adds	r7, #12
 80083f2:	46bd      	mov	sp, r7
 80083f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f8:	4770      	bx	lr

080083fa <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80083fa:	b580      	push	{r7, lr}
 80083fc:	b082      	sub	sp, #8
 80083fe:	af00      	add	r7, sp, #0
 8008400:	6078      	str	r0, [r7, #4]
 8008402:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	22a1      	movs	r2, #161	@ 0xa1
 8008408:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2221      	movs	r2, #33	@ 0x21
 800840e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2200      	movs	r2, #0
 8008414:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2200      	movs	r2, #0
 800841a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2207      	movs	r2, #7
 8008420:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	2207      	movs	r2, #7
 8008426:	4619      	mov	r1, r3
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f001 fc7e 	bl	8009d2a <USBH_CtlReq>
 800842e:	4603      	mov	r3, r0
}
 8008430:	4618      	mov	r0, r3
 8008432:	3708      	adds	r7, #8
 8008434:	46bd      	mov	sp, r7
 8008436:	bd80      	pop	{r7, pc}

08008438 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b082      	sub	sp, #8
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
 8008440:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2221      	movs	r2, #33	@ 0x21
 8008446:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2220      	movs	r2, #32
 800844c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2200      	movs	r2, #0
 8008452:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2200      	movs	r2, #0
 8008458:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2207      	movs	r2, #7
 800845e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	2207      	movs	r2, #7
 8008464:	4619      	mov	r1, r3
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f001 fc5f 	bl	8009d2a <USBH_CtlReq>
 800846c:	4603      	mov	r3, r0
}
 800846e:	4618      	mov	r0, r3
 8008470:	3708      	adds	r7, #8
 8008472:	46bd      	mov	sp, r7
 8008474:	bd80      	pop	{r7, pc}

08008476 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8008476:	b580      	push	{r7, lr}
 8008478:	b086      	sub	sp, #24
 800847a:	af02      	add	r7, sp, #8
 800847c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008484:	69db      	ldr	r3, [r3, #28]
 8008486:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008488:	2300      	movs	r3, #0
 800848a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8008492:	2b01      	cmp	r3, #1
 8008494:	d002      	beq.n	800849c <CDC_ProcessTransmission+0x26>
 8008496:	2b02      	cmp	r3, #2
 8008498:	d023      	beq.n	80084e2 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800849a:	e07a      	b.n	8008592 <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084a0:	68fa      	ldr	r2, [r7, #12]
 80084a2:	8b12      	ldrh	r2, [r2, #24]
 80084a4:	4293      	cmp	r3, r2
 80084a6:	d90b      	bls.n	80084c0 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	69d9      	ldr	r1, [r3, #28]
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	8b1a      	ldrh	r2, [r3, #24]
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	7b5b      	ldrb	r3, [r3, #13]
 80084b4:	2001      	movs	r0, #1
 80084b6:	9000      	str	r0, [sp, #0]
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f001 ff34 	bl	800a326 <USBH_BulkSendData>
 80084be:	e00b      	b.n	80084d8 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 80084c8:	b29a      	uxth	r2, r3
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	7b5b      	ldrb	r3, [r3, #13]
 80084ce:	2001      	movs	r0, #1
 80084d0:	9000      	str	r0, [sp, #0]
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f001 ff27 	bl	800a326 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	2202      	movs	r2, #2
 80084dc:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80084e0:	e057      	b.n	8008592 <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	7b5b      	ldrb	r3, [r3, #13]
 80084e6:	4619      	mov	r1, r3
 80084e8:	6878      	ldr	r0, [r7, #4]
 80084ea:	f005 fa2d 	bl	800d948 <USBH_LL_GetURBState>
 80084ee:	4603      	mov	r3, r0
 80084f0:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80084f2:	7afb      	ldrb	r3, [r7, #11]
 80084f4:	2b01      	cmp	r3, #1
 80084f6:	d136      	bne.n	8008566 <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084fc:	68fa      	ldr	r2, [r7, #12]
 80084fe:	8b12      	ldrh	r2, [r2, #24]
 8008500:	4293      	cmp	r3, r2
 8008502:	d90e      	bls.n	8008522 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008508:	68fa      	ldr	r2, [r7, #12]
 800850a:	8b12      	ldrh	r2, [r2, #24]
 800850c:	1a9a      	subs	r2, r3, r2
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	69db      	ldr	r3, [r3, #28]
 8008516:	68fa      	ldr	r2, [r7, #12]
 8008518:	8b12      	ldrh	r2, [r2, #24]
 800851a:	441a      	add	r2, r3
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	61da      	str	r2, [r3, #28]
 8008520:	e002      	b.n	8008528 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	2200      	movs	r2, #0
 8008526:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800852c:	2b00      	cmp	r3, #0
 800852e:	d004      	beq.n	800853a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	2201      	movs	r2, #1
 8008534:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 8008538:	e006      	b.n	8008548 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	2200      	movs	r2, #0
 800853e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	f000 f892 	bl	800866c <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2204      	movs	r2, #4
 800854c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800855c:	2300      	movs	r3, #0
 800855e:	2200      	movs	r2, #0
 8008560:	f002 f964 	bl	800a82c <osMessageQueuePut>
      break;
 8008564:	e014      	b.n	8008590 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 8008566:	7afb      	ldrb	r3, [r7, #11]
 8008568:	2b02      	cmp	r3, #2
 800856a:	d111      	bne.n	8008590 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	2201      	movs	r2, #1
 8008570:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2204      	movs	r2, #4
 8008578:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008588:	2300      	movs	r3, #0
 800858a:	2200      	movs	r2, #0
 800858c:	f002 f94e 	bl	800a82c <osMessageQueuePut>
      break;
 8008590:	bf00      	nop
  }
}
 8008592:	bf00      	nop
 8008594:	3710      	adds	r7, #16
 8008596:	46bd      	mov	sp, r7
 8008598:	bd80      	pop	{r7, pc}

0800859a <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800859a:	b580      	push	{r7, lr}
 800859c:	b086      	sub	sp, #24
 800859e:	af00      	add	r7, sp, #0
 80085a0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80085a8:	69db      	ldr	r3, [r3, #28]
 80085aa:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80085ac:	2300      	movs	r3, #0
 80085ae:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80085b0:	697b      	ldr	r3, [r7, #20]
 80085b2:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 80085b6:	2b03      	cmp	r3, #3
 80085b8:	d002      	beq.n	80085c0 <CDC_ProcessReception+0x26>
 80085ba:	2b04      	cmp	r3, #4
 80085bc:	d00e      	beq.n	80085dc <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80085be:	e051      	b.n	8008664 <CDC_ProcessReception+0xca>
      (void)USBH_BulkReceiveData(phost,
 80085c0:	697b      	ldr	r3, [r7, #20]
 80085c2:	6a19      	ldr	r1, [r3, #32]
 80085c4:	697b      	ldr	r3, [r7, #20]
 80085c6:	8b5a      	ldrh	r2, [r3, #26]
 80085c8:	697b      	ldr	r3, [r7, #20]
 80085ca:	7b1b      	ldrb	r3, [r3, #12]
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	f001 fecf 	bl	800a370 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80085d2:	697b      	ldr	r3, [r7, #20]
 80085d4:	2204      	movs	r2, #4
 80085d6:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80085da:	e043      	b.n	8008664 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80085dc:	697b      	ldr	r3, [r7, #20]
 80085de:	7b1b      	ldrb	r3, [r3, #12]
 80085e0:	4619      	mov	r1, r3
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f005 f9b0 	bl	800d948 <USBH_LL_GetURBState>
 80085e8:	4603      	mov	r3, r0
 80085ea:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80085ec:	7cfb      	ldrb	r3, [r7, #19]
 80085ee:	2b01      	cmp	r3, #1
 80085f0:	d137      	bne.n	8008662 <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80085f2:	697b      	ldr	r3, [r7, #20]
 80085f4:	7b1b      	ldrb	r3, [r3, #12]
 80085f6:	4619      	mov	r1, r3
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f005 f913 	bl	800d824 <USBH_LL_GetLastXferSize>
 80085fe:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8008600:	697b      	ldr	r3, [r7, #20]
 8008602:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008604:	68fa      	ldr	r2, [r7, #12]
 8008606:	429a      	cmp	r2, r3
 8008608:	d016      	beq.n	8008638 <CDC_ProcessReception+0x9e>
 800860a:	697b      	ldr	r3, [r7, #20]
 800860c:	8b5b      	ldrh	r3, [r3, #26]
 800860e:	461a      	mov	r2, r3
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	4293      	cmp	r3, r2
 8008614:	d910      	bls.n	8008638 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8008616:	697b      	ldr	r3, [r7, #20]
 8008618:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	1ad2      	subs	r2, r2, r3
 800861e:	697b      	ldr	r3, [r7, #20]
 8008620:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8008622:	697b      	ldr	r3, [r7, #20]
 8008624:	6a1a      	ldr	r2, [r3, #32]
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	441a      	add	r2, r3
 800862a:	697b      	ldr	r3, [r7, #20]
 800862c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800862e:	697b      	ldr	r3, [r7, #20]
 8008630:	2203      	movs	r2, #3
 8008632:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
 8008636:	e006      	b.n	8008646 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8008638:	697b      	ldr	r3, [r7, #20]
 800863a:	2200      	movs	r2, #0
 800863c:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	f000 f81d 	bl	8008680 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2204      	movs	r2, #4
 800864a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800865a:	2300      	movs	r3, #0
 800865c:	2200      	movs	r2, #0
 800865e:	f002 f8e5 	bl	800a82c <osMessageQueuePut>
      break;
 8008662:	bf00      	nop
  }
}
 8008664:	bf00      	nop
 8008666:	3718      	adds	r7, #24
 8008668:	46bd      	mov	sp, r7
 800866a:	bd80      	pop	{r7, pc}

0800866c <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800866c:	b480      	push	{r7}
 800866e:	b083      	sub	sp, #12
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008674:	bf00      	nop
 8008676:	370c      	adds	r7, #12
 8008678:	46bd      	mov	sp, r7
 800867a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867e:	4770      	bx	lr

08008680 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8008680:	b480      	push	{r7}
 8008682:	b083      	sub	sp, #12
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008688:	bf00      	nop
 800868a:	370c      	adds	r7, #12
 800868c:	46bd      	mov	sp, r7
 800868e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008692:	4770      	bx	lr

08008694 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8008694:	b480      	push	{r7}
 8008696:	b083      	sub	sp, #12
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800869c:	bf00      	nop
 800869e:	370c      	adds	r7, #12
 80086a0:	46bd      	mov	sp, r7
 80086a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a6:	4770      	bx	lr

080086a8 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b084      	sub	sp, #16
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	60f8      	str	r0, [r7, #12]
 80086b0:	60b9      	str	r1, [r7, #8]
 80086b2:	4613      	mov	r3, r2
 80086b4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d101      	bne.n	80086c0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80086bc:	2302      	movs	r3, #2
 80086be:	e044      	b.n	800874a <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	79fa      	ldrb	r2, [r7, #7]
 80086c4:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	2200      	movs	r2, #0
 80086cc:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	2200      	movs	r2, #0
 80086d4:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80086d8:	68f8      	ldr	r0, [r7, #12]
 80086da:	f000 f841 	bl	8008760 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	2200      	movs	r2, #0
 80086e2:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	2200      	movs	r2, #0
 80086ea:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	2200      	movs	r2, #0
 80086f2:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	2200      	movs	r2, #0
 80086fa:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80086fe:	68bb      	ldr	r3, [r7, #8]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d003      	beq.n	800870c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	68ba      	ldr	r2, [r7, #8]
 8008708:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 800870c:	2200      	movs	r2, #0
 800870e:	2104      	movs	r1, #4
 8008710:	2010      	movs	r0, #16
 8008712:	f002 f818 	bl	800a746 <osMessageQueueNew>
 8008716:	4602      	mov	r2, r0
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	f8c3 23d8 	str.w	r2, [r3, #984]	@ 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 800871e:	4b0d      	ldr	r3, [pc, #52]	@ (8008754 <USBH_Init+0xac>)
 8008720:	4a0d      	ldr	r2, [pc, #52]	@ (8008758 <USBH_Init+0xb0>)
 8008722:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 8008724:	4b0b      	ldr	r3, [pc, #44]	@ (8008754 <USBH_Init+0xac>)
 8008726:	2280      	movs	r2, #128	@ 0x80
 8008728:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 800872a:	4b0a      	ldr	r3, [pc, #40]	@ (8008754 <USBH_Init+0xac>)
 800872c:	2218      	movs	r2, #24
 800872e:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 8008730:	4a08      	ldr	r2, [pc, #32]	@ (8008754 <USBH_Init+0xac>)
 8008732:	68f9      	ldr	r1, [r7, #12]
 8008734:	4809      	ldr	r0, [pc, #36]	@ (800875c <USBH_Init+0xb4>)
 8008736:	f001 ff59 	bl	800a5ec <osThreadNew>
 800873a:	4602      	mov	r2, r0
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	f8c3 23dc 	str.w	r2, [r3, #988]	@ 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8008742:	68f8      	ldr	r0, [r7, #12]
 8008744:	f004 ffb0 	bl	800d6a8 <USBH_LL_Init>

  return USBH_OK;
 8008748:	2300      	movs	r3, #0
}
 800874a:	4618      	mov	r0, r3
 800874c:	3710      	adds	r7, #16
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}
 8008752:	bf00      	nop
 8008754:	20000354 	.word	0x20000354
 8008758:	0800dd84 	.word	0x0800dd84
 800875c:	08009411 	.word	0x08009411

08008760 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b084      	sub	sp, #16
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8008768:	2300      	movs	r3, #0
 800876a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800876c:	2300      	movs	r3, #0
 800876e:	60fb      	str	r3, [r7, #12]
 8008770:	e009      	b.n	8008786 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8008772:	687a      	ldr	r2, [r7, #4]
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	33e0      	adds	r3, #224	@ 0xe0
 8008778:	009b      	lsls	r3, r3, #2
 800877a:	4413      	add	r3, r2
 800877c:	2200      	movs	r2, #0
 800877e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	3301      	adds	r3, #1
 8008784:	60fb      	str	r3, [r7, #12]
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	2b0f      	cmp	r3, #15
 800878a:	d9f2      	bls.n	8008772 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800878c:	2300      	movs	r3, #0
 800878e:	60fb      	str	r3, [r7, #12]
 8008790:	e009      	b.n	80087a6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8008792:	687a      	ldr	r2, [r7, #4]
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	4413      	add	r3, r2
 8008798:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800879c:	2200      	movs	r2, #0
 800879e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	3301      	adds	r3, #1
 80087a4:	60fb      	str	r3, [r7, #12]
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80087ac:	d3f1      	bcc.n	8008792 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2200      	movs	r2, #0
 80087b2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2200      	movs	r2, #0
 80087b8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2201      	movs	r2, #1
 80087be:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2200      	movs	r2, #0
 80087c4:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2201      	movs	r2, #1
 80087cc:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2240      	movs	r2, #64	@ 0x40
 80087d2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2200      	movs	r2, #0
 80087d8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2200      	movs	r2, #0
 80087de:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2201      	movs	r2, #1
 80087e6:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2200      	movs	r2, #0
 80087ee:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2200      	movs	r2, #0
 80087f6:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	331c      	adds	r3, #28
 80087fe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008802:	2100      	movs	r1, #0
 8008804:	4618      	mov	r0, r3
 8008806:	f005 fa0d 	bl	800dc24 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008810:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008814:	2100      	movs	r1, #0
 8008816:	4618      	mov	r0, r3
 8008818:	f005 fa04 	bl	800dc24 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8008822:	2212      	movs	r2, #18
 8008824:	2100      	movs	r1, #0
 8008826:	4618      	mov	r0, r3
 8008828:	f005 f9fc 	bl	800dc24 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008832:	223e      	movs	r2, #62	@ 0x3e
 8008834:	2100      	movs	r1, #0
 8008836:	4618      	mov	r0, r3
 8008838:	f005 f9f4 	bl	800dc24 <memset>

  return USBH_OK;
 800883c:	2300      	movs	r3, #0
}
 800883e:	4618      	mov	r0, r3
 8008840:	3710      	adds	r7, #16
 8008842:	46bd      	mov	sp, r7
 8008844:	bd80      	pop	{r7, pc}

08008846 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8008846:	b480      	push	{r7}
 8008848:	b085      	sub	sp, #20
 800884a:	af00      	add	r7, sp, #0
 800884c:	6078      	str	r0, [r7, #4]
 800884e:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8008850:	2300      	movs	r3, #0
 8008852:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d016      	beq.n	8008888 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008860:	2b00      	cmp	r3, #0
 8008862:	d10e      	bne.n	8008882 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800886a:	1c59      	adds	r1, r3, #1
 800886c:	687a      	ldr	r2, [r7, #4]
 800886e:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8008872:	687a      	ldr	r2, [r7, #4]
 8008874:	33de      	adds	r3, #222	@ 0xde
 8008876:	6839      	ldr	r1, [r7, #0]
 8008878:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800887c:	2300      	movs	r3, #0
 800887e:	73fb      	strb	r3, [r7, #15]
 8008880:	e004      	b.n	800888c <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8008882:	2302      	movs	r3, #2
 8008884:	73fb      	strb	r3, [r7, #15]
 8008886:	e001      	b.n	800888c <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8008888:	2302      	movs	r3, #2
 800888a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800888c:	7bfb      	ldrb	r3, [r7, #15]
}
 800888e:	4618      	mov	r0, r3
 8008890:	3714      	adds	r7, #20
 8008892:	46bd      	mov	sp, r7
 8008894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008898:	4770      	bx	lr

0800889a <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800889a:	b480      	push	{r7}
 800889c:	b085      	sub	sp, #20
 800889e:	af00      	add	r7, sp, #0
 80088a0:	6078      	str	r0, [r7, #4]
 80088a2:	460b      	mov	r3, r1
 80088a4:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80088a6:	2300      	movs	r3, #0
 80088a8:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 80088b0:	78fa      	ldrb	r2, [r7, #3]
 80088b2:	429a      	cmp	r2, r3
 80088b4:	d204      	bcs.n	80088c0 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	78fa      	ldrb	r2, [r7, #3]
 80088ba:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 80088be:	e001      	b.n	80088c4 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80088c0:	2302      	movs	r3, #2
 80088c2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80088c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80088c6:	4618      	mov	r0, r3
 80088c8:	3714      	adds	r7, #20
 80088ca:	46bd      	mov	sp, r7
 80088cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d0:	4770      	bx	lr

080088d2 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80088d2:	b480      	push	{r7}
 80088d4:	b087      	sub	sp, #28
 80088d6:	af00      	add	r7, sp, #0
 80088d8:	6078      	str	r0, [r7, #4]
 80088da:	4608      	mov	r0, r1
 80088dc:	4611      	mov	r1, r2
 80088de:	461a      	mov	r2, r3
 80088e0:	4603      	mov	r3, r0
 80088e2:	70fb      	strb	r3, [r7, #3]
 80088e4:	460b      	mov	r3, r1
 80088e6:	70bb      	strb	r3, [r7, #2]
 80088e8:	4613      	mov	r3, r2
 80088ea:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80088ec:	2300      	movs	r3, #0
 80088ee:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80088f0:	2300      	movs	r3, #0
 80088f2:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80088fa:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80088fc:	e025      	b.n	800894a <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80088fe:	7dfb      	ldrb	r3, [r7, #23]
 8008900:	221a      	movs	r2, #26
 8008902:	fb02 f303 	mul.w	r3, r2, r3
 8008906:	3308      	adds	r3, #8
 8008908:	68fa      	ldr	r2, [r7, #12]
 800890a:	4413      	add	r3, r2
 800890c:	3302      	adds	r3, #2
 800890e:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008910:	693b      	ldr	r3, [r7, #16]
 8008912:	795b      	ldrb	r3, [r3, #5]
 8008914:	78fa      	ldrb	r2, [r7, #3]
 8008916:	429a      	cmp	r2, r3
 8008918:	d002      	beq.n	8008920 <USBH_FindInterface+0x4e>
 800891a:	78fb      	ldrb	r3, [r7, #3]
 800891c:	2bff      	cmp	r3, #255	@ 0xff
 800891e:	d111      	bne.n	8008944 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008920:	693b      	ldr	r3, [r7, #16]
 8008922:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008924:	78ba      	ldrb	r2, [r7, #2]
 8008926:	429a      	cmp	r2, r3
 8008928:	d002      	beq.n	8008930 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800892a:	78bb      	ldrb	r3, [r7, #2]
 800892c:	2bff      	cmp	r3, #255	@ 0xff
 800892e:	d109      	bne.n	8008944 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008930:	693b      	ldr	r3, [r7, #16]
 8008932:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008934:	787a      	ldrb	r2, [r7, #1]
 8008936:	429a      	cmp	r2, r3
 8008938:	d002      	beq.n	8008940 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800893a:	787b      	ldrb	r3, [r7, #1]
 800893c:	2bff      	cmp	r3, #255	@ 0xff
 800893e:	d101      	bne.n	8008944 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8008940:	7dfb      	ldrb	r3, [r7, #23]
 8008942:	e006      	b.n	8008952 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8008944:	7dfb      	ldrb	r3, [r7, #23]
 8008946:	3301      	adds	r3, #1
 8008948:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800894a:	7dfb      	ldrb	r3, [r7, #23]
 800894c:	2b01      	cmp	r3, #1
 800894e:	d9d6      	bls.n	80088fe <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8008950:	23ff      	movs	r3, #255	@ 0xff
}
 8008952:	4618      	mov	r0, r3
 8008954:	371c      	adds	r7, #28
 8008956:	46bd      	mov	sp, r7
 8008958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895c:	4770      	bx	lr

0800895e <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800895e:	b580      	push	{r7, lr}
 8008960:	b082      	sub	sp, #8
 8008962:	af00      	add	r7, sp, #0
 8008964:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f004 fee4 	bl	800d734 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800896c:	2101      	movs	r1, #1
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f004 fffd 	bl	800d96e <USBH_LL_DriverVBUS>

  return USBH_OK;
 8008974:	2300      	movs	r3, #0
}
 8008976:	4618      	mov	r0, r3
 8008978:	3708      	adds	r7, #8
 800897a:	46bd      	mov	sp, r7
 800897c:	bd80      	pop	{r7, pc}
	...

08008980 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b088      	sub	sp, #32
 8008984:	af04      	add	r7, sp, #16
 8008986:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008988:	2302      	movs	r3, #2
 800898a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800898c:	2300      	movs	r3, #0
 800898e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8008996:	b2db      	uxtb	r3, r3
 8008998:	2b01      	cmp	r3, #1
 800899a:	d102      	bne.n	80089a2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2203      	movs	r2, #3
 80089a0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	781b      	ldrb	r3, [r3, #0]
 80089a6:	b2db      	uxtb	r3, r3
 80089a8:	2b0b      	cmp	r3, #11
 80089aa:	f200 8244 	bhi.w	8008e36 <USBH_Process+0x4b6>
 80089ae:	a201      	add	r2, pc, #4	@ (adr r2, 80089b4 <USBH_Process+0x34>)
 80089b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089b4:	080089e5 	.word	0x080089e5
 80089b8:	08008a33 	.word	0x08008a33
 80089bc:	08008ab7 	.word	0x08008ab7
 80089c0:	08008db5 	.word	0x08008db5
 80089c4:	08008e37 	.word	0x08008e37
 80089c8:	08008b73 	.word	0x08008b73
 80089cc:	08008d3f 	.word	0x08008d3f
 80089d0:	08008bc5 	.word	0x08008bc5
 80089d4:	08008c01 	.word	0x08008c01
 80089d8:	08008c39 	.word	0x08008c39
 80089dc:	08008c97 	.word	0x08008c97
 80089e0:	08008d9d 	.word	0x08008d9d
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 80089ea:	b2db      	uxtb	r3, r3
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	f000 8224 	beq.w	8008e3a <USBH_Process+0x4ba>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2201      	movs	r2, #1
 80089f6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80089f8:	20c8      	movs	r0, #200	@ 0xc8
 80089fa:	f005 f802 	bl	800da02 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	f004 fef5 	bl	800d7ee <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2200      	movs	r2, #0
 8008a08:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2201      	movs	r2, #1
 8008a18:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008a28:	2300      	movs	r3, #0
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	f001 fefe 	bl	800a82c <osMessageQueuePut>
#endif
#endif
      }
      break;
 8008a30:	e203      	b.n	8008e3a <USBH_Process+0x4ba>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8008a38:	2b01      	cmp	r3, #1
 8008a3a:	d107      	bne.n	8008a4c <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2200      	movs	r2, #0
 8008a40:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2202      	movs	r2, #2
 8008a48:	701a      	strb	r2, [r3, #0]
 8008a4a:	e025      	b.n	8008a98 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8008a52:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008a56:	d914      	bls.n	8008a82 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8008a5e:	3301      	adds	r3, #1
 8008a60:	b2da      	uxtb	r2, r3
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8008a6e:	2b03      	cmp	r3, #3
 8008a70:	d903      	bls.n	8008a7a <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	220d      	movs	r2, #13
 8008a76:	701a      	strb	r2, [r3, #0]
 8008a78:	e00e      	b.n	8008a98 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	701a      	strb	r2, [r3, #0]
 8008a80:	e00a      	b.n	8008a98 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8008a88:	f103 020a 	add.w	r2, r3, #10
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8008a92:	200a      	movs	r0, #10
 8008a94:	f004 ffb5 	bl	800da02 <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2201      	movs	r2, #1
 8008a9c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008aac:	2300      	movs	r3, #0
 8008aae:	2200      	movs	r2, #0
 8008ab0:	f001 febc 	bl	800a82c <osMessageQueuePut>
#endif
#endif
      break;
 8008ab4:	e1c8      	b.n	8008e48 <USBH_Process+0x4c8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d005      	beq.n	8008acc <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008ac6:	2104      	movs	r1, #4
 8008ac8:	6878      	ldr	r0, [r7, #4]
 8008aca:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008acc:	2064      	movs	r0, #100	@ 0x64
 8008ace:	f004 ff98 	bl	800da02 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f004 fe64 	bl	800d7a0 <USBH_LL_GetSpeed>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	461a      	mov	r2, r3
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	2205      	movs	r2, #5
 8008ae6:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8008ae8:	2100      	movs	r1, #0
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	f001 fc8d 	bl	800a40a <USBH_AllocPipe>
 8008af0:	4603      	mov	r3, r0
 8008af2:	461a      	mov	r2, r3
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008af8:	2180      	movs	r1, #128	@ 0x80
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	f001 fc85 	bl	800a40a <USBH_AllocPipe>
 8008b00:	4603      	mov	r3, r0
 8008b02:	461a      	mov	r2, r3
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	7919      	ldrb	r1, [r3, #4]
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008b18:	687a      	ldr	r2, [r7, #4]
 8008b1a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008b1c:	9202      	str	r2, [sp, #8]
 8008b1e:	2200      	movs	r2, #0
 8008b20:	9201      	str	r2, [sp, #4]
 8008b22:	9300      	str	r3, [sp, #0]
 8008b24:	4603      	mov	r3, r0
 8008b26:	2280      	movs	r2, #128	@ 0x80
 8008b28:	6878      	ldr	r0, [r7, #4]
 8008b2a:	f001 fc3f 	bl	800a3ac <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	7959      	ldrb	r1, [r3, #5]
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008b3e:	687a      	ldr	r2, [r7, #4]
 8008b40:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008b42:	9202      	str	r2, [sp, #8]
 8008b44:	2200      	movs	r2, #0
 8008b46:	9201      	str	r2, [sp, #4]
 8008b48:	9300      	str	r3, [sp, #0]
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f001 fc2c 	bl	800a3ac <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2201      	movs	r2, #1
 8008b58:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008b68:	2300      	movs	r3, #0
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	f001 fe5e 	bl	800a82c <osMessageQueuePut>
#endif
#endif
      break;
 8008b70:	e16a      	b.n	8008e48 <USBH_Process+0x4c8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8008b72:	6878      	ldr	r0, [r7, #4]
 8008b74:	f000 f96e 	bl	8008e54 <USBH_HandleEnum>
 8008b78:	4603      	mov	r3, r0
 8008b7a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008b7c:	7bbb      	ldrb	r3, [r7, #14]
 8008b7e:	b2db      	uxtb	r3, r3
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	f040 815c 	bne.w	8008e3e <USBH_Process+0x4be>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2200      	movs	r2, #0
 8008b8a:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8008b94:	2b01      	cmp	r3, #1
 8008b96:	d103      	bne.n	8008ba0 <USBH_Process+0x220>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2208      	movs	r2, #8
 8008b9c:	701a      	strb	r2, [r3, #0]
 8008b9e:	e002      	b.n	8008ba6 <USBH_Process+0x226>
        }
        else
        {
          phost->gState = HOST_INPUT;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2207      	movs	r2, #7
 8008ba4:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2205      	movs	r2, #5
 8008baa:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008bba:	2300      	movs	r3, #0
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	f001 fe35 	bl	800a82c <osMessageQueuePut>
#endif
#endif
      }
      break;
 8008bc2:	e13c      	b.n	8008e3e <USBH_Process+0x4be>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	f000 8139 	beq.w	8008e42 <USBH_Process+0x4c2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008bd6:	2101      	movs	r1, #1
 8008bd8:	6878      	ldr	r0, [r7, #4]
 8008bda:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2208      	movs	r2, #8
 8008be0:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2205      	movs	r2, #5
 8008be6:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	f001 fe17 	bl	800a82c <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 8008bfe:	e120      	b.n	8008e42 <USBH_Process+0x4c2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8008c06:	4619      	mov	r1, r3
 8008c08:	6878      	ldr	r0, [r7, #4]
 8008c0a:	f000 fd12 	bl	8009632 <USBH_SetCfg>
 8008c0e:	4603      	mov	r3, r0
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d102      	bne.n	8008c1a <USBH_Process+0x29a>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2209      	movs	r2, #9
 8008c18:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2201      	movs	r2, #1
 8008c1e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008c2e:	2300      	movs	r3, #0
 8008c30:	2200      	movs	r2, #0
 8008c32:	f001 fdfb 	bl	800a82c <osMessageQueuePut>
#endif
#endif
      break;
 8008c36:	e107      	b.n	8008e48 <USBH_Process+0x4c8>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8008c3e:	f003 0320 	and.w	r3, r3, #32
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d015      	beq.n	8008c72 <USBH_Process+0x2f2>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8008c46:	2101      	movs	r1, #1
 8008c48:	6878      	ldr	r0, [r7, #4]
 8008c4a:	f000 fd15 	bl	8009678 <USBH_SetFeature>
 8008c4e:	4603      	mov	r3, r0
 8008c50:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008c52:	7bbb      	ldrb	r3, [r7, #14]
 8008c54:	b2db      	uxtb	r3, r3
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d103      	bne.n	8008c62 <USBH_Process+0x2e2>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	220a      	movs	r2, #10
 8008c5e:	701a      	strb	r2, [r3, #0]
 8008c60:	e00a      	b.n	8008c78 <USBH_Process+0x2f8>
        }
        else if (status == USBH_NOT_SUPPORTED)
 8008c62:	7bbb      	ldrb	r3, [r7, #14]
 8008c64:	b2db      	uxtb	r3, r3
 8008c66:	2b03      	cmp	r3, #3
 8008c68:	d106      	bne.n	8008c78 <USBH_Process+0x2f8>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	220a      	movs	r2, #10
 8008c6e:	701a      	strb	r2, [r3, #0]
 8008c70:	e002      	b.n	8008c78 <USBH_Process+0x2f8>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	220a      	movs	r2, #10
 8008c76:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2201      	movs	r2, #1
 8008c7c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	2200      	movs	r2, #0
 8008c90:	f001 fdcc 	bl	800a82c <osMessageQueuePut>
#endif
#endif
      break;
 8008c94:	e0d8      	b.n	8008e48 <USBH_Process+0x4c8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d03f      	beq.n	8008d20 <USBH_Process+0x3a0>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008ca8:	2300      	movs	r3, #0
 8008caa:	73fb      	strb	r3, [r7, #15]
 8008cac:	e016      	b.n	8008cdc <USBH_Process+0x35c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8008cae:	7bfa      	ldrb	r2, [r7, #15]
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	32de      	adds	r2, #222	@ 0xde
 8008cb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cb8:	791a      	ldrb	r2, [r3, #4]
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8008cc0:	429a      	cmp	r2, r3
 8008cc2:	d108      	bne.n	8008cd6 <USBH_Process+0x356>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008cc4:	7bfa      	ldrb	r2, [r7, #15]
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	32de      	adds	r2, #222	@ 0xde
 8008cca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8008cd4:	e005      	b.n	8008ce2 <USBH_Process+0x362>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008cd6:	7bfb      	ldrb	r3, [r7, #15]
 8008cd8:	3301      	adds	r3, #1
 8008cda:	73fb      	strb	r3, [r7, #15]
 8008cdc:	7bfb      	ldrb	r3, [r7, #15]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d0e5      	beq.n	8008cae <USBH_Process+0x32e>
          }
        }

        if (phost->pActiveClass != NULL)
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d016      	beq.n	8008d1a <USBH_Process+0x39a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008cf2:	689b      	ldr	r3, [r3, #8]
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	4798      	blx	r3
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d109      	bne.n	8008d12 <USBH_Process+0x392>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	2206      	movs	r2, #6
 8008d02:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008d0a:	2103      	movs	r1, #3
 8008d0c:	6878      	ldr	r0, [r7, #4]
 8008d0e:	4798      	blx	r3
 8008d10:	e006      	b.n	8008d20 <USBH_Process+0x3a0>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	220d      	movs	r2, #13
 8008d16:	701a      	strb	r2, [r3, #0]
 8008d18:	e002      	b.n	8008d20 <USBH_Process+0x3a0>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	220d      	movs	r2, #13
 8008d1e:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2205      	movs	r2, #5
 8008d24:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008d34:	2300      	movs	r3, #0
 8008d36:	2200      	movs	r2, #0
 8008d38:	f001 fd78 	bl	800a82c <osMessageQueuePut>
#endif
#endif
      break;
 8008d3c:	e084      	b.n	8008e48 <USBH_Process+0x4c8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d017      	beq.n	8008d78 <USBH_Process+0x3f8>
      {
        status = phost->pActiveClass->Requests(phost);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008d4e:	691b      	ldr	r3, [r3, #16]
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	4798      	blx	r3
 8008d54:	4603      	mov	r3, r0
 8008d56:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008d58:	7bbb      	ldrb	r3, [r7, #14]
 8008d5a:	b2db      	uxtb	r3, r3
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d103      	bne.n	8008d68 <USBH_Process+0x3e8>
        {
          phost->gState = HOST_CLASS;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	220b      	movs	r2, #11
 8008d64:	701a      	strb	r2, [r3, #0]
 8008d66:	e00a      	b.n	8008d7e <USBH_Process+0x3fe>
        }
        else if (status == USBH_FAIL)
 8008d68:	7bbb      	ldrb	r3, [r7, #14]
 8008d6a:	b2db      	uxtb	r3, r3
 8008d6c:	2b02      	cmp	r3, #2
 8008d6e:	d106      	bne.n	8008d7e <USBH_Process+0x3fe>
        {
          phost->gState = HOST_ABORT_STATE;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	220d      	movs	r2, #13
 8008d74:	701a      	strb	r2, [r3, #0]
 8008d76:	e002      	b.n	8008d7e <USBH_Process+0x3fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	220d      	movs	r2, #13
 8008d7c:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	2205      	movs	r2, #5
 8008d82:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008d92:	2300      	movs	r3, #0
 8008d94:	2200      	movs	r2, #0
 8008d96:	f001 fd49 	bl	800a82c <osMessageQueuePut>
#endif
#endif
      break;
 8008d9a:	e055      	b.n	8008e48 <USBH_Process+0x4c8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d04f      	beq.n	8008e46 <USBH_Process+0x4c6>
      {
        phost->pActiveClass->BgndProcess(phost);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008dac:	695b      	ldr	r3, [r3, #20]
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	4798      	blx	r3
      }
      break;
 8008db2:	e048      	b.n	8008e46 <USBH_Process+0x4c6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2200      	movs	r2, #0
 8008db8:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	f7ff fccf 	bl	8008760 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d009      	beq.n	8008de0 <USBH_Process+0x460>
      {
        phost->pActiveClass->DeInit(phost);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008dd2:	68db      	ldr	r3, [r3, #12]
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2200      	movs	r2, #0
 8008ddc:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d005      	beq.n	8008df6 <USBH_Process+0x476>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008df0:	2105      	movs	r1, #5
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8008dfc:	b2db      	uxtb	r3, r3
 8008dfe:	2b01      	cmp	r3, #1
 8008e00:	d107      	bne.n	8008e12 <USBH_Process+0x492>
      {
        phost->device.is_ReEnumerated = 0U;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2200      	movs	r2, #0
 8008e06:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	f7ff fda7 	bl	800895e <USBH_Start>
 8008e10:	e002      	b.n	8008e18 <USBH_Process+0x498>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f004 fc8e 	bl	800d734 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2201      	movs	r2, #1
 8008e1c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	2200      	movs	r2, #0
 8008e30:	f001 fcfc 	bl	800a82c <osMessageQueuePut>
#endif
#endif
      break;
 8008e34:	e008      	b.n	8008e48 <USBH_Process+0x4c8>

    case HOST_ABORT_STATE:
    default :
      break;
 8008e36:	bf00      	nop
 8008e38:	e006      	b.n	8008e48 <USBH_Process+0x4c8>
      break;
 8008e3a:	bf00      	nop
 8008e3c:	e004      	b.n	8008e48 <USBH_Process+0x4c8>
      break;
 8008e3e:	bf00      	nop
 8008e40:	e002      	b.n	8008e48 <USBH_Process+0x4c8>
    break;
 8008e42:	bf00      	nop
 8008e44:	e000      	b.n	8008e48 <USBH_Process+0x4c8>
      break;
 8008e46:	bf00      	nop
  }
  return USBH_OK;
 8008e48:	2300      	movs	r3, #0
}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	3710      	adds	r7, #16
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bd80      	pop	{r7, pc}
 8008e52:	bf00      	nop

08008e54 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b088      	sub	sp, #32
 8008e58:	af04      	add	r7, sp, #16
 8008e5a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008e5c:	2301      	movs	r3, #1
 8008e5e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8008e60:	2301      	movs	r3, #1
 8008e62:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	785b      	ldrb	r3, [r3, #1]
 8008e68:	2b07      	cmp	r3, #7
 8008e6a:	f200 8204 	bhi.w	8009276 <USBH_HandleEnum+0x422>
 8008e6e:	a201      	add	r2, pc, #4	@ (adr r2, 8008e74 <USBH_HandleEnum+0x20>)
 8008e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e74:	08008e95 	.word	0x08008e95
 8008e78:	08008f4f 	.word	0x08008f4f
 8008e7c:	08008fb9 	.word	0x08008fb9
 8008e80:	08009043 	.word	0x08009043
 8008e84:	080090ad 	.word	0x080090ad
 8008e88:	0800911d 	.word	0x0800911d
 8008e8c:	080091b9 	.word	0x080091b9
 8008e90:	08009237 	.word	0x08009237
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008e94:	2108      	movs	r1, #8
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f000 fae8 	bl	800946c <USBH_Get_DevDesc>
 8008e9c:	4603      	mov	r3, r0
 8008e9e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008ea0:	7bbb      	ldrb	r3, [r7, #14]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d12e      	bne.n	8008f04 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2201      	movs	r2, #1
 8008eb4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	7919      	ldrb	r1, [r3, #4]
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008ec6:	687a      	ldr	r2, [r7, #4]
 8008ec8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008eca:	9202      	str	r2, [sp, #8]
 8008ecc:	2200      	movs	r2, #0
 8008ece:	9201      	str	r2, [sp, #4]
 8008ed0:	9300      	str	r3, [sp, #0]
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	2280      	movs	r2, #128	@ 0x80
 8008ed6:	6878      	ldr	r0, [r7, #4]
 8008ed8:	f001 fa68 	bl	800a3ac <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	7959      	ldrb	r1, [r3, #5]
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008eec:	687a      	ldr	r2, [r7, #4]
 8008eee:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008ef0:	9202      	str	r2, [sp, #8]
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	9201      	str	r2, [sp, #4]
 8008ef6:	9300      	str	r3, [sp, #0]
 8008ef8:	4603      	mov	r3, r0
 8008efa:	2200      	movs	r2, #0
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	f001 fa55 	bl	800a3ac <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008f02:	e1ba      	b.n	800927a <USBH_HandleEnum+0x426>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008f04:	7bbb      	ldrb	r3, [r7, #14]
 8008f06:	2b03      	cmp	r3, #3
 8008f08:	f040 81b7 	bne.w	800927a <USBH_HandleEnum+0x426>
        phost->device.EnumCnt++;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008f12:	3301      	adds	r3, #1
 8008f14:	b2da      	uxtb	r2, r3
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008f22:	2b03      	cmp	r3, #3
 8008f24:	d903      	bls.n	8008f2e <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	220d      	movs	r2, #13
 8008f2a:	701a      	strb	r2, [r3, #0]
      break;
 8008f2c:	e1a5      	b.n	800927a <USBH_HandleEnum+0x426>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	795b      	ldrb	r3, [r3, #5]
 8008f32:	4619      	mov	r1, r3
 8008f34:	6878      	ldr	r0, [r7, #4]
 8008f36:	f001 fa89 	bl	800a44c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	791b      	ldrb	r3, [r3, #4]
 8008f3e:	4619      	mov	r1, r3
 8008f40:	6878      	ldr	r0, [r7, #4]
 8008f42:	f001 fa83 	bl	800a44c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2200      	movs	r2, #0
 8008f4a:	701a      	strb	r2, [r3, #0]
      break;
 8008f4c:	e195      	b.n	800927a <USBH_HandleEnum+0x426>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8008f4e:	2112      	movs	r1, #18
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	f000 fa8b 	bl	800946c <USBH_Get_DevDesc>
 8008f56:	4603      	mov	r3, r0
 8008f58:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008f5a:	7bbb      	ldrb	r3, [r7, #14]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d103      	bne.n	8008f68 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2202      	movs	r2, #2
 8008f64:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008f66:	e18a      	b.n	800927e <USBH_HandleEnum+0x42a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008f68:	7bbb      	ldrb	r3, [r7, #14]
 8008f6a:	2b03      	cmp	r3, #3
 8008f6c:	f040 8187 	bne.w	800927e <USBH_HandleEnum+0x42a>
        phost->device.EnumCnt++;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008f76:	3301      	adds	r3, #1
 8008f78:	b2da      	uxtb	r2, r3
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008f86:	2b03      	cmp	r3, #3
 8008f88:	d903      	bls.n	8008f92 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	220d      	movs	r2, #13
 8008f8e:	701a      	strb	r2, [r3, #0]
      break;
 8008f90:	e175      	b.n	800927e <USBH_HandleEnum+0x42a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	795b      	ldrb	r3, [r3, #5]
 8008f96:	4619      	mov	r1, r3
 8008f98:	6878      	ldr	r0, [r7, #4]
 8008f9a:	f001 fa57 	bl	800a44c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	791b      	ldrb	r3, [r3, #4]
 8008fa2:	4619      	mov	r1, r3
 8008fa4:	6878      	ldr	r0, [r7, #4]
 8008fa6:	f001 fa51 	bl	800a44c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	2200      	movs	r2, #0
 8008fae:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	701a      	strb	r2, [r3, #0]
      break;
 8008fb6:	e162      	b.n	800927e <USBH_HandleEnum+0x42a>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8008fb8:	2101      	movs	r1, #1
 8008fba:	6878      	ldr	r0, [r7, #4]
 8008fbc:	f000 fb15 	bl	80095ea <USBH_SetAddress>
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008fc4:	7bbb      	ldrb	r3, [r7, #14]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d130      	bne.n	800902c <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8008fca:	2002      	movs	r0, #2
 8008fcc:	f004 fd19 	bl	800da02 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2201      	movs	r2, #1
 8008fd4:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2203      	movs	r2, #3
 8008fdc:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	7919      	ldrb	r1, [r3, #4]
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008fee:	687a      	ldr	r2, [r7, #4]
 8008ff0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008ff2:	9202      	str	r2, [sp, #8]
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	9201      	str	r2, [sp, #4]
 8008ff8:	9300      	str	r3, [sp, #0]
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	2280      	movs	r2, #128	@ 0x80
 8008ffe:	6878      	ldr	r0, [r7, #4]
 8009000:	f001 f9d4 	bl	800a3ac <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	7959      	ldrb	r1, [r3, #5]
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009014:	687a      	ldr	r2, [r7, #4]
 8009016:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009018:	9202      	str	r2, [sp, #8]
 800901a:	2200      	movs	r2, #0
 800901c:	9201      	str	r2, [sp, #4]
 800901e:	9300      	str	r3, [sp, #0]
 8009020:	4603      	mov	r3, r0
 8009022:	2200      	movs	r2, #0
 8009024:	6878      	ldr	r0, [r7, #4]
 8009026:	f001 f9c1 	bl	800a3ac <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800902a:	e12a      	b.n	8009282 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800902c:	7bbb      	ldrb	r3, [r7, #14]
 800902e:	2b03      	cmp	r3, #3
 8009030:	f040 8127 	bne.w	8009282 <USBH_HandleEnum+0x42e>
        phost->gState = HOST_ABORT_STATE;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	220d      	movs	r2, #13
 8009038:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2200      	movs	r2, #0
 800903e:	705a      	strb	r2, [r3, #1]
      break;
 8009040:	e11f      	b.n	8009282 <USBH_HandleEnum+0x42e>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8009042:	2109      	movs	r1, #9
 8009044:	6878      	ldr	r0, [r7, #4]
 8009046:	f000 fa3d 	bl	80094c4 <USBH_Get_CfgDesc>
 800904a:	4603      	mov	r3, r0
 800904c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800904e:	7bbb      	ldrb	r3, [r7, #14]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d103      	bne.n	800905c <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2204      	movs	r2, #4
 8009058:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800905a:	e114      	b.n	8009286 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800905c:	7bbb      	ldrb	r3, [r7, #14]
 800905e:	2b03      	cmp	r3, #3
 8009060:	f040 8111 	bne.w	8009286 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800906a:	3301      	adds	r3, #1
 800906c:	b2da      	uxtb	r2, r3
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800907a:	2b03      	cmp	r3, #3
 800907c:	d903      	bls.n	8009086 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	220d      	movs	r2, #13
 8009082:	701a      	strb	r2, [r3, #0]
      break;
 8009084:	e0ff      	b.n	8009286 <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	795b      	ldrb	r3, [r3, #5]
 800908a:	4619      	mov	r1, r3
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f001 f9dd 	bl	800a44c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	791b      	ldrb	r3, [r3, #4]
 8009096:	4619      	mov	r1, r3
 8009098:	6878      	ldr	r0, [r7, #4]
 800909a:	f001 f9d7 	bl	800a44c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2200      	movs	r2, #0
 80090a2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2200      	movs	r2, #0
 80090a8:	701a      	strb	r2, [r3, #0]
      break;
 80090aa:	e0ec      	b.n	8009286 <USBH_HandleEnum+0x432>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 80090b2:	4619      	mov	r1, r3
 80090b4:	6878      	ldr	r0, [r7, #4]
 80090b6:	f000 fa05 	bl	80094c4 <USBH_Get_CfgDesc>
 80090ba:	4603      	mov	r3, r0
 80090bc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80090be:	7bbb      	ldrb	r3, [r7, #14]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d103      	bne.n	80090cc <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2205      	movs	r2, #5
 80090c8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80090ca:	e0de      	b.n	800928a <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80090cc:	7bbb      	ldrb	r3, [r7, #14]
 80090ce:	2b03      	cmp	r3, #3
 80090d0:	f040 80db 	bne.w	800928a <USBH_HandleEnum+0x436>
        phost->device.EnumCnt++;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80090da:	3301      	adds	r3, #1
 80090dc:	b2da      	uxtb	r2, r3
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80090ea:	2b03      	cmp	r3, #3
 80090ec:	d903      	bls.n	80090f6 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	220d      	movs	r2, #13
 80090f2:	701a      	strb	r2, [r3, #0]
      break;
 80090f4:	e0c9      	b.n	800928a <USBH_HandleEnum+0x436>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	795b      	ldrb	r3, [r3, #5]
 80090fa:	4619      	mov	r1, r3
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f001 f9a5 	bl	800a44c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	791b      	ldrb	r3, [r3, #4]
 8009106:	4619      	mov	r1, r3
 8009108:	6878      	ldr	r0, [r7, #4]
 800910a:	f001 f99f 	bl	800a44c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2200      	movs	r2, #0
 8009112:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2200      	movs	r2, #0
 8009118:	701a      	strb	r2, [r3, #0]
      break;
 800911a:	e0b6      	b.n	800928a <USBH_HandleEnum+0x436>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8009122:	2b00      	cmp	r3, #0
 8009124:	d036      	beq.n	8009194 <USBH_HandleEnum+0x340>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009132:	23ff      	movs	r3, #255	@ 0xff
 8009134:	6878      	ldr	r0, [r7, #4]
 8009136:	f000 f9ef 	bl	8009518 <USBH_Get_StringDesc>
 800913a:	4603      	mov	r3, r0
 800913c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800913e:	7bbb      	ldrb	r3, [r7, #14]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d111      	bne.n	8009168 <USBH_HandleEnum+0x314>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2206      	movs	r2, #6
 8009148:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	2205      	movs	r2, #5
 800914e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800915e:	2300      	movs	r3, #0
 8009160:	2200      	movs	r2, #0
 8009162:	f001 fb63 	bl	800a82c <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009166:	e092      	b.n	800928e <USBH_HandleEnum+0x43a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009168:	7bbb      	ldrb	r3, [r7, #14]
 800916a:	2b03      	cmp	r3, #3
 800916c:	f040 808f 	bne.w	800928e <USBH_HandleEnum+0x43a>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2206      	movs	r2, #6
 8009174:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	2205      	movs	r2, #5
 800917a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800918a:	2300      	movs	r3, #0
 800918c:	2200      	movs	r2, #0
 800918e:	f001 fb4d 	bl	800a82c <osMessageQueuePut>
      break;
 8009192:	e07c      	b.n	800928e <USBH_HandleEnum+0x43a>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2206      	movs	r2, #6
 8009198:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	2205      	movs	r2, #5
 800919e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80091ae:	2300      	movs	r3, #0
 80091b0:	2200      	movs	r2, #0
 80091b2:	f001 fb3b 	bl	800a82c <osMessageQueuePut>
      break;
 80091b6:	e06a      	b.n	800928e <USBH_HandleEnum+0x43a>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d027      	beq.n	8009212 <USBH_HandleEnum+0x3be>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80091ce:	23ff      	movs	r3, #255	@ 0xff
 80091d0:	6878      	ldr	r0, [r7, #4]
 80091d2:	f000 f9a1 	bl	8009518 <USBH_Get_StringDesc>
 80091d6:	4603      	mov	r3, r0
 80091d8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80091da:	7bbb      	ldrb	r3, [r7, #14]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d103      	bne.n	80091e8 <USBH_HandleEnum+0x394>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2207      	movs	r2, #7
 80091e4:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80091e6:	e054      	b.n	8009292 <USBH_HandleEnum+0x43e>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80091e8:	7bbb      	ldrb	r3, [r7, #14]
 80091ea:	2b03      	cmp	r3, #3
 80091ec:	d151      	bne.n	8009292 <USBH_HandleEnum+0x43e>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	2207      	movs	r2, #7
 80091f2:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2205      	movs	r2, #5
 80091f8:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8009208:	2300      	movs	r3, #0
 800920a:	2200      	movs	r2, #0
 800920c:	f001 fb0e 	bl	800a82c <osMessageQueuePut>
      break;
 8009210:	e03f      	b.n	8009292 <USBH_HandleEnum+0x43e>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2207      	movs	r2, #7
 8009216:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2205      	movs	r2, #5
 800921c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800922c:	2300      	movs	r3, #0
 800922e:	2200      	movs	r2, #0
 8009230:	f001 fafc 	bl	800a82c <osMessageQueuePut>
      break;
 8009234:	e02d      	b.n	8009292 <USBH_HandleEnum+0x43e>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800923c:	2b00      	cmp	r3, #0
 800923e:	d017      	beq.n	8009270 <USBH_HandleEnum+0x41c>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800924c:	23ff      	movs	r3, #255	@ 0xff
 800924e:	6878      	ldr	r0, [r7, #4]
 8009250:	f000 f962 	bl	8009518 <USBH_Get_StringDesc>
 8009254:	4603      	mov	r3, r0
 8009256:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009258:	7bbb      	ldrb	r3, [r7, #14]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d102      	bne.n	8009264 <USBH_HandleEnum+0x410>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800925e:	2300      	movs	r3, #0
 8009260:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8009262:	e018      	b.n	8009296 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009264:	7bbb      	ldrb	r3, [r7, #14]
 8009266:	2b03      	cmp	r3, #3
 8009268:	d115      	bne.n	8009296 <USBH_HandleEnum+0x442>
          Status = USBH_OK;
 800926a:	2300      	movs	r3, #0
 800926c:	73fb      	strb	r3, [r7, #15]
      break;
 800926e:	e012      	b.n	8009296 <USBH_HandleEnum+0x442>
        Status = USBH_OK;
 8009270:	2300      	movs	r3, #0
 8009272:	73fb      	strb	r3, [r7, #15]
      break;
 8009274:	e00f      	b.n	8009296 <USBH_HandleEnum+0x442>

    default:
      break;
 8009276:	bf00      	nop
 8009278:	e00e      	b.n	8009298 <USBH_HandleEnum+0x444>
      break;
 800927a:	bf00      	nop
 800927c:	e00c      	b.n	8009298 <USBH_HandleEnum+0x444>
      break;
 800927e:	bf00      	nop
 8009280:	e00a      	b.n	8009298 <USBH_HandleEnum+0x444>
      break;
 8009282:	bf00      	nop
 8009284:	e008      	b.n	8009298 <USBH_HandleEnum+0x444>
      break;
 8009286:	bf00      	nop
 8009288:	e006      	b.n	8009298 <USBH_HandleEnum+0x444>
      break;
 800928a:	bf00      	nop
 800928c:	e004      	b.n	8009298 <USBH_HandleEnum+0x444>
      break;
 800928e:	bf00      	nop
 8009290:	e002      	b.n	8009298 <USBH_HandleEnum+0x444>
      break;
 8009292:	bf00      	nop
 8009294:	e000      	b.n	8009298 <USBH_HandleEnum+0x444>
      break;
 8009296:	bf00      	nop
  }
  return Status;
 8009298:	7bfb      	ldrb	r3, [r7, #15]
}
 800929a:	4618      	mov	r0, r3
 800929c:	3710      	adds	r7, #16
 800929e:	46bd      	mov	sp, r7
 80092a0:	bd80      	pop	{r7, pc}
 80092a2:	bf00      	nop

080092a4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80092a4:	b480      	push	{r7}
 80092a6:	b083      	sub	sp, #12
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
 80092ac:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	683a      	ldr	r2, [r7, #0]
 80092b2:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 80092b6:	bf00      	nop
 80092b8:	370c      	adds	r7, #12
 80092ba:	46bd      	mov	sp, r7
 80092bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c0:	4770      	bx	lr

080092c2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80092c2:	b580      	push	{r7, lr}
 80092c4:	b082      	sub	sp, #8
 80092c6:	af00      	add	r7, sp, #0
 80092c8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80092d0:	1c5a      	adds	r2, r3, #1
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 80092d8:	6878      	ldr	r0, [r7, #4]
 80092da:	f000 f804 	bl	80092e6 <USBH_HandleSof>
}
 80092de:	bf00      	nop
 80092e0:	3708      	adds	r7, #8
 80092e2:	46bd      	mov	sp, r7
 80092e4:	bd80      	pop	{r7, pc}

080092e6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80092e6:	b580      	push	{r7, lr}
 80092e8:	b082      	sub	sp, #8
 80092ea:	af00      	add	r7, sp, #0
 80092ec:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	781b      	ldrb	r3, [r3, #0]
 80092f2:	b2db      	uxtb	r3, r3
 80092f4:	2b0b      	cmp	r3, #11
 80092f6:	d10a      	bne.n	800930e <USBH_HandleSof+0x28>
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d005      	beq.n	800930e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009308:	699b      	ldr	r3, [r3, #24]
 800930a:	6878      	ldr	r0, [r7, #4]
 800930c:	4798      	blx	r3
  }
}
 800930e:	bf00      	nop
 8009310:	3708      	adds	r7, #8
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}

08009316 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009316:	b580      	push	{r7, lr}
 8009318:	b082      	sub	sp, #8
 800931a:	af00      	add	r7, sp, #0
 800931c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	2201      	movs	r2, #1
 8009322:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	2201      	movs	r2, #1
 800932a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800933a:	2300      	movs	r3, #0
 800933c:	2200      	movs	r2, #0
 800933e:	f001 fa75 	bl	800a82c <osMessageQueuePut>
#endif
#endif

  return;
 8009342:	bf00      	nop
}
 8009344:	3708      	adds	r7, #8
 8009346:	46bd      	mov	sp, r7
 8009348:	bd80      	pop	{r7, pc}

0800934a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800934a:	b480      	push	{r7}
 800934c:	b083      	sub	sp, #12
 800934e:	af00      	add	r7, sp, #0
 8009350:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	2200      	movs	r2, #0
 8009356:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800935a:	bf00      	nop
}
 800935c:	370c      	adds	r7, #12
 800935e:	46bd      	mov	sp, r7
 8009360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009364:	4770      	bx	lr

08009366 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8009366:	b580      	push	{r7, lr}
 8009368:	b082      	sub	sp, #8
 800936a:	af00      	add	r7, sp, #0
 800936c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2201      	movs	r2, #1
 8009372:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	2200      	movs	r2, #0
 800937a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	2200      	movs	r2, #0
 8009382:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2201      	movs	r2, #1
 800938a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800939a:	2300      	movs	r3, #0
 800939c:	2200      	movs	r2, #0
 800939e:	f001 fa45 	bl	800a82c <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 80093a2:	2300      	movs	r3, #0
}
 80093a4:	4618      	mov	r0, r3
 80093a6:	3708      	adds	r7, #8
 80093a8:	46bd      	mov	sp, r7
 80093aa:	bd80      	pop	{r7, pc}

080093ac <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b082      	sub	sp, #8
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2201      	movs	r2, #1
 80093b8:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2200      	movs	r2, #0
 80093c0:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2200      	movs	r2, #0
 80093c8:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80093cc:	6878      	ldr	r0, [r7, #4]
 80093ce:	f004 f9cc 	bl	800d76a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	791b      	ldrb	r3, [r3, #4]
 80093d6:	4619      	mov	r1, r3
 80093d8:	6878      	ldr	r0, [r7, #4]
 80093da:	f001 f837 	bl	800a44c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	795b      	ldrb	r3, [r3, #5]
 80093e2:	4619      	mov	r1, r3
 80093e4:	6878      	ldr	r0, [r7, #4]
 80093e6:	f001 f831 	bl	800a44c <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	2201      	movs	r2, #1
 80093ee:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80093fe:	2300      	movs	r3, #0
 8009400:	2200      	movs	r2, #0
 8009402:	f001 fa13 	bl	800a82c <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 8009406:	2300      	movs	r3, #0
}
 8009408:	4618      	mov	r0, r3
 800940a:	3708      	adds	r7, #8
 800940c:	46bd      	mov	sp, r7
 800940e:	bd80      	pop	{r7, pc}

08009410 <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b084      	sub	sp, #16
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8009424:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009428:	2200      	movs	r2, #0
 800942a:	f001 fa5f 	bl	800a8ec <osMessageQueueGet>
 800942e:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d1f0      	bne.n	8009418 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8009436:	6878      	ldr	r0, [r7, #4]
 8009438:	f7ff faa2 	bl	8008980 <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800943c:	e7ec      	b.n	8009418 <USBH_Process_OS+0x8>

0800943e <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800943e:	b580      	push	{r7, lr}
 8009440:	b082      	sub	sp, #8
 8009442:	af00      	add	r7, sp, #0
 8009444:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	2201      	movs	r2, #1
 800944a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800945a:	2300      	movs	r3, #0
 800945c:	2200      	movs	r2, #0
 800945e:	f001 f9e5 	bl	800a82c <osMessageQueuePut>
#endif

  return USBH_OK;
 8009462:	2300      	movs	r3, #0
}
 8009464:	4618      	mov	r0, r3
 8009466:	3708      	adds	r7, #8
 8009468:	46bd      	mov	sp, r7
 800946a:	bd80      	pop	{r7, pc}

0800946c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b086      	sub	sp, #24
 8009470:	af02      	add	r7, sp, #8
 8009472:	6078      	str	r0, [r7, #4]
 8009474:	460b      	mov	r3, r1
 8009476:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8009478:	887b      	ldrh	r3, [r7, #2]
 800947a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800947e:	d901      	bls.n	8009484 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009480:	2303      	movs	r3, #3
 8009482:	e01b      	b.n	80094bc <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800948a:	887b      	ldrh	r3, [r7, #2]
 800948c:	9300      	str	r3, [sp, #0]
 800948e:	4613      	mov	r3, r2
 8009490:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009494:	2100      	movs	r1, #0
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	f000 f872 	bl	8009580 <USBH_GetDescriptor>
 800949c:	4603      	mov	r3, r0
 800949e:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 80094a0:	7bfb      	ldrb	r3, [r7, #15]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d109      	bne.n	80094ba <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80094ac:	887a      	ldrh	r2, [r7, #2]
 80094ae:	4619      	mov	r1, r3
 80094b0:	6878      	ldr	r0, [r7, #4]
 80094b2:	f000 f929 	bl	8009708 <USBH_ParseDevDesc>
 80094b6:	4603      	mov	r3, r0
 80094b8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80094ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80094bc:	4618      	mov	r0, r3
 80094be:	3710      	adds	r7, #16
 80094c0:	46bd      	mov	sp, r7
 80094c2:	bd80      	pop	{r7, pc}

080094c4 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b086      	sub	sp, #24
 80094c8:	af02      	add	r7, sp, #8
 80094ca:	6078      	str	r0, [r7, #4]
 80094cc:	460b      	mov	r3, r1
 80094ce:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	331c      	adds	r3, #28
 80094d4:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 80094d6:	887b      	ldrh	r3, [r7, #2]
 80094d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80094dc:	d901      	bls.n	80094e2 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80094de:	2303      	movs	r3, #3
 80094e0:	e016      	b.n	8009510 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80094e2:	887b      	ldrh	r3, [r7, #2]
 80094e4:	9300      	str	r3, [sp, #0]
 80094e6:	68bb      	ldr	r3, [r7, #8]
 80094e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80094ec:	2100      	movs	r1, #0
 80094ee:	6878      	ldr	r0, [r7, #4]
 80094f0:	f000 f846 	bl	8009580 <USBH_GetDescriptor>
 80094f4:	4603      	mov	r3, r0
 80094f6:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80094f8:	7bfb      	ldrb	r3, [r7, #15]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d107      	bne.n	800950e <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80094fe:	887b      	ldrh	r3, [r7, #2]
 8009500:	461a      	mov	r2, r3
 8009502:	68b9      	ldr	r1, [r7, #8]
 8009504:	6878      	ldr	r0, [r7, #4]
 8009506:	f000 f9af 	bl	8009868 <USBH_ParseCfgDesc>
 800950a:	4603      	mov	r3, r0
 800950c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800950e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009510:	4618      	mov	r0, r3
 8009512:	3710      	adds	r7, #16
 8009514:	46bd      	mov	sp, r7
 8009516:	bd80      	pop	{r7, pc}

08009518 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b088      	sub	sp, #32
 800951c:	af02      	add	r7, sp, #8
 800951e:	60f8      	str	r0, [r7, #12]
 8009520:	607a      	str	r2, [r7, #4]
 8009522:	461a      	mov	r2, r3
 8009524:	460b      	mov	r3, r1
 8009526:	72fb      	strb	r3, [r7, #11]
 8009528:	4613      	mov	r3, r2
 800952a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800952c:	893b      	ldrh	r3, [r7, #8]
 800952e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009532:	d802      	bhi.n	800953a <USBH_Get_StringDesc+0x22>
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d101      	bne.n	800953e <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800953a:	2303      	movs	r3, #3
 800953c:	e01c      	b.n	8009578 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800953e:	7afb      	ldrb	r3, [r7, #11]
 8009540:	b29b      	uxth	r3, r3
 8009542:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8009546:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800954e:	893b      	ldrh	r3, [r7, #8]
 8009550:	9300      	str	r3, [sp, #0]
 8009552:	460b      	mov	r3, r1
 8009554:	2100      	movs	r1, #0
 8009556:	68f8      	ldr	r0, [r7, #12]
 8009558:	f000 f812 	bl	8009580 <USBH_GetDescriptor>
 800955c:	4603      	mov	r3, r0
 800955e:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8009560:	7dfb      	ldrb	r3, [r7, #23]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d107      	bne.n	8009576 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800956c:	893a      	ldrh	r2, [r7, #8]
 800956e:	6879      	ldr	r1, [r7, #4]
 8009570:	4618      	mov	r0, r3
 8009572:	f000 fb8d 	bl	8009c90 <USBH_ParseStringDesc>
  }

  return status;
 8009576:	7dfb      	ldrb	r3, [r7, #23]
}
 8009578:	4618      	mov	r0, r3
 800957a:	3718      	adds	r7, #24
 800957c:	46bd      	mov	sp, r7
 800957e:	bd80      	pop	{r7, pc}

08009580 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b084      	sub	sp, #16
 8009584:	af00      	add	r7, sp, #0
 8009586:	60f8      	str	r0, [r7, #12]
 8009588:	607b      	str	r3, [r7, #4]
 800958a:	460b      	mov	r3, r1
 800958c:	72fb      	strb	r3, [r7, #11]
 800958e:	4613      	mov	r3, r2
 8009590:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	789b      	ldrb	r3, [r3, #2]
 8009596:	2b01      	cmp	r3, #1
 8009598:	d11c      	bne.n	80095d4 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800959a:	7afb      	ldrb	r3, [r7, #11]
 800959c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80095a0:	b2da      	uxtb	r2, r3
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	2206      	movs	r2, #6
 80095aa:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	893a      	ldrh	r2, [r7, #8]
 80095b0:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80095b2:	893b      	ldrh	r3, [r7, #8]
 80095b4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80095b8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80095bc:	d104      	bne.n	80095c8 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	f240 4209 	movw	r2, #1033	@ 0x409
 80095c4:	829a      	strh	r2, [r3, #20]
 80095c6:	e002      	b.n	80095ce <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	2200      	movs	r2, #0
 80095cc:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	8b3a      	ldrh	r2, [r7, #24]
 80095d2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80095d4:	8b3b      	ldrh	r3, [r7, #24]
 80095d6:	461a      	mov	r2, r3
 80095d8:	6879      	ldr	r1, [r7, #4]
 80095da:	68f8      	ldr	r0, [r7, #12]
 80095dc:	f000 fba5 	bl	8009d2a <USBH_CtlReq>
 80095e0:	4603      	mov	r3, r0
}
 80095e2:	4618      	mov	r0, r3
 80095e4:	3710      	adds	r7, #16
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}

080095ea <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80095ea:	b580      	push	{r7, lr}
 80095ec:	b082      	sub	sp, #8
 80095ee:	af00      	add	r7, sp, #0
 80095f0:	6078      	str	r0, [r7, #4]
 80095f2:	460b      	mov	r3, r1
 80095f4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	789b      	ldrb	r3, [r3, #2]
 80095fa:	2b01      	cmp	r3, #1
 80095fc:	d10f      	bne.n	800961e <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2200      	movs	r2, #0
 8009602:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	2205      	movs	r2, #5
 8009608:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800960a:	78fb      	ldrb	r3, [r7, #3]
 800960c:	b29a      	uxth	r2, r3
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	2200      	movs	r2, #0
 8009616:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	2200      	movs	r2, #0
 800961c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800961e:	2200      	movs	r2, #0
 8009620:	2100      	movs	r1, #0
 8009622:	6878      	ldr	r0, [r7, #4]
 8009624:	f000 fb81 	bl	8009d2a <USBH_CtlReq>
 8009628:	4603      	mov	r3, r0
}
 800962a:	4618      	mov	r0, r3
 800962c:	3708      	adds	r7, #8
 800962e:	46bd      	mov	sp, r7
 8009630:	bd80      	pop	{r7, pc}

08009632 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8009632:	b580      	push	{r7, lr}
 8009634:	b082      	sub	sp, #8
 8009636:	af00      	add	r7, sp, #0
 8009638:	6078      	str	r0, [r7, #4]
 800963a:	460b      	mov	r3, r1
 800963c:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	789b      	ldrb	r3, [r3, #2]
 8009642:	2b01      	cmp	r3, #1
 8009644:	d10e      	bne.n	8009664 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	2200      	movs	r2, #0
 800964a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2209      	movs	r2, #9
 8009650:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	887a      	ldrh	r2, [r7, #2]
 8009656:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2200      	movs	r2, #0
 800965c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2200      	movs	r2, #0
 8009662:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009664:	2200      	movs	r2, #0
 8009666:	2100      	movs	r1, #0
 8009668:	6878      	ldr	r0, [r7, #4]
 800966a:	f000 fb5e 	bl	8009d2a <USBH_CtlReq>
 800966e:	4603      	mov	r3, r0
}
 8009670:	4618      	mov	r0, r3
 8009672:	3708      	adds	r7, #8
 8009674:	46bd      	mov	sp, r7
 8009676:	bd80      	pop	{r7, pc}

08009678 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b082      	sub	sp, #8
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
 8009680:	460b      	mov	r3, r1
 8009682:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	789b      	ldrb	r3, [r3, #2]
 8009688:	2b01      	cmp	r3, #1
 800968a:	d10f      	bne.n	80096ac <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2200      	movs	r2, #0
 8009690:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	2203      	movs	r2, #3
 8009696:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009698:	78fb      	ldrb	r3, [r7, #3]
 800969a:	b29a      	uxth	r2, r3
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2200      	movs	r2, #0
 80096a4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	2200      	movs	r2, #0
 80096aa:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80096ac:	2200      	movs	r2, #0
 80096ae:	2100      	movs	r1, #0
 80096b0:	6878      	ldr	r0, [r7, #4]
 80096b2:	f000 fb3a 	bl	8009d2a <USBH_CtlReq>
 80096b6:	4603      	mov	r3, r0
}
 80096b8:	4618      	mov	r0, r3
 80096ba:	3708      	adds	r7, #8
 80096bc:	46bd      	mov	sp, r7
 80096be:	bd80      	pop	{r7, pc}

080096c0 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b082      	sub	sp, #8
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
 80096c8:	460b      	mov	r3, r1
 80096ca:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	789b      	ldrb	r3, [r3, #2]
 80096d0:	2b01      	cmp	r3, #1
 80096d2:	d10f      	bne.n	80096f4 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2202      	movs	r2, #2
 80096d8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	2201      	movs	r2, #1
 80096de:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2200      	movs	r2, #0
 80096e4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80096e6:	78fb      	ldrb	r3, [r7, #3]
 80096e8:	b29a      	uxth	r2, r3
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	2200      	movs	r2, #0
 80096f2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80096f4:	2200      	movs	r2, #0
 80096f6:	2100      	movs	r1, #0
 80096f8:	6878      	ldr	r0, [r7, #4]
 80096fa:	f000 fb16 	bl	8009d2a <USBH_CtlReq>
 80096fe:	4603      	mov	r3, r0
}
 8009700:	4618      	mov	r0, r3
 8009702:	3708      	adds	r7, #8
 8009704:	46bd      	mov	sp, r7
 8009706:	bd80      	pop	{r7, pc}

08009708 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8009708:	b480      	push	{r7}
 800970a:	b087      	sub	sp, #28
 800970c:	af00      	add	r7, sp, #0
 800970e:	60f8      	str	r0, [r7, #12]
 8009710:	60b9      	str	r1, [r7, #8]
 8009712:	4613      	mov	r3, r2
 8009714:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800971c:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800971e:	2300      	movs	r3, #0
 8009720:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8009722:	68bb      	ldr	r3, [r7, #8]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d101      	bne.n	800972c <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8009728:	2302      	movs	r3, #2
 800972a:	e094      	b.n	8009856 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800972c:	68bb      	ldr	r3, [r7, #8]
 800972e:	781a      	ldrb	r2, [r3, #0]
 8009730:	693b      	ldr	r3, [r7, #16]
 8009732:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8009734:	68bb      	ldr	r3, [r7, #8]
 8009736:	785a      	ldrb	r2, [r3, #1]
 8009738:	693b      	ldr	r3, [r7, #16]
 800973a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800973c:	68bb      	ldr	r3, [r7, #8]
 800973e:	3302      	adds	r3, #2
 8009740:	781b      	ldrb	r3, [r3, #0]
 8009742:	461a      	mov	r2, r3
 8009744:	68bb      	ldr	r3, [r7, #8]
 8009746:	3303      	adds	r3, #3
 8009748:	781b      	ldrb	r3, [r3, #0]
 800974a:	021b      	lsls	r3, r3, #8
 800974c:	b29b      	uxth	r3, r3
 800974e:	4313      	orrs	r3, r2
 8009750:	b29a      	uxth	r2, r3
 8009752:	693b      	ldr	r3, [r7, #16]
 8009754:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8009756:	68bb      	ldr	r3, [r7, #8]
 8009758:	791a      	ldrb	r2, [r3, #4]
 800975a:	693b      	ldr	r3, [r7, #16]
 800975c:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800975e:	68bb      	ldr	r3, [r7, #8]
 8009760:	795a      	ldrb	r2, [r3, #5]
 8009762:	693b      	ldr	r3, [r7, #16]
 8009764:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8009766:	68bb      	ldr	r3, [r7, #8]
 8009768:	799a      	ldrb	r2, [r3, #6]
 800976a:	693b      	ldr	r3, [r7, #16]
 800976c:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800976e:	68bb      	ldr	r3, [r7, #8]
 8009770:	79da      	ldrb	r2, [r3, #7]
 8009772:	693b      	ldr	r3, [r7, #16]
 8009774:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800977c:	2b00      	cmp	r3, #0
 800977e:	d004      	beq.n	800978a <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8009786:	2b01      	cmp	r3, #1
 8009788:	d11b      	bne.n	80097c2 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800978a:	693b      	ldr	r3, [r7, #16]
 800978c:	79db      	ldrb	r3, [r3, #7]
 800978e:	2b20      	cmp	r3, #32
 8009790:	dc0f      	bgt.n	80097b2 <USBH_ParseDevDesc+0xaa>
 8009792:	2b08      	cmp	r3, #8
 8009794:	db0f      	blt.n	80097b6 <USBH_ParseDevDesc+0xae>
 8009796:	3b08      	subs	r3, #8
 8009798:	4a32      	ldr	r2, [pc, #200]	@ (8009864 <USBH_ParseDevDesc+0x15c>)
 800979a:	fa22 f303 	lsr.w	r3, r2, r3
 800979e:	f003 0301 	and.w	r3, r3, #1
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	bf14      	ite	ne
 80097a6:	2301      	movne	r3, #1
 80097a8:	2300      	moveq	r3, #0
 80097aa:	b2db      	uxtb	r3, r3
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d106      	bne.n	80097be <USBH_ParseDevDesc+0xb6>
 80097b0:	e001      	b.n	80097b6 <USBH_ParseDevDesc+0xae>
 80097b2:	2b40      	cmp	r3, #64	@ 0x40
 80097b4:	d003      	beq.n	80097be <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 80097b6:	693b      	ldr	r3, [r7, #16]
 80097b8:	2208      	movs	r2, #8
 80097ba:	71da      	strb	r2, [r3, #7]
        break;
 80097bc:	e000      	b.n	80097c0 <USBH_ParseDevDesc+0xb8>
        break;
 80097be:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 80097c0:	e00e      	b.n	80097e0 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80097c8:	2b02      	cmp	r3, #2
 80097ca:	d107      	bne.n	80097dc <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 80097cc:	693b      	ldr	r3, [r7, #16]
 80097ce:	79db      	ldrb	r3, [r3, #7]
 80097d0:	2b08      	cmp	r3, #8
 80097d2:	d005      	beq.n	80097e0 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 80097d4:	693b      	ldr	r3, [r7, #16]
 80097d6:	2208      	movs	r2, #8
 80097d8:	71da      	strb	r2, [r3, #7]
 80097da:	e001      	b.n	80097e0 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 80097dc:	2303      	movs	r3, #3
 80097de:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 80097e0:	88fb      	ldrh	r3, [r7, #6]
 80097e2:	2b08      	cmp	r3, #8
 80097e4:	d936      	bls.n	8009854 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 80097e6:	68bb      	ldr	r3, [r7, #8]
 80097e8:	3308      	adds	r3, #8
 80097ea:	781b      	ldrb	r3, [r3, #0]
 80097ec:	461a      	mov	r2, r3
 80097ee:	68bb      	ldr	r3, [r7, #8]
 80097f0:	3309      	adds	r3, #9
 80097f2:	781b      	ldrb	r3, [r3, #0]
 80097f4:	021b      	lsls	r3, r3, #8
 80097f6:	b29b      	uxth	r3, r3
 80097f8:	4313      	orrs	r3, r2
 80097fa:	b29a      	uxth	r2, r3
 80097fc:	693b      	ldr	r3, [r7, #16]
 80097fe:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8009800:	68bb      	ldr	r3, [r7, #8]
 8009802:	330a      	adds	r3, #10
 8009804:	781b      	ldrb	r3, [r3, #0]
 8009806:	461a      	mov	r2, r3
 8009808:	68bb      	ldr	r3, [r7, #8]
 800980a:	330b      	adds	r3, #11
 800980c:	781b      	ldrb	r3, [r3, #0]
 800980e:	021b      	lsls	r3, r3, #8
 8009810:	b29b      	uxth	r3, r3
 8009812:	4313      	orrs	r3, r2
 8009814:	b29a      	uxth	r2, r3
 8009816:	693b      	ldr	r3, [r7, #16]
 8009818:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800981a:	68bb      	ldr	r3, [r7, #8]
 800981c:	330c      	adds	r3, #12
 800981e:	781b      	ldrb	r3, [r3, #0]
 8009820:	461a      	mov	r2, r3
 8009822:	68bb      	ldr	r3, [r7, #8]
 8009824:	330d      	adds	r3, #13
 8009826:	781b      	ldrb	r3, [r3, #0]
 8009828:	021b      	lsls	r3, r3, #8
 800982a:	b29b      	uxth	r3, r3
 800982c:	4313      	orrs	r3, r2
 800982e:	b29a      	uxth	r2, r3
 8009830:	693b      	ldr	r3, [r7, #16]
 8009832:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8009834:	68bb      	ldr	r3, [r7, #8]
 8009836:	7b9a      	ldrb	r2, [r3, #14]
 8009838:	693b      	ldr	r3, [r7, #16]
 800983a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	7bda      	ldrb	r2, [r3, #15]
 8009840:	693b      	ldr	r3, [r7, #16]
 8009842:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8009844:	68bb      	ldr	r3, [r7, #8]
 8009846:	7c1a      	ldrb	r2, [r3, #16]
 8009848:	693b      	ldr	r3, [r7, #16]
 800984a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800984c:	68bb      	ldr	r3, [r7, #8]
 800984e:	7c5a      	ldrb	r2, [r3, #17]
 8009850:	693b      	ldr	r3, [r7, #16]
 8009852:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8009854:	7dfb      	ldrb	r3, [r7, #23]
}
 8009856:	4618      	mov	r0, r3
 8009858:	371c      	adds	r7, #28
 800985a:	46bd      	mov	sp, r7
 800985c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009860:	4770      	bx	lr
 8009862:	bf00      	nop
 8009864:	01000101 	.word	0x01000101

08009868 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b08c      	sub	sp, #48	@ 0x30
 800986c:	af00      	add	r7, sp, #0
 800986e:	60f8      	str	r0, [r7, #12]
 8009870:	60b9      	str	r1, [r7, #8]
 8009872:	4613      	mov	r3, r2
 8009874:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800987c:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800987e:	2300      	movs	r3, #0
 8009880:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8009884:	2300      	movs	r3, #0
 8009886:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800988a:	2300      	movs	r3, #0
 800988c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8009890:	68bb      	ldr	r3, [r7, #8]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d101      	bne.n	800989a <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8009896:	2302      	movs	r3, #2
 8009898:	e0da      	b.n	8009a50 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800989a:	68bb      	ldr	r3, [r7, #8]
 800989c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800989e:	68bb      	ldr	r3, [r7, #8]
 80098a0:	781a      	ldrb	r2, [r3, #0]
 80098a2:	6a3b      	ldr	r3, [r7, #32]
 80098a4:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 80098a6:	68bb      	ldr	r3, [r7, #8]
 80098a8:	785a      	ldrb	r2, [r3, #1]
 80098aa:	6a3b      	ldr	r3, [r7, #32]
 80098ac:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80098ae:	68bb      	ldr	r3, [r7, #8]
 80098b0:	3302      	adds	r3, #2
 80098b2:	781b      	ldrb	r3, [r3, #0]
 80098b4:	461a      	mov	r2, r3
 80098b6:	68bb      	ldr	r3, [r7, #8]
 80098b8:	3303      	adds	r3, #3
 80098ba:	781b      	ldrb	r3, [r3, #0]
 80098bc:	021b      	lsls	r3, r3, #8
 80098be:	b29b      	uxth	r3, r3
 80098c0:	4313      	orrs	r3, r2
 80098c2:	b29b      	uxth	r3, r3
 80098c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80098c8:	bf28      	it	cs
 80098ca:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 80098ce:	b29a      	uxth	r2, r3
 80098d0:	6a3b      	ldr	r3, [r7, #32]
 80098d2:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 80098d4:	68bb      	ldr	r3, [r7, #8]
 80098d6:	791a      	ldrb	r2, [r3, #4]
 80098d8:	6a3b      	ldr	r3, [r7, #32]
 80098da:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 80098dc:	68bb      	ldr	r3, [r7, #8]
 80098de:	795a      	ldrb	r2, [r3, #5]
 80098e0:	6a3b      	ldr	r3, [r7, #32]
 80098e2:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 80098e4:	68bb      	ldr	r3, [r7, #8]
 80098e6:	799a      	ldrb	r2, [r3, #6]
 80098e8:	6a3b      	ldr	r3, [r7, #32]
 80098ea:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 80098ec:	68bb      	ldr	r3, [r7, #8]
 80098ee:	79da      	ldrb	r2, [r3, #7]
 80098f0:	6a3b      	ldr	r3, [r7, #32]
 80098f2:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 80098f4:	68bb      	ldr	r3, [r7, #8]
 80098f6:	7a1a      	ldrb	r2, [r3, #8]
 80098f8:	6a3b      	ldr	r3, [r7, #32]
 80098fa:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 80098fc:	6a3b      	ldr	r3, [r7, #32]
 80098fe:	781b      	ldrb	r3, [r3, #0]
 8009900:	2b09      	cmp	r3, #9
 8009902:	d002      	beq.n	800990a <USBH_ParseCfgDesc+0xa2>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8009904:	6a3b      	ldr	r3, [r7, #32]
 8009906:	2209      	movs	r2, #9
 8009908:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800990a:	88fb      	ldrh	r3, [r7, #6]
 800990c:	2b09      	cmp	r3, #9
 800990e:	f240 809d 	bls.w	8009a4c <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 8009912:	2309      	movs	r3, #9
 8009914:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009916:	2300      	movs	r3, #0
 8009918:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800991a:	e081      	b.n	8009a20 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800991c:	f107 0316 	add.w	r3, r7, #22
 8009920:	4619      	mov	r1, r3
 8009922:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009924:	f000 f9e7 	bl	8009cf6 <USBH_GetNextDesc>
 8009928:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800992a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800992c:	785b      	ldrb	r3, [r3, #1]
 800992e:	2b04      	cmp	r3, #4
 8009930:	d176      	bne.n	8009a20 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8009932:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009934:	781b      	ldrb	r3, [r3, #0]
 8009936:	2b09      	cmp	r3, #9
 8009938:	d002      	beq.n	8009940 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800993a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800993c:	2209      	movs	r2, #9
 800993e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8009940:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009944:	221a      	movs	r2, #26
 8009946:	fb02 f303 	mul.w	r3, r2, r3
 800994a:	3308      	adds	r3, #8
 800994c:	6a3a      	ldr	r2, [r7, #32]
 800994e:	4413      	add	r3, r2
 8009950:	3302      	adds	r3, #2
 8009952:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8009954:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009956:	69f8      	ldr	r0, [r7, #28]
 8009958:	f000 f87e 	bl	8009a58 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800995c:	2300      	movs	r3, #0
 800995e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8009962:	2300      	movs	r3, #0
 8009964:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009966:	e043      	b.n	80099f0 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009968:	f107 0316 	add.w	r3, r7, #22
 800996c:	4619      	mov	r1, r3
 800996e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009970:	f000 f9c1 	bl	8009cf6 <USBH_GetNextDesc>
 8009974:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009976:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009978:	785b      	ldrb	r3, [r3, #1]
 800997a:	2b05      	cmp	r3, #5
 800997c:	d138      	bne.n	80099f0 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800997e:	69fb      	ldr	r3, [r7, #28]
 8009980:	795b      	ldrb	r3, [r3, #5]
 8009982:	2b01      	cmp	r3, #1
 8009984:	d113      	bne.n	80099ae <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8009986:	69fb      	ldr	r3, [r7, #28]
 8009988:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800998a:	2b02      	cmp	r3, #2
 800998c:	d003      	beq.n	8009996 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800998e:	69fb      	ldr	r3, [r7, #28]
 8009990:	799b      	ldrb	r3, [r3, #6]
 8009992:	2b03      	cmp	r3, #3
 8009994:	d10b      	bne.n	80099ae <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009996:	69fb      	ldr	r3, [r7, #28]
 8009998:	79db      	ldrb	r3, [r3, #7]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d10b      	bne.n	80099b6 <USBH_ParseCfgDesc+0x14e>
 800999e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099a0:	781b      	ldrb	r3, [r3, #0]
 80099a2:	2b09      	cmp	r3, #9
 80099a4:	d007      	beq.n	80099b6 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 80099a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099a8:	2209      	movs	r2, #9
 80099aa:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80099ac:	e003      	b.n	80099b6 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 80099ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099b0:	2207      	movs	r2, #7
 80099b2:	701a      	strb	r2, [r3, #0]
 80099b4:	e000      	b.n	80099b8 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80099b6:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80099b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80099bc:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80099c0:	3201      	adds	r2, #1
 80099c2:	00d2      	lsls	r2, r2, #3
 80099c4:	211a      	movs	r1, #26
 80099c6:	fb01 f303 	mul.w	r3, r1, r3
 80099ca:	4413      	add	r3, r2
 80099cc:	3308      	adds	r3, #8
 80099ce:	6a3a      	ldr	r2, [r7, #32]
 80099d0:	4413      	add	r3, r2
 80099d2:	3304      	adds	r3, #4
 80099d4:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 80099d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80099d8:	69b9      	ldr	r1, [r7, #24]
 80099da:	68f8      	ldr	r0, [r7, #12]
 80099dc:	f000 f870 	bl	8009ac0 <USBH_ParseEPDesc>
 80099e0:	4603      	mov	r3, r0
 80099e2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 80099e6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80099ea:	3301      	adds	r3, #1
 80099ec:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80099f0:	69fb      	ldr	r3, [r7, #28]
 80099f2:	791b      	ldrb	r3, [r3, #4]
 80099f4:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80099f8:	429a      	cmp	r2, r3
 80099fa:	d204      	bcs.n	8009a06 <USBH_ParseCfgDesc+0x19e>
 80099fc:	6a3b      	ldr	r3, [r7, #32]
 80099fe:	885a      	ldrh	r2, [r3, #2]
 8009a00:	8afb      	ldrh	r3, [r7, #22]
 8009a02:	429a      	cmp	r2, r3
 8009a04:	d8b0      	bhi.n	8009968 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8009a06:	69fb      	ldr	r3, [r7, #28]
 8009a08:	791b      	ldrb	r3, [r3, #4]
 8009a0a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009a0e:	429a      	cmp	r2, r3
 8009a10:	d201      	bcs.n	8009a16 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 8009a12:	2303      	movs	r3, #3
 8009a14:	e01c      	b.n	8009a50 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 8009a16:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009a1a:	3301      	adds	r3, #1
 8009a1c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009a20:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009a24:	2b01      	cmp	r3, #1
 8009a26:	d805      	bhi.n	8009a34 <USBH_ParseCfgDesc+0x1cc>
 8009a28:	6a3b      	ldr	r3, [r7, #32]
 8009a2a:	885a      	ldrh	r2, [r3, #2]
 8009a2c:	8afb      	ldrh	r3, [r7, #22]
 8009a2e:	429a      	cmp	r2, r3
 8009a30:	f63f af74 	bhi.w	800991c <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8009a34:	6a3b      	ldr	r3, [r7, #32]
 8009a36:	791b      	ldrb	r3, [r3, #4]
 8009a38:	2b02      	cmp	r3, #2
 8009a3a:	bf28      	it	cs
 8009a3c:	2302      	movcs	r3, #2
 8009a3e:	b2db      	uxtb	r3, r3
 8009a40:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8009a44:	429a      	cmp	r2, r3
 8009a46:	d201      	bcs.n	8009a4c <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 8009a48:	2303      	movs	r3, #3
 8009a4a:	e001      	b.n	8009a50 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8009a4c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8009a50:	4618      	mov	r0, r3
 8009a52:	3730      	adds	r7, #48	@ 0x30
 8009a54:	46bd      	mov	sp, r7
 8009a56:	bd80      	pop	{r7, pc}

08009a58 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8009a58:	b480      	push	{r7}
 8009a5a:	b083      	sub	sp, #12
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
 8009a60:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	781a      	ldrb	r2, [r3, #0]
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	785a      	ldrb	r2, [r3, #1]
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8009a72:	683b      	ldr	r3, [r7, #0]
 8009a74:	789a      	ldrb	r2, [r3, #2]
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8009a7a:	683b      	ldr	r3, [r7, #0]
 8009a7c:	78da      	ldrb	r2, [r3, #3]
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	3304      	adds	r3, #4
 8009a86:	781b      	ldrb	r3, [r3, #0]
 8009a88:	2b02      	cmp	r3, #2
 8009a8a:	bf28      	it	cs
 8009a8c:	2302      	movcs	r3, #2
 8009a8e:	b2da      	uxtb	r2, r3
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	795a      	ldrb	r2, [r3, #5]
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	799a      	ldrb	r2, [r3, #6]
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	79da      	ldrb	r2, [r3, #7]
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	7a1a      	ldrb	r2, [r3, #8]
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	721a      	strb	r2, [r3, #8]
}
 8009ab4:	bf00      	nop
 8009ab6:	370c      	adds	r7, #12
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009abe:	4770      	bx	lr

08009ac0 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8009ac0:	b480      	push	{r7}
 8009ac2:	b087      	sub	sp, #28
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	60f8      	str	r0, [r7, #12]
 8009ac8:	60b9      	str	r1, [r7, #8]
 8009aca:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8009acc:	2300      	movs	r3, #0
 8009ace:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	781a      	ldrb	r2, [r3, #0]
 8009ad4:	68bb      	ldr	r3, [r7, #8]
 8009ad6:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	785a      	ldrb	r2, [r3, #1]
 8009adc:	68bb      	ldr	r3, [r7, #8]
 8009ade:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	789a      	ldrb	r2, [r3, #2]
 8009ae4:	68bb      	ldr	r3, [r7, #8]
 8009ae6:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	78da      	ldrb	r2, [r3, #3]
 8009aec:	68bb      	ldr	r3, [r7, #8]
 8009aee:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	3304      	adds	r3, #4
 8009af4:	781b      	ldrb	r3, [r3, #0]
 8009af6:	461a      	mov	r2, r3
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	3305      	adds	r3, #5
 8009afc:	781b      	ldrb	r3, [r3, #0]
 8009afe:	021b      	lsls	r3, r3, #8
 8009b00:	b29b      	uxth	r3, r3
 8009b02:	4313      	orrs	r3, r2
 8009b04:	b29a      	uxth	r2, r3
 8009b06:	68bb      	ldr	r3, [r7, #8]
 8009b08:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	799a      	ldrb	r2, [r3, #6]
 8009b0e:	68bb      	ldr	r3, [r7, #8]
 8009b10:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8009b12:	68bb      	ldr	r3, [r7, #8]
 8009b14:	889b      	ldrh	r3, [r3, #4]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d009      	beq.n	8009b2e <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8009b1a:	68bb      	ldr	r3, [r7, #8]
 8009b1c:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8009b1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009b22:	d804      	bhi.n	8009b2e <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8009b24:	68bb      	ldr	r3, [r7, #8]
 8009b26:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8009b28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009b2c:	d901      	bls.n	8009b32 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8009b2e:	2303      	movs	r3, #3
 8009b30:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d136      	bne.n	8009baa <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8009b3c:	68bb      	ldr	r3, [r7, #8]
 8009b3e:	78db      	ldrb	r3, [r3, #3]
 8009b40:	f003 0303 	and.w	r3, r3, #3
 8009b44:	2b02      	cmp	r3, #2
 8009b46:	d108      	bne.n	8009b5a <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8009b48:	68bb      	ldr	r3, [r7, #8]
 8009b4a:	889b      	ldrh	r3, [r3, #4]
 8009b4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009b50:	f240 8097 	bls.w	8009c82 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009b54:	2303      	movs	r3, #3
 8009b56:	75fb      	strb	r3, [r7, #23]
 8009b58:	e093      	b.n	8009c82 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8009b5a:	68bb      	ldr	r3, [r7, #8]
 8009b5c:	78db      	ldrb	r3, [r3, #3]
 8009b5e:	f003 0303 	and.w	r3, r3, #3
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d107      	bne.n	8009b76 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009b66:	68bb      	ldr	r3, [r7, #8]
 8009b68:	889b      	ldrh	r3, [r3, #4]
 8009b6a:	2b40      	cmp	r3, #64	@ 0x40
 8009b6c:	f240 8089 	bls.w	8009c82 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009b70:	2303      	movs	r3, #3
 8009b72:	75fb      	strb	r3, [r7, #23]
 8009b74:	e085      	b.n	8009c82 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009b76:	68bb      	ldr	r3, [r7, #8]
 8009b78:	78db      	ldrb	r3, [r3, #3]
 8009b7a:	f003 0303 	and.w	r3, r3, #3
 8009b7e:	2b01      	cmp	r3, #1
 8009b80:	d005      	beq.n	8009b8e <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8009b82:	68bb      	ldr	r3, [r7, #8]
 8009b84:	78db      	ldrb	r3, [r3, #3]
 8009b86:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009b8a:	2b03      	cmp	r3, #3
 8009b8c:	d10a      	bne.n	8009ba4 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009b8e:	68bb      	ldr	r3, [r7, #8]
 8009b90:	799b      	ldrb	r3, [r3, #6]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d003      	beq.n	8009b9e <USBH_ParseEPDesc+0xde>
 8009b96:	68bb      	ldr	r3, [r7, #8]
 8009b98:	799b      	ldrb	r3, [r3, #6]
 8009b9a:	2b10      	cmp	r3, #16
 8009b9c:	d970      	bls.n	8009c80 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8009b9e:	2303      	movs	r3, #3
 8009ba0:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009ba2:	e06d      	b.n	8009c80 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009ba4:	2303      	movs	r3, #3
 8009ba6:	75fb      	strb	r3, [r7, #23]
 8009ba8:	e06b      	b.n	8009c82 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009bb0:	2b01      	cmp	r3, #1
 8009bb2:	d13c      	bne.n	8009c2e <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8009bb4:	68bb      	ldr	r3, [r7, #8]
 8009bb6:	78db      	ldrb	r3, [r3, #3]
 8009bb8:	f003 0303 	and.w	r3, r3, #3
 8009bbc:	2b02      	cmp	r3, #2
 8009bbe:	d005      	beq.n	8009bcc <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8009bc0:	68bb      	ldr	r3, [r7, #8]
 8009bc2:	78db      	ldrb	r3, [r3, #3]
 8009bc4:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d106      	bne.n	8009bda <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009bcc:	68bb      	ldr	r3, [r7, #8]
 8009bce:	889b      	ldrh	r3, [r3, #4]
 8009bd0:	2b40      	cmp	r3, #64	@ 0x40
 8009bd2:	d956      	bls.n	8009c82 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009bd4:	2303      	movs	r3, #3
 8009bd6:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009bd8:	e053      	b.n	8009c82 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8009bda:	68bb      	ldr	r3, [r7, #8]
 8009bdc:	78db      	ldrb	r3, [r3, #3]
 8009bde:	f003 0303 	and.w	r3, r3, #3
 8009be2:	2b01      	cmp	r3, #1
 8009be4:	d10e      	bne.n	8009c04 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8009be6:	68bb      	ldr	r3, [r7, #8]
 8009be8:	799b      	ldrb	r3, [r3, #6]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d007      	beq.n	8009bfe <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8009bee:	68bb      	ldr	r3, [r7, #8]
 8009bf0:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8009bf2:	2b10      	cmp	r3, #16
 8009bf4:	d803      	bhi.n	8009bfe <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8009bf6:	68bb      	ldr	r3, [r7, #8]
 8009bf8:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8009bfa:	2b40      	cmp	r3, #64	@ 0x40
 8009bfc:	d941      	bls.n	8009c82 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009bfe:	2303      	movs	r3, #3
 8009c00:	75fb      	strb	r3, [r7, #23]
 8009c02:	e03e      	b.n	8009c82 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009c04:	68bb      	ldr	r3, [r7, #8]
 8009c06:	78db      	ldrb	r3, [r3, #3]
 8009c08:	f003 0303 	and.w	r3, r3, #3
 8009c0c:	2b03      	cmp	r3, #3
 8009c0e:	d10b      	bne.n	8009c28 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8009c10:	68bb      	ldr	r3, [r7, #8]
 8009c12:	799b      	ldrb	r3, [r3, #6]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d004      	beq.n	8009c22 <USBH_ParseEPDesc+0x162>
 8009c18:	68bb      	ldr	r3, [r7, #8]
 8009c1a:	889b      	ldrh	r3, [r3, #4]
 8009c1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009c20:	d32f      	bcc.n	8009c82 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009c22:	2303      	movs	r3, #3
 8009c24:	75fb      	strb	r3, [r7, #23]
 8009c26:	e02c      	b.n	8009c82 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009c28:	2303      	movs	r3, #3
 8009c2a:	75fb      	strb	r3, [r7, #23]
 8009c2c:	e029      	b.n	8009c82 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009c34:	2b02      	cmp	r3, #2
 8009c36:	d120      	bne.n	8009c7a <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8009c38:	68bb      	ldr	r3, [r7, #8]
 8009c3a:	78db      	ldrb	r3, [r3, #3]
 8009c3c:	f003 0303 	and.w	r3, r3, #3
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d106      	bne.n	8009c52 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8009c44:	68bb      	ldr	r3, [r7, #8]
 8009c46:	889b      	ldrh	r3, [r3, #4]
 8009c48:	2b08      	cmp	r3, #8
 8009c4a:	d01a      	beq.n	8009c82 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009c4c:	2303      	movs	r3, #3
 8009c4e:	75fb      	strb	r3, [r7, #23]
 8009c50:	e017      	b.n	8009c82 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009c52:	68bb      	ldr	r3, [r7, #8]
 8009c54:	78db      	ldrb	r3, [r3, #3]
 8009c56:	f003 0303 	and.w	r3, r3, #3
 8009c5a:	2b03      	cmp	r3, #3
 8009c5c:	d10a      	bne.n	8009c74 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8009c5e:	68bb      	ldr	r3, [r7, #8]
 8009c60:	799b      	ldrb	r3, [r3, #6]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d003      	beq.n	8009c6e <USBH_ParseEPDesc+0x1ae>
 8009c66:	68bb      	ldr	r3, [r7, #8]
 8009c68:	889b      	ldrh	r3, [r3, #4]
 8009c6a:	2b08      	cmp	r3, #8
 8009c6c:	d909      	bls.n	8009c82 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009c6e:	2303      	movs	r3, #3
 8009c70:	75fb      	strb	r3, [r7, #23]
 8009c72:	e006      	b.n	8009c82 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009c74:	2303      	movs	r3, #3
 8009c76:	75fb      	strb	r3, [r7, #23]
 8009c78:	e003      	b.n	8009c82 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8009c7a:	2303      	movs	r3, #3
 8009c7c:	75fb      	strb	r3, [r7, #23]
 8009c7e:	e000      	b.n	8009c82 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009c80:	bf00      	nop
  }

  return status;
 8009c82:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c84:	4618      	mov	r0, r3
 8009c86:	371c      	adds	r7, #28
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8e:	4770      	bx	lr

08009c90 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8009c90:	b480      	push	{r7}
 8009c92:	b087      	sub	sp, #28
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	60f8      	str	r0, [r7, #12]
 8009c98:	60b9      	str	r1, [r7, #8]
 8009c9a:	4613      	mov	r3, r2
 8009c9c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	3301      	adds	r3, #1
 8009ca2:	781b      	ldrb	r3, [r3, #0]
 8009ca4:	2b03      	cmp	r3, #3
 8009ca6:	d120      	bne.n	8009cea <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	781b      	ldrb	r3, [r3, #0]
 8009cac:	1e9a      	subs	r2, r3, #2
 8009cae:	88fb      	ldrh	r3, [r7, #6]
 8009cb0:	4293      	cmp	r3, r2
 8009cb2:	bf28      	it	cs
 8009cb4:	4613      	movcs	r3, r2
 8009cb6:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	3302      	adds	r3, #2
 8009cbc:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	82fb      	strh	r3, [r7, #22]
 8009cc2:	e00b      	b.n	8009cdc <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8009cc4:	8afb      	ldrh	r3, [r7, #22]
 8009cc6:	68fa      	ldr	r2, [r7, #12]
 8009cc8:	4413      	add	r3, r2
 8009cca:	781a      	ldrb	r2, [r3, #0]
 8009ccc:	68bb      	ldr	r3, [r7, #8]
 8009cce:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009cd0:	68bb      	ldr	r3, [r7, #8]
 8009cd2:	3301      	adds	r3, #1
 8009cd4:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8009cd6:	8afb      	ldrh	r3, [r7, #22]
 8009cd8:	3302      	adds	r3, #2
 8009cda:	82fb      	strh	r3, [r7, #22]
 8009cdc:	8afa      	ldrh	r2, [r7, #22]
 8009cde:	8abb      	ldrh	r3, [r7, #20]
 8009ce0:	429a      	cmp	r2, r3
 8009ce2:	d3ef      	bcc.n	8009cc4 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8009ce4:	68bb      	ldr	r3, [r7, #8]
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	701a      	strb	r2, [r3, #0]
  }
}
 8009cea:	bf00      	nop
 8009cec:	371c      	adds	r7, #28
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf4:	4770      	bx	lr

08009cf6 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009cf6:	b480      	push	{r7}
 8009cf8:	b085      	sub	sp, #20
 8009cfa:	af00      	add	r7, sp, #0
 8009cfc:	6078      	str	r0, [r7, #4]
 8009cfe:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009d00:	683b      	ldr	r3, [r7, #0]
 8009d02:	881b      	ldrh	r3, [r3, #0]
 8009d04:	687a      	ldr	r2, [r7, #4]
 8009d06:	7812      	ldrb	r2, [r2, #0]
 8009d08:	4413      	add	r3, r2
 8009d0a:	b29a      	uxth	r2, r3
 8009d0c:	683b      	ldr	r3, [r7, #0]
 8009d0e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	781b      	ldrb	r3, [r3, #0]
 8009d14:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	4413      	add	r3, r2
 8009d1a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009d1c:	68fb      	ldr	r3, [r7, #12]
}
 8009d1e:	4618      	mov	r0, r3
 8009d20:	3714      	adds	r7, #20
 8009d22:	46bd      	mov	sp, r7
 8009d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d28:	4770      	bx	lr

08009d2a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8009d2a:	b580      	push	{r7, lr}
 8009d2c:	b086      	sub	sp, #24
 8009d2e:	af00      	add	r7, sp, #0
 8009d30:	60f8      	str	r0, [r7, #12]
 8009d32:	60b9      	str	r1, [r7, #8]
 8009d34:	4613      	mov	r3, r2
 8009d36:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009d38:	2301      	movs	r3, #1
 8009d3a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	789b      	ldrb	r3, [r3, #2]
 8009d40:	2b01      	cmp	r3, #1
 8009d42:	d002      	beq.n	8009d4a <USBH_CtlReq+0x20>
 8009d44:	2b02      	cmp	r3, #2
 8009d46:	d01d      	beq.n	8009d84 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 8009d48:	e043      	b.n	8009dd2 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	68ba      	ldr	r2, [r7, #8]
 8009d4e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	88fa      	ldrh	r2, [r7, #6]
 8009d54:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	2201      	movs	r2, #1
 8009d5a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	2202      	movs	r2, #2
 8009d60:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8009d62:	2301      	movs	r3, #1
 8009d64:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	2203      	movs	r2, #3
 8009d6a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	f000 fd55 	bl	800a82c <osMessageQueuePut>
      break;
 8009d82:	e026      	b.n	8009dd2 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 8009d84:	68f8      	ldr	r0, [r7, #12]
 8009d86:	f000 f829 	bl	8009ddc <USBH_HandleControl>
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8009d8e:	7dfb      	ldrb	r3, [r7, #23]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d002      	beq.n	8009d9a <USBH_CtlReq+0x70>
 8009d94:	7dfb      	ldrb	r3, [r7, #23]
 8009d96:	2b03      	cmp	r3, #3
 8009d98:	d106      	bne.n	8009da8 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	2201      	movs	r2, #1
 8009d9e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	2200      	movs	r2, #0
 8009da4:	761a      	strb	r2, [r3, #24]
 8009da6:	e005      	b.n	8009db4 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 8009da8:	7dfb      	ldrb	r3, [r7, #23]
 8009daa:	2b02      	cmp	r3, #2
 8009dac:	d102      	bne.n	8009db4 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	2201      	movs	r2, #1
 8009db2:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	2203      	movs	r2, #3
 8009db8:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8009dc8:	2300      	movs	r3, #0
 8009dca:	2200      	movs	r2, #0
 8009dcc:	f000 fd2e 	bl	800a82c <osMessageQueuePut>
      break;
 8009dd0:	bf00      	nop
  }
  return status;
 8009dd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	3718      	adds	r7, #24
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	bd80      	pop	{r7, pc}

08009ddc <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b086      	sub	sp, #24
 8009de0:	af02      	add	r7, sp, #8
 8009de2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8009de4:	2301      	movs	r3, #1
 8009de6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009de8:	2300      	movs	r3, #0
 8009dea:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	7e1b      	ldrb	r3, [r3, #24]
 8009df0:	3b01      	subs	r3, #1
 8009df2:	2b0a      	cmp	r3, #10
 8009df4:	f200 8229 	bhi.w	800a24a <USBH_HandleControl+0x46e>
 8009df8:	a201      	add	r2, pc, #4	@ (adr r2, 8009e00 <USBH_HandleControl+0x24>)
 8009dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dfe:	bf00      	nop
 8009e00:	08009e2d 	.word	0x08009e2d
 8009e04:	08009e47 	.word	0x08009e47
 8009e08:	08009ee9 	.word	0x08009ee9
 8009e0c:	08009f0f 	.word	0x08009f0f
 8009e10:	08009f9b 	.word	0x08009f9b
 8009e14:	08009fc5 	.word	0x08009fc5
 8009e18:	0800a087 	.word	0x0800a087
 8009e1c:	0800a0a9 	.word	0x0800a0a9
 8009e20:	0800a13b 	.word	0x0800a13b
 8009e24:	0800a161 	.word	0x0800a161
 8009e28:	0800a1f3 	.word	0x0800a1f3
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	f103 0110 	add.w	r1, r3, #16
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	795b      	ldrb	r3, [r3, #5]
 8009e36:	461a      	mov	r2, r3
 8009e38:	6878      	ldr	r0, [r7, #4]
 8009e3a:	f000 fa17 	bl	800a26c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	2202      	movs	r2, #2
 8009e42:	761a      	strb	r2, [r3, #24]
      break;
 8009e44:	e20c      	b.n	800a260 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	795b      	ldrb	r3, [r3, #5]
 8009e4a:	4619      	mov	r1, r3
 8009e4c:	6878      	ldr	r0, [r7, #4]
 8009e4e:	f003 fd7b 	bl	800d948 <USBH_LL_GetURBState>
 8009e52:	4603      	mov	r3, r0
 8009e54:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8009e56:	7bbb      	ldrb	r3, [r7, #14]
 8009e58:	2b01      	cmp	r3, #1
 8009e5a:	d12c      	bne.n	8009eb6 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	7c1b      	ldrb	r3, [r3, #16]
 8009e60:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009e64:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	8adb      	ldrh	r3, [r3, #22]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d00a      	beq.n	8009e84 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8009e6e:	7b7b      	ldrb	r3, [r7, #13]
 8009e70:	2b80      	cmp	r3, #128	@ 0x80
 8009e72:	d103      	bne.n	8009e7c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2203      	movs	r2, #3
 8009e78:	761a      	strb	r2, [r3, #24]
 8009e7a:	e00d      	b.n	8009e98 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2205      	movs	r2, #5
 8009e80:	761a      	strb	r2, [r3, #24]
 8009e82:	e009      	b.n	8009e98 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 8009e84:	7b7b      	ldrb	r3, [r7, #13]
 8009e86:	2b80      	cmp	r3, #128	@ 0x80
 8009e88:	d103      	bne.n	8009e92 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	2209      	movs	r2, #9
 8009e8e:	761a      	strb	r2, [r3, #24]
 8009e90:	e002      	b.n	8009e98 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	2207      	movs	r2, #7
 8009e96:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	2203      	movs	r2, #3
 8009e9c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8009eac:	2300      	movs	r3, #0
 8009eae:	2200      	movs	r2, #0
 8009eb0:	f000 fcbc 	bl	800a82c <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009eb4:	e1cb      	b.n	800a24e <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8009eb6:	7bbb      	ldrb	r3, [r7, #14]
 8009eb8:	2b04      	cmp	r3, #4
 8009eba:	d003      	beq.n	8009ec4 <USBH_HandleControl+0xe8>
 8009ebc:	7bbb      	ldrb	r3, [r7, #14]
 8009ebe:	2b02      	cmp	r3, #2
 8009ec0:	f040 81c5 	bne.w	800a24e <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	220b      	movs	r2, #11
 8009ec8:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	2203      	movs	r2, #3
 8009ece:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8009ede:	2300      	movs	r3, #0
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	f000 fca3 	bl	800a82c <osMessageQueuePut>
      break;
 8009ee6:	e1b2      	b.n	800a24e <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009eee:	b29a      	uxth	r2, r3
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	6899      	ldr	r1, [r3, #8]
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	899a      	ldrh	r2, [r3, #12]
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	791b      	ldrb	r3, [r3, #4]
 8009f00:	6878      	ldr	r0, [r7, #4]
 8009f02:	f000 f9f2 	bl	800a2ea <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	2204      	movs	r2, #4
 8009f0a:	761a      	strb	r2, [r3, #24]
      break;
 8009f0c:	e1a8      	b.n	800a260 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	791b      	ldrb	r3, [r3, #4]
 8009f12:	4619      	mov	r1, r3
 8009f14:	6878      	ldr	r0, [r7, #4]
 8009f16:	f003 fd17 	bl	800d948 <USBH_LL_GetURBState>
 8009f1a:	4603      	mov	r3, r0
 8009f1c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8009f1e:	7bbb      	ldrb	r3, [r7, #14]
 8009f20:	2b01      	cmp	r3, #1
 8009f22:	d110      	bne.n	8009f46 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2209      	movs	r2, #9
 8009f28:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	2203      	movs	r2, #3
 8009f2e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8009f3e:	2300      	movs	r3, #0
 8009f40:	2200      	movs	r2, #0
 8009f42:	f000 fc73 	bl	800a82c <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8009f46:	7bbb      	ldrb	r3, [r7, #14]
 8009f48:	2b05      	cmp	r3, #5
 8009f4a:	d110      	bne.n	8009f6e <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8009f4c:	2303      	movs	r3, #3
 8009f4e:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2203      	movs	r2, #3
 8009f54:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8009f64:	2300      	movs	r3, #0
 8009f66:	2200      	movs	r2, #0
 8009f68:	f000 fc60 	bl	800a82c <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009f6c:	e171      	b.n	800a252 <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 8009f6e:	7bbb      	ldrb	r3, [r7, #14]
 8009f70:	2b04      	cmp	r3, #4
 8009f72:	f040 816e 	bne.w	800a252 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	220b      	movs	r2, #11
 8009f7a:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2203      	movs	r2, #3
 8009f80:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8009f90:	2300      	movs	r3, #0
 8009f92:	2200      	movs	r2, #0
 8009f94:	f000 fc4a 	bl	800a82c <osMessageQueuePut>
      break;
 8009f98:	e15b      	b.n	800a252 <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	6899      	ldr	r1, [r3, #8]
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	899a      	ldrh	r2, [r3, #12]
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	795b      	ldrb	r3, [r3, #5]
 8009fa6:	2001      	movs	r0, #1
 8009fa8:	9000      	str	r0, [sp, #0]
 8009faa:	6878      	ldr	r0, [r7, #4]
 8009fac:	f000 f978 	bl	800a2a0 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009fb6:	b29a      	uxth	r2, r3
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2206      	movs	r2, #6
 8009fc0:	761a      	strb	r2, [r3, #24]
      break;
 8009fc2:	e14d      	b.n	800a260 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	795b      	ldrb	r3, [r3, #5]
 8009fc8:	4619      	mov	r1, r3
 8009fca:	6878      	ldr	r0, [r7, #4]
 8009fcc:	f003 fcbc 	bl	800d948 <USBH_LL_GetURBState>
 8009fd0:	4603      	mov	r3, r0
 8009fd2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009fd4:	7bbb      	ldrb	r3, [r7, #14]
 8009fd6:	2b01      	cmp	r3, #1
 8009fd8:	d111      	bne.n	8009ffe <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	2207      	movs	r2, #7
 8009fde:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2203      	movs	r2, #3
 8009fe4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	f000 fc18 	bl	800a82c <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009ffc:	e12b      	b.n	800a256 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 8009ffe:	7bbb      	ldrb	r3, [r7, #14]
 800a000:	2b05      	cmp	r3, #5
 800a002:	d113      	bne.n	800a02c <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	220c      	movs	r2, #12
 800a008:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800a00a:	2303      	movs	r3, #3
 800a00c:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	2203      	movs	r2, #3
 800a012:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a022:	2300      	movs	r3, #0
 800a024:	2200      	movs	r2, #0
 800a026:	f000 fc01 	bl	800a82c <osMessageQueuePut>
      break;
 800a02a:	e114      	b.n	800a256 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a02c:	7bbb      	ldrb	r3, [r7, #14]
 800a02e:	2b02      	cmp	r3, #2
 800a030:	d111      	bne.n	800a056 <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	2205      	movs	r2, #5
 800a036:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2203      	movs	r2, #3
 800a03c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a04c:	2300      	movs	r3, #0
 800a04e:	2200      	movs	r2, #0
 800a050:	f000 fbec 	bl	800a82c <osMessageQueuePut>
      break;
 800a054:	e0ff      	b.n	800a256 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800a056:	7bbb      	ldrb	r3, [r7, #14]
 800a058:	2b04      	cmp	r3, #4
 800a05a:	f040 80fc 	bne.w	800a256 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	220b      	movs	r2, #11
 800a062:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800a064:	2302      	movs	r3, #2
 800a066:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	2203      	movs	r2, #3
 800a06c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a07c:	2300      	movs	r3, #0
 800a07e:	2200      	movs	r2, #0
 800a080:	f000 fbd4 	bl	800a82c <osMessageQueuePut>
      break;
 800a084:	e0e7      	b.n	800a256 <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	791b      	ldrb	r3, [r3, #4]
 800a08a:	2200      	movs	r2, #0
 800a08c:	2100      	movs	r1, #0
 800a08e:	6878      	ldr	r0, [r7, #4]
 800a090:	f000 f92b 	bl	800a2ea <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a09a:	b29a      	uxth	r2, r3
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2208      	movs	r2, #8
 800a0a4:	761a      	strb	r2, [r3, #24]

      break;
 800a0a6:	e0db      	b.n	800a260 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	791b      	ldrb	r3, [r3, #4]
 800a0ac:	4619      	mov	r1, r3
 800a0ae:	6878      	ldr	r0, [r7, #4]
 800a0b0:	f003 fc4a 	bl	800d948 <USBH_LL_GetURBState>
 800a0b4:	4603      	mov	r3, r0
 800a0b6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a0b8:	7bbb      	ldrb	r3, [r7, #14]
 800a0ba:	2b01      	cmp	r3, #1
 800a0bc:	d113      	bne.n	800a0e6 <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	220d      	movs	r2, #13
 800a0c2:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2203      	movs	r2, #3
 800a0cc:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a0dc:	2300      	movs	r3, #0
 800a0de:	2200      	movs	r2, #0
 800a0e0:	f000 fba4 	bl	800a82c <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a0e4:	e0b9      	b.n	800a25a <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 800a0e6:	7bbb      	ldrb	r3, [r7, #14]
 800a0e8:	2b04      	cmp	r3, #4
 800a0ea:	d111      	bne.n	800a110 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	220b      	movs	r2, #11
 800a0f0:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	2203      	movs	r2, #3
 800a0f6:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a106:	2300      	movs	r3, #0
 800a108:	2200      	movs	r2, #0
 800a10a:	f000 fb8f 	bl	800a82c <osMessageQueuePut>
      break;
 800a10e:	e0a4      	b.n	800a25a <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 800a110:	7bbb      	ldrb	r3, [r7, #14]
 800a112:	2b05      	cmp	r3, #5
 800a114:	f040 80a1 	bne.w	800a25a <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 800a118:	2303      	movs	r3, #3
 800a11a:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	2203      	movs	r2, #3
 800a120:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a130:	2300      	movs	r3, #0
 800a132:	2200      	movs	r2, #0
 800a134:	f000 fb7a 	bl	800a82c <osMessageQueuePut>
      break;
 800a138:	e08f      	b.n	800a25a <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	795b      	ldrb	r3, [r3, #5]
 800a13e:	2201      	movs	r2, #1
 800a140:	9200      	str	r2, [sp, #0]
 800a142:	2200      	movs	r2, #0
 800a144:	2100      	movs	r1, #0
 800a146:	6878      	ldr	r0, [r7, #4]
 800a148:	f000 f8aa 	bl	800a2a0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a152:	b29a      	uxth	r2, r3
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	220a      	movs	r2, #10
 800a15c:	761a      	strb	r2, [r3, #24]
      break;
 800a15e:	e07f      	b.n	800a260 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	795b      	ldrb	r3, [r3, #5]
 800a164:	4619      	mov	r1, r3
 800a166:	6878      	ldr	r0, [r7, #4]
 800a168:	f003 fbee 	bl	800d948 <USBH_LL_GetURBState>
 800a16c:	4603      	mov	r3, r0
 800a16e:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800a170:	7bbb      	ldrb	r3, [r7, #14]
 800a172:	2b01      	cmp	r3, #1
 800a174:	d113      	bne.n	800a19e <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 800a176:	2300      	movs	r3, #0
 800a178:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	220d      	movs	r2, #13
 800a17e:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	2203      	movs	r2, #3
 800a184:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a194:	2300      	movs	r3, #0
 800a196:	2200      	movs	r2, #0
 800a198:	f000 fb48 	bl	800a82c <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a19c:	e05f      	b.n	800a25e <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a19e:	7bbb      	ldrb	r3, [r7, #14]
 800a1a0:	2b02      	cmp	r3, #2
 800a1a2:	d111      	bne.n	800a1c8 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	2209      	movs	r2, #9
 800a1a8:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	2203      	movs	r2, #3
 800a1ae:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a1be:	2300      	movs	r3, #0
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	f000 fb33 	bl	800a82c <osMessageQueuePut>
      break;
 800a1c6:	e04a      	b.n	800a25e <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 800a1c8:	7bbb      	ldrb	r3, [r7, #14]
 800a1ca:	2b04      	cmp	r3, #4
 800a1cc:	d147      	bne.n	800a25e <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	220b      	movs	r2, #11
 800a1d2:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	2203      	movs	r2, #3
 800a1d8:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	f000 fb1e 	bl	800a82c <osMessageQueuePut>
      break;
 800a1f0:	e035      	b.n	800a25e <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	7e5b      	ldrb	r3, [r3, #25]
 800a1f6:	3301      	adds	r3, #1
 800a1f8:	b2da      	uxtb	r2, r3
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	765a      	strb	r2, [r3, #25]
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	7e5b      	ldrb	r3, [r3, #25]
 800a202:	2b02      	cmp	r3, #2
 800a204:	d806      	bhi.n	800a214 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	2201      	movs	r2, #1
 800a20a:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	2201      	movs	r2, #1
 800a210:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800a212:	e025      	b.n	800a260 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a21a:	2106      	movs	r1, #6
 800a21c:	6878      	ldr	r0, [r7, #4]
 800a21e:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	2200      	movs	r2, #0
 800a224:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	795b      	ldrb	r3, [r3, #5]
 800a22a:	4619      	mov	r1, r3
 800a22c:	6878      	ldr	r0, [r7, #4]
 800a22e:	f000 f90d 	bl	800a44c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	791b      	ldrb	r3, [r3, #4]
 800a236:	4619      	mov	r1, r3
 800a238:	6878      	ldr	r0, [r7, #4]
 800a23a:	f000 f907 	bl	800a44c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	2200      	movs	r2, #0
 800a242:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800a244:	2302      	movs	r3, #2
 800a246:	73fb      	strb	r3, [r7, #15]
      break;
 800a248:	e00a      	b.n	800a260 <USBH_HandleControl+0x484>

    default:
      break;
 800a24a:	bf00      	nop
 800a24c:	e008      	b.n	800a260 <USBH_HandleControl+0x484>
      break;
 800a24e:	bf00      	nop
 800a250:	e006      	b.n	800a260 <USBH_HandleControl+0x484>
      break;
 800a252:	bf00      	nop
 800a254:	e004      	b.n	800a260 <USBH_HandleControl+0x484>
      break;
 800a256:	bf00      	nop
 800a258:	e002      	b.n	800a260 <USBH_HandleControl+0x484>
      break;
 800a25a:	bf00      	nop
 800a25c:	e000      	b.n	800a260 <USBH_HandleControl+0x484>
      break;
 800a25e:	bf00      	nop
  }

  return status;
 800a260:	7bfb      	ldrb	r3, [r7, #15]
}
 800a262:	4618      	mov	r0, r3
 800a264:	3710      	adds	r7, #16
 800a266:	46bd      	mov	sp, r7
 800a268:	bd80      	pop	{r7, pc}
 800a26a:	bf00      	nop

0800a26c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b088      	sub	sp, #32
 800a270:	af04      	add	r7, sp, #16
 800a272:	60f8      	str	r0, [r7, #12]
 800a274:	60b9      	str	r1, [r7, #8]
 800a276:	4613      	mov	r3, r2
 800a278:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a27a:	79f9      	ldrb	r1, [r7, #7]
 800a27c:	2300      	movs	r3, #0
 800a27e:	9303      	str	r3, [sp, #12]
 800a280:	2308      	movs	r3, #8
 800a282:	9302      	str	r3, [sp, #8]
 800a284:	68bb      	ldr	r3, [r7, #8]
 800a286:	9301      	str	r3, [sp, #4]
 800a288:	2300      	movs	r3, #0
 800a28a:	9300      	str	r3, [sp, #0]
 800a28c:	2300      	movs	r3, #0
 800a28e:	2200      	movs	r2, #0
 800a290:	68f8      	ldr	r0, [r7, #12]
 800a292:	f003 fb28 	bl	800d8e6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800a296:	2300      	movs	r3, #0
}
 800a298:	4618      	mov	r0, r3
 800a29a:	3710      	adds	r7, #16
 800a29c:	46bd      	mov	sp, r7
 800a29e:	bd80      	pop	{r7, pc}

0800a2a0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b088      	sub	sp, #32
 800a2a4:	af04      	add	r7, sp, #16
 800a2a6:	60f8      	str	r0, [r7, #12]
 800a2a8:	60b9      	str	r1, [r7, #8]
 800a2aa:	4611      	mov	r1, r2
 800a2ac:	461a      	mov	r2, r3
 800a2ae:	460b      	mov	r3, r1
 800a2b0:	80fb      	strh	r3, [r7, #6]
 800a2b2:	4613      	mov	r3, r2
 800a2b4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d001      	beq.n	800a2c4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a2c4:	7979      	ldrb	r1, [r7, #5]
 800a2c6:	7e3b      	ldrb	r3, [r7, #24]
 800a2c8:	9303      	str	r3, [sp, #12]
 800a2ca:	88fb      	ldrh	r3, [r7, #6]
 800a2cc:	9302      	str	r3, [sp, #8]
 800a2ce:	68bb      	ldr	r3, [r7, #8]
 800a2d0:	9301      	str	r3, [sp, #4]
 800a2d2:	2301      	movs	r3, #1
 800a2d4:	9300      	str	r3, [sp, #0]
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	2200      	movs	r2, #0
 800a2da:	68f8      	ldr	r0, [r7, #12]
 800a2dc:	f003 fb03 	bl	800d8e6 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800a2e0:	2300      	movs	r3, #0
}
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	3710      	adds	r7, #16
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	bd80      	pop	{r7, pc}

0800a2ea <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800a2ea:	b580      	push	{r7, lr}
 800a2ec:	b088      	sub	sp, #32
 800a2ee:	af04      	add	r7, sp, #16
 800a2f0:	60f8      	str	r0, [r7, #12]
 800a2f2:	60b9      	str	r1, [r7, #8]
 800a2f4:	4611      	mov	r1, r2
 800a2f6:	461a      	mov	r2, r3
 800a2f8:	460b      	mov	r3, r1
 800a2fa:	80fb      	strh	r3, [r7, #6]
 800a2fc:	4613      	mov	r3, r2
 800a2fe:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a300:	7979      	ldrb	r1, [r7, #5]
 800a302:	2300      	movs	r3, #0
 800a304:	9303      	str	r3, [sp, #12]
 800a306:	88fb      	ldrh	r3, [r7, #6]
 800a308:	9302      	str	r3, [sp, #8]
 800a30a:	68bb      	ldr	r3, [r7, #8]
 800a30c:	9301      	str	r3, [sp, #4]
 800a30e:	2301      	movs	r3, #1
 800a310:	9300      	str	r3, [sp, #0]
 800a312:	2300      	movs	r3, #0
 800a314:	2201      	movs	r2, #1
 800a316:	68f8      	ldr	r0, [r7, #12]
 800a318:	f003 fae5 	bl	800d8e6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a31c:	2300      	movs	r3, #0

}
 800a31e:	4618      	mov	r0, r3
 800a320:	3710      	adds	r7, #16
 800a322:	46bd      	mov	sp, r7
 800a324:	bd80      	pop	{r7, pc}

0800a326 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800a326:	b580      	push	{r7, lr}
 800a328:	b088      	sub	sp, #32
 800a32a:	af04      	add	r7, sp, #16
 800a32c:	60f8      	str	r0, [r7, #12]
 800a32e:	60b9      	str	r1, [r7, #8]
 800a330:	4611      	mov	r1, r2
 800a332:	461a      	mov	r2, r3
 800a334:	460b      	mov	r3, r1
 800a336:	80fb      	strh	r3, [r7, #6]
 800a338:	4613      	mov	r3, r2
 800a33a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a342:	2b00      	cmp	r3, #0
 800a344:	d001      	beq.n	800a34a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800a346:	2300      	movs	r3, #0
 800a348:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a34a:	7979      	ldrb	r1, [r7, #5]
 800a34c:	7e3b      	ldrb	r3, [r7, #24]
 800a34e:	9303      	str	r3, [sp, #12]
 800a350:	88fb      	ldrh	r3, [r7, #6]
 800a352:	9302      	str	r3, [sp, #8]
 800a354:	68bb      	ldr	r3, [r7, #8]
 800a356:	9301      	str	r3, [sp, #4]
 800a358:	2301      	movs	r3, #1
 800a35a:	9300      	str	r3, [sp, #0]
 800a35c:	2302      	movs	r3, #2
 800a35e:	2200      	movs	r2, #0
 800a360:	68f8      	ldr	r0, [r7, #12]
 800a362:	f003 fac0 	bl	800d8e6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800a366:	2300      	movs	r3, #0
}
 800a368:	4618      	mov	r0, r3
 800a36a:	3710      	adds	r7, #16
 800a36c:	46bd      	mov	sp, r7
 800a36e:	bd80      	pop	{r7, pc}

0800a370 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800a370:	b580      	push	{r7, lr}
 800a372:	b088      	sub	sp, #32
 800a374:	af04      	add	r7, sp, #16
 800a376:	60f8      	str	r0, [r7, #12]
 800a378:	60b9      	str	r1, [r7, #8]
 800a37a:	4611      	mov	r1, r2
 800a37c:	461a      	mov	r2, r3
 800a37e:	460b      	mov	r3, r1
 800a380:	80fb      	strh	r3, [r7, #6]
 800a382:	4613      	mov	r3, r2
 800a384:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a386:	7979      	ldrb	r1, [r7, #5]
 800a388:	2300      	movs	r3, #0
 800a38a:	9303      	str	r3, [sp, #12]
 800a38c:	88fb      	ldrh	r3, [r7, #6]
 800a38e:	9302      	str	r3, [sp, #8]
 800a390:	68bb      	ldr	r3, [r7, #8]
 800a392:	9301      	str	r3, [sp, #4]
 800a394:	2301      	movs	r3, #1
 800a396:	9300      	str	r3, [sp, #0]
 800a398:	2302      	movs	r3, #2
 800a39a:	2201      	movs	r2, #1
 800a39c:	68f8      	ldr	r0, [r7, #12]
 800a39e:	f003 faa2 	bl	800d8e6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a3a2:	2300      	movs	r3, #0
}
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	3710      	adds	r7, #16
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	bd80      	pop	{r7, pc}

0800a3ac <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b086      	sub	sp, #24
 800a3b0:	af04      	add	r7, sp, #16
 800a3b2:	6078      	str	r0, [r7, #4]
 800a3b4:	4608      	mov	r0, r1
 800a3b6:	4611      	mov	r1, r2
 800a3b8:	461a      	mov	r2, r3
 800a3ba:	4603      	mov	r3, r0
 800a3bc:	70fb      	strb	r3, [r7, #3]
 800a3be:	460b      	mov	r3, r1
 800a3c0:	70bb      	strb	r3, [r7, #2]
 800a3c2:	4613      	mov	r3, r2
 800a3c4:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800a3c6:	7878      	ldrb	r0, [r7, #1]
 800a3c8:	78ba      	ldrb	r2, [r7, #2]
 800a3ca:	78f9      	ldrb	r1, [r7, #3]
 800a3cc:	8b3b      	ldrh	r3, [r7, #24]
 800a3ce:	9302      	str	r3, [sp, #8]
 800a3d0:	7d3b      	ldrb	r3, [r7, #20]
 800a3d2:	9301      	str	r3, [sp, #4]
 800a3d4:	7c3b      	ldrb	r3, [r7, #16]
 800a3d6:	9300      	str	r3, [sp, #0]
 800a3d8:	4603      	mov	r3, r0
 800a3da:	6878      	ldr	r0, [r7, #4]
 800a3dc:	f003 fa35 	bl	800d84a <USBH_LL_OpenPipe>

  return USBH_OK;
 800a3e0:	2300      	movs	r3, #0
}
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	3708      	adds	r7, #8
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	bd80      	pop	{r7, pc}

0800a3ea <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800a3ea:	b580      	push	{r7, lr}
 800a3ec:	b082      	sub	sp, #8
 800a3ee:	af00      	add	r7, sp, #0
 800a3f0:	6078      	str	r0, [r7, #4]
 800a3f2:	460b      	mov	r3, r1
 800a3f4:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800a3f6:	78fb      	ldrb	r3, [r7, #3]
 800a3f8:	4619      	mov	r1, r3
 800a3fa:	6878      	ldr	r0, [r7, #4]
 800a3fc:	f003 fa54 	bl	800d8a8 <USBH_LL_ClosePipe>

  return USBH_OK;
 800a400:	2300      	movs	r3, #0
}
 800a402:	4618      	mov	r0, r3
 800a404:	3708      	adds	r7, #8
 800a406:	46bd      	mov	sp, r7
 800a408:	bd80      	pop	{r7, pc}

0800a40a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a40a:	b580      	push	{r7, lr}
 800a40c:	b084      	sub	sp, #16
 800a40e:	af00      	add	r7, sp, #0
 800a410:	6078      	str	r0, [r7, #4]
 800a412:	460b      	mov	r3, r1
 800a414:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800a416:	6878      	ldr	r0, [r7, #4]
 800a418:	f000 f836 	bl	800a488 <USBH_GetFreePipe>
 800a41c:	4603      	mov	r3, r0
 800a41e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800a420:	89fb      	ldrh	r3, [r7, #14]
 800a422:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a426:	4293      	cmp	r3, r2
 800a428:	d00a      	beq.n	800a440 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800a42a:	78fa      	ldrb	r2, [r7, #3]
 800a42c:	89fb      	ldrh	r3, [r7, #14]
 800a42e:	f003 030f 	and.w	r3, r3, #15
 800a432:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a436:	6879      	ldr	r1, [r7, #4]
 800a438:	33e0      	adds	r3, #224	@ 0xe0
 800a43a:	009b      	lsls	r3, r3, #2
 800a43c:	440b      	add	r3, r1
 800a43e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800a440:	89fb      	ldrh	r3, [r7, #14]
 800a442:	b2db      	uxtb	r3, r3
}
 800a444:	4618      	mov	r0, r3
 800a446:	3710      	adds	r7, #16
 800a448:	46bd      	mov	sp, r7
 800a44a:	bd80      	pop	{r7, pc}

0800a44c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a44c:	b480      	push	{r7}
 800a44e:	b083      	sub	sp, #12
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
 800a454:	460b      	mov	r3, r1
 800a456:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800a458:	78fb      	ldrb	r3, [r7, #3]
 800a45a:	2b0f      	cmp	r3, #15
 800a45c:	d80d      	bhi.n	800a47a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800a45e:	78fb      	ldrb	r3, [r7, #3]
 800a460:	687a      	ldr	r2, [r7, #4]
 800a462:	33e0      	adds	r3, #224	@ 0xe0
 800a464:	009b      	lsls	r3, r3, #2
 800a466:	4413      	add	r3, r2
 800a468:	685a      	ldr	r2, [r3, #4]
 800a46a:	78fb      	ldrb	r3, [r7, #3]
 800a46c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800a470:	6879      	ldr	r1, [r7, #4]
 800a472:	33e0      	adds	r3, #224	@ 0xe0
 800a474:	009b      	lsls	r3, r3, #2
 800a476:	440b      	add	r3, r1
 800a478:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800a47a:	2300      	movs	r3, #0
}
 800a47c:	4618      	mov	r0, r3
 800a47e:	370c      	adds	r7, #12
 800a480:	46bd      	mov	sp, r7
 800a482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a486:	4770      	bx	lr

0800a488 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800a488:	b480      	push	{r7}
 800a48a:	b085      	sub	sp, #20
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800a490:	2300      	movs	r3, #0
 800a492:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800a494:	2300      	movs	r3, #0
 800a496:	73fb      	strb	r3, [r7, #15]
 800a498:	e00f      	b.n	800a4ba <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800a49a:	7bfb      	ldrb	r3, [r7, #15]
 800a49c:	687a      	ldr	r2, [r7, #4]
 800a49e:	33e0      	adds	r3, #224	@ 0xe0
 800a4a0:	009b      	lsls	r3, r3, #2
 800a4a2:	4413      	add	r3, r2
 800a4a4:	685b      	ldr	r3, [r3, #4]
 800a4a6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d102      	bne.n	800a4b4 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800a4ae:	7bfb      	ldrb	r3, [r7, #15]
 800a4b0:	b29b      	uxth	r3, r3
 800a4b2:	e007      	b.n	800a4c4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800a4b4:	7bfb      	ldrb	r3, [r7, #15]
 800a4b6:	3301      	adds	r3, #1
 800a4b8:	73fb      	strb	r3, [r7, #15]
 800a4ba:	7bfb      	ldrb	r3, [r7, #15]
 800a4bc:	2b0f      	cmp	r3, #15
 800a4be:	d9ec      	bls.n	800a49a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800a4c0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	3714      	adds	r7, #20
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ce:	4770      	bx	lr

0800a4d0 <__NVIC_SetPriority>:
{
 800a4d0:	b480      	push	{r7}
 800a4d2:	b083      	sub	sp, #12
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	6039      	str	r1, [r7, #0]
 800a4da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a4dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	db0a      	blt.n	800a4fa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a4e4:	683b      	ldr	r3, [r7, #0]
 800a4e6:	b2da      	uxtb	r2, r3
 800a4e8:	490c      	ldr	r1, [pc, #48]	@ (800a51c <__NVIC_SetPriority+0x4c>)
 800a4ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a4ee:	0112      	lsls	r2, r2, #4
 800a4f0:	b2d2      	uxtb	r2, r2
 800a4f2:	440b      	add	r3, r1
 800a4f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800a4f8:	e00a      	b.n	800a510 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a4fa:	683b      	ldr	r3, [r7, #0]
 800a4fc:	b2da      	uxtb	r2, r3
 800a4fe:	4908      	ldr	r1, [pc, #32]	@ (800a520 <__NVIC_SetPriority+0x50>)
 800a500:	79fb      	ldrb	r3, [r7, #7]
 800a502:	f003 030f 	and.w	r3, r3, #15
 800a506:	3b04      	subs	r3, #4
 800a508:	0112      	lsls	r2, r2, #4
 800a50a:	b2d2      	uxtb	r2, r2
 800a50c:	440b      	add	r3, r1
 800a50e:	761a      	strb	r2, [r3, #24]
}
 800a510:	bf00      	nop
 800a512:	370c      	adds	r7, #12
 800a514:	46bd      	mov	sp, r7
 800a516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51a:	4770      	bx	lr
 800a51c:	e000e100 	.word	0xe000e100
 800a520:	e000ed00 	.word	0xe000ed00

0800a524 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a524:	b580      	push	{r7, lr}
 800a526:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a528:	4b05      	ldr	r3, [pc, #20]	@ (800a540 <SysTick_Handler+0x1c>)
 800a52a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a52c:	f001 ff30 	bl	800c390 <xTaskGetSchedulerState>
 800a530:	4603      	mov	r3, r0
 800a532:	2b01      	cmp	r3, #1
 800a534:	d001      	beq.n	800a53a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a536:	f002 fd27 	bl	800cf88 <xPortSysTickHandler>
  }
}
 800a53a:	bf00      	nop
 800a53c:	bd80      	pop	{r7, pc}
 800a53e:	bf00      	nop
 800a540:	e000e010 	.word	0xe000e010

0800a544 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a544:	b580      	push	{r7, lr}
 800a546:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a548:	2100      	movs	r1, #0
 800a54a:	f06f 0004 	mvn.w	r0, #4
 800a54e:	f7ff ffbf 	bl	800a4d0 <__NVIC_SetPriority>
#endif
}
 800a552:	bf00      	nop
 800a554:	bd80      	pop	{r7, pc}
	...

0800a558 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a558:	b480      	push	{r7}
 800a55a:	b083      	sub	sp, #12
 800a55c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a55e:	f3ef 8305 	mrs	r3, IPSR
 800a562:	603b      	str	r3, [r7, #0]
  return(result);
 800a564:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a566:	2b00      	cmp	r3, #0
 800a568:	d003      	beq.n	800a572 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a56a:	f06f 0305 	mvn.w	r3, #5
 800a56e:	607b      	str	r3, [r7, #4]
 800a570:	e00c      	b.n	800a58c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a572:	4b0a      	ldr	r3, [pc, #40]	@ (800a59c <osKernelInitialize+0x44>)
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d105      	bne.n	800a586 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a57a:	4b08      	ldr	r3, [pc, #32]	@ (800a59c <osKernelInitialize+0x44>)
 800a57c:	2201      	movs	r2, #1
 800a57e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a580:	2300      	movs	r3, #0
 800a582:	607b      	str	r3, [r7, #4]
 800a584:	e002      	b.n	800a58c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a586:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a58a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a58c:	687b      	ldr	r3, [r7, #4]
}
 800a58e:	4618      	mov	r0, r3
 800a590:	370c      	adds	r7, #12
 800a592:	46bd      	mov	sp, r7
 800a594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a598:	4770      	bx	lr
 800a59a:	bf00      	nop
 800a59c:	20000378 	.word	0x20000378

0800a5a0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b082      	sub	sp, #8
 800a5a4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a5a6:	f3ef 8305 	mrs	r3, IPSR
 800a5aa:	603b      	str	r3, [r7, #0]
  return(result);
 800a5ac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d003      	beq.n	800a5ba <osKernelStart+0x1a>
    stat = osErrorISR;
 800a5b2:	f06f 0305 	mvn.w	r3, #5
 800a5b6:	607b      	str	r3, [r7, #4]
 800a5b8:	e010      	b.n	800a5dc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a5ba:	4b0b      	ldr	r3, [pc, #44]	@ (800a5e8 <osKernelStart+0x48>)
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	2b01      	cmp	r3, #1
 800a5c0:	d109      	bne.n	800a5d6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a5c2:	f7ff ffbf 	bl	800a544 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a5c6:	4b08      	ldr	r3, [pc, #32]	@ (800a5e8 <osKernelStart+0x48>)
 800a5c8:	2202      	movs	r2, #2
 800a5ca:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a5cc:	f001 fa6a 	bl	800baa4 <vTaskStartScheduler>
      stat = osOK;
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	607b      	str	r3, [r7, #4]
 800a5d4:	e002      	b.n	800a5dc <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a5d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a5da:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a5dc:	687b      	ldr	r3, [r7, #4]
}
 800a5de:	4618      	mov	r0, r3
 800a5e0:	3708      	adds	r7, #8
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	bd80      	pop	{r7, pc}
 800a5e6:	bf00      	nop
 800a5e8:	20000378 	.word	0x20000378

0800a5ec <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	b08e      	sub	sp, #56	@ 0x38
 800a5f0:	af04      	add	r7, sp, #16
 800a5f2:	60f8      	str	r0, [r7, #12]
 800a5f4:	60b9      	str	r1, [r7, #8]
 800a5f6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a5fc:	f3ef 8305 	mrs	r3, IPSR
 800a600:	617b      	str	r3, [r7, #20]
  return(result);
 800a602:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a604:	2b00      	cmp	r3, #0
 800a606:	d17e      	bne.n	800a706 <osThreadNew+0x11a>
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d07b      	beq.n	800a706 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a60e:	2380      	movs	r3, #128	@ 0x80
 800a610:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a612:	2318      	movs	r3, #24
 800a614:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a616:	2300      	movs	r3, #0
 800a618:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800a61a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a61e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	2b00      	cmp	r3, #0
 800a624:	d045      	beq.n	800a6b2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d002      	beq.n	800a634 <osThreadNew+0x48>
        name = attr->name;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	699b      	ldr	r3, [r3, #24]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d002      	beq.n	800a642 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	699b      	ldr	r3, [r3, #24]
 800a640:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a642:	69fb      	ldr	r3, [r7, #28]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d008      	beq.n	800a65a <osThreadNew+0x6e>
 800a648:	69fb      	ldr	r3, [r7, #28]
 800a64a:	2b38      	cmp	r3, #56	@ 0x38
 800a64c:	d805      	bhi.n	800a65a <osThreadNew+0x6e>
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	685b      	ldr	r3, [r3, #4]
 800a652:	f003 0301 	and.w	r3, r3, #1
 800a656:	2b00      	cmp	r3, #0
 800a658:	d001      	beq.n	800a65e <osThreadNew+0x72>
        return (NULL);
 800a65a:	2300      	movs	r3, #0
 800a65c:	e054      	b.n	800a708 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	695b      	ldr	r3, [r3, #20]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d003      	beq.n	800a66e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	695b      	ldr	r3, [r3, #20]
 800a66a:	089b      	lsrs	r3, r3, #2
 800a66c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	689b      	ldr	r3, [r3, #8]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d00e      	beq.n	800a694 <osThreadNew+0xa8>
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	68db      	ldr	r3, [r3, #12]
 800a67a:	2b5f      	cmp	r3, #95	@ 0x5f
 800a67c:	d90a      	bls.n	800a694 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a682:	2b00      	cmp	r3, #0
 800a684:	d006      	beq.n	800a694 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	695b      	ldr	r3, [r3, #20]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d002      	beq.n	800a694 <osThreadNew+0xa8>
        mem = 1;
 800a68e:	2301      	movs	r3, #1
 800a690:	61bb      	str	r3, [r7, #24]
 800a692:	e010      	b.n	800a6b6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	689b      	ldr	r3, [r3, #8]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d10c      	bne.n	800a6b6 <osThreadNew+0xca>
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	68db      	ldr	r3, [r3, #12]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d108      	bne.n	800a6b6 <osThreadNew+0xca>
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	691b      	ldr	r3, [r3, #16]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d104      	bne.n	800a6b6 <osThreadNew+0xca>
          mem = 0;
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	61bb      	str	r3, [r7, #24]
 800a6b0:	e001      	b.n	800a6b6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a6b6:	69bb      	ldr	r3, [r7, #24]
 800a6b8:	2b01      	cmp	r3, #1
 800a6ba:	d110      	bne.n	800a6de <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a6c0:	687a      	ldr	r2, [r7, #4]
 800a6c2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a6c4:	9202      	str	r2, [sp, #8]
 800a6c6:	9301      	str	r3, [sp, #4]
 800a6c8:	69fb      	ldr	r3, [r7, #28]
 800a6ca:	9300      	str	r3, [sp, #0]
 800a6cc:	68bb      	ldr	r3, [r7, #8]
 800a6ce:	6a3a      	ldr	r2, [r7, #32]
 800a6d0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a6d2:	68f8      	ldr	r0, [r7, #12]
 800a6d4:	f001 f808 	bl	800b6e8 <xTaskCreateStatic>
 800a6d8:	4603      	mov	r3, r0
 800a6da:	613b      	str	r3, [r7, #16]
 800a6dc:	e013      	b.n	800a706 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a6de:	69bb      	ldr	r3, [r7, #24]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d110      	bne.n	800a706 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a6e4:	6a3b      	ldr	r3, [r7, #32]
 800a6e6:	b29a      	uxth	r2, r3
 800a6e8:	f107 0310 	add.w	r3, r7, #16
 800a6ec:	9301      	str	r3, [sp, #4]
 800a6ee:	69fb      	ldr	r3, [r7, #28]
 800a6f0:	9300      	str	r3, [sp, #0]
 800a6f2:	68bb      	ldr	r3, [r7, #8]
 800a6f4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a6f6:	68f8      	ldr	r0, [r7, #12]
 800a6f8:	f001 f856 	bl	800b7a8 <xTaskCreate>
 800a6fc:	4603      	mov	r3, r0
 800a6fe:	2b01      	cmp	r3, #1
 800a700:	d001      	beq.n	800a706 <osThreadNew+0x11a>
            hTask = NULL;
 800a702:	2300      	movs	r3, #0
 800a704:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a706:	693b      	ldr	r3, [r7, #16]
}
 800a708:	4618      	mov	r0, r3
 800a70a:	3728      	adds	r7, #40	@ 0x28
 800a70c:	46bd      	mov	sp, r7
 800a70e:	bd80      	pop	{r7, pc}

0800a710 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a710:	b580      	push	{r7, lr}
 800a712:	b084      	sub	sp, #16
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a718:	f3ef 8305 	mrs	r3, IPSR
 800a71c:	60bb      	str	r3, [r7, #8]
  return(result);
 800a71e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a720:	2b00      	cmp	r3, #0
 800a722:	d003      	beq.n	800a72c <osDelay+0x1c>
    stat = osErrorISR;
 800a724:	f06f 0305 	mvn.w	r3, #5
 800a728:	60fb      	str	r3, [r7, #12]
 800a72a:	e007      	b.n	800a73c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a72c:	2300      	movs	r3, #0
 800a72e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2b00      	cmp	r3, #0
 800a734:	d002      	beq.n	800a73c <osDelay+0x2c>
      vTaskDelay(ticks);
 800a736:	6878      	ldr	r0, [r7, #4]
 800a738:	f001 f97e 	bl	800ba38 <vTaskDelay>
    }
  }

  return (stat);
 800a73c:	68fb      	ldr	r3, [r7, #12]
}
 800a73e:	4618      	mov	r0, r3
 800a740:	3710      	adds	r7, #16
 800a742:	46bd      	mov	sp, r7
 800a744:	bd80      	pop	{r7, pc}

0800a746 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800a746:	b580      	push	{r7, lr}
 800a748:	b08a      	sub	sp, #40	@ 0x28
 800a74a:	af02      	add	r7, sp, #8
 800a74c:	60f8      	str	r0, [r7, #12]
 800a74e:	60b9      	str	r1, [r7, #8]
 800a750:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800a752:	2300      	movs	r3, #0
 800a754:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a756:	f3ef 8305 	mrs	r3, IPSR
 800a75a:	613b      	str	r3, [r7, #16]
  return(result);
 800a75c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d15f      	bne.n	800a822 <osMessageQueueNew+0xdc>
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	2b00      	cmp	r3, #0
 800a766:	d05c      	beq.n	800a822 <osMessageQueueNew+0xdc>
 800a768:	68bb      	ldr	r3, [r7, #8]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d059      	beq.n	800a822 <osMessageQueueNew+0xdc>
    mem = -1;
 800a76e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a772:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d029      	beq.n	800a7ce <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	689b      	ldr	r3, [r3, #8]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d012      	beq.n	800a7a8 <osMessageQueueNew+0x62>
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	68db      	ldr	r3, [r3, #12]
 800a786:	2b4f      	cmp	r3, #79	@ 0x4f
 800a788:	d90e      	bls.n	800a7a8 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d00a      	beq.n	800a7a8 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	695a      	ldr	r2, [r3, #20]
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	68b9      	ldr	r1, [r7, #8]
 800a79a:	fb01 f303 	mul.w	r3, r1, r3
 800a79e:	429a      	cmp	r2, r3
 800a7a0:	d302      	bcc.n	800a7a8 <osMessageQueueNew+0x62>
        mem = 1;
 800a7a2:	2301      	movs	r3, #1
 800a7a4:	61bb      	str	r3, [r7, #24]
 800a7a6:	e014      	b.n	800a7d2 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	689b      	ldr	r3, [r3, #8]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d110      	bne.n	800a7d2 <osMessageQueueNew+0x8c>
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	68db      	ldr	r3, [r3, #12]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d10c      	bne.n	800a7d2 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d108      	bne.n	800a7d2 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	695b      	ldr	r3, [r3, #20]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d104      	bne.n	800a7d2 <osMessageQueueNew+0x8c>
          mem = 0;
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	61bb      	str	r3, [r7, #24]
 800a7cc:	e001      	b.n	800a7d2 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a7d2:	69bb      	ldr	r3, [r7, #24]
 800a7d4:	2b01      	cmp	r3, #1
 800a7d6:	d10b      	bne.n	800a7f0 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	691a      	ldr	r2, [r3, #16]
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	689b      	ldr	r3, [r3, #8]
 800a7e0:	2100      	movs	r1, #0
 800a7e2:	9100      	str	r1, [sp, #0]
 800a7e4:	68b9      	ldr	r1, [r7, #8]
 800a7e6:	68f8      	ldr	r0, [r7, #12]
 800a7e8:	f000 fa30 	bl	800ac4c <xQueueGenericCreateStatic>
 800a7ec:	61f8      	str	r0, [r7, #28]
 800a7ee:	e008      	b.n	800a802 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800a7f0:	69bb      	ldr	r3, [r7, #24]
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d105      	bne.n	800a802 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	68b9      	ldr	r1, [r7, #8]
 800a7fa:	68f8      	ldr	r0, [r7, #12]
 800a7fc:	f000 faa3 	bl	800ad46 <xQueueGenericCreate>
 800a800:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800a802:	69fb      	ldr	r3, [r7, #28]
 800a804:	2b00      	cmp	r3, #0
 800a806:	d00c      	beq.n	800a822 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d003      	beq.n	800a816 <osMessageQueueNew+0xd0>
        name = attr->name;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	617b      	str	r3, [r7, #20]
 800a814:	e001      	b.n	800a81a <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800a816:	2300      	movs	r3, #0
 800a818:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800a81a:	6979      	ldr	r1, [r7, #20]
 800a81c:	69f8      	ldr	r0, [r7, #28]
 800a81e:	f000 ff05 	bl	800b62c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800a822:	69fb      	ldr	r3, [r7, #28]
}
 800a824:	4618      	mov	r0, r3
 800a826:	3720      	adds	r7, #32
 800a828:	46bd      	mov	sp, r7
 800a82a:	bd80      	pop	{r7, pc}

0800a82c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b088      	sub	sp, #32
 800a830:	af00      	add	r7, sp, #0
 800a832:	60f8      	str	r0, [r7, #12]
 800a834:	60b9      	str	r1, [r7, #8]
 800a836:	603b      	str	r3, [r7, #0]
 800a838:	4613      	mov	r3, r2
 800a83a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800a840:	2300      	movs	r3, #0
 800a842:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a844:	f3ef 8305 	mrs	r3, IPSR
 800a848:	617b      	str	r3, [r7, #20]
  return(result);
 800a84a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d028      	beq.n	800a8a2 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a850:	69bb      	ldr	r3, [r7, #24]
 800a852:	2b00      	cmp	r3, #0
 800a854:	d005      	beq.n	800a862 <osMessageQueuePut+0x36>
 800a856:	68bb      	ldr	r3, [r7, #8]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d002      	beq.n	800a862 <osMessageQueuePut+0x36>
 800a85c:	683b      	ldr	r3, [r7, #0]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d003      	beq.n	800a86a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800a862:	f06f 0303 	mvn.w	r3, #3
 800a866:	61fb      	str	r3, [r7, #28]
 800a868:	e038      	b.n	800a8dc <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800a86a:	2300      	movs	r3, #0
 800a86c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800a86e:	f107 0210 	add.w	r2, r7, #16
 800a872:	2300      	movs	r3, #0
 800a874:	68b9      	ldr	r1, [r7, #8]
 800a876:	69b8      	ldr	r0, [r7, #24]
 800a878:	f000 fbc6 	bl	800b008 <xQueueGenericSendFromISR>
 800a87c:	4603      	mov	r3, r0
 800a87e:	2b01      	cmp	r3, #1
 800a880:	d003      	beq.n	800a88a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800a882:	f06f 0302 	mvn.w	r3, #2
 800a886:	61fb      	str	r3, [r7, #28]
 800a888:	e028      	b.n	800a8dc <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800a88a:	693b      	ldr	r3, [r7, #16]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d025      	beq.n	800a8dc <osMessageQueuePut+0xb0>
 800a890:	4b15      	ldr	r3, [pc, #84]	@ (800a8e8 <osMessageQueuePut+0xbc>)
 800a892:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a896:	601a      	str	r2, [r3, #0]
 800a898:	f3bf 8f4f 	dsb	sy
 800a89c:	f3bf 8f6f 	isb	sy
 800a8a0:	e01c      	b.n	800a8dc <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a8a2:	69bb      	ldr	r3, [r7, #24]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d002      	beq.n	800a8ae <osMessageQueuePut+0x82>
 800a8a8:	68bb      	ldr	r3, [r7, #8]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d103      	bne.n	800a8b6 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800a8ae:	f06f 0303 	mvn.w	r3, #3
 800a8b2:	61fb      	str	r3, [r7, #28]
 800a8b4:	e012      	b.n	800a8dc <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	683a      	ldr	r2, [r7, #0]
 800a8ba:	68b9      	ldr	r1, [r7, #8]
 800a8bc:	69b8      	ldr	r0, [r7, #24]
 800a8be:	f000 faa1 	bl	800ae04 <xQueueGenericSend>
 800a8c2:	4603      	mov	r3, r0
 800a8c4:	2b01      	cmp	r3, #1
 800a8c6:	d009      	beq.n	800a8dc <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800a8c8:	683b      	ldr	r3, [r7, #0]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d003      	beq.n	800a8d6 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800a8ce:	f06f 0301 	mvn.w	r3, #1
 800a8d2:	61fb      	str	r3, [r7, #28]
 800a8d4:	e002      	b.n	800a8dc <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800a8d6:	f06f 0302 	mvn.w	r3, #2
 800a8da:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800a8dc:	69fb      	ldr	r3, [r7, #28]
}
 800a8de:	4618      	mov	r0, r3
 800a8e0:	3720      	adds	r7, #32
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	bd80      	pop	{r7, pc}
 800a8e6:	bf00      	nop
 800a8e8:	e000ed04 	.word	0xe000ed04

0800a8ec <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b088      	sub	sp, #32
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	60f8      	str	r0, [r7, #12]
 800a8f4:	60b9      	str	r1, [r7, #8]
 800a8f6:	607a      	str	r2, [r7, #4]
 800a8f8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800a8fe:	2300      	movs	r3, #0
 800a900:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a902:	f3ef 8305 	mrs	r3, IPSR
 800a906:	617b      	str	r3, [r7, #20]
  return(result);
 800a908:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d028      	beq.n	800a960 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a90e:	69bb      	ldr	r3, [r7, #24]
 800a910:	2b00      	cmp	r3, #0
 800a912:	d005      	beq.n	800a920 <osMessageQueueGet+0x34>
 800a914:	68bb      	ldr	r3, [r7, #8]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d002      	beq.n	800a920 <osMessageQueueGet+0x34>
 800a91a:	683b      	ldr	r3, [r7, #0]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d003      	beq.n	800a928 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800a920:	f06f 0303 	mvn.w	r3, #3
 800a924:	61fb      	str	r3, [r7, #28]
 800a926:	e037      	b.n	800a998 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800a928:	2300      	movs	r3, #0
 800a92a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800a92c:	f107 0310 	add.w	r3, r7, #16
 800a930:	461a      	mov	r2, r3
 800a932:	68b9      	ldr	r1, [r7, #8]
 800a934:	69b8      	ldr	r0, [r7, #24]
 800a936:	f000 fce7 	bl	800b308 <xQueueReceiveFromISR>
 800a93a:	4603      	mov	r3, r0
 800a93c:	2b01      	cmp	r3, #1
 800a93e:	d003      	beq.n	800a948 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800a940:	f06f 0302 	mvn.w	r3, #2
 800a944:	61fb      	str	r3, [r7, #28]
 800a946:	e027      	b.n	800a998 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800a948:	693b      	ldr	r3, [r7, #16]
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d024      	beq.n	800a998 <osMessageQueueGet+0xac>
 800a94e:	4b15      	ldr	r3, [pc, #84]	@ (800a9a4 <osMessageQueueGet+0xb8>)
 800a950:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a954:	601a      	str	r2, [r3, #0]
 800a956:	f3bf 8f4f 	dsb	sy
 800a95a:	f3bf 8f6f 	isb	sy
 800a95e:	e01b      	b.n	800a998 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a960:	69bb      	ldr	r3, [r7, #24]
 800a962:	2b00      	cmp	r3, #0
 800a964:	d002      	beq.n	800a96c <osMessageQueueGet+0x80>
 800a966:	68bb      	ldr	r3, [r7, #8]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d103      	bne.n	800a974 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800a96c:	f06f 0303 	mvn.w	r3, #3
 800a970:	61fb      	str	r3, [r7, #28]
 800a972:	e011      	b.n	800a998 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a974:	683a      	ldr	r2, [r7, #0]
 800a976:	68b9      	ldr	r1, [r7, #8]
 800a978:	69b8      	ldr	r0, [r7, #24]
 800a97a:	f000 fbe3 	bl	800b144 <xQueueReceive>
 800a97e:	4603      	mov	r3, r0
 800a980:	2b01      	cmp	r3, #1
 800a982:	d009      	beq.n	800a998 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800a984:	683b      	ldr	r3, [r7, #0]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d003      	beq.n	800a992 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800a98a:	f06f 0301 	mvn.w	r3, #1
 800a98e:	61fb      	str	r3, [r7, #28]
 800a990:	e002      	b.n	800a998 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800a992:	f06f 0302 	mvn.w	r3, #2
 800a996:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800a998:	69fb      	ldr	r3, [r7, #28]
}
 800a99a:	4618      	mov	r0, r3
 800a99c:	3720      	adds	r7, #32
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	bd80      	pop	{r7, pc}
 800a9a2:	bf00      	nop
 800a9a4:	e000ed04 	.word	0xe000ed04

0800a9a8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a9a8:	b480      	push	{r7}
 800a9aa:	b085      	sub	sp, #20
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	60f8      	str	r0, [r7, #12]
 800a9b0:	60b9      	str	r1, [r7, #8]
 800a9b2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	4a07      	ldr	r2, [pc, #28]	@ (800a9d4 <vApplicationGetIdleTaskMemory+0x2c>)
 800a9b8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a9ba:	68bb      	ldr	r3, [r7, #8]
 800a9bc:	4a06      	ldr	r2, [pc, #24]	@ (800a9d8 <vApplicationGetIdleTaskMemory+0x30>)
 800a9be:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	2280      	movs	r2, #128	@ 0x80
 800a9c4:	601a      	str	r2, [r3, #0]
}
 800a9c6:	bf00      	nop
 800a9c8:	3714      	adds	r7, #20
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d0:	4770      	bx	lr
 800a9d2:	bf00      	nop
 800a9d4:	2000037c 	.word	0x2000037c
 800a9d8:	200003dc 	.word	0x200003dc

0800a9dc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a9dc:	b480      	push	{r7}
 800a9de:	b085      	sub	sp, #20
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	60f8      	str	r0, [r7, #12]
 800a9e4:	60b9      	str	r1, [r7, #8]
 800a9e6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	4a07      	ldr	r2, [pc, #28]	@ (800aa08 <vApplicationGetTimerTaskMemory+0x2c>)
 800a9ec:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a9ee:	68bb      	ldr	r3, [r7, #8]
 800a9f0:	4a06      	ldr	r2, [pc, #24]	@ (800aa0c <vApplicationGetTimerTaskMemory+0x30>)
 800a9f2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a9fa:	601a      	str	r2, [r3, #0]
}
 800a9fc:	bf00      	nop
 800a9fe:	3714      	adds	r7, #20
 800aa00:	46bd      	mov	sp, r7
 800aa02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa06:	4770      	bx	lr
 800aa08:	200005dc 	.word	0x200005dc
 800aa0c:	2000063c 	.word	0x2000063c

0800aa10 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800aa10:	b480      	push	{r7}
 800aa12:	b083      	sub	sp, #12
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	f103 0208 	add.w	r2, r3, #8
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800aa28:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	f103 0208 	add.w	r2, r3, #8
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	f103 0208 	add.w	r2, r3, #8
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	2200      	movs	r2, #0
 800aa42:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800aa44:	bf00      	nop
 800aa46:	370c      	adds	r7, #12
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4e:	4770      	bx	lr

0800aa50 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800aa50:	b480      	push	{r7}
 800aa52:	b083      	sub	sp, #12
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800aa5e:	bf00      	nop
 800aa60:	370c      	adds	r7, #12
 800aa62:	46bd      	mov	sp, r7
 800aa64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa68:	4770      	bx	lr

0800aa6a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800aa6a:	b480      	push	{r7}
 800aa6c:	b085      	sub	sp, #20
 800aa6e:	af00      	add	r7, sp, #0
 800aa70:	6078      	str	r0, [r7, #4]
 800aa72:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	685b      	ldr	r3, [r3, #4]
 800aa78:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800aa7a:	683b      	ldr	r3, [r7, #0]
 800aa7c:	68fa      	ldr	r2, [r7, #12]
 800aa7e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	689a      	ldr	r2, [r3, #8]
 800aa84:	683b      	ldr	r3, [r7, #0]
 800aa86:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	689b      	ldr	r3, [r3, #8]
 800aa8c:	683a      	ldr	r2, [r7, #0]
 800aa8e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	683a      	ldr	r2, [r7, #0]
 800aa94:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800aa96:	683b      	ldr	r3, [r7, #0]
 800aa98:	687a      	ldr	r2, [r7, #4]
 800aa9a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	1c5a      	adds	r2, r3, #1
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	601a      	str	r2, [r3, #0]
}
 800aaa6:	bf00      	nop
 800aaa8:	3714      	adds	r7, #20
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab0:	4770      	bx	lr

0800aab2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800aab2:	b480      	push	{r7}
 800aab4:	b085      	sub	sp, #20
 800aab6:	af00      	add	r7, sp, #0
 800aab8:	6078      	str	r0, [r7, #4]
 800aaba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800aabc:	683b      	ldr	r3, [r7, #0]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800aac2:	68bb      	ldr	r3, [r7, #8]
 800aac4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aac8:	d103      	bne.n	800aad2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	691b      	ldr	r3, [r3, #16]
 800aace:	60fb      	str	r3, [r7, #12]
 800aad0:	e00c      	b.n	800aaec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	3308      	adds	r3, #8
 800aad6:	60fb      	str	r3, [r7, #12]
 800aad8:	e002      	b.n	800aae0 <vListInsert+0x2e>
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	685b      	ldr	r3, [r3, #4]
 800aade:	60fb      	str	r3, [r7, #12]
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	685b      	ldr	r3, [r3, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	68ba      	ldr	r2, [r7, #8]
 800aae8:	429a      	cmp	r2, r3
 800aaea:	d2f6      	bcs.n	800aada <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	685a      	ldr	r2, [r3, #4]
 800aaf0:	683b      	ldr	r3, [r7, #0]
 800aaf2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800aaf4:	683b      	ldr	r3, [r7, #0]
 800aaf6:	685b      	ldr	r3, [r3, #4]
 800aaf8:	683a      	ldr	r2, [r7, #0]
 800aafa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800aafc:	683b      	ldr	r3, [r7, #0]
 800aafe:	68fa      	ldr	r2, [r7, #12]
 800ab00:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	683a      	ldr	r2, [r7, #0]
 800ab06:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ab08:	683b      	ldr	r3, [r7, #0]
 800ab0a:	687a      	ldr	r2, [r7, #4]
 800ab0c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	1c5a      	adds	r2, r3, #1
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	601a      	str	r2, [r3, #0]
}
 800ab18:	bf00      	nop
 800ab1a:	3714      	adds	r7, #20
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab22:	4770      	bx	lr

0800ab24 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ab24:	b480      	push	{r7}
 800ab26:	b085      	sub	sp, #20
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	691b      	ldr	r3, [r3, #16]
 800ab30:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	685b      	ldr	r3, [r3, #4]
 800ab36:	687a      	ldr	r2, [r7, #4]
 800ab38:	6892      	ldr	r2, [r2, #8]
 800ab3a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	689b      	ldr	r3, [r3, #8]
 800ab40:	687a      	ldr	r2, [r7, #4]
 800ab42:	6852      	ldr	r2, [r2, #4]
 800ab44:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	685b      	ldr	r3, [r3, #4]
 800ab4a:	687a      	ldr	r2, [r7, #4]
 800ab4c:	429a      	cmp	r2, r3
 800ab4e:	d103      	bne.n	800ab58 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	689a      	ldr	r2, [r3, #8]
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	1e5a      	subs	r2, r3, #1
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	681b      	ldr	r3, [r3, #0]
}
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	3714      	adds	r7, #20
 800ab70:	46bd      	mov	sp, r7
 800ab72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab76:	4770      	bx	lr

0800ab78 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b084      	sub	sp, #16
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
 800ab80:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d10b      	bne.n	800aba4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ab8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab90:	f383 8811 	msr	BASEPRI, r3
 800ab94:	f3bf 8f6f 	isb	sy
 800ab98:	f3bf 8f4f 	dsb	sy
 800ab9c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ab9e:	bf00      	nop
 800aba0:	bf00      	nop
 800aba2:	e7fd      	b.n	800aba0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800aba4:	f002 f960 	bl	800ce68 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	681a      	ldr	r2, [r3, #0]
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800abb0:	68f9      	ldr	r1, [r7, #12]
 800abb2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800abb4:	fb01 f303 	mul.w	r3, r1, r3
 800abb8:	441a      	add	r2, r3
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	2200      	movs	r2, #0
 800abc2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	681a      	ldr	r2, [r3, #0]
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	681a      	ldr	r2, [r3, #0]
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800abd4:	3b01      	subs	r3, #1
 800abd6:	68f9      	ldr	r1, [r7, #12]
 800abd8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800abda:	fb01 f303 	mul.w	r3, r1, r3
 800abde:	441a      	add	r2, r3
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	22ff      	movs	r2, #255	@ 0xff
 800abe8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	22ff      	movs	r2, #255	@ 0xff
 800abf0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800abf4:	683b      	ldr	r3, [r7, #0]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d114      	bne.n	800ac24 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	691b      	ldr	r3, [r3, #16]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d01a      	beq.n	800ac38 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	3310      	adds	r3, #16
 800ac06:	4618      	mov	r0, r3
 800ac08:	f001 fa00 	bl	800c00c <xTaskRemoveFromEventList>
 800ac0c:	4603      	mov	r3, r0
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d012      	beq.n	800ac38 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ac12:	4b0d      	ldr	r3, [pc, #52]	@ (800ac48 <xQueueGenericReset+0xd0>)
 800ac14:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ac18:	601a      	str	r2, [r3, #0]
 800ac1a:	f3bf 8f4f 	dsb	sy
 800ac1e:	f3bf 8f6f 	isb	sy
 800ac22:	e009      	b.n	800ac38 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	3310      	adds	r3, #16
 800ac28:	4618      	mov	r0, r3
 800ac2a:	f7ff fef1 	bl	800aa10 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	3324      	adds	r3, #36	@ 0x24
 800ac32:	4618      	mov	r0, r3
 800ac34:	f7ff feec 	bl	800aa10 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ac38:	f002 f948 	bl	800cecc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ac3c:	2301      	movs	r3, #1
}
 800ac3e:	4618      	mov	r0, r3
 800ac40:	3710      	adds	r7, #16
 800ac42:	46bd      	mov	sp, r7
 800ac44:	bd80      	pop	{r7, pc}
 800ac46:	bf00      	nop
 800ac48:	e000ed04 	.word	0xe000ed04

0800ac4c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b08e      	sub	sp, #56	@ 0x38
 800ac50:	af02      	add	r7, sp, #8
 800ac52:	60f8      	str	r0, [r7, #12]
 800ac54:	60b9      	str	r1, [r7, #8]
 800ac56:	607a      	str	r2, [r7, #4]
 800ac58:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d10b      	bne.n	800ac78 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800ac60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac64:	f383 8811 	msr	BASEPRI, r3
 800ac68:	f3bf 8f6f 	isb	sy
 800ac6c:	f3bf 8f4f 	dsb	sy
 800ac70:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800ac72:	bf00      	nop
 800ac74:	bf00      	nop
 800ac76:	e7fd      	b.n	800ac74 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ac78:	683b      	ldr	r3, [r7, #0]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d10b      	bne.n	800ac96 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800ac7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac82:	f383 8811 	msr	BASEPRI, r3
 800ac86:	f3bf 8f6f 	isb	sy
 800ac8a:	f3bf 8f4f 	dsb	sy
 800ac8e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ac90:	bf00      	nop
 800ac92:	bf00      	nop
 800ac94:	e7fd      	b.n	800ac92 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d002      	beq.n	800aca2 <xQueueGenericCreateStatic+0x56>
 800ac9c:	68bb      	ldr	r3, [r7, #8]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d001      	beq.n	800aca6 <xQueueGenericCreateStatic+0x5a>
 800aca2:	2301      	movs	r3, #1
 800aca4:	e000      	b.n	800aca8 <xQueueGenericCreateStatic+0x5c>
 800aca6:	2300      	movs	r3, #0
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d10b      	bne.n	800acc4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800acac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acb0:	f383 8811 	msr	BASEPRI, r3
 800acb4:	f3bf 8f6f 	isb	sy
 800acb8:	f3bf 8f4f 	dsb	sy
 800acbc:	623b      	str	r3, [r7, #32]
}
 800acbe:	bf00      	nop
 800acc0:	bf00      	nop
 800acc2:	e7fd      	b.n	800acc0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d102      	bne.n	800acd0 <xQueueGenericCreateStatic+0x84>
 800acca:	68bb      	ldr	r3, [r7, #8]
 800accc:	2b00      	cmp	r3, #0
 800acce:	d101      	bne.n	800acd4 <xQueueGenericCreateStatic+0x88>
 800acd0:	2301      	movs	r3, #1
 800acd2:	e000      	b.n	800acd6 <xQueueGenericCreateStatic+0x8a>
 800acd4:	2300      	movs	r3, #0
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d10b      	bne.n	800acf2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800acda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acde:	f383 8811 	msr	BASEPRI, r3
 800ace2:	f3bf 8f6f 	isb	sy
 800ace6:	f3bf 8f4f 	dsb	sy
 800acea:	61fb      	str	r3, [r7, #28]
}
 800acec:	bf00      	nop
 800acee:	bf00      	nop
 800acf0:	e7fd      	b.n	800acee <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800acf2:	2350      	movs	r3, #80	@ 0x50
 800acf4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800acf6:	697b      	ldr	r3, [r7, #20]
 800acf8:	2b50      	cmp	r3, #80	@ 0x50
 800acfa:	d00b      	beq.n	800ad14 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800acfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad00:	f383 8811 	msr	BASEPRI, r3
 800ad04:	f3bf 8f6f 	isb	sy
 800ad08:	f3bf 8f4f 	dsb	sy
 800ad0c:	61bb      	str	r3, [r7, #24]
}
 800ad0e:	bf00      	nop
 800ad10:	bf00      	nop
 800ad12:	e7fd      	b.n	800ad10 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ad14:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ad16:	683b      	ldr	r3, [r7, #0]
 800ad18:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800ad1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d00d      	beq.n	800ad3c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ad20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad22:	2201      	movs	r2, #1
 800ad24:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ad28:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800ad2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad2e:	9300      	str	r3, [sp, #0]
 800ad30:	4613      	mov	r3, r2
 800ad32:	687a      	ldr	r2, [r7, #4]
 800ad34:	68b9      	ldr	r1, [r7, #8]
 800ad36:	68f8      	ldr	r0, [r7, #12]
 800ad38:	f000 f840 	bl	800adbc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ad3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800ad3e:	4618      	mov	r0, r3
 800ad40:	3730      	adds	r7, #48	@ 0x30
 800ad42:	46bd      	mov	sp, r7
 800ad44:	bd80      	pop	{r7, pc}

0800ad46 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ad46:	b580      	push	{r7, lr}
 800ad48:	b08a      	sub	sp, #40	@ 0x28
 800ad4a:	af02      	add	r7, sp, #8
 800ad4c:	60f8      	str	r0, [r7, #12]
 800ad4e:	60b9      	str	r1, [r7, #8]
 800ad50:	4613      	mov	r3, r2
 800ad52:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d10b      	bne.n	800ad72 <xQueueGenericCreate+0x2c>
	__asm volatile
 800ad5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad5e:	f383 8811 	msr	BASEPRI, r3
 800ad62:	f3bf 8f6f 	isb	sy
 800ad66:	f3bf 8f4f 	dsb	sy
 800ad6a:	613b      	str	r3, [r7, #16]
}
 800ad6c:	bf00      	nop
 800ad6e:	bf00      	nop
 800ad70:	e7fd      	b.n	800ad6e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	68ba      	ldr	r2, [r7, #8]
 800ad76:	fb02 f303 	mul.w	r3, r2, r3
 800ad7a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ad7c:	69fb      	ldr	r3, [r7, #28]
 800ad7e:	3350      	adds	r3, #80	@ 0x50
 800ad80:	4618      	mov	r0, r3
 800ad82:	f002 f993 	bl	800d0ac <pvPortMalloc>
 800ad86:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ad88:	69bb      	ldr	r3, [r7, #24]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d011      	beq.n	800adb2 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ad8e:	69bb      	ldr	r3, [r7, #24]
 800ad90:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ad92:	697b      	ldr	r3, [r7, #20]
 800ad94:	3350      	adds	r3, #80	@ 0x50
 800ad96:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ad98:	69bb      	ldr	r3, [r7, #24]
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ada0:	79fa      	ldrb	r2, [r7, #7]
 800ada2:	69bb      	ldr	r3, [r7, #24]
 800ada4:	9300      	str	r3, [sp, #0]
 800ada6:	4613      	mov	r3, r2
 800ada8:	697a      	ldr	r2, [r7, #20]
 800adaa:	68b9      	ldr	r1, [r7, #8]
 800adac:	68f8      	ldr	r0, [r7, #12]
 800adae:	f000 f805 	bl	800adbc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800adb2:	69bb      	ldr	r3, [r7, #24]
	}
 800adb4:	4618      	mov	r0, r3
 800adb6:	3720      	adds	r7, #32
 800adb8:	46bd      	mov	sp, r7
 800adba:	bd80      	pop	{r7, pc}

0800adbc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800adbc:	b580      	push	{r7, lr}
 800adbe:	b084      	sub	sp, #16
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	60f8      	str	r0, [r7, #12]
 800adc4:	60b9      	str	r1, [r7, #8]
 800adc6:	607a      	str	r2, [r7, #4]
 800adc8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800adca:	68bb      	ldr	r3, [r7, #8]
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d103      	bne.n	800add8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800add0:	69bb      	ldr	r3, [r7, #24]
 800add2:	69ba      	ldr	r2, [r7, #24]
 800add4:	601a      	str	r2, [r3, #0]
 800add6:	e002      	b.n	800adde <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800add8:	69bb      	ldr	r3, [r7, #24]
 800adda:	687a      	ldr	r2, [r7, #4]
 800addc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800adde:	69bb      	ldr	r3, [r7, #24]
 800ade0:	68fa      	ldr	r2, [r7, #12]
 800ade2:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ade4:	69bb      	ldr	r3, [r7, #24]
 800ade6:	68ba      	ldr	r2, [r7, #8]
 800ade8:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800adea:	2101      	movs	r1, #1
 800adec:	69b8      	ldr	r0, [r7, #24]
 800adee:	f7ff fec3 	bl	800ab78 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800adf2:	69bb      	ldr	r3, [r7, #24]
 800adf4:	78fa      	ldrb	r2, [r7, #3]
 800adf6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800adfa:	bf00      	nop
 800adfc:	3710      	adds	r7, #16
 800adfe:	46bd      	mov	sp, r7
 800ae00:	bd80      	pop	{r7, pc}
	...

0800ae04 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b08e      	sub	sp, #56	@ 0x38
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	60f8      	str	r0, [r7, #12]
 800ae0c:	60b9      	str	r1, [r7, #8]
 800ae0e:	607a      	str	r2, [r7, #4]
 800ae10:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ae12:	2300      	movs	r3, #0
 800ae14:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800ae1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d10b      	bne.n	800ae38 <xQueueGenericSend+0x34>
	__asm volatile
 800ae20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae24:	f383 8811 	msr	BASEPRI, r3
 800ae28:	f3bf 8f6f 	isb	sy
 800ae2c:	f3bf 8f4f 	dsb	sy
 800ae30:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800ae32:	bf00      	nop
 800ae34:	bf00      	nop
 800ae36:	e7fd      	b.n	800ae34 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ae38:	68bb      	ldr	r3, [r7, #8]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d103      	bne.n	800ae46 <xQueueGenericSend+0x42>
 800ae3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d101      	bne.n	800ae4a <xQueueGenericSend+0x46>
 800ae46:	2301      	movs	r3, #1
 800ae48:	e000      	b.n	800ae4c <xQueueGenericSend+0x48>
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d10b      	bne.n	800ae68 <xQueueGenericSend+0x64>
	__asm volatile
 800ae50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae54:	f383 8811 	msr	BASEPRI, r3
 800ae58:	f3bf 8f6f 	isb	sy
 800ae5c:	f3bf 8f4f 	dsb	sy
 800ae60:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ae62:	bf00      	nop
 800ae64:	bf00      	nop
 800ae66:	e7fd      	b.n	800ae64 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ae68:	683b      	ldr	r3, [r7, #0]
 800ae6a:	2b02      	cmp	r3, #2
 800ae6c:	d103      	bne.n	800ae76 <xQueueGenericSend+0x72>
 800ae6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ae72:	2b01      	cmp	r3, #1
 800ae74:	d101      	bne.n	800ae7a <xQueueGenericSend+0x76>
 800ae76:	2301      	movs	r3, #1
 800ae78:	e000      	b.n	800ae7c <xQueueGenericSend+0x78>
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d10b      	bne.n	800ae98 <xQueueGenericSend+0x94>
	__asm volatile
 800ae80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae84:	f383 8811 	msr	BASEPRI, r3
 800ae88:	f3bf 8f6f 	isb	sy
 800ae8c:	f3bf 8f4f 	dsb	sy
 800ae90:	623b      	str	r3, [r7, #32]
}
 800ae92:	bf00      	nop
 800ae94:	bf00      	nop
 800ae96:	e7fd      	b.n	800ae94 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ae98:	f001 fa7a 	bl	800c390 <xTaskGetSchedulerState>
 800ae9c:	4603      	mov	r3, r0
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d102      	bne.n	800aea8 <xQueueGenericSend+0xa4>
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d101      	bne.n	800aeac <xQueueGenericSend+0xa8>
 800aea8:	2301      	movs	r3, #1
 800aeaa:	e000      	b.n	800aeae <xQueueGenericSend+0xaa>
 800aeac:	2300      	movs	r3, #0
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d10b      	bne.n	800aeca <xQueueGenericSend+0xc6>
	__asm volatile
 800aeb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aeb6:	f383 8811 	msr	BASEPRI, r3
 800aeba:	f3bf 8f6f 	isb	sy
 800aebe:	f3bf 8f4f 	dsb	sy
 800aec2:	61fb      	str	r3, [r7, #28]
}
 800aec4:	bf00      	nop
 800aec6:	bf00      	nop
 800aec8:	e7fd      	b.n	800aec6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800aeca:	f001 ffcd 	bl	800ce68 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800aece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aed0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aed4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aed6:	429a      	cmp	r2, r3
 800aed8:	d302      	bcc.n	800aee0 <xQueueGenericSend+0xdc>
 800aeda:	683b      	ldr	r3, [r7, #0]
 800aedc:	2b02      	cmp	r3, #2
 800aede:	d129      	bne.n	800af34 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800aee0:	683a      	ldr	r2, [r7, #0]
 800aee2:	68b9      	ldr	r1, [r7, #8]
 800aee4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800aee6:	f000 fa91 	bl	800b40c <prvCopyDataToQueue>
 800aeea:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aeec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aeee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d010      	beq.n	800af16 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aef6:	3324      	adds	r3, #36	@ 0x24
 800aef8:	4618      	mov	r0, r3
 800aefa:	f001 f887 	bl	800c00c <xTaskRemoveFromEventList>
 800aefe:	4603      	mov	r3, r0
 800af00:	2b00      	cmp	r3, #0
 800af02:	d013      	beq.n	800af2c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800af04:	4b3f      	ldr	r3, [pc, #252]	@ (800b004 <xQueueGenericSend+0x200>)
 800af06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800af0a:	601a      	str	r2, [r3, #0]
 800af0c:	f3bf 8f4f 	dsb	sy
 800af10:	f3bf 8f6f 	isb	sy
 800af14:	e00a      	b.n	800af2c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800af16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d007      	beq.n	800af2c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800af1c:	4b39      	ldr	r3, [pc, #228]	@ (800b004 <xQueueGenericSend+0x200>)
 800af1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800af22:	601a      	str	r2, [r3, #0]
 800af24:	f3bf 8f4f 	dsb	sy
 800af28:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800af2c:	f001 ffce 	bl	800cecc <vPortExitCritical>
				return pdPASS;
 800af30:	2301      	movs	r3, #1
 800af32:	e063      	b.n	800affc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d103      	bne.n	800af42 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800af3a:	f001 ffc7 	bl	800cecc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800af3e:	2300      	movs	r3, #0
 800af40:	e05c      	b.n	800affc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800af42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af44:	2b00      	cmp	r3, #0
 800af46:	d106      	bne.n	800af56 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800af48:	f107 0314 	add.w	r3, r7, #20
 800af4c:	4618      	mov	r0, r3
 800af4e:	f001 f8c1 	bl	800c0d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800af52:	2301      	movs	r3, #1
 800af54:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800af56:	f001 ffb9 	bl	800cecc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800af5a:	f000 fe0b 	bl	800bb74 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800af5e:	f001 ff83 	bl	800ce68 <vPortEnterCritical>
 800af62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af64:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800af68:	b25b      	sxtb	r3, r3
 800af6a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800af6e:	d103      	bne.n	800af78 <xQueueGenericSend+0x174>
 800af70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af72:	2200      	movs	r2, #0
 800af74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800af78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af7a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800af7e:	b25b      	sxtb	r3, r3
 800af80:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800af84:	d103      	bne.n	800af8e <xQueueGenericSend+0x18a>
 800af86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af88:	2200      	movs	r2, #0
 800af8a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800af8e:	f001 ff9d 	bl	800cecc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800af92:	1d3a      	adds	r2, r7, #4
 800af94:	f107 0314 	add.w	r3, r7, #20
 800af98:	4611      	mov	r1, r2
 800af9a:	4618      	mov	r0, r3
 800af9c:	f001 f8b0 	bl	800c100 <xTaskCheckForTimeOut>
 800afa0:	4603      	mov	r3, r0
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d124      	bne.n	800aff0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800afa6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800afa8:	f000 fb28 	bl	800b5fc <prvIsQueueFull>
 800afac:	4603      	mov	r3, r0
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d018      	beq.n	800afe4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800afb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afb4:	3310      	adds	r3, #16
 800afb6:	687a      	ldr	r2, [r7, #4]
 800afb8:	4611      	mov	r1, r2
 800afba:	4618      	mov	r0, r3
 800afbc:	f000 ffd4 	bl	800bf68 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800afc0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800afc2:	f000 fab3 	bl	800b52c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800afc6:	f000 fde3 	bl	800bb90 <xTaskResumeAll>
 800afca:	4603      	mov	r3, r0
 800afcc:	2b00      	cmp	r3, #0
 800afce:	f47f af7c 	bne.w	800aeca <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800afd2:	4b0c      	ldr	r3, [pc, #48]	@ (800b004 <xQueueGenericSend+0x200>)
 800afd4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800afd8:	601a      	str	r2, [r3, #0]
 800afda:	f3bf 8f4f 	dsb	sy
 800afde:	f3bf 8f6f 	isb	sy
 800afe2:	e772      	b.n	800aeca <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800afe4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800afe6:	f000 faa1 	bl	800b52c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800afea:	f000 fdd1 	bl	800bb90 <xTaskResumeAll>
 800afee:	e76c      	b.n	800aeca <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800aff0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800aff2:	f000 fa9b 	bl	800b52c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aff6:	f000 fdcb 	bl	800bb90 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800affa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800affc:	4618      	mov	r0, r3
 800affe:	3738      	adds	r7, #56	@ 0x38
 800b000:	46bd      	mov	sp, r7
 800b002:	bd80      	pop	{r7, pc}
 800b004:	e000ed04 	.word	0xe000ed04

0800b008 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b008:	b580      	push	{r7, lr}
 800b00a:	b090      	sub	sp, #64	@ 0x40
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	60f8      	str	r0, [r7, #12]
 800b010:	60b9      	str	r1, [r7, #8]
 800b012:	607a      	str	r2, [r7, #4]
 800b014:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800b01a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d10b      	bne.n	800b038 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800b020:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b024:	f383 8811 	msr	BASEPRI, r3
 800b028:	f3bf 8f6f 	isb	sy
 800b02c:	f3bf 8f4f 	dsb	sy
 800b030:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b032:	bf00      	nop
 800b034:	bf00      	nop
 800b036:	e7fd      	b.n	800b034 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b038:	68bb      	ldr	r3, [r7, #8]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d103      	bne.n	800b046 <xQueueGenericSendFromISR+0x3e>
 800b03e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b042:	2b00      	cmp	r3, #0
 800b044:	d101      	bne.n	800b04a <xQueueGenericSendFromISR+0x42>
 800b046:	2301      	movs	r3, #1
 800b048:	e000      	b.n	800b04c <xQueueGenericSendFromISR+0x44>
 800b04a:	2300      	movs	r3, #0
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d10b      	bne.n	800b068 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800b050:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b054:	f383 8811 	msr	BASEPRI, r3
 800b058:	f3bf 8f6f 	isb	sy
 800b05c:	f3bf 8f4f 	dsb	sy
 800b060:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b062:	bf00      	nop
 800b064:	bf00      	nop
 800b066:	e7fd      	b.n	800b064 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b068:	683b      	ldr	r3, [r7, #0]
 800b06a:	2b02      	cmp	r3, #2
 800b06c:	d103      	bne.n	800b076 <xQueueGenericSendFromISR+0x6e>
 800b06e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b070:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b072:	2b01      	cmp	r3, #1
 800b074:	d101      	bne.n	800b07a <xQueueGenericSendFromISR+0x72>
 800b076:	2301      	movs	r3, #1
 800b078:	e000      	b.n	800b07c <xQueueGenericSendFromISR+0x74>
 800b07a:	2300      	movs	r3, #0
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d10b      	bne.n	800b098 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800b080:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b084:	f383 8811 	msr	BASEPRI, r3
 800b088:	f3bf 8f6f 	isb	sy
 800b08c:	f3bf 8f4f 	dsb	sy
 800b090:	623b      	str	r3, [r7, #32]
}
 800b092:	bf00      	nop
 800b094:	bf00      	nop
 800b096:	e7fd      	b.n	800b094 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b098:	f001 ffc6 	bl	800d028 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b09c:	f3ef 8211 	mrs	r2, BASEPRI
 800b0a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0a4:	f383 8811 	msr	BASEPRI, r3
 800b0a8:	f3bf 8f6f 	isb	sy
 800b0ac:	f3bf 8f4f 	dsb	sy
 800b0b0:	61fa      	str	r2, [r7, #28]
 800b0b2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b0b4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b0b6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b0b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0ba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b0bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b0c0:	429a      	cmp	r2, r3
 800b0c2:	d302      	bcc.n	800b0ca <xQueueGenericSendFromISR+0xc2>
 800b0c4:	683b      	ldr	r3, [r7, #0]
 800b0c6:	2b02      	cmp	r3, #2
 800b0c8:	d12f      	bne.n	800b12a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b0ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0cc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b0d0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b0d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b0d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b0da:	683a      	ldr	r2, [r7, #0]
 800b0dc:	68b9      	ldr	r1, [r7, #8]
 800b0de:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b0e0:	f000 f994 	bl	800b40c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b0e4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800b0e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b0ec:	d112      	bne.n	800b114 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b0ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d016      	beq.n	800b124 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b0f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0f8:	3324      	adds	r3, #36	@ 0x24
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	f000 ff86 	bl	800c00c <xTaskRemoveFromEventList>
 800b100:	4603      	mov	r3, r0
 800b102:	2b00      	cmp	r3, #0
 800b104:	d00e      	beq.n	800b124 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d00b      	beq.n	800b124 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	2201      	movs	r2, #1
 800b110:	601a      	str	r2, [r3, #0]
 800b112:	e007      	b.n	800b124 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b114:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800b118:	3301      	adds	r3, #1
 800b11a:	b2db      	uxtb	r3, r3
 800b11c:	b25a      	sxtb	r2, r3
 800b11e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b120:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800b124:	2301      	movs	r3, #1
 800b126:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800b128:	e001      	b.n	800b12e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b12a:	2300      	movs	r3, #0
 800b12c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b12e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b130:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b132:	697b      	ldr	r3, [r7, #20]
 800b134:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b138:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b13a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800b13c:	4618      	mov	r0, r3
 800b13e:	3740      	adds	r7, #64	@ 0x40
 800b140:	46bd      	mov	sp, r7
 800b142:	bd80      	pop	{r7, pc}

0800b144 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b144:	b580      	push	{r7, lr}
 800b146:	b08c      	sub	sp, #48	@ 0x30
 800b148:	af00      	add	r7, sp, #0
 800b14a:	60f8      	str	r0, [r7, #12]
 800b14c:	60b9      	str	r1, [r7, #8]
 800b14e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b150:	2300      	movs	r3, #0
 800b152:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b158:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d10b      	bne.n	800b176 <xQueueReceive+0x32>
	__asm volatile
 800b15e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b162:	f383 8811 	msr	BASEPRI, r3
 800b166:	f3bf 8f6f 	isb	sy
 800b16a:	f3bf 8f4f 	dsb	sy
 800b16e:	623b      	str	r3, [r7, #32]
}
 800b170:	bf00      	nop
 800b172:	bf00      	nop
 800b174:	e7fd      	b.n	800b172 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b176:	68bb      	ldr	r3, [r7, #8]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d103      	bne.n	800b184 <xQueueReceive+0x40>
 800b17c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b17e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b180:	2b00      	cmp	r3, #0
 800b182:	d101      	bne.n	800b188 <xQueueReceive+0x44>
 800b184:	2301      	movs	r3, #1
 800b186:	e000      	b.n	800b18a <xQueueReceive+0x46>
 800b188:	2300      	movs	r3, #0
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d10b      	bne.n	800b1a6 <xQueueReceive+0x62>
	__asm volatile
 800b18e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b192:	f383 8811 	msr	BASEPRI, r3
 800b196:	f3bf 8f6f 	isb	sy
 800b19a:	f3bf 8f4f 	dsb	sy
 800b19e:	61fb      	str	r3, [r7, #28]
}
 800b1a0:	bf00      	nop
 800b1a2:	bf00      	nop
 800b1a4:	e7fd      	b.n	800b1a2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b1a6:	f001 f8f3 	bl	800c390 <xTaskGetSchedulerState>
 800b1aa:	4603      	mov	r3, r0
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d102      	bne.n	800b1b6 <xQueueReceive+0x72>
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d101      	bne.n	800b1ba <xQueueReceive+0x76>
 800b1b6:	2301      	movs	r3, #1
 800b1b8:	e000      	b.n	800b1bc <xQueueReceive+0x78>
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d10b      	bne.n	800b1d8 <xQueueReceive+0x94>
	__asm volatile
 800b1c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1c4:	f383 8811 	msr	BASEPRI, r3
 800b1c8:	f3bf 8f6f 	isb	sy
 800b1cc:	f3bf 8f4f 	dsb	sy
 800b1d0:	61bb      	str	r3, [r7, #24]
}
 800b1d2:	bf00      	nop
 800b1d4:	bf00      	nop
 800b1d6:	e7fd      	b.n	800b1d4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b1d8:	f001 fe46 	bl	800ce68 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b1dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1e0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b1e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d01f      	beq.n	800b228 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b1e8:	68b9      	ldr	r1, [r7, #8]
 800b1ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b1ec:	f000 f978 	bl	800b4e0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b1f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1f2:	1e5a      	subs	r2, r3, #1
 800b1f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1f6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b1f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1fa:	691b      	ldr	r3, [r3, #16]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d00f      	beq.n	800b220 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b200:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b202:	3310      	adds	r3, #16
 800b204:	4618      	mov	r0, r3
 800b206:	f000 ff01 	bl	800c00c <xTaskRemoveFromEventList>
 800b20a:	4603      	mov	r3, r0
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d007      	beq.n	800b220 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b210:	4b3c      	ldr	r3, [pc, #240]	@ (800b304 <xQueueReceive+0x1c0>)
 800b212:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b216:	601a      	str	r2, [r3, #0]
 800b218:	f3bf 8f4f 	dsb	sy
 800b21c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b220:	f001 fe54 	bl	800cecc <vPortExitCritical>
				return pdPASS;
 800b224:	2301      	movs	r3, #1
 800b226:	e069      	b.n	800b2fc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d103      	bne.n	800b236 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b22e:	f001 fe4d 	bl	800cecc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b232:	2300      	movs	r3, #0
 800b234:	e062      	b.n	800b2fc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b236:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d106      	bne.n	800b24a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b23c:	f107 0310 	add.w	r3, r7, #16
 800b240:	4618      	mov	r0, r3
 800b242:	f000 ff47 	bl	800c0d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b246:	2301      	movs	r3, #1
 800b248:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b24a:	f001 fe3f 	bl	800cecc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b24e:	f000 fc91 	bl	800bb74 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b252:	f001 fe09 	bl	800ce68 <vPortEnterCritical>
 800b256:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b258:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b25c:	b25b      	sxtb	r3, r3
 800b25e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b262:	d103      	bne.n	800b26c <xQueueReceive+0x128>
 800b264:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b266:	2200      	movs	r2, #0
 800b268:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b26c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b26e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b272:	b25b      	sxtb	r3, r3
 800b274:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b278:	d103      	bne.n	800b282 <xQueueReceive+0x13e>
 800b27a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b27c:	2200      	movs	r2, #0
 800b27e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b282:	f001 fe23 	bl	800cecc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b286:	1d3a      	adds	r2, r7, #4
 800b288:	f107 0310 	add.w	r3, r7, #16
 800b28c:	4611      	mov	r1, r2
 800b28e:	4618      	mov	r0, r3
 800b290:	f000 ff36 	bl	800c100 <xTaskCheckForTimeOut>
 800b294:	4603      	mov	r3, r0
 800b296:	2b00      	cmp	r3, #0
 800b298:	d123      	bne.n	800b2e2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b29a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b29c:	f000 f998 	bl	800b5d0 <prvIsQueueEmpty>
 800b2a0:	4603      	mov	r3, r0
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d017      	beq.n	800b2d6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b2a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2a8:	3324      	adds	r3, #36	@ 0x24
 800b2aa:	687a      	ldr	r2, [r7, #4]
 800b2ac:	4611      	mov	r1, r2
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	f000 fe5a 	bl	800bf68 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b2b4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b2b6:	f000 f939 	bl	800b52c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b2ba:	f000 fc69 	bl	800bb90 <xTaskResumeAll>
 800b2be:	4603      	mov	r3, r0
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d189      	bne.n	800b1d8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800b2c4:	4b0f      	ldr	r3, [pc, #60]	@ (800b304 <xQueueReceive+0x1c0>)
 800b2c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b2ca:	601a      	str	r2, [r3, #0]
 800b2cc:	f3bf 8f4f 	dsb	sy
 800b2d0:	f3bf 8f6f 	isb	sy
 800b2d4:	e780      	b.n	800b1d8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b2d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b2d8:	f000 f928 	bl	800b52c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b2dc:	f000 fc58 	bl	800bb90 <xTaskResumeAll>
 800b2e0:	e77a      	b.n	800b1d8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b2e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b2e4:	f000 f922 	bl	800b52c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b2e8:	f000 fc52 	bl	800bb90 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b2ec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b2ee:	f000 f96f 	bl	800b5d0 <prvIsQueueEmpty>
 800b2f2:	4603      	mov	r3, r0
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	f43f af6f 	beq.w	800b1d8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b2fa:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	3730      	adds	r7, #48	@ 0x30
 800b300:	46bd      	mov	sp, r7
 800b302:	bd80      	pop	{r7, pc}
 800b304:	e000ed04 	.word	0xe000ed04

0800b308 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b308:	b580      	push	{r7, lr}
 800b30a:	b08e      	sub	sp, #56	@ 0x38
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	60f8      	str	r0, [r7, #12]
 800b310:	60b9      	str	r1, [r7, #8]
 800b312:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800b318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d10b      	bne.n	800b336 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800b31e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b322:	f383 8811 	msr	BASEPRI, r3
 800b326:	f3bf 8f6f 	isb	sy
 800b32a:	f3bf 8f4f 	dsb	sy
 800b32e:	623b      	str	r3, [r7, #32]
}
 800b330:	bf00      	nop
 800b332:	bf00      	nop
 800b334:	e7fd      	b.n	800b332 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b336:	68bb      	ldr	r3, [r7, #8]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d103      	bne.n	800b344 <xQueueReceiveFromISR+0x3c>
 800b33c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b33e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b340:	2b00      	cmp	r3, #0
 800b342:	d101      	bne.n	800b348 <xQueueReceiveFromISR+0x40>
 800b344:	2301      	movs	r3, #1
 800b346:	e000      	b.n	800b34a <xQueueReceiveFromISR+0x42>
 800b348:	2300      	movs	r3, #0
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d10b      	bne.n	800b366 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800b34e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b352:	f383 8811 	msr	BASEPRI, r3
 800b356:	f3bf 8f6f 	isb	sy
 800b35a:	f3bf 8f4f 	dsb	sy
 800b35e:	61fb      	str	r3, [r7, #28]
}
 800b360:	bf00      	nop
 800b362:	bf00      	nop
 800b364:	e7fd      	b.n	800b362 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b366:	f001 fe5f 	bl	800d028 <vPortValidateInterruptPriority>
	__asm volatile
 800b36a:	f3ef 8211 	mrs	r2, BASEPRI
 800b36e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b372:	f383 8811 	msr	BASEPRI, r3
 800b376:	f3bf 8f6f 	isb	sy
 800b37a:	f3bf 8f4f 	dsb	sy
 800b37e:	61ba      	str	r2, [r7, #24]
 800b380:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b382:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b384:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b388:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b38a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b38c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d02f      	beq.n	800b3f2 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800b392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b394:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b398:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b39c:	68b9      	ldr	r1, [r7, #8]
 800b39e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b3a0:	f000 f89e 	bl	800b4e0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b3a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3a6:	1e5a      	subs	r2, r3, #1
 800b3a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3aa:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800b3ac:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800b3b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b3b4:	d112      	bne.n	800b3dc <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b3b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3b8:	691b      	ldr	r3, [r3, #16]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d016      	beq.n	800b3ec <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b3be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3c0:	3310      	adds	r3, #16
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	f000 fe22 	bl	800c00c <xTaskRemoveFromEventList>
 800b3c8:	4603      	mov	r3, r0
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d00e      	beq.n	800b3ec <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d00b      	beq.n	800b3ec <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	2201      	movs	r2, #1
 800b3d8:	601a      	str	r2, [r3, #0]
 800b3da:	e007      	b.n	800b3ec <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b3dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b3e0:	3301      	adds	r3, #1
 800b3e2:	b2db      	uxtb	r3, r3
 800b3e4:	b25a      	sxtb	r2, r3
 800b3e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800b3ec:	2301      	movs	r3, #1
 800b3ee:	637b      	str	r3, [r7, #52]	@ 0x34
 800b3f0:	e001      	b.n	800b3f6 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	637b      	str	r3, [r7, #52]	@ 0x34
 800b3f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3f8:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b3fa:	693b      	ldr	r3, [r7, #16]
 800b3fc:	f383 8811 	msr	BASEPRI, r3
}
 800b400:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b402:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800b404:	4618      	mov	r0, r3
 800b406:	3738      	adds	r7, #56	@ 0x38
 800b408:	46bd      	mov	sp, r7
 800b40a:	bd80      	pop	{r7, pc}

0800b40c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b40c:	b580      	push	{r7, lr}
 800b40e:	b086      	sub	sp, #24
 800b410:	af00      	add	r7, sp, #0
 800b412:	60f8      	str	r0, [r7, #12]
 800b414:	60b9      	str	r1, [r7, #8]
 800b416:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b418:	2300      	movs	r3, #0
 800b41a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b420:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b426:	2b00      	cmp	r3, #0
 800b428:	d10d      	bne.n	800b446 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d14d      	bne.n	800b4ce <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	689b      	ldr	r3, [r3, #8]
 800b436:	4618      	mov	r0, r3
 800b438:	f000 ffc8 	bl	800c3cc <xTaskPriorityDisinherit>
 800b43c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	2200      	movs	r2, #0
 800b442:	609a      	str	r2, [r3, #8]
 800b444:	e043      	b.n	800b4ce <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d119      	bne.n	800b480 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	6858      	ldr	r0, [r3, #4]
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b454:	461a      	mov	r2, r3
 800b456:	68b9      	ldr	r1, [r7, #8]
 800b458:	f002 fc28 	bl	800dcac <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	685a      	ldr	r2, [r3, #4]
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b464:	441a      	add	r2, r3
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	685a      	ldr	r2, [r3, #4]
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	689b      	ldr	r3, [r3, #8]
 800b472:	429a      	cmp	r2, r3
 800b474:	d32b      	bcc.n	800b4ce <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	681a      	ldr	r2, [r3, #0]
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	605a      	str	r2, [r3, #4]
 800b47e:	e026      	b.n	800b4ce <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	68d8      	ldr	r0, [r3, #12]
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b488:	461a      	mov	r2, r3
 800b48a:	68b9      	ldr	r1, [r7, #8]
 800b48c:	f002 fc0e 	bl	800dcac <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	68da      	ldr	r2, [r3, #12]
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b498:	425b      	negs	r3, r3
 800b49a:	441a      	add	r2, r3
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	68da      	ldr	r2, [r3, #12]
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	429a      	cmp	r2, r3
 800b4aa:	d207      	bcs.n	800b4bc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	689a      	ldr	r2, [r3, #8]
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b4b4:	425b      	negs	r3, r3
 800b4b6:	441a      	add	r2, r3
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	2b02      	cmp	r3, #2
 800b4c0:	d105      	bne.n	800b4ce <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b4c2:	693b      	ldr	r3, [r7, #16]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d002      	beq.n	800b4ce <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b4c8:	693b      	ldr	r3, [r7, #16]
 800b4ca:	3b01      	subs	r3, #1
 800b4cc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b4ce:	693b      	ldr	r3, [r7, #16]
 800b4d0:	1c5a      	adds	r2, r3, #1
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800b4d6:	697b      	ldr	r3, [r7, #20]
}
 800b4d8:	4618      	mov	r0, r3
 800b4da:	3718      	adds	r7, #24
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	bd80      	pop	{r7, pc}

0800b4e0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b4e0:	b580      	push	{r7, lr}
 800b4e2:	b082      	sub	sp, #8
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	6078      	str	r0, [r7, #4]
 800b4e8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d018      	beq.n	800b524 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	68da      	ldr	r2, [r3, #12]
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b4fa:	441a      	add	r2, r3
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	68da      	ldr	r2, [r3, #12]
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	689b      	ldr	r3, [r3, #8]
 800b508:	429a      	cmp	r2, r3
 800b50a:	d303      	bcc.n	800b514 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681a      	ldr	r2, [r3, #0]
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	68d9      	ldr	r1, [r3, #12]
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b51c:	461a      	mov	r2, r3
 800b51e:	6838      	ldr	r0, [r7, #0]
 800b520:	f002 fbc4 	bl	800dcac <memcpy>
	}
}
 800b524:	bf00      	nop
 800b526:	3708      	adds	r7, #8
 800b528:	46bd      	mov	sp, r7
 800b52a:	bd80      	pop	{r7, pc}

0800b52c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b084      	sub	sp, #16
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b534:	f001 fc98 	bl	800ce68 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b53e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b540:	e011      	b.n	800b566 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b546:	2b00      	cmp	r3, #0
 800b548:	d012      	beq.n	800b570 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	3324      	adds	r3, #36	@ 0x24
 800b54e:	4618      	mov	r0, r3
 800b550:	f000 fd5c 	bl	800c00c <xTaskRemoveFromEventList>
 800b554:	4603      	mov	r3, r0
 800b556:	2b00      	cmp	r3, #0
 800b558:	d001      	beq.n	800b55e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b55a:	f000 fe35 	bl	800c1c8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b55e:	7bfb      	ldrb	r3, [r7, #15]
 800b560:	3b01      	subs	r3, #1
 800b562:	b2db      	uxtb	r3, r3
 800b564:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b566:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	dce9      	bgt.n	800b542 <prvUnlockQueue+0x16>
 800b56e:	e000      	b.n	800b572 <prvUnlockQueue+0x46>
					break;
 800b570:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	22ff      	movs	r2, #255	@ 0xff
 800b576:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800b57a:	f001 fca7 	bl	800cecc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b57e:	f001 fc73 	bl	800ce68 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b588:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b58a:	e011      	b.n	800b5b0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	691b      	ldr	r3, [r3, #16]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d012      	beq.n	800b5ba <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	3310      	adds	r3, #16
 800b598:	4618      	mov	r0, r3
 800b59a:	f000 fd37 	bl	800c00c <xTaskRemoveFromEventList>
 800b59e:	4603      	mov	r3, r0
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d001      	beq.n	800b5a8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b5a4:	f000 fe10 	bl	800c1c8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b5a8:	7bbb      	ldrb	r3, [r7, #14]
 800b5aa:	3b01      	subs	r3, #1
 800b5ac:	b2db      	uxtb	r3, r3
 800b5ae:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b5b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	dce9      	bgt.n	800b58c <prvUnlockQueue+0x60>
 800b5b8:	e000      	b.n	800b5bc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b5ba:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	22ff      	movs	r2, #255	@ 0xff
 800b5c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800b5c4:	f001 fc82 	bl	800cecc <vPortExitCritical>
}
 800b5c8:	bf00      	nop
 800b5ca:	3710      	adds	r7, #16
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	bd80      	pop	{r7, pc}

0800b5d0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b5d0:	b580      	push	{r7, lr}
 800b5d2:	b084      	sub	sp, #16
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b5d8:	f001 fc46 	bl	800ce68 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d102      	bne.n	800b5ea <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b5e4:	2301      	movs	r3, #1
 800b5e6:	60fb      	str	r3, [r7, #12]
 800b5e8:	e001      	b.n	800b5ee <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b5ee:	f001 fc6d 	bl	800cecc <vPortExitCritical>

	return xReturn;
 800b5f2:	68fb      	ldr	r3, [r7, #12]
}
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	3710      	adds	r7, #16
 800b5f8:	46bd      	mov	sp, r7
 800b5fa:	bd80      	pop	{r7, pc}

0800b5fc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b5fc:	b580      	push	{r7, lr}
 800b5fe:	b084      	sub	sp, #16
 800b600:	af00      	add	r7, sp, #0
 800b602:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b604:	f001 fc30 	bl	800ce68 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b610:	429a      	cmp	r2, r3
 800b612:	d102      	bne.n	800b61a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b614:	2301      	movs	r3, #1
 800b616:	60fb      	str	r3, [r7, #12]
 800b618:	e001      	b.n	800b61e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b61a:	2300      	movs	r3, #0
 800b61c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b61e:	f001 fc55 	bl	800cecc <vPortExitCritical>

	return xReturn;
 800b622:	68fb      	ldr	r3, [r7, #12]
}
 800b624:	4618      	mov	r0, r3
 800b626:	3710      	adds	r7, #16
 800b628:	46bd      	mov	sp, r7
 800b62a:	bd80      	pop	{r7, pc}

0800b62c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b62c:	b480      	push	{r7}
 800b62e:	b085      	sub	sp, #20
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
 800b634:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b636:	2300      	movs	r3, #0
 800b638:	60fb      	str	r3, [r7, #12]
 800b63a:	e014      	b.n	800b666 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b63c:	4a0f      	ldr	r2, [pc, #60]	@ (800b67c <vQueueAddToRegistry+0x50>)
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d10b      	bne.n	800b660 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b648:	490c      	ldr	r1, [pc, #48]	@ (800b67c <vQueueAddToRegistry+0x50>)
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	683a      	ldr	r2, [r7, #0]
 800b64e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b652:	4a0a      	ldr	r2, [pc, #40]	@ (800b67c <vQueueAddToRegistry+0x50>)
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	00db      	lsls	r3, r3, #3
 800b658:	4413      	add	r3, r2
 800b65a:	687a      	ldr	r2, [r7, #4]
 800b65c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b65e:	e006      	b.n	800b66e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	3301      	adds	r3, #1
 800b664:	60fb      	str	r3, [r7, #12]
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	2b07      	cmp	r3, #7
 800b66a:	d9e7      	bls.n	800b63c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b66c:	bf00      	nop
 800b66e:	bf00      	nop
 800b670:	3714      	adds	r7, #20
 800b672:	46bd      	mov	sp, r7
 800b674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b678:	4770      	bx	lr
 800b67a:	bf00      	nop
 800b67c:	20000a3c 	.word	0x20000a3c

0800b680 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b680:	b580      	push	{r7, lr}
 800b682:	b086      	sub	sp, #24
 800b684:	af00      	add	r7, sp, #0
 800b686:	60f8      	str	r0, [r7, #12]
 800b688:	60b9      	str	r1, [r7, #8]
 800b68a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b690:	f001 fbea 	bl	800ce68 <vPortEnterCritical>
 800b694:	697b      	ldr	r3, [r7, #20]
 800b696:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b69a:	b25b      	sxtb	r3, r3
 800b69c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b6a0:	d103      	bne.n	800b6aa <vQueueWaitForMessageRestricted+0x2a>
 800b6a2:	697b      	ldr	r3, [r7, #20]
 800b6a4:	2200      	movs	r2, #0
 800b6a6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b6aa:	697b      	ldr	r3, [r7, #20]
 800b6ac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b6b0:	b25b      	sxtb	r3, r3
 800b6b2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b6b6:	d103      	bne.n	800b6c0 <vQueueWaitForMessageRestricted+0x40>
 800b6b8:	697b      	ldr	r3, [r7, #20]
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b6c0:	f001 fc04 	bl	800cecc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b6c4:	697b      	ldr	r3, [r7, #20]
 800b6c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d106      	bne.n	800b6da <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b6cc:	697b      	ldr	r3, [r7, #20]
 800b6ce:	3324      	adds	r3, #36	@ 0x24
 800b6d0:	687a      	ldr	r2, [r7, #4]
 800b6d2:	68b9      	ldr	r1, [r7, #8]
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	f000 fc6d 	bl	800bfb4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b6da:	6978      	ldr	r0, [r7, #20]
 800b6dc:	f7ff ff26 	bl	800b52c <prvUnlockQueue>
	}
 800b6e0:	bf00      	nop
 800b6e2:	3718      	adds	r7, #24
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	bd80      	pop	{r7, pc}

0800b6e8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b6e8:	b580      	push	{r7, lr}
 800b6ea:	b08e      	sub	sp, #56	@ 0x38
 800b6ec:	af04      	add	r7, sp, #16
 800b6ee:	60f8      	str	r0, [r7, #12]
 800b6f0:	60b9      	str	r1, [r7, #8]
 800b6f2:	607a      	str	r2, [r7, #4]
 800b6f4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b6f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d10b      	bne.n	800b714 <xTaskCreateStatic+0x2c>
	__asm volatile
 800b6fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b700:	f383 8811 	msr	BASEPRI, r3
 800b704:	f3bf 8f6f 	isb	sy
 800b708:	f3bf 8f4f 	dsb	sy
 800b70c:	623b      	str	r3, [r7, #32]
}
 800b70e:	bf00      	nop
 800b710:	bf00      	nop
 800b712:	e7fd      	b.n	800b710 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b714:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b716:	2b00      	cmp	r3, #0
 800b718:	d10b      	bne.n	800b732 <xTaskCreateStatic+0x4a>
	__asm volatile
 800b71a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b71e:	f383 8811 	msr	BASEPRI, r3
 800b722:	f3bf 8f6f 	isb	sy
 800b726:	f3bf 8f4f 	dsb	sy
 800b72a:	61fb      	str	r3, [r7, #28]
}
 800b72c:	bf00      	nop
 800b72e:	bf00      	nop
 800b730:	e7fd      	b.n	800b72e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b732:	2360      	movs	r3, #96	@ 0x60
 800b734:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b736:	693b      	ldr	r3, [r7, #16]
 800b738:	2b60      	cmp	r3, #96	@ 0x60
 800b73a:	d00b      	beq.n	800b754 <xTaskCreateStatic+0x6c>
	__asm volatile
 800b73c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b740:	f383 8811 	msr	BASEPRI, r3
 800b744:	f3bf 8f6f 	isb	sy
 800b748:	f3bf 8f4f 	dsb	sy
 800b74c:	61bb      	str	r3, [r7, #24]
}
 800b74e:	bf00      	nop
 800b750:	bf00      	nop
 800b752:	e7fd      	b.n	800b750 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b754:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b756:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d01e      	beq.n	800b79a <xTaskCreateStatic+0xb2>
 800b75c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d01b      	beq.n	800b79a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b762:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b764:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b768:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b76a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b76c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b76e:	2202      	movs	r2, #2
 800b770:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b774:	2300      	movs	r3, #0
 800b776:	9303      	str	r3, [sp, #12]
 800b778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b77a:	9302      	str	r3, [sp, #8]
 800b77c:	f107 0314 	add.w	r3, r7, #20
 800b780:	9301      	str	r3, [sp, #4]
 800b782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b784:	9300      	str	r3, [sp, #0]
 800b786:	683b      	ldr	r3, [r7, #0]
 800b788:	687a      	ldr	r2, [r7, #4]
 800b78a:	68b9      	ldr	r1, [r7, #8]
 800b78c:	68f8      	ldr	r0, [r7, #12]
 800b78e:	f000 f850 	bl	800b832 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b792:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b794:	f000 f8e0 	bl	800b958 <prvAddNewTaskToReadyList>
 800b798:	e001      	b.n	800b79e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800b79a:	2300      	movs	r3, #0
 800b79c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b79e:	697b      	ldr	r3, [r7, #20]
	}
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	3728      	adds	r7, #40	@ 0x28
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	bd80      	pop	{r7, pc}

0800b7a8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b08c      	sub	sp, #48	@ 0x30
 800b7ac:	af04      	add	r7, sp, #16
 800b7ae:	60f8      	str	r0, [r7, #12]
 800b7b0:	60b9      	str	r1, [r7, #8]
 800b7b2:	603b      	str	r3, [r7, #0]
 800b7b4:	4613      	mov	r3, r2
 800b7b6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b7b8:	88fb      	ldrh	r3, [r7, #6]
 800b7ba:	009b      	lsls	r3, r3, #2
 800b7bc:	4618      	mov	r0, r3
 800b7be:	f001 fc75 	bl	800d0ac <pvPortMalloc>
 800b7c2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b7c4:	697b      	ldr	r3, [r7, #20]
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d00e      	beq.n	800b7e8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b7ca:	2060      	movs	r0, #96	@ 0x60
 800b7cc:	f001 fc6e 	bl	800d0ac <pvPortMalloc>
 800b7d0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b7d2:	69fb      	ldr	r3, [r7, #28]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d003      	beq.n	800b7e0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b7d8:	69fb      	ldr	r3, [r7, #28]
 800b7da:	697a      	ldr	r2, [r7, #20]
 800b7dc:	631a      	str	r2, [r3, #48]	@ 0x30
 800b7de:	e005      	b.n	800b7ec <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b7e0:	6978      	ldr	r0, [r7, #20]
 800b7e2:	f001 fd37 	bl	800d254 <vPortFree>
 800b7e6:	e001      	b.n	800b7ec <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b7e8:	2300      	movs	r3, #0
 800b7ea:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b7ec:	69fb      	ldr	r3, [r7, #28]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d017      	beq.n	800b822 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b7f2:	69fb      	ldr	r3, [r7, #28]
 800b7f4:	2200      	movs	r2, #0
 800b7f6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b7fa:	88fa      	ldrh	r2, [r7, #6]
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	9303      	str	r3, [sp, #12]
 800b800:	69fb      	ldr	r3, [r7, #28]
 800b802:	9302      	str	r3, [sp, #8]
 800b804:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b806:	9301      	str	r3, [sp, #4]
 800b808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b80a:	9300      	str	r3, [sp, #0]
 800b80c:	683b      	ldr	r3, [r7, #0]
 800b80e:	68b9      	ldr	r1, [r7, #8]
 800b810:	68f8      	ldr	r0, [r7, #12]
 800b812:	f000 f80e 	bl	800b832 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b816:	69f8      	ldr	r0, [r7, #28]
 800b818:	f000 f89e 	bl	800b958 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b81c:	2301      	movs	r3, #1
 800b81e:	61bb      	str	r3, [r7, #24]
 800b820:	e002      	b.n	800b828 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b822:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b826:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b828:	69bb      	ldr	r3, [r7, #24]
	}
 800b82a:	4618      	mov	r0, r3
 800b82c:	3720      	adds	r7, #32
 800b82e:	46bd      	mov	sp, r7
 800b830:	bd80      	pop	{r7, pc}

0800b832 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b832:	b580      	push	{r7, lr}
 800b834:	b088      	sub	sp, #32
 800b836:	af00      	add	r7, sp, #0
 800b838:	60f8      	str	r0, [r7, #12]
 800b83a:	60b9      	str	r1, [r7, #8]
 800b83c:	607a      	str	r2, [r7, #4]
 800b83e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b842:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	009b      	lsls	r3, r3, #2
 800b848:	461a      	mov	r2, r3
 800b84a:	21a5      	movs	r1, #165	@ 0xa5
 800b84c:	f002 f9ea 	bl	800dc24 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b852:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b85a:	3b01      	subs	r3, #1
 800b85c:	009b      	lsls	r3, r3, #2
 800b85e:	4413      	add	r3, r2
 800b860:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b862:	69bb      	ldr	r3, [r7, #24]
 800b864:	f023 0307 	bic.w	r3, r3, #7
 800b868:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b86a:	69bb      	ldr	r3, [r7, #24]
 800b86c:	f003 0307 	and.w	r3, r3, #7
 800b870:	2b00      	cmp	r3, #0
 800b872:	d00b      	beq.n	800b88c <prvInitialiseNewTask+0x5a>
	__asm volatile
 800b874:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b878:	f383 8811 	msr	BASEPRI, r3
 800b87c:	f3bf 8f6f 	isb	sy
 800b880:	f3bf 8f4f 	dsb	sy
 800b884:	617b      	str	r3, [r7, #20]
}
 800b886:	bf00      	nop
 800b888:	bf00      	nop
 800b88a:	e7fd      	b.n	800b888 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b88c:	68bb      	ldr	r3, [r7, #8]
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d01f      	beq.n	800b8d2 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b892:	2300      	movs	r3, #0
 800b894:	61fb      	str	r3, [r7, #28]
 800b896:	e012      	b.n	800b8be <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b898:	68ba      	ldr	r2, [r7, #8]
 800b89a:	69fb      	ldr	r3, [r7, #28]
 800b89c:	4413      	add	r3, r2
 800b89e:	7819      	ldrb	r1, [r3, #0]
 800b8a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b8a2:	69fb      	ldr	r3, [r7, #28]
 800b8a4:	4413      	add	r3, r2
 800b8a6:	3334      	adds	r3, #52	@ 0x34
 800b8a8:	460a      	mov	r2, r1
 800b8aa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b8ac:	68ba      	ldr	r2, [r7, #8]
 800b8ae:	69fb      	ldr	r3, [r7, #28]
 800b8b0:	4413      	add	r3, r2
 800b8b2:	781b      	ldrb	r3, [r3, #0]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d006      	beq.n	800b8c6 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b8b8:	69fb      	ldr	r3, [r7, #28]
 800b8ba:	3301      	adds	r3, #1
 800b8bc:	61fb      	str	r3, [r7, #28]
 800b8be:	69fb      	ldr	r3, [r7, #28]
 800b8c0:	2b0f      	cmp	r3, #15
 800b8c2:	d9e9      	bls.n	800b898 <prvInitialiseNewTask+0x66>
 800b8c4:	e000      	b.n	800b8c8 <prvInitialiseNewTask+0x96>
			{
				break;
 800b8c6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b8c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b8d0:	e003      	b.n	800b8da <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b8d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8d4:	2200      	movs	r2, #0
 800b8d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b8da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8dc:	2b37      	cmp	r3, #55	@ 0x37
 800b8de:	d901      	bls.n	800b8e4 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b8e0:	2337      	movs	r3, #55	@ 0x37
 800b8e2:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b8e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b8e8:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b8ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b8ee:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b8f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8f2:	2200      	movs	r2, #0
 800b8f4:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b8f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8f8:	3304      	adds	r3, #4
 800b8fa:	4618      	mov	r0, r3
 800b8fc:	f7ff f8a8 	bl	800aa50 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b902:	3318      	adds	r3, #24
 800b904:	4618      	mov	r0, r3
 800b906:	f7ff f8a3 	bl	800aa50 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b90a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b90c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b90e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b910:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b912:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b918:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b91a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b91c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b91e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800b920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b922:	2200      	movs	r2, #0
 800b924:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b928:	2200      	movs	r2, #0
 800b92a:	659a      	str	r2, [r3, #88]	@ 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b92c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b92e:	2200      	movs	r2, #0
 800b930:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b934:	683a      	ldr	r2, [r7, #0]
 800b936:	68f9      	ldr	r1, [r7, #12]
 800b938:	69b8      	ldr	r0, [r7, #24]
 800b93a:	f001 f965 	bl	800cc08 <pxPortInitialiseStack>
 800b93e:	4602      	mov	r2, r0
 800b940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b942:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b944:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b946:	2b00      	cmp	r3, #0
 800b948:	d002      	beq.n	800b950 <prvInitialiseNewTask+0x11e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b94a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b94c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b94e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b950:	bf00      	nop
 800b952:	3720      	adds	r7, #32
 800b954:	46bd      	mov	sp, r7
 800b956:	bd80      	pop	{r7, pc}

0800b958 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b082      	sub	sp, #8
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b960:	f001 fa82 	bl	800ce68 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b964:	4b2d      	ldr	r3, [pc, #180]	@ (800ba1c <prvAddNewTaskToReadyList+0xc4>)
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	3301      	adds	r3, #1
 800b96a:	4a2c      	ldr	r2, [pc, #176]	@ (800ba1c <prvAddNewTaskToReadyList+0xc4>)
 800b96c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b96e:	4b2c      	ldr	r3, [pc, #176]	@ (800ba20 <prvAddNewTaskToReadyList+0xc8>)
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	2b00      	cmp	r3, #0
 800b974:	d109      	bne.n	800b98a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b976:	4a2a      	ldr	r2, [pc, #168]	@ (800ba20 <prvAddNewTaskToReadyList+0xc8>)
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b97c:	4b27      	ldr	r3, [pc, #156]	@ (800ba1c <prvAddNewTaskToReadyList+0xc4>)
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	2b01      	cmp	r3, #1
 800b982:	d110      	bne.n	800b9a6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b984:	f000 fc46 	bl	800c214 <prvInitialiseTaskLists>
 800b988:	e00d      	b.n	800b9a6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b98a:	4b26      	ldr	r3, [pc, #152]	@ (800ba24 <prvAddNewTaskToReadyList+0xcc>)
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d109      	bne.n	800b9a6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b992:	4b23      	ldr	r3, [pc, #140]	@ (800ba20 <prvAddNewTaskToReadyList+0xc8>)
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b99c:	429a      	cmp	r2, r3
 800b99e:	d802      	bhi.n	800b9a6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b9a0:	4a1f      	ldr	r2, [pc, #124]	@ (800ba20 <prvAddNewTaskToReadyList+0xc8>)
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b9a6:	4b20      	ldr	r3, [pc, #128]	@ (800ba28 <prvAddNewTaskToReadyList+0xd0>)
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	3301      	adds	r3, #1
 800b9ac:	4a1e      	ldr	r2, [pc, #120]	@ (800ba28 <prvAddNewTaskToReadyList+0xd0>)
 800b9ae:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b9b0:	4b1d      	ldr	r3, [pc, #116]	@ (800ba28 <prvAddNewTaskToReadyList+0xd0>)
 800b9b2:	681a      	ldr	r2, [r3, #0]
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b9bc:	4b1b      	ldr	r3, [pc, #108]	@ (800ba2c <prvAddNewTaskToReadyList+0xd4>)
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	429a      	cmp	r2, r3
 800b9c2:	d903      	bls.n	800b9cc <prvAddNewTaskToReadyList+0x74>
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9c8:	4a18      	ldr	r2, [pc, #96]	@ (800ba2c <prvAddNewTaskToReadyList+0xd4>)
 800b9ca:	6013      	str	r3, [r2, #0]
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b9d0:	4613      	mov	r3, r2
 800b9d2:	009b      	lsls	r3, r3, #2
 800b9d4:	4413      	add	r3, r2
 800b9d6:	009b      	lsls	r3, r3, #2
 800b9d8:	4a15      	ldr	r2, [pc, #84]	@ (800ba30 <prvAddNewTaskToReadyList+0xd8>)
 800b9da:	441a      	add	r2, r3
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	3304      	adds	r3, #4
 800b9e0:	4619      	mov	r1, r3
 800b9e2:	4610      	mov	r0, r2
 800b9e4:	f7ff f841 	bl	800aa6a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b9e8:	f001 fa70 	bl	800cecc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b9ec:	4b0d      	ldr	r3, [pc, #52]	@ (800ba24 <prvAddNewTaskToReadyList+0xcc>)
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d00e      	beq.n	800ba12 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b9f4:	4b0a      	ldr	r3, [pc, #40]	@ (800ba20 <prvAddNewTaskToReadyList+0xc8>)
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9fe:	429a      	cmp	r2, r3
 800ba00:	d207      	bcs.n	800ba12 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ba02:	4b0c      	ldr	r3, [pc, #48]	@ (800ba34 <prvAddNewTaskToReadyList+0xdc>)
 800ba04:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ba08:	601a      	str	r2, [r3, #0]
 800ba0a:	f3bf 8f4f 	dsb	sy
 800ba0e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ba12:	bf00      	nop
 800ba14:	3708      	adds	r7, #8
 800ba16:	46bd      	mov	sp, r7
 800ba18:	bd80      	pop	{r7, pc}
 800ba1a:	bf00      	nop
 800ba1c:	20000f50 	.word	0x20000f50
 800ba20:	20000a7c 	.word	0x20000a7c
 800ba24:	20000f5c 	.word	0x20000f5c
 800ba28:	20000f6c 	.word	0x20000f6c
 800ba2c:	20000f58 	.word	0x20000f58
 800ba30:	20000a80 	.word	0x20000a80
 800ba34:	e000ed04 	.word	0xe000ed04

0800ba38 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	b084      	sub	sp, #16
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ba40:	2300      	movs	r3, #0
 800ba42:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d018      	beq.n	800ba7c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ba4a:	4b14      	ldr	r3, [pc, #80]	@ (800ba9c <vTaskDelay+0x64>)
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d00b      	beq.n	800ba6a <vTaskDelay+0x32>
	__asm volatile
 800ba52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba56:	f383 8811 	msr	BASEPRI, r3
 800ba5a:	f3bf 8f6f 	isb	sy
 800ba5e:	f3bf 8f4f 	dsb	sy
 800ba62:	60bb      	str	r3, [r7, #8]
}
 800ba64:	bf00      	nop
 800ba66:	bf00      	nop
 800ba68:	e7fd      	b.n	800ba66 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ba6a:	f000 f883 	bl	800bb74 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ba6e:	2100      	movs	r1, #0
 800ba70:	6878      	ldr	r0, [r7, #4]
 800ba72:	f000 fd1b 	bl	800c4ac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ba76:	f000 f88b 	bl	800bb90 <xTaskResumeAll>
 800ba7a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d107      	bne.n	800ba92 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800ba82:	4b07      	ldr	r3, [pc, #28]	@ (800baa0 <vTaskDelay+0x68>)
 800ba84:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ba88:	601a      	str	r2, [r3, #0]
 800ba8a:	f3bf 8f4f 	dsb	sy
 800ba8e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ba92:	bf00      	nop
 800ba94:	3710      	adds	r7, #16
 800ba96:	46bd      	mov	sp, r7
 800ba98:	bd80      	pop	{r7, pc}
 800ba9a:	bf00      	nop
 800ba9c:	20000f78 	.word	0x20000f78
 800baa0:	e000ed04 	.word	0xe000ed04

0800baa4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800baa4:	b580      	push	{r7, lr}
 800baa6:	b08a      	sub	sp, #40	@ 0x28
 800baa8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800baaa:	2300      	movs	r3, #0
 800baac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800baae:	2300      	movs	r3, #0
 800bab0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bab2:	463a      	mov	r2, r7
 800bab4:	1d39      	adds	r1, r7, #4
 800bab6:	f107 0308 	add.w	r3, r7, #8
 800baba:	4618      	mov	r0, r3
 800babc:	f7fe ff74 	bl	800a9a8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800bac0:	6839      	ldr	r1, [r7, #0]
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	68ba      	ldr	r2, [r7, #8]
 800bac6:	9202      	str	r2, [sp, #8]
 800bac8:	9301      	str	r3, [sp, #4]
 800baca:	2300      	movs	r3, #0
 800bacc:	9300      	str	r3, [sp, #0]
 800bace:	2300      	movs	r3, #0
 800bad0:	460a      	mov	r2, r1
 800bad2:	4922      	ldr	r1, [pc, #136]	@ (800bb5c <vTaskStartScheduler+0xb8>)
 800bad4:	4822      	ldr	r0, [pc, #136]	@ (800bb60 <vTaskStartScheduler+0xbc>)
 800bad6:	f7ff fe07 	bl	800b6e8 <xTaskCreateStatic>
 800bada:	4603      	mov	r3, r0
 800badc:	4a21      	ldr	r2, [pc, #132]	@ (800bb64 <vTaskStartScheduler+0xc0>)
 800bade:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800bae0:	4b20      	ldr	r3, [pc, #128]	@ (800bb64 <vTaskStartScheduler+0xc0>)
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d002      	beq.n	800baee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800bae8:	2301      	movs	r3, #1
 800baea:	617b      	str	r3, [r7, #20]
 800baec:	e001      	b.n	800baf2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800baee:	2300      	movs	r3, #0
 800baf0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800baf2:	697b      	ldr	r3, [r7, #20]
 800baf4:	2b01      	cmp	r3, #1
 800baf6:	d102      	bne.n	800bafe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800baf8:	f000 fd2c 	bl	800c554 <xTimerCreateTimerTask>
 800bafc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800bafe:	697b      	ldr	r3, [r7, #20]
 800bb00:	2b01      	cmp	r3, #1
 800bb02:	d116      	bne.n	800bb32 <vTaskStartScheduler+0x8e>
	__asm volatile
 800bb04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb08:	f383 8811 	msr	BASEPRI, r3
 800bb0c:	f3bf 8f6f 	isb	sy
 800bb10:	f3bf 8f4f 	dsb	sy
 800bb14:	613b      	str	r3, [r7, #16]
}
 800bb16:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800bb18:	4b13      	ldr	r3, [pc, #76]	@ (800bb68 <vTaskStartScheduler+0xc4>)
 800bb1a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bb1e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bb20:	4b12      	ldr	r3, [pc, #72]	@ (800bb6c <vTaskStartScheduler+0xc8>)
 800bb22:	2201      	movs	r2, #1
 800bb24:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800bb26:	4b12      	ldr	r3, [pc, #72]	@ (800bb70 <vTaskStartScheduler+0xcc>)
 800bb28:	2200      	movs	r2, #0
 800bb2a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800bb2c:	f001 f8f8 	bl	800cd20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800bb30:	e00f      	b.n	800bb52 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bb32:	697b      	ldr	r3, [r7, #20]
 800bb34:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bb38:	d10b      	bne.n	800bb52 <vTaskStartScheduler+0xae>
	__asm volatile
 800bb3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb3e:	f383 8811 	msr	BASEPRI, r3
 800bb42:	f3bf 8f6f 	isb	sy
 800bb46:	f3bf 8f4f 	dsb	sy
 800bb4a:	60fb      	str	r3, [r7, #12]
}
 800bb4c:	bf00      	nop
 800bb4e:	bf00      	nop
 800bb50:	e7fd      	b.n	800bb4e <vTaskStartScheduler+0xaa>
}
 800bb52:	bf00      	nop
 800bb54:	3718      	adds	r7, #24
 800bb56:	46bd      	mov	sp, r7
 800bb58:	bd80      	pop	{r7, pc}
 800bb5a:	bf00      	nop
 800bb5c:	0800dd90 	.word	0x0800dd90
 800bb60:	0800c1e1 	.word	0x0800c1e1
 800bb64:	20000f74 	.word	0x20000f74
 800bb68:	20000f70 	.word	0x20000f70
 800bb6c:	20000f5c 	.word	0x20000f5c
 800bb70:	20000f54 	.word	0x20000f54

0800bb74 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bb74:	b480      	push	{r7}
 800bb76:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800bb78:	4b04      	ldr	r3, [pc, #16]	@ (800bb8c <vTaskSuspendAll+0x18>)
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	3301      	adds	r3, #1
 800bb7e:	4a03      	ldr	r2, [pc, #12]	@ (800bb8c <vTaskSuspendAll+0x18>)
 800bb80:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800bb82:	bf00      	nop
 800bb84:	46bd      	mov	sp, r7
 800bb86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8a:	4770      	bx	lr
 800bb8c:	20000f78 	.word	0x20000f78

0800bb90 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800bb90:	b580      	push	{r7, lr}
 800bb92:	b084      	sub	sp, #16
 800bb94:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800bb96:	2300      	movs	r3, #0
 800bb98:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800bb9e:	4b42      	ldr	r3, [pc, #264]	@ (800bca8 <xTaskResumeAll+0x118>)
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d10b      	bne.n	800bbbe <xTaskResumeAll+0x2e>
	__asm volatile
 800bba6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbaa:	f383 8811 	msr	BASEPRI, r3
 800bbae:	f3bf 8f6f 	isb	sy
 800bbb2:	f3bf 8f4f 	dsb	sy
 800bbb6:	603b      	str	r3, [r7, #0]
}
 800bbb8:	bf00      	nop
 800bbba:	bf00      	nop
 800bbbc:	e7fd      	b.n	800bbba <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800bbbe:	f001 f953 	bl	800ce68 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800bbc2:	4b39      	ldr	r3, [pc, #228]	@ (800bca8 <xTaskResumeAll+0x118>)
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	3b01      	subs	r3, #1
 800bbc8:	4a37      	ldr	r2, [pc, #220]	@ (800bca8 <xTaskResumeAll+0x118>)
 800bbca:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bbcc:	4b36      	ldr	r3, [pc, #216]	@ (800bca8 <xTaskResumeAll+0x118>)
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d162      	bne.n	800bc9a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bbd4:	4b35      	ldr	r3, [pc, #212]	@ (800bcac <xTaskResumeAll+0x11c>)
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d05e      	beq.n	800bc9a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bbdc:	e02f      	b.n	800bc3e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bbde:	4b34      	ldr	r3, [pc, #208]	@ (800bcb0 <xTaskResumeAll+0x120>)
 800bbe0:	68db      	ldr	r3, [r3, #12]
 800bbe2:	68db      	ldr	r3, [r3, #12]
 800bbe4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	3318      	adds	r3, #24
 800bbea:	4618      	mov	r0, r3
 800bbec:	f7fe ff9a 	bl	800ab24 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	3304      	adds	r3, #4
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	f7fe ff95 	bl	800ab24 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bbfe:	4b2d      	ldr	r3, [pc, #180]	@ (800bcb4 <xTaskResumeAll+0x124>)
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	429a      	cmp	r2, r3
 800bc04:	d903      	bls.n	800bc0e <xTaskResumeAll+0x7e>
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc0a:	4a2a      	ldr	r2, [pc, #168]	@ (800bcb4 <xTaskResumeAll+0x124>)
 800bc0c:	6013      	str	r3, [r2, #0]
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc12:	4613      	mov	r3, r2
 800bc14:	009b      	lsls	r3, r3, #2
 800bc16:	4413      	add	r3, r2
 800bc18:	009b      	lsls	r3, r3, #2
 800bc1a:	4a27      	ldr	r2, [pc, #156]	@ (800bcb8 <xTaskResumeAll+0x128>)
 800bc1c:	441a      	add	r2, r3
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	3304      	adds	r3, #4
 800bc22:	4619      	mov	r1, r3
 800bc24:	4610      	mov	r0, r2
 800bc26:	f7fe ff20 	bl	800aa6a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc2e:	4b23      	ldr	r3, [pc, #140]	@ (800bcbc <xTaskResumeAll+0x12c>)
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc34:	429a      	cmp	r2, r3
 800bc36:	d302      	bcc.n	800bc3e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800bc38:	4b21      	ldr	r3, [pc, #132]	@ (800bcc0 <xTaskResumeAll+0x130>)
 800bc3a:	2201      	movs	r2, #1
 800bc3c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bc3e:	4b1c      	ldr	r3, [pc, #112]	@ (800bcb0 <xTaskResumeAll+0x120>)
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d1cb      	bne.n	800bbde <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d001      	beq.n	800bc50 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800bc4c:	f000 fb80 	bl	800c350 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800bc50:	4b1c      	ldr	r3, [pc, #112]	@ (800bcc4 <xTaskResumeAll+0x134>)
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d010      	beq.n	800bc7e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800bc5c:	f000 f846 	bl	800bcec <xTaskIncrementTick>
 800bc60:	4603      	mov	r3, r0
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d002      	beq.n	800bc6c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800bc66:	4b16      	ldr	r3, [pc, #88]	@ (800bcc0 <xTaskResumeAll+0x130>)
 800bc68:	2201      	movs	r2, #1
 800bc6a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	3b01      	subs	r3, #1
 800bc70:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d1f1      	bne.n	800bc5c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800bc78:	4b12      	ldr	r3, [pc, #72]	@ (800bcc4 <xTaskResumeAll+0x134>)
 800bc7a:	2200      	movs	r2, #0
 800bc7c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800bc7e:	4b10      	ldr	r3, [pc, #64]	@ (800bcc0 <xTaskResumeAll+0x130>)
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d009      	beq.n	800bc9a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800bc86:	2301      	movs	r3, #1
 800bc88:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800bc8a:	4b0f      	ldr	r3, [pc, #60]	@ (800bcc8 <xTaskResumeAll+0x138>)
 800bc8c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bc90:	601a      	str	r2, [r3, #0]
 800bc92:	f3bf 8f4f 	dsb	sy
 800bc96:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bc9a:	f001 f917 	bl	800cecc <vPortExitCritical>

	return xAlreadyYielded;
 800bc9e:	68bb      	ldr	r3, [r7, #8]
}
 800bca0:	4618      	mov	r0, r3
 800bca2:	3710      	adds	r7, #16
 800bca4:	46bd      	mov	sp, r7
 800bca6:	bd80      	pop	{r7, pc}
 800bca8:	20000f78 	.word	0x20000f78
 800bcac:	20000f50 	.word	0x20000f50
 800bcb0:	20000f10 	.word	0x20000f10
 800bcb4:	20000f58 	.word	0x20000f58
 800bcb8:	20000a80 	.word	0x20000a80
 800bcbc:	20000a7c 	.word	0x20000a7c
 800bcc0:	20000f64 	.word	0x20000f64
 800bcc4:	20000f60 	.word	0x20000f60
 800bcc8:	e000ed04 	.word	0xe000ed04

0800bccc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800bccc:	b480      	push	{r7}
 800bcce:	b083      	sub	sp, #12
 800bcd0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800bcd2:	4b05      	ldr	r3, [pc, #20]	@ (800bce8 <xTaskGetTickCount+0x1c>)
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800bcd8:	687b      	ldr	r3, [r7, #4]
}
 800bcda:	4618      	mov	r0, r3
 800bcdc:	370c      	adds	r7, #12
 800bcde:	46bd      	mov	sp, r7
 800bce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce4:	4770      	bx	lr
 800bce6:	bf00      	nop
 800bce8:	20000f54 	.word	0x20000f54

0800bcec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bcec:	b580      	push	{r7, lr}
 800bcee:	b086      	sub	sp, #24
 800bcf0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bcf6:	4b4f      	ldr	r3, [pc, #316]	@ (800be34 <xTaskIncrementTick+0x148>)
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	f040 8090 	bne.w	800be20 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bd00:	4b4d      	ldr	r3, [pc, #308]	@ (800be38 <xTaskIncrementTick+0x14c>)
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	3301      	adds	r3, #1
 800bd06:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bd08:	4a4b      	ldr	r2, [pc, #300]	@ (800be38 <xTaskIncrementTick+0x14c>)
 800bd0a:	693b      	ldr	r3, [r7, #16]
 800bd0c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bd0e:	693b      	ldr	r3, [r7, #16]
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d121      	bne.n	800bd58 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800bd14:	4b49      	ldr	r3, [pc, #292]	@ (800be3c <xTaskIncrementTick+0x150>)
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d00b      	beq.n	800bd36 <xTaskIncrementTick+0x4a>
	__asm volatile
 800bd1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd22:	f383 8811 	msr	BASEPRI, r3
 800bd26:	f3bf 8f6f 	isb	sy
 800bd2a:	f3bf 8f4f 	dsb	sy
 800bd2e:	603b      	str	r3, [r7, #0]
}
 800bd30:	bf00      	nop
 800bd32:	bf00      	nop
 800bd34:	e7fd      	b.n	800bd32 <xTaskIncrementTick+0x46>
 800bd36:	4b41      	ldr	r3, [pc, #260]	@ (800be3c <xTaskIncrementTick+0x150>)
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	60fb      	str	r3, [r7, #12]
 800bd3c:	4b40      	ldr	r3, [pc, #256]	@ (800be40 <xTaskIncrementTick+0x154>)
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	4a3e      	ldr	r2, [pc, #248]	@ (800be3c <xTaskIncrementTick+0x150>)
 800bd42:	6013      	str	r3, [r2, #0]
 800bd44:	4a3e      	ldr	r2, [pc, #248]	@ (800be40 <xTaskIncrementTick+0x154>)
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	6013      	str	r3, [r2, #0]
 800bd4a:	4b3e      	ldr	r3, [pc, #248]	@ (800be44 <xTaskIncrementTick+0x158>)
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	3301      	adds	r3, #1
 800bd50:	4a3c      	ldr	r2, [pc, #240]	@ (800be44 <xTaskIncrementTick+0x158>)
 800bd52:	6013      	str	r3, [r2, #0]
 800bd54:	f000 fafc 	bl	800c350 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bd58:	4b3b      	ldr	r3, [pc, #236]	@ (800be48 <xTaskIncrementTick+0x15c>)
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	693a      	ldr	r2, [r7, #16]
 800bd5e:	429a      	cmp	r2, r3
 800bd60:	d349      	bcc.n	800bdf6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bd62:	4b36      	ldr	r3, [pc, #216]	@ (800be3c <xTaskIncrementTick+0x150>)
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d104      	bne.n	800bd76 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd6c:	4b36      	ldr	r3, [pc, #216]	@ (800be48 <xTaskIncrementTick+0x15c>)
 800bd6e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bd72:	601a      	str	r2, [r3, #0]
					break;
 800bd74:	e03f      	b.n	800bdf6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd76:	4b31      	ldr	r3, [pc, #196]	@ (800be3c <xTaskIncrementTick+0x150>)
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	68db      	ldr	r3, [r3, #12]
 800bd7c:	68db      	ldr	r3, [r3, #12]
 800bd7e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bd80:	68bb      	ldr	r3, [r7, #8]
 800bd82:	685b      	ldr	r3, [r3, #4]
 800bd84:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bd86:	693a      	ldr	r2, [r7, #16]
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	429a      	cmp	r2, r3
 800bd8c:	d203      	bcs.n	800bd96 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bd8e:	4a2e      	ldr	r2, [pc, #184]	@ (800be48 <xTaskIncrementTick+0x15c>)
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bd94:	e02f      	b.n	800bdf6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bd96:	68bb      	ldr	r3, [r7, #8]
 800bd98:	3304      	adds	r3, #4
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	f7fe fec2 	bl	800ab24 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bda0:	68bb      	ldr	r3, [r7, #8]
 800bda2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d004      	beq.n	800bdb2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bda8:	68bb      	ldr	r3, [r7, #8]
 800bdaa:	3318      	adds	r3, #24
 800bdac:	4618      	mov	r0, r3
 800bdae:	f7fe feb9 	bl	800ab24 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bdb2:	68bb      	ldr	r3, [r7, #8]
 800bdb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bdb6:	4b25      	ldr	r3, [pc, #148]	@ (800be4c <xTaskIncrementTick+0x160>)
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	429a      	cmp	r2, r3
 800bdbc:	d903      	bls.n	800bdc6 <xTaskIncrementTick+0xda>
 800bdbe:	68bb      	ldr	r3, [r7, #8]
 800bdc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bdc2:	4a22      	ldr	r2, [pc, #136]	@ (800be4c <xTaskIncrementTick+0x160>)
 800bdc4:	6013      	str	r3, [r2, #0]
 800bdc6:	68bb      	ldr	r3, [r7, #8]
 800bdc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bdca:	4613      	mov	r3, r2
 800bdcc:	009b      	lsls	r3, r3, #2
 800bdce:	4413      	add	r3, r2
 800bdd0:	009b      	lsls	r3, r3, #2
 800bdd2:	4a1f      	ldr	r2, [pc, #124]	@ (800be50 <xTaskIncrementTick+0x164>)
 800bdd4:	441a      	add	r2, r3
 800bdd6:	68bb      	ldr	r3, [r7, #8]
 800bdd8:	3304      	adds	r3, #4
 800bdda:	4619      	mov	r1, r3
 800bddc:	4610      	mov	r0, r2
 800bdde:	f7fe fe44 	bl	800aa6a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bde2:	68bb      	ldr	r3, [r7, #8]
 800bde4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bde6:	4b1b      	ldr	r3, [pc, #108]	@ (800be54 <xTaskIncrementTick+0x168>)
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bdec:	429a      	cmp	r2, r3
 800bdee:	d3b8      	bcc.n	800bd62 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800bdf0:	2301      	movs	r3, #1
 800bdf2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bdf4:	e7b5      	b.n	800bd62 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bdf6:	4b17      	ldr	r3, [pc, #92]	@ (800be54 <xTaskIncrementTick+0x168>)
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bdfc:	4914      	ldr	r1, [pc, #80]	@ (800be50 <xTaskIncrementTick+0x164>)
 800bdfe:	4613      	mov	r3, r2
 800be00:	009b      	lsls	r3, r3, #2
 800be02:	4413      	add	r3, r2
 800be04:	009b      	lsls	r3, r3, #2
 800be06:	440b      	add	r3, r1
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	2b01      	cmp	r3, #1
 800be0c:	d901      	bls.n	800be12 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800be0e:	2301      	movs	r3, #1
 800be10:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800be12:	4b11      	ldr	r3, [pc, #68]	@ (800be58 <xTaskIncrementTick+0x16c>)
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	2b00      	cmp	r3, #0
 800be18:	d007      	beq.n	800be2a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800be1a:	2301      	movs	r3, #1
 800be1c:	617b      	str	r3, [r7, #20]
 800be1e:	e004      	b.n	800be2a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800be20:	4b0e      	ldr	r3, [pc, #56]	@ (800be5c <xTaskIncrementTick+0x170>)
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	3301      	adds	r3, #1
 800be26:	4a0d      	ldr	r2, [pc, #52]	@ (800be5c <xTaskIncrementTick+0x170>)
 800be28:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800be2a:	697b      	ldr	r3, [r7, #20]
}
 800be2c:	4618      	mov	r0, r3
 800be2e:	3718      	adds	r7, #24
 800be30:	46bd      	mov	sp, r7
 800be32:	bd80      	pop	{r7, pc}
 800be34:	20000f78 	.word	0x20000f78
 800be38:	20000f54 	.word	0x20000f54
 800be3c:	20000f08 	.word	0x20000f08
 800be40:	20000f0c 	.word	0x20000f0c
 800be44:	20000f68 	.word	0x20000f68
 800be48:	20000f70 	.word	0x20000f70
 800be4c:	20000f58 	.word	0x20000f58
 800be50:	20000a80 	.word	0x20000a80
 800be54:	20000a7c 	.word	0x20000a7c
 800be58:	20000f64 	.word	0x20000f64
 800be5c:	20000f60 	.word	0x20000f60

0800be60 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800be60:	b580      	push	{r7, lr}
 800be62:	b086      	sub	sp, #24
 800be64:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800be66:	4b3b      	ldr	r3, [pc, #236]	@ (800bf54 <vTaskSwitchContext+0xf4>)
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d003      	beq.n	800be76 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800be6e:	4b3a      	ldr	r3, [pc, #232]	@ (800bf58 <vTaskSwitchContext+0xf8>)
 800be70:	2201      	movs	r2, #1
 800be72:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800be74:	e069      	b.n	800bf4a <vTaskSwitchContext+0xea>
		xYieldPending = pdFALSE;
 800be76:	4b38      	ldr	r3, [pc, #224]	@ (800bf58 <vTaskSwitchContext+0xf8>)
 800be78:	2200      	movs	r2, #0
 800be7a:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800be7c:	4b37      	ldr	r3, [pc, #220]	@ (800bf5c <vTaskSwitchContext+0xfc>)
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800be82:	613b      	str	r3, [r7, #16]
 800be84:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 800be88:	60fb      	str	r3, [r7, #12]
 800be8a:	693b      	ldr	r3, [r7, #16]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	68fa      	ldr	r2, [r7, #12]
 800be90:	429a      	cmp	r2, r3
 800be92:	d111      	bne.n	800beb8 <vTaskSwitchContext+0x58>
 800be94:	693b      	ldr	r3, [r7, #16]
 800be96:	3304      	adds	r3, #4
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	68fa      	ldr	r2, [r7, #12]
 800be9c:	429a      	cmp	r2, r3
 800be9e:	d10b      	bne.n	800beb8 <vTaskSwitchContext+0x58>
 800bea0:	693b      	ldr	r3, [r7, #16]
 800bea2:	3308      	adds	r3, #8
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	68fa      	ldr	r2, [r7, #12]
 800bea8:	429a      	cmp	r2, r3
 800beaa:	d105      	bne.n	800beb8 <vTaskSwitchContext+0x58>
 800beac:	693b      	ldr	r3, [r7, #16]
 800beae:	330c      	adds	r3, #12
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	68fa      	ldr	r2, [r7, #12]
 800beb4:	429a      	cmp	r2, r3
 800beb6:	d008      	beq.n	800beca <vTaskSwitchContext+0x6a>
 800beb8:	4b28      	ldr	r3, [pc, #160]	@ (800bf5c <vTaskSwitchContext+0xfc>)
 800beba:	681a      	ldr	r2, [r3, #0]
 800bebc:	4b27      	ldr	r3, [pc, #156]	@ (800bf5c <vTaskSwitchContext+0xfc>)
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	3334      	adds	r3, #52	@ 0x34
 800bec2:	4619      	mov	r1, r3
 800bec4:	4610      	mov	r0, r2
 800bec6:	f7f4 fb12 	bl	80004ee <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800beca:	4b25      	ldr	r3, [pc, #148]	@ (800bf60 <vTaskSwitchContext+0x100>)
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	617b      	str	r3, [r7, #20]
 800bed0:	e011      	b.n	800bef6 <vTaskSwitchContext+0x96>
 800bed2:	697b      	ldr	r3, [r7, #20]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d10b      	bne.n	800bef0 <vTaskSwitchContext+0x90>
	__asm volatile
 800bed8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bedc:	f383 8811 	msr	BASEPRI, r3
 800bee0:	f3bf 8f6f 	isb	sy
 800bee4:	f3bf 8f4f 	dsb	sy
 800bee8:	607b      	str	r3, [r7, #4]
}
 800beea:	bf00      	nop
 800beec:	bf00      	nop
 800beee:	e7fd      	b.n	800beec <vTaskSwitchContext+0x8c>
 800bef0:	697b      	ldr	r3, [r7, #20]
 800bef2:	3b01      	subs	r3, #1
 800bef4:	617b      	str	r3, [r7, #20]
 800bef6:	491b      	ldr	r1, [pc, #108]	@ (800bf64 <vTaskSwitchContext+0x104>)
 800bef8:	697a      	ldr	r2, [r7, #20]
 800befa:	4613      	mov	r3, r2
 800befc:	009b      	lsls	r3, r3, #2
 800befe:	4413      	add	r3, r2
 800bf00:	009b      	lsls	r3, r3, #2
 800bf02:	440b      	add	r3, r1
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d0e3      	beq.n	800bed2 <vTaskSwitchContext+0x72>
 800bf0a:	697a      	ldr	r2, [r7, #20]
 800bf0c:	4613      	mov	r3, r2
 800bf0e:	009b      	lsls	r3, r3, #2
 800bf10:	4413      	add	r3, r2
 800bf12:	009b      	lsls	r3, r3, #2
 800bf14:	4a13      	ldr	r2, [pc, #76]	@ (800bf64 <vTaskSwitchContext+0x104>)
 800bf16:	4413      	add	r3, r2
 800bf18:	60bb      	str	r3, [r7, #8]
 800bf1a:	68bb      	ldr	r3, [r7, #8]
 800bf1c:	685b      	ldr	r3, [r3, #4]
 800bf1e:	685a      	ldr	r2, [r3, #4]
 800bf20:	68bb      	ldr	r3, [r7, #8]
 800bf22:	605a      	str	r2, [r3, #4]
 800bf24:	68bb      	ldr	r3, [r7, #8]
 800bf26:	685a      	ldr	r2, [r3, #4]
 800bf28:	68bb      	ldr	r3, [r7, #8]
 800bf2a:	3308      	adds	r3, #8
 800bf2c:	429a      	cmp	r2, r3
 800bf2e:	d104      	bne.n	800bf3a <vTaskSwitchContext+0xda>
 800bf30:	68bb      	ldr	r3, [r7, #8]
 800bf32:	685b      	ldr	r3, [r3, #4]
 800bf34:	685a      	ldr	r2, [r3, #4]
 800bf36:	68bb      	ldr	r3, [r7, #8]
 800bf38:	605a      	str	r2, [r3, #4]
 800bf3a:	68bb      	ldr	r3, [r7, #8]
 800bf3c:	685b      	ldr	r3, [r3, #4]
 800bf3e:	68db      	ldr	r3, [r3, #12]
 800bf40:	4a06      	ldr	r2, [pc, #24]	@ (800bf5c <vTaskSwitchContext+0xfc>)
 800bf42:	6013      	str	r3, [r2, #0]
 800bf44:	4a06      	ldr	r2, [pc, #24]	@ (800bf60 <vTaskSwitchContext+0x100>)
 800bf46:	697b      	ldr	r3, [r7, #20]
 800bf48:	6013      	str	r3, [r2, #0]
}
 800bf4a:	bf00      	nop
 800bf4c:	3718      	adds	r7, #24
 800bf4e:	46bd      	mov	sp, r7
 800bf50:	bd80      	pop	{r7, pc}
 800bf52:	bf00      	nop
 800bf54:	20000f78 	.word	0x20000f78
 800bf58:	20000f64 	.word	0x20000f64
 800bf5c:	20000a7c 	.word	0x20000a7c
 800bf60:	20000f58 	.word	0x20000f58
 800bf64:	20000a80 	.word	0x20000a80

0800bf68 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bf68:	b580      	push	{r7, lr}
 800bf6a:	b084      	sub	sp, #16
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	6078      	str	r0, [r7, #4]
 800bf70:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d10b      	bne.n	800bf90 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800bf78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf7c:	f383 8811 	msr	BASEPRI, r3
 800bf80:	f3bf 8f6f 	isb	sy
 800bf84:	f3bf 8f4f 	dsb	sy
 800bf88:	60fb      	str	r3, [r7, #12]
}
 800bf8a:	bf00      	nop
 800bf8c:	bf00      	nop
 800bf8e:	e7fd      	b.n	800bf8c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bf90:	4b07      	ldr	r3, [pc, #28]	@ (800bfb0 <vTaskPlaceOnEventList+0x48>)
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	3318      	adds	r3, #24
 800bf96:	4619      	mov	r1, r3
 800bf98:	6878      	ldr	r0, [r7, #4]
 800bf9a:	f7fe fd8a 	bl	800aab2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bf9e:	2101      	movs	r1, #1
 800bfa0:	6838      	ldr	r0, [r7, #0]
 800bfa2:	f000 fa83 	bl	800c4ac <prvAddCurrentTaskToDelayedList>
}
 800bfa6:	bf00      	nop
 800bfa8:	3710      	adds	r7, #16
 800bfaa:	46bd      	mov	sp, r7
 800bfac:	bd80      	pop	{r7, pc}
 800bfae:	bf00      	nop
 800bfb0:	20000a7c 	.word	0x20000a7c

0800bfb4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bfb4:	b580      	push	{r7, lr}
 800bfb6:	b086      	sub	sp, #24
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	60f8      	str	r0, [r7, #12]
 800bfbc:	60b9      	str	r1, [r7, #8]
 800bfbe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d10b      	bne.n	800bfde <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800bfc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfca:	f383 8811 	msr	BASEPRI, r3
 800bfce:	f3bf 8f6f 	isb	sy
 800bfd2:	f3bf 8f4f 	dsb	sy
 800bfd6:	617b      	str	r3, [r7, #20]
}
 800bfd8:	bf00      	nop
 800bfda:	bf00      	nop
 800bfdc:	e7fd      	b.n	800bfda <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bfde:	4b0a      	ldr	r3, [pc, #40]	@ (800c008 <vTaskPlaceOnEventListRestricted+0x54>)
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	3318      	adds	r3, #24
 800bfe4:	4619      	mov	r1, r3
 800bfe6:	68f8      	ldr	r0, [r7, #12]
 800bfe8:	f7fe fd3f 	bl	800aa6a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d002      	beq.n	800bff8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800bff2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bff6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bff8:	6879      	ldr	r1, [r7, #4]
 800bffa:	68b8      	ldr	r0, [r7, #8]
 800bffc:	f000 fa56 	bl	800c4ac <prvAddCurrentTaskToDelayedList>
	}
 800c000:	bf00      	nop
 800c002:	3718      	adds	r7, #24
 800c004:	46bd      	mov	sp, r7
 800c006:	bd80      	pop	{r7, pc}
 800c008:	20000a7c 	.word	0x20000a7c

0800c00c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c00c:	b580      	push	{r7, lr}
 800c00e:	b086      	sub	sp, #24
 800c010:	af00      	add	r7, sp, #0
 800c012:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	68db      	ldr	r3, [r3, #12]
 800c018:	68db      	ldr	r3, [r3, #12]
 800c01a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c01c:	693b      	ldr	r3, [r7, #16]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d10b      	bne.n	800c03a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800c022:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c026:	f383 8811 	msr	BASEPRI, r3
 800c02a:	f3bf 8f6f 	isb	sy
 800c02e:	f3bf 8f4f 	dsb	sy
 800c032:	60fb      	str	r3, [r7, #12]
}
 800c034:	bf00      	nop
 800c036:	bf00      	nop
 800c038:	e7fd      	b.n	800c036 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c03a:	693b      	ldr	r3, [r7, #16]
 800c03c:	3318      	adds	r3, #24
 800c03e:	4618      	mov	r0, r3
 800c040:	f7fe fd70 	bl	800ab24 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c044:	4b1d      	ldr	r3, [pc, #116]	@ (800c0bc <xTaskRemoveFromEventList+0xb0>)
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d11d      	bne.n	800c088 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c04c:	693b      	ldr	r3, [r7, #16]
 800c04e:	3304      	adds	r3, #4
 800c050:	4618      	mov	r0, r3
 800c052:	f7fe fd67 	bl	800ab24 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c056:	693b      	ldr	r3, [r7, #16]
 800c058:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c05a:	4b19      	ldr	r3, [pc, #100]	@ (800c0c0 <xTaskRemoveFromEventList+0xb4>)
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	429a      	cmp	r2, r3
 800c060:	d903      	bls.n	800c06a <xTaskRemoveFromEventList+0x5e>
 800c062:	693b      	ldr	r3, [r7, #16]
 800c064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c066:	4a16      	ldr	r2, [pc, #88]	@ (800c0c0 <xTaskRemoveFromEventList+0xb4>)
 800c068:	6013      	str	r3, [r2, #0]
 800c06a:	693b      	ldr	r3, [r7, #16]
 800c06c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c06e:	4613      	mov	r3, r2
 800c070:	009b      	lsls	r3, r3, #2
 800c072:	4413      	add	r3, r2
 800c074:	009b      	lsls	r3, r3, #2
 800c076:	4a13      	ldr	r2, [pc, #76]	@ (800c0c4 <xTaskRemoveFromEventList+0xb8>)
 800c078:	441a      	add	r2, r3
 800c07a:	693b      	ldr	r3, [r7, #16]
 800c07c:	3304      	adds	r3, #4
 800c07e:	4619      	mov	r1, r3
 800c080:	4610      	mov	r0, r2
 800c082:	f7fe fcf2 	bl	800aa6a <vListInsertEnd>
 800c086:	e005      	b.n	800c094 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c088:	693b      	ldr	r3, [r7, #16]
 800c08a:	3318      	adds	r3, #24
 800c08c:	4619      	mov	r1, r3
 800c08e:	480e      	ldr	r0, [pc, #56]	@ (800c0c8 <xTaskRemoveFromEventList+0xbc>)
 800c090:	f7fe fceb 	bl	800aa6a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c094:	693b      	ldr	r3, [r7, #16]
 800c096:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c098:	4b0c      	ldr	r3, [pc, #48]	@ (800c0cc <xTaskRemoveFromEventList+0xc0>)
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c09e:	429a      	cmp	r2, r3
 800c0a0:	d905      	bls.n	800c0ae <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c0a2:	2301      	movs	r3, #1
 800c0a4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c0a6:	4b0a      	ldr	r3, [pc, #40]	@ (800c0d0 <xTaskRemoveFromEventList+0xc4>)
 800c0a8:	2201      	movs	r2, #1
 800c0aa:	601a      	str	r2, [r3, #0]
 800c0ac:	e001      	b.n	800c0b2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800c0ae:	2300      	movs	r3, #0
 800c0b0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c0b2:	697b      	ldr	r3, [r7, #20]
}
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	3718      	adds	r7, #24
 800c0b8:	46bd      	mov	sp, r7
 800c0ba:	bd80      	pop	{r7, pc}
 800c0bc:	20000f78 	.word	0x20000f78
 800c0c0:	20000f58 	.word	0x20000f58
 800c0c4:	20000a80 	.word	0x20000a80
 800c0c8:	20000f10 	.word	0x20000f10
 800c0cc:	20000a7c 	.word	0x20000a7c
 800c0d0:	20000f64 	.word	0x20000f64

0800c0d4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c0d4:	b480      	push	{r7}
 800c0d6:	b083      	sub	sp, #12
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c0dc:	4b06      	ldr	r3, [pc, #24]	@ (800c0f8 <vTaskInternalSetTimeOutState+0x24>)
 800c0de:	681a      	ldr	r2, [r3, #0]
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c0e4:	4b05      	ldr	r3, [pc, #20]	@ (800c0fc <vTaskInternalSetTimeOutState+0x28>)
 800c0e6:	681a      	ldr	r2, [r3, #0]
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	605a      	str	r2, [r3, #4]
}
 800c0ec:	bf00      	nop
 800c0ee:	370c      	adds	r7, #12
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f6:	4770      	bx	lr
 800c0f8:	20000f68 	.word	0x20000f68
 800c0fc:	20000f54 	.word	0x20000f54

0800c100 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c100:	b580      	push	{r7, lr}
 800c102:	b088      	sub	sp, #32
 800c104:	af00      	add	r7, sp, #0
 800c106:	6078      	str	r0, [r7, #4]
 800c108:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d10b      	bne.n	800c128 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800c110:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c114:	f383 8811 	msr	BASEPRI, r3
 800c118:	f3bf 8f6f 	isb	sy
 800c11c:	f3bf 8f4f 	dsb	sy
 800c120:	613b      	str	r3, [r7, #16]
}
 800c122:	bf00      	nop
 800c124:	bf00      	nop
 800c126:	e7fd      	b.n	800c124 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c128:	683b      	ldr	r3, [r7, #0]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d10b      	bne.n	800c146 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800c12e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c132:	f383 8811 	msr	BASEPRI, r3
 800c136:	f3bf 8f6f 	isb	sy
 800c13a:	f3bf 8f4f 	dsb	sy
 800c13e:	60fb      	str	r3, [r7, #12]
}
 800c140:	bf00      	nop
 800c142:	bf00      	nop
 800c144:	e7fd      	b.n	800c142 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800c146:	f000 fe8f 	bl	800ce68 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c14a:	4b1d      	ldr	r3, [pc, #116]	@ (800c1c0 <xTaskCheckForTimeOut+0xc0>)
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	685b      	ldr	r3, [r3, #4]
 800c154:	69ba      	ldr	r2, [r7, #24]
 800c156:	1ad3      	subs	r3, r2, r3
 800c158:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c15a:	683b      	ldr	r3, [r7, #0]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c162:	d102      	bne.n	800c16a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c164:	2300      	movs	r3, #0
 800c166:	61fb      	str	r3, [r7, #28]
 800c168:	e023      	b.n	800c1b2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	681a      	ldr	r2, [r3, #0]
 800c16e:	4b15      	ldr	r3, [pc, #84]	@ (800c1c4 <xTaskCheckForTimeOut+0xc4>)
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	429a      	cmp	r2, r3
 800c174:	d007      	beq.n	800c186 <xTaskCheckForTimeOut+0x86>
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	685b      	ldr	r3, [r3, #4]
 800c17a:	69ba      	ldr	r2, [r7, #24]
 800c17c:	429a      	cmp	r2, r3
 800c17e:	d302      	bcc.n	800c186 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c180:	2301      	movs	r3, #1
 800c182:	61fb      	str	r3, [r7, #28]
 800c184:	e015      	b.n	800c1b2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c186:	683b      	ldr	r3, [r7, #0]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	697a      	ldr	r2, [r7, #20]
 800c18c:	429a      	cmp	r2, r3
 800c18e:	d20b      	bcs.n	800c1a8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c190:	683b      	ldr	r3, [r7, #0]
 800c192:	681a      	ldr	r2, [r3, #0]
 800c194:	697b      	ldr	r3, [r7, #20]
 800c196:	1ad2      	subs	r2, r2, r3
 800c198:	683b      	ldr	r3, [r7, #0]
 800c19a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c19c:	6878      	ldr	r0, [r7, #4]
 800c19e:	f7ff ff99 	bl	800c0d4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	61fb      	str	r3, [r7, #28]
 800c1a6:	e004      	b.n	800c1b2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800c1a8:	683b      	ldr	r3, [r7, #0]
 800c1aa:	2200      	movs	r2, #0
 800c1ac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c1ae:	2301      	movs	r3, #1
 800c1b0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c1b2:	f000 fe8b 	bl	800cecc <vPortExitCritical>

	return xReturn;
 800c1b6:	69fb      	ldr	r3, [r7, #28]
}
 800c1b8:	4618      	mov	r0, r3
 800c1ba:	3720      	adds	r7, #32
 800c1bc:	46bd      	mov	sp, r7
 800c1be:	bd80      	pop	{r7, pc}
 800c1c0:	20000f54 	.word	0x20000f54
 800c1c4:	20000f68 	.word	0x20000f68

0800c1c8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c1c8:	b480      	push	{r7}
 800c1ca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c1cc:	4b03      	ldr	r3, [pc, #12]	@ (800c1dc <vTaskMissedYield+0x14>)
 800c1ce:	2201      	movs	r2, #1
 800c1d0:	601a      	str	r2, [r3, #0]
}
 800c1d2:	bf00      	nop
 800c1d4:	46bd      	mov	sp, r7
 800c1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1da:	4770      	bx	lr
 800c1dc:	20000f64 	.word	0x20000f64

0800c1e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c1e0:	b580      	push	{r7, lr}
 800c1e2:	b082      	sub	sp, #8
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c1e8:	f000 f854 	bl	800c294 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c1ec:	4b07      	ldr	r3, [pc, #28]	@ (800c20c <prvIdleTask+0x2c>)
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	2b01      	cmp	r3, #1
 800c1f2:	d907      	bls.n	800c204 <prvIdleTask+0x24>
			{
				taskYIELD();
 800c1f4:	4b06      	ldr	r3, [pc, #24]	@ (800c210 <prvIdleTask+0x30>)
 800c1f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c1fa:	601a      	str	r2, [r3, #0]
 800c1fc:	f3bf 8f4f 	dsb	sy
 800c200:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800c204:	f7f4 f96c 	bl	80004e0 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800c208:	e7ee      	b.n	800c1e8 <prvIdleTask+0x8>
 800c20a:	bf00      	nop
 800c20c:	20000a80 	.word	0x20000a80
 800c210:	e000ed04 	.word	0xe000ed04

0800c214 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c214:	b580      	push	{r7, lr}
 800c216:	b082      	sub	sp, #8
 800c218:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c21a:	2300      	movs	r3, #0
 800c21c:	607b      	str	r3, [r7, #4]
 800c21e:	e00c      	b.n	800c23a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c220:	687a      	ldr	r2, [r7, #4]
 800c222:	4613      	mov	r3, r2
 800c224:	009b      	lsls	r3, r3, #2
 800c226:	4413      	add	r3, r2
 800c228:	009b      	lsls	r3, r3, #2
 800c22a:	4a12      	ldr	r2, [pc, #72]	@ (800c274 <prvInitialiseTaskLists+0x60>)
 800c22c:	4413      	add	r3, r2
 800c22e:	4618      	mov	r0, r3
 800c230:	f7fe fbee 	bl	800aa10 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	3301      	adds	r3, #1
 800c238:	607b      	str	r3, [r7, #4]
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	2b37      	cmp	r3, #55	@ 0x37
 800c23e:	d9ef      	bls.n	800c220 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c240:	480d      	ldr	r0, [pc, #52]	@ (800c278 <prvInitialiseTaskLists+0x64>)
 800c242:	f7fe fbe5 	bl	800aa10 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c246:	480d      	ldr	r0, [pc, #52]	@ (800c27c <prvInitialiseTaskLists+0x68>)
 800c248:	f7fe fbe2 	bl	800aa10 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c24c:	480c      	ldr	r0, [pc, #48]	@ (800c280 <prvInitialiseTaskLists+0x6c>)
 800c24e:	f7fe fbdf 	bl	800aa10 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c252:	480c      	ldr	r0, [pc, #48]	@ (800c284 <prvInitialiseTaskLists+0x70>)
 800c254:	f7fe fbdc 	bl	800aa10 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c258:	480b      	ldr	r0, [pc, #44]	@ (800c288 <prvInitialiseTaskLists+0x74>)
 800c25a:	f7fe fbd9 	bl	800aa10 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c25e:	4b0b      	ldr	r3, [pc, #44]	@ (800c28c <prvInitialiseTaskLists+0x78>)
 800c260:	4a05      	ldr	r2, [pc, #20]	@ (800c278 <prvInitialiseTaskLists+0x64>)
 800c262:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c264:	4b0a      	ldr	r3, [pc, #40]	@ (800c290 <prvInitialiseTaskLists+0x7c>)
 800c266:	4a05      	ldr	r2, [pc, #20]	@ (800c27c <prvInitialiseTaskLists+0x68>)
 800c268:	601a      	str	r2, [r3, #0]
}
 800c26a:	bf00      	nop
 800c26c:	3708      	adds	r7, #8
 800c26e:	46bd      	mov	sp, r7
 800c270:	bd80      	pop	{r7, pc}
 800c272:	bf00      	nop
 800c274:	20000a80 	.word	0x20000a80
 800c278:	20000ee0 	.word	0x20000ee0
 800c27c:	20000ef4 	.word	0x20000ef4
 800c280:	20000f10 	.word	0x20000f10
 800c284:	20000f24 	.word	0x20000f24
 800c288:	20000f3c 	.word	0x20000f3c
 800c28c:	20000f08 	.word	0x20000f08
 800c290:	20000f0c 	.word	0x20000f0c

0800c294 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c294:	b580      	push	{r7, lr}
 800c296:	b082      	sub	sp, #8
 800c298:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c29a:	e019      	b.n	800c2d0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c29c:	f000 fde4 	bl	800ce68 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c2a0:	4b10      	ldr	r3, [pc, #64]	@ (800c2e4 <prvCheckTasksWaitingTermination+0x50>)
 800c2a2:	68db      	ldr	r3, [r3, #12]
 800c2a4:	68db      	ldr	r3, [r3, #12]
 800c2a6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	3304      	adds	r3, #4
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	f7fe fc39 	bl	800ab24 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c2b2:	4b0d      	ldr	r3, [pc, #52]	@ (800c2e8 <prvCheckTasksWaitingTermination+0x54>)
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	3b01      	subs	r3, #1
 800c2b8:	4a0b      	ldr	r2, [pc, #44]	@ (800c2e8 <prvCheckTasksWaitingTermination+0x54>)
 800c2ba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c2bc:	4b0b      	ldr	r3, [pc, #44]	@ (800c2ec <prvCheckTasksWaitingTermination+0x58>)
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	3b01      	subs	r3, #1
 800c2c2:	4a0a      	ldr	r2, [pc, #40]	@ (800c2ec <prvCheckTasksWaitingTermination+0x58>)
 800c2c4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c2c6:	f000 fe01 	bl	800cecc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c2ca:	6878      	ldr	r0, [r7, #4]
 800c2cc:	f000 f810 	bl	800c2f0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c2d0:	4b06      	ldr	r3, [pc, #24]	@ (800c2ec <prvCheckTasksWaitingTermination+0x58>)
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d1e1      	bne.n	800c29c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c2d8:	bf00      	nop
 800c2da:	bf00      	nop
 800c2dc:	3708      	adds	r7, #8
 800c2de:	46bd      	mov	sp, r7
 800c2e0:	bd80      	pop	{r7, pc}
 800c2e2:	bf00      	nop
 800c2e4:	20000f24 	.word	0x20000f24
 800c2e8:	20000f50 	.word	0x20000f50
 800c2ec:	20000f38 	.word	0x20000f38

0800c2f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c2f0:	b580      	push	{r7, lr}
 800c2f2:	b084      	sub	sp, #16
 800c2f4:	af00      	add	r7, sp, #0
 800c2f6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d108      	bne.n	800c314 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c306:	4618      	mov	r0, r3
 800c308:	f000 ffa4 	bl	800d254 <vPortFree>
				vPortFree( pxTCB );
 800c30c:	6878      	ldr	r0, [r7, #4]
 800c30e:	f000 ffa1 	bl	800d254 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c312:	e019      	b.n	800c348 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800c31a:	2b01      	cmp	r3, #1
 800c31c:	d103      	bne.n	800c326 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800c31e:	6878      	ldr	r0, [r7, #4]
 800c320:	f000 ff98 	bl	800d254 <vPortFree>
	}
 800c324:	e010      	b.n	800c348 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800c32c:	2b02      	cmp	r3, #2
 800c32e:	d00b      	beq.n	800c348 <prvDeleteTCB+0x58>
	__asm volatile
 800c330:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c334:	f383 8811 	msr	BASEPRI, r3
 800c338:	f3bf 8f6f 	isb	sy
 800c33c:	f3bf 8f4f 	dsb	sy
 800c340:	60fb      	str	r3, [r7, #12]
}
 800c342:	bf00      	nop
 800c344:	bf00      	nop
 800c346:	e7fd      	b.n	800c344 <prvDeleteTCB+0x54>
	}
 800c348:	bf00      	nop
 800c34a:	3710      	adds	r7, #16
 800c34c:	46bd      	mov	sp, r7
 800c34e:	bd80      	pop	{r7, pc}

0800c350 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c350:	b480      	push	{r7}
 800c352:	b083      	sub	sp, #12
 800c354:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c356:	4b0c      	ldr	r3, [pc, #48]	@ (800c388 <prvResetNextTaskUnblockTime+0x38>)
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d104      	bne.n	800c36a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c360:	4b0a      	ldr	r3, [pc, #40]	@ (800c38c <prvResetNextTaskUnblockTime+0x3c>)
 800c362:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c366:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c368:	e008      	b.n	800c37c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c36a:	4b07      	ldr	r3, [pc, #28]	@ (800c388 <prvResetNextTaskUnblockTime+0x38>)
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	68db      	ldr	r3, [r3, #12]
 800c370:	68db      	ldr	r3, [r3, #12]
 800c372:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	685b      	ldr	r3, [r3, #4]
 800c378:	4a04      	ldr	r2, [pc, #16]	@ (800c38c <prvResetNextTaskUnblockTime+0x3c>)
 800c37a:	6013      	str	r3, [r2, #0]
}
 800c37c:	bf00      	nop
 800c37e:	370c      	adds	r7, #12
 800c380:	46bd      	mov	sp, r7
 800c382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c386:	4770      	bx	lr
 800c388:	20000f08 	.word	0x20000f08
 800c38c:	20000f70 	.word	0x20000f70

0800c390 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c390:	b480      	push	{r7}
 800c392:	b083      	sub	sp, #12
 800c394:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c396:	4b0b      	ldr	r3, [pc, #44]	@ (800c3c4 <xTaskGetSchedulerState+0x34>)
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d102      	bne.n	800c3a4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c39e:	2301      	movs	r3, #1
 800c3a0:	607b      	str	r3, [r7, #4]
 800c3a2:	e008      	b.n	800c3b6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c3a4:	4b08      	ldr	r3, [pc, #32]	@ (800c3c8 <xTaskGetSchedulerState+0x38>)
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d102      	bne.n	800c3b2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c3ac:	2302      	movs	r3, #2
 800c3ae:	607b      	str	r3, [r7, #4]
 800c3b0:	e001      	b.n	800c3b6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c3b2:	2300      	movs	r3, #0
 800c3b4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c3b6:	687b      	ldr	r3, [r7, #4]
	}
 800c3b8:	4618      	mov	r0, r3
 800c3ba:	370c      	adds	r7, #12
 800c3bc:	46bd      	mov	sp, r7
 800c3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c2:	4770      	bx	lr
 800c3c4:	20000f5c 	.word	0x20000f5c
 800c3c8:	20000f78 	.word	0x20000f78

0800c3cc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c3cc:	b580      	push	{r7, lr}
 800c3ce:	b086      	sub	sp, #24
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c3d8:	2300      	movs	r3, #0
 800c3da:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d058      	beq.n	800c494 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c3e2:	4b2f      	ldr	r3, [pc, #188]	@ (800c4a0 <xTaskPriorityDisinherit+0xd4>)
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	693a      	ldr	r2, [r7, #16]
 800c3e8:	429a      	cmp	r2, r3
 800c3ea:	d00b      	beq.n	800c404 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800c3ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3f0:	f383 8811 	msr	BASEPRI, r3
 800c3f4:	f3bf 8f6f 	isb	sy
 800c3f8:	f3bf 8f4f 	dsb	sy
 800c3fc:	60fb      	str	r3, [r7, #12]
}
 800c3fe:	bf00      	nop
 800c400:	bf00      	nop
 800c402:	e7fd      	b.n	800c400 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c404:	693b      	ldr	r3, [r7, #16]
 800c406:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d10b      	bne.n	800c424 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800c40c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c410:	f383 8811 	msr	BASEPRI, r3
 800c414:	f3bf 8f6f 	isb	sy
 800c418:	f3bf 8f4f 	dsb	sy
 800c41c:	60bb      	str	r3, [r7, #8]
}
 800c41e:	bf00      	nop
 800c420:	bf00      	nop
 800c422:	e7fd      	b.n	800c420 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800c424:	693b      	ldr	r3, [r7, #16]
 800c426:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c428:	1e5a      	subs	r2, r3, #1
 800c42a:	693b      	ldr	r3, [r7, #16]
 800c42c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c42e:	693b      	ldr	r3, [r7, #16]
 800c430:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c432:	693b      	ldr	r3, [r7, #16]
 800c434:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c436:	429a      	cmp	r2, r3
 800c438:	d02c      	beq.n	800c494 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c43a:	693b      	ldr	r3, [r7, #16]
 800c43c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d128      	bne.n	800c494 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c442:	693b      	ldr	r3, [r7, #16]
 800c444:	3304      	adds	r3, #4
 800c446:	4618      	mov	r0, r3
 800c448:	f7fe fb6c 	bl	800ab24 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c44c:	693b      	ldr	r3, [r7, #16]
 800c44e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c450:	693b      	ldr	r3, [r7, #16]
 800c452:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c454:	693b      	ldr	r3, [r7, #16]
 800c456:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c458:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c45c:	693b      	ldr	r3, [r7, #16]
 800c45e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c460:	693b      	ldr	r3, [r7, #16]
 800c462:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c464:	4b0f      	ldr	r3, [pc, #60]	@ (800c4a4 <xTaskPriorityDisinherit+0xd8>)
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	429a      	cmp	r2, r3
 800c46a:	d903      	bls.n	800c474 <xTaskPriorityDisinherit+0xa8>
 800c46c:	693b      	ldr	r3, [r7, #16]
 800c46e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c470:	4a0c      	ldr	r2, [pc, #48]	@ (800c4a4 <xTaskPriorityDisinherit+0xd8>)
 800c472:	6013      	str	r3, [r2, #0]
 800c474:	693b      	ldr	r3, [r7, #16]
 800c476:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c478:	4613      	mov	r3, r2
 800c47a:	009b      	lsls	r3, r3, #2
 800c47c:	4413      	add	r3, r2
 800c47e:	009b      	lsls	r3, r3, #2
 800c480:	4a09      	ldr	r2, [pc, #36]	@ (800c4a8 <xTaskPriorityDisinherit+0xdc>)
 800c482:	441a      	add	r2, r3
 800c484:	693b      	ldr	r3, [r7, #16]
 800c486:	3304      	adds	r3, #4
 800c488:	4619      	mov	r1, r3
 800c48a:	4610      	mov	r0, r2
 800c48c:	f7fe faed 	bl	800aa6a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c490:	2301      	movs	r3, #1
 800c492:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c494:	697b      	ldr	r3, [r7, #20]
	}
 800c496:	4618      	mov	r0, r3
 800c498:	3718      	adds	r7, #24
 800c49a:	46bd      	mov	sp, r7
 800c49c:	bd80      	pop	{r7, pc}
 800c49e:	bf00      	nop
 800c4a0:	20000a7c 	.word	0x20000a7c
 800c4a4:	20000f58 	.word	0x20000f58
 800c4a8:	20000a80 	.word	0x20000a80

0800c4ac <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c4ac:	b580      	push	{r7, lr}
 800c4ae:	b084      	sub	sp, #16
 800c4b0:	af00      	add	r7, sp, #0
 800c4b2:	6078      	str	r0, [r7, #4]
 800c4b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c4b6:	4b21      	ldr	r3, [pc, #132]	@ (800c53c <prvAddCurrentTaskToDelayedList+0x90>)
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c4bc:	4b20      	ldr	r3, [pc, #128]	@ (800c540 <prvAddCurrentTaskToDelayedList+0x94>)
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	3304      	adds	r3, #4
 800c4c2:	4618      	mov	r0, r3
 800c4c4:	f7fe fb2e 	bl	800ab24 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c4ce:	d10a      	bne.n	800c4e6 <prvAddCurrentTaskToDelayedList+0x3a>
 800c4d0:	683b      	ldr	r3, [r7, #0]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d007      	beq.n	800c4e6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c4d6:	4b1a      	ldr	r3, [pc, #104]	@ (800c540 <prvAddCurrentTaskToDelayedList+0x94>)
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	3304      	adds	r3, #4
 800c4dc:	4619      	mov	r1, r3
 800c4de:	4819      	ldr	r0, [pc, #100]	@ (800c544 <prvAddCurrentTaskToDelayedList+0x98>)
 800c4e0:	f7fe fac3 	bl	800aa6a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c4e4:	e026      	b.n	800c534 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c4e6:	68fa      	ldr	r2, [r7, #12]
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	4413      	add	r3, r2
 800c4ec:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c4ee:	4b14      	ldr	r3, [pc, #80]	@ (800c540 <prvAddCurrentTaskToDelayedList+0x94>)
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	68ba      	ldr	r2, [r7, #8]
 800c4f4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c4f6:	68ba      	ldr	r2, [r7, #8]
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	429a      	cmp	r2, r3
 800c4fc:	d209      	bcs.n	800c512 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c4fe:	4b12      	ldr	r3, [pc, #72]	@ (800c548 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c500:	681a      	ldr	r2, [r3, #0]
 800c502:	4b0f      	ldr	r3, [pc, #60]	@ (800c540 <prvAddCurrentTaskToDelayedList+0x94>)
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	3304      	adds	r3, #4
 800c508:	4619      	mov	r1, r3
 800c50a:	4610      	mov	r0, r2
 800c50c:	f7fe fad1 	bl	800aab2 <vListInsert>
}
 800c510:	e010      	b.n	800c534 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c512:	4b0e      	ldr	r3, [pc, #56]	@ (800c54c <prvAddCurrentTaskToDelayedList+0xa0>)
 800c514:	681a      	ldr	r2, [r3, #0]
 800c516:	4b0a      	ldr	r3, [pc, #40]	@ (800c540 <prvAddCurrentTaskToDelayedList+0x94>)
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	3304      	adds	r3, #4
 800c51c:	4619      	mov	r1, r3
 800c51e:	4610      	mov	r0, r2
 800c520:	f7fe fac7 	bl	800aab2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c524:	4b0a      	ldr	r3, [pc, #40]	@ (800c550 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	68ba      	ldr	r2, [r7, #8]
 800c52a:	429a      	cmp	r2, r3
 800c52c:	d202      	bcs.n	800c534 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c52e:	4a08      	ldr	r2, [pc, #32]	@ (800c550 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c530:	68bb      	ldr	r3, [r7, #8]
 800c532:	6013      	str	r3, [r2, #0]
}
 800c534:	bf00      	nop
 800c536:	3710      	adds	r7, #16
 800c538:	46bd      	mov	sp, r7
 800c53a:	bd80      	pop	{r7, pc}
 800c53c:	20000f54 	.word	0x20000f54
 800c540:	20000a7c 	.word	0x20000a7c
 800c544:	20000f3c 	.word	0x20000f3c
 800c548:	20000f0c 	.word	0x20000f0c
 800c54c:	20000f08 	.word	0x20000f08
 800c550:	20000f70 	.word	0x20000f70

0800c554 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c554:	b580      	push	{r7, lr}
 800c556:	b08a      	sub	sp, #40	@ 0x28
 800c558:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c55a:	2300      	movs	r3, #0
 800c55c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c55e:	f000 fb13 	bl	800cb88 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c562:	4b1d      	ldr	r3, [pc, #116]	@ (800c5d8 <xTimerCreateTimerTask+0x84>)
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	2b00      	cmp	r3, #0
 800c568:	d021      	beq.n	800c5ae <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c56a:	2300      	movs	r3, #0
 800c56c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c56e:	2300      	movs	r3, #0
 800c570:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c572:	1d3a      	adds	r2, r7, #4
 800c574:	f107 0108 	add.w	r1, r7, #8
 800c578:	f107 030c 	add.w	r3, r7, #12
 800c57c:	4618      	mov	r0, r3
 800c57e:	f7fe fa2d 	bl	800a9dc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c582:	6879      	ldr	r1, [r7, #4]
 800c584:	68bb      	ldr	r3, [r7, #8]
 800c586:	68fa      	ldr	r2, [r7, #12]
 800c588:	9202      	str	r2, [sp, #8]
 800c58a:	9301      	str	r3, [sp, #4]
 800c58c:	2302      	movs	r3, #2
 800c58e:	9300      	str	r3, [sp, #0]
 800c590:	2300      	movs	r3, #0
 800c592:	460a      	mov	r2, r1
 800c594:	4911      	ldr	r1, [pc, #68]	@ (800c5dc <xTimerCreateTimerTask+0x88>)
 800c596:	4812      	ldr	r0, [pc, #72]	@ (800c5e0 <xTimerCreateTimerTask+0x8c>)
 800c598:	f7ff f8a6 	bl	800b6e8 <xTaskCreateStatic>
 800c59c:	4603      	mov	r3, r0
 800c59e:	4a11      	ldr	r2, [pc, #68]	@ (800c5e4 <xTimerCreateTimerTask+0x90>)
 800c5a0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c5a2:	4b10      	ldr	r3, [pc, #64]	@ (800c5e4 <xTimerCreateTimerTask+0x90>)
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d001      	beq.n	800c5ae <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c5aa:	2301      	movs	r3, #1
 800c5ac:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c5ae:	697b      	ldr	r3, [r7, #20]
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d10b      	bne.n	800c5cc <xTimerCreateTimerTask+0x78>
	__asm volatile
 800c5b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5b8:	f383 8811 	msr	BASEPRI, r3
 800c5bc:	f3bf 8f6f 	isb	sy
 800c5c0:	f3bf 8f4f 	dsb	sy
 800c5c4:	613b      	str	r3, [r7, #16]
}
 800c5c6:	bf00      	nop
 800c5c8:	bf00      	nop
 800c5ca:	e7fd      	b.n	800c5c8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c5cc:	697b      	ldr	r3, [r7, #20]
}
 800c5ce:	4618      	mov	r0, r3
 800c5d0:	3718      	adds	r7, #24
 800c5d2:	46bd      	mov	sp, r7
 800c5d4:	bd80      	pop	{r7, pc}
 800c5d6:	bf00      	nop
 800c5d8:	20000fac 	.word	0x20000fac
 800c5dc:	0800dd98 	.word	0x0800dd98
 800c5e0:	0800c721 	.word	0x0800c721
 800c5e4:	20000fb0 	.word	0x20000fb0

0800c5e8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c5e8:	b580      	push	{r7, lr}
 800c5ea:	b08a      	sub	sp, #40	@ 0x28
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	60f8      	str	r0, [r7, #12]
 800c5f0:	60b9      	str	r1, [r7, #8]
 800c5f2:	607a      	str	r2, [r7, #4]
 800c5f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d10b      	bne.n	800c618 <xTimerGenericCommand+0x30>
	__asm volatile
 800c600:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c604:	f383 8811 	msr	BASEPRI, r3
 800c608:	f3bf 8f6f 	isb	sy
 800c60c:	f3bf 8f4f 	dsb	sy
 800c610:	623b      	str	r3, [r7, #32]
}
 800c612:	bf00      	nop
 800c614:	bf00      	nop
 800c616:	e7fd      	b.n	800c614 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c618:	4b19      	ldr	r3, [pc, #100]	@ (800c680 <xTimerGenericCommand+0x98>)
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d02a      	beq.n	800c676 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c620:	68bb      	ldr	r3, [r7, #8]
 800c622:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c62c:	68bb      	ldr	r3, [r7, #8]
 800c62e:	2b05      	cmp	r3, #5
 800c630:	dc18      	bgt.n	800c664 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c632:	f7ff fead 	bl	800c390 <xTaskGetSchedulerState>
 800c636:	4603      	mov	r3, r0
 800c638:	2b02      	cmp	r3, #2
 800c63a:	d109      	bne.n	800c650 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c63c:	4b10      	ldr	r3, [pc, #64]	@ (800c680 <xTimerGenericCommand+0x98>)
 800c63e:	6818      	ldr	r0, [r3, #0]
 800c640:	f107 0110 	add.w	r1, r7, #16
 800c644:	2300      	movs	r3, #0
 800c646:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c648:	f7fe fbdc 	bl	800ae04 <xQueueGenericSend>
 800c64c:	6278      	str	r0, [r7, #36]	@ 0x24
 800c64e:	e012      	b.n	800c676 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c650:	4b0b      	ldr	r3, [pc, #44]	@ (800c680 <xTimerGenericCommand+0x98>)
 800c652:	6818      	ldr	r0, [r3, #0]
 800c654:	f107 0110 	add.w	r1, r7, #16
 800c658:	2300      	movs	r3, #0
 800c65a:	2200      	movs	r2, #0
 800c65c:	f7fe fbd2 	bl	800ae04 <xQueueGenericSend>
 800c660:	6278      	str	r0, [r7, #36]	@ 0x24
 800c662:	e008      	b.n	800c676 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c664:	4b06      	ldr	r3, [pc, #24]	@ (800c680 <xTimerGenericCommand+0x98>)
 800c666:	6818      	ldr	r0, [r3, #0]
 800c668:	f107 0110 	add.w	r1, r7, #16
 800c66c:	2300      	movs	r3, #0
 800c66e:	683a      	ldr	r2, [r7, #0]
 800c670:	f7fe fcca 	bl	800b008 <xQueueGenericSendFromISR>
 800c674:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c678:	4618      	mov	r0, r3
 800c67a:	3728      	adds	r7, #40	@ 0x28
 800c67c:	46bd      	mov	sp, r7
 800c67e:	bd80      	pop	{r7, pc}
 800c680:	20000fac 	.word	0x20000fac

0800c684 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c684:	b580      	push	{r7, lr}
 800c686:	b088      	sub	sp, #32
 800c688:	af02      	add	r7, sp, #8
 800c68a:	6078      	str	r0, [r7, #4]
 800c68c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c68e:	4b23      	ldr	r3, [pc, #140]	@ (800c71c <prvProcessExpiredTimer+0x98>)
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	68db      	ldr	r3, [r3, #12]
 800c694:	68db      	ldr	r3, [r3, #12]
 800c696:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c698:	697b      	ldr	r3, [r7, #20]
 800c69a:	3304      	adds	r3, #4
 800c69c:	4618      	mov	r0, r3
 800c69e:	f7fe fa41 	bl	800ab24 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c6a2:	697b      	ldr	r3, [r7, #20]
 800c6a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c6a8:	f003 0304 	and.w	r3, r3, #4
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d023      	beq.n	800c6f8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c6b0:	697b      	ldr	r3, [r7, #20]
 800c6b2:	699a      	ldr	r2, [r3, #24]
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	18d1      	adds	r1, r2, r3
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	683a      	ldr	r2, [r7, #0]
 800c6bc:	6978      	ldr	r0, [r7, #20]
 800c6be:	f000 f8d5 	bl	800c86c <prvInsertTimerInActiveList>
 800c6c2:	4603      	mov	r3, r0
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d020      	beq.n	800c70a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c6c8:	2300      	movs	r3, #0
 800c6ca:	9300      	str	r3, [sp, #0]
 800c6cc:	2300      	movs	r3, #0
 800c6ce:	687a      	ldr	r2, [r7, #4]
 800c6d0:	2100      	movs	r1, #0
 800c6d2:	6978      	ldr	r0, [r7, #20]
 800c6d4:	f7ff ff88 	bl	800c5e8 <xTimerGenericCommand>
 800c6d8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c6da:	693b      	ldr	r3, [r7, #16]
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d114      	bne.n	800c70a <prvProcessExpiredTimer+0x86>
	__asm volatile
 800c6e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6e4:	f383 8811 	msr	BASEPRI, r3
 800c6e8:	f3bf 8f6f 	isb	sy
 800c6ec:	f3bf 8f4f 	dsb	sy
 800c6f0:	60fb      	str	r3, [r7, #12]
}
 800c6f2:	bf00      	nop
 800c6f4:	bf00      	nop
 800c6f6:	e7fd      	b.n	800c6f4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c6f8:	697b      	ldr	r3, [r7, #20]
 800c6fa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c6fe:	f023 0301 	bic.w	r3, r3, #1
 800c702:	b2da      	uxtb	r2, r3
 800c704:	697b      	ldr	r3, [r7, #20]
 800c706:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c70a:	697b      	ldr	r3, [r7, #20]
 800c70c:	6a1b      	ldr	r3, [r3, #32]
 800c70e:	6978      	ldr	r0, [r7, #20]
 800c710:	4798      	blx	r3
}
 800c712:	bf00      	nop
 800c714:	3718      	adds	r7, #24
 800c716:	46bd      	mov	sp, r7
 800c718:	bd80      	pop	{r7, pc}
 800c71a:	bf00      	nop
 800c71c:	20000fa4 	.word	0x20000fa4

0800c720 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c720:	b580      	push	{r7, lr}
 800c722:	b084      	sub	sp, #16
 800c724:	af00      	add	r7, sp, #0
 800c726:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c728:	f107 0308 	add.w	r3, r7, #8
 800c72c:	4618      	mov	r0, r3
 800c72e:	f000 f859 	bl	800c7e4 <prvGetNextExpireTime>
 800c732:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c734:	68bb      	ldr	r3, [r7, #8]
 800c736:	4619      	mov	r1, r3
 800c738:	68f8      	ldr	r0, [r7, #12]
 800c73a:	f000 f805 	bl	800c748 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c73e:	f000 f8d7 	bl	800c8f0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c742:	bf00      	nop
 800c744:	e7f0      	b.n	800c728 <prvTimerTask+0x8>
	...

0800c748 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c748:	b580      	push	{r7, lr}
 800c74a:	b084      	sub	sp, #16
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	6078      	str	r0, [r7, #4]
 800c750:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c752:	f7ff fa0f 	bl	800bb74 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c756:	f107 0308 	add.w	r3, r7, #8
 800c75a:	4618      	mov	r0, r3
 800c75c:	f000 f866 	bl	800c82c <prvSampleTimeNow>
 800c760:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c762:	68bb      	ldr	r3, [r7, #8]
 800c764:	2b00      	cmp	r3, #0
 800c766:	d130      	bne.n	800c7ca <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c768:	683b      	ldr	r3, [r7, #0]
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d10a      	bne.n	800c784 <prvProcessTimerOrBlockTask+0x3c>
 800c76e:	687a      	ldr	r2, [r7, #4]
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	429a      	cmp	r2, r3
 800c774:	d806      	bhi.n	800c784 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c776:	f7ff fa0b 	bl	800bb90 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c77a:	68f9      	ldr	r1, [r7, #12]
 800c77c:	6878      	ldr	r0, [r7, #4]
 800c77e:	f7ff ff81 	bl	800c684 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c782:	e024      	b.n	800c7ce <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c784:	683b      	ldr	r3, [r7, #0]
 800c786:	2b00      	cmp	r3, #0
 800c788:	d008      	beq.n	800c79c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c78a:	4b13      	ldr	r3, [pc, #76]	@ (800c7d8 <prvProcessTimerOrBlockTask+0x90>)
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	2b00      	cmp	r3, #0
 800c792:	d101      	bne.n	800c798 <prvProcessTimerOrBlockTask+0x50>
 800c794:	2301      	movs	r3, #1
 800c796:	e000      	b.n	800c79a <prvProcessTimerOrBlockTask+0x52>
 800c798:	2300      	movs	r3, #0
 800c79a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c79c:	4b0f      	ldr	r3, [pc, #60]	@ (800c7dc <prvProcessTimerOrBlockTask+0x94>)
 800c79e:	6818      	ldr	r0, [r3, #0]
 800c7a0:	687a      	ldr	r2, [r7, #4]
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	1ad3      	subs	r3, r2, r3
 800c7a6:	683a      	ldr	r2, [r7, #0]
 800c7a8:	4619      	mov	r1, r3
 800c7aa:	f7fe ff69 	bl	800b680 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c7ae:	f7ff f9ef 	bl	800bb90 <xTaskResumeAll>
 800c7b2:	4603      	mov	r3, r0
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d10a      	bne.n	800c7ce <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c7b8:	4b09      	ldr	r3, [pc, #36]	@ (800c7e0 <prvProcessTimerOrBlockTask+0x98>)
 800c7ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c7be:	601a      	str	r2, [r3, #0]
 800c7c0:	f3bf 8f4f 	dsb	sy
 800c7c4:	f3bf 8f6f 	isb	sy
}
 800c7c8:	e001      	b.n	800c7ce <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c7ca:	f7ff f9e1 	bl	800bb90 <xTaskResumeAll>
}
 800c7ce:	bf00      	nop
 800c7d0:	3710      	adds	r7, #16
 800c7d2:	46bd      	mov	sp, r7
 800c7d4:	bd80      	pop	{r7, pc}
 800c7d6:	bf00      	nop
 800c7d8:	20000fa8 	.word	0x20000fa8
 800c7dc:	20000fac 	.word	0x20000fac
 800c7e0:	e000ed04 	.word	0xe000ed04

0800c7e4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c7e4:	b480      	push	{r7}
 800c7e6:	b085      	sub	sp, #20
 800c7e8:	af00      	add	r7, sp, #0
 800c7ea:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c7ec:	4b0e      	ldr	r3, [pc, #56]	@ (800c828 <prvGetNextExpireTime+0x44>)
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d101      	bne.n	800c7fa <prvGetNextExpireTime+0x16>
 800c7f6:	2201      	movs	r2, #1
 800c7f8:	e000      	b.n	800c7fc <prvGetNextExpireTime+0x18>
 800c7fa:	2200      	movs	r2, #0
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	2b00      	cmp	r3, #0
 800c806:	d105      	bne.n	800c814 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c808:	4b07      	ldr	r3, [pc, #28]	@ (800c828 <prvGetNextExpireTime+0x44>)
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	68db      	ldr	r3, [r3, #12]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	60fb      	str	r3, [r7, #12]
 800c812:	e001      	b.n	800c818 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c814:	2300      	movs	r3, #0
 800c816:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c818:	68fb      	ldr	r3, [r7, #12]
}
 800c81a:	4618      	mov	r0, r3
 800c81c:	3714      	adds	r7, #20
 800c81e:	46bd      	mov	sp, r7
 800c820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c824:	4770      	bx	lr
 800c826:	bf00      	nop
 800c828:	20000fa4 	.word	0x20000fa4

0800c82c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c82c:	b580      	push	{r7, lr}
 800c82e:	b084      	sub	sp, #16
 800c830:	af00      	add	r7, sp, #0
 800c832:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c834:	f7ff fa4a 	bl	800bccc <xTaskGetTickCount>
 800c838:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c83a:	4b0b      	ldr	r3, [pc, #44]	@ (800c868 <prvSampleTimeNow+0x3c>)
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	68fa      	ldr	r2, [r7, #12]
 800c840:	429a      	cmp	r2, r3
 800c842:	d205      	bcs.n	800c850 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c844:	f000 f93a 	bl	800cabc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	2201      	movs	r2, #1
 800c84c:	601a      	str	r2, [r3, #0]
 800c84e:	e002      	b.n	800c856 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	2200      	movs	r2, #0
 800c854:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c856:	4a04      	ldr	r2, [pc, #16]	@ (800c868 <prvSampleTimeNow+0x3c>)
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c85c:	68fb      	ldr	r3, [r7, #12]
}
 800c85e:	4618      	mov	r0, r3
 800c860:	3710      	adds	r7, #16
 800c862:	46bd      	mov	sp, r7
 800c864:	bd80      	pop	{r7, pc}
 800c866:	bf00      	nop
 800c868:	20000fb4 	.word	0x20000fb4

0800c86c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c86c:	b580      	push	{r7, lr}
 800c86e:	b086      	sub	sp, #24
 800c870:	af00      	add	r7, sp, #0
 800c872:	60f8      	str	r0, [r7, #12]
 800c874:	60b9      	str	r1, [r7, #8]
 800c876:	607a      	str	r2, [r7, #4]
 800c878:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c87a:	2300      	movs	r3, #0
 800c87c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	68ba      	ldr	r2, [r7, #8]
 800c882:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	68fa      	ldr	r2, [r7, #12]
 800c888:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c88a:	68ba      	ldr	r2, [r7, #8]
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	429a      	cmp	r2, r3
 800c890:	d812      	bhi.n	800c8b8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c892:	687a      	ldr	r2, [r7, #4]
 800c894:	683b      	ldr	r3, [r7, #0]
 800c896:	1ad2      	subs	r2, r2, r3
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	699b      	ldr	r3, [r3, #24]
 800c89c:	429a      	cmp	r2, r3
 800c89e:	d302      	bcc.n	800c8a6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c8a0:	2301      	movs	r3, #1
 800c8a2:	617b      	str	r3, [r7, #20]
 800c8a4:	e01b      	b.n	800c8de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c8a6:	4b10      	ldr	r3, [pc, #64]	@ (800c8e8 <prvInsertTimerInActiveList+0x7c>)
 800c8a8:	681a      	ldr	r2, [r3, #0]
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	3304      	adds	r3, #4
 800c8ae:	4619      	mov	r1, r3
 800c8b0:	4610      	mov	r0, r2
 800c8b2:	f7fe f8fe 	bl	800aab2 <vListInsert>
 800c8b6:	e012      	b.n	800c8de <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c8b8:	687a      	ldr	r2, [r7, #4]
 800c8ba:	683b      	ldr	r3, [r7, #0]
 800c8bc:	429a      	cmp	r2, r3
 800c8be:	d206      	bcs.n	800c8ce <prvInsertTimerInActiveList+0x62>
 800c8c0:	68ba      	ldr	r2, [r7, #8]
 800c8c2:	683b      	ldr	r3, [r7, #0]
 800c8c4:	429a      	cmp	r2, r3
 800c8c6:	d302      	bcc.n	800c8ce <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c8c8:	2301      	movs	r3, #1
 800c8ca:	617b      	str	r3, [r7, #20]
 800c8cc:	e007      	b.n	800c8de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c8ce:	4b07      	ldr	r3, [pc, #28]	@ (800c8ec <prvInsertTimerInActiveList+0x80>)
 800c8d0:	681a      	ldr	r2, [r3, #0]
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	3304      	adds	r3, #4
 800c8d6:	4619      	mov	r1, r3
 800c8d8:	4610      	mov	r0, r2
 800c8da:	f7fe f8ea 	bl	800aab2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c8de:	697b      	ldr	r3, [r7, #20]
}
 800c8e0:	4618      	mov	r0, r3
 800c8e2:	3718      	adds	r7, #24
 800c8e4:	46bd      	mov	sp, r7
 800c8e6:	bd80      	pop	{r7, pc}
 800c8e8:	20000fa8 	.word	0x20000fa8
 800c8ec:	20000fa4 	.word	0x20000fa4

0800c8f0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c8f0:	b580      	push	{r7, lr}
 800c8f2:	b08e      	sub	sp, #56	@ 0x38
 800c8f4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c8f6:	e0ce      	b.n	800ca96 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	da19      	bge.n	800c932 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c8fe:	1d3b      	adds	r3, r7, #4
 800c900:	3304      	adds	r3, #4
 800c902:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c904:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c906:	2b00      	cmp	r3, #0
 800c908:	d10b      	bne.n	800c922 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800c90a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c90e:	f383 8811 	msr	BASEPRI, r3
 800c912:	f3bf 8f6f 	isb	sy
 800c916:	f3bf 8f4f 	dsb	sy
 800c91a:	61fb      	str	r3, [r7, #28]
}
 800c91c:	bf00      	nop
 800c91e:	bf00      	nop
 800c920:	e7fd      	b.n	800c91e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c922:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c928:	6850      	ldr	r0, [r2, #4]
 800c92a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c92c:	6892      	ldr	r2, [r2, #8]
 800c92e:	4611      	mov	r1, r2
 800c930:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	2b00      	cmp	r3, #0
 800c936:	f2c0 80ae 	blt.w	800ca96 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c93e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c940:	695b      	ldr	r3, [r3, #20]
 800c942:	2b00      	cmp	r3, #0
 800c944:	d004      	beq.n	800c950 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c948:	3304      	adds	r3, #4
 800c94a:	4618      	mov	r0, r3
 800c94c:	f7fe f8ea 	bl	800ab24 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c950:	463b      	mov	r3, r7
 800c952:	4618      	mov	r0, r3
 800c954:	f7ff ff6a 	bl	800c82c <prvSampleTimeNow>
 800c958:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	2b09      	cmp	r3, #9
 800c95e:	f200 8097 	bhi.w	800ca90 <prvProcessReceivedCommands+0x1a0>
 800c962:	a201      	add	r2, pc, #4	@ (adr r2, 800c968 <prvProcessReceivedCommands+0x78>)
 800c964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c968:	0800c991 	.word	0x0800c991
 800c96c:	0800c991 	.word	0x0800c991
 800c970:	0800c991 	.word	0x0800c991
 800c974:	0800ca07 	.word	0x0800ca07
 800c978:	0800ca1b 	.word	0x0800ca1b
 800c97c:	0800ca67 	.word	0x0800ca67
 800c980:	0800c991 	.word	0x0800c991
 800c984:	0800c991 	.word	0x0800c991
 800c988:	0800ca07 	.word	0x0800ca07
 800c98c:	0800ca1b 	.word	0x0800ca1b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c990:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c992:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c996:	f043 0301 	orr.w	r3, r3, #1
 800c99a:	b2da      	uxtb	r2, r3
 800c99c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c99e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c9a2:	68ba      	ldr	r2, [r7, #8]
 800c9a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9a6:	699b      	ldr	r3, [r3, #24]
 800c9a8:	18d1      	adds	r1, r2, r3
 800c9aa:	68bb      	ldr	r3, [r7, #8]
 800c9ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c9ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c9b0:	f7ff ff5c 	bl	800c86c <prvInsertTimerInActiveList>
 800c9b4:	4603      	mov	r3, r0
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d06c      	beq.n	800ca94 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c9ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9bc:	6a1b      	ldr	r3, [r3, #32]
 800c9be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c9c0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c9c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c9c8:	f003 0304 	and.w	r3, r3, #4
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d061      	beq.n	800ca94 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c9d0:	68ba      	ldr	r2, [r7, #8]
 800c9d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9d4:	699b      	ldr	r3, [r3, #24]
 800c9d6:	441a      	add	r2, r3
 800c9d8:	2300      	movs	r3, #0
 800c9da:	9300      	str	r3, [sp, #0]
 800c9dc:	2300      	movs	r3, #0
 800c9de:	2100      	movs	r1, #0
 800c9e0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c9e2:	f7ff fe01 	bl	800c5e8 <xTimerGenericCommand>
 800c9e6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c9e8:	6a3b      	ldr	r3, [r7, #32]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d152      	bne.n	800ca94 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800c9ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9f2:	f383 8811 	msr	BASEPRI, r3
 800c9f6:	f3bf 8f6f 	isb	sy
 800c9fa:	f3bf 8f4f 	dsb	sy
 800c9fe:	61bb      	str	r3, [r7, #24]
}
 800ca00:	bf00      	nop
 800ca02:	bf00      	nop
 800ca04:	e7fd      	b.n	800ca02 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ca06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca08:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ca0c:	f023 0301 	bic.w	r3, r3, #1
 800ca10:	b2da      	uxtb	r2, r3
 800ca12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca14:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ca18:	e03d      	b.n	800ca96 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ca1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca1c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ca20:	f043 0301 	orr.w	r3, r3, #1
 800ca24:	b2da      	uxtb	r2, r3
 800ca26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca28:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ca2c:	68ba      	ldr	r2, [r7, #8]
 800ca2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca30:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ca32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca34:	699b      	ldr	r3, [r3, #24]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d10b      	bne.n	800ca52 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800ca3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca3e:	f383 8811 	msr	BASEPRI, r3
 800ca42:	f3bf 8f6f 	isb	sy
 800ca46:	f3bf 8f4f 	dsb	sy
 800ca4a:	617b      	str	r3, [r7, #20]
}
 800ca4c:	bf00      	nop
 800ca4e:	bf00      	nop
 800ca50:	e7fd      	b.n	800ca4e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ca52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca54:	699a      	ldr	r2, [r3, #24]
 800ca56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca58:	18d1      	adds	r1, r2, r3
 800ca5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ca5e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ca60:	f7ff ff04 	bl	800c86c <prvInsertTimerInActiveList>
					break;
 800ca64:	e017      	b.n	800ca96 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ca66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca68:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ca6c:	f003 0302 	and.w	r3, r3, #2
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d103      	bne.n	800ca7c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800ca74:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ca76:	f000 fbed 	bl	800d254 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ca7a:	e00c      	b.n	800ca96 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ca7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca7e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ca82:	f023 0301 	bic.w	r3, r3, #1
 800ca86:	b2da      	uxtb	r2, r3
 800ca88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca8a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ca8e:	e002      	b.n	800ca96 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800ca90:	bf00      	nop
 800ca92:	e000      	b.n	800ca96 <prvProcessReceivedCommands+0x1a6>
					break;
 800ca94:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ca96:	4b08      	ldr	r3, [pc, #32]	@ (800cab8 <prvProcessReceivedCommands+0x1c8>)
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	1d39      	adds	r1, r7, #4
 800ca9c:	2200      	movs	r2, #0
 800ca9e:	4618      	mov	r0, r3
 800caa0:	f7fe fb50 	bl	800b144 <xQueueReceive>
 800caa4:	4603      	mov	r3, r0
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	f47f af26 	bne.w	800c8f8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800caac:	bf00      	nop
 800caae:	bf00      	nop
 800cab0:	3730      	adds	r7, #48	@ 0x30
 800cab2:	46bd      	mov	sp, r7
 800cab4:	bd80      	pop	{r7, pc}
 800cab6:	bf00      	nop
 800cab8:	20000fac 	.word	0x20000fac

0800cabc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800cabc:	b580      	push	{r7, lr}
 800cabe:	b088      	sub	sp, #32
 800cac0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cac2:	e049      	b.n	800cb58 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cac4:	4b2e      	ldr	r3, [pc, #184]	@ (800cb80 <prvSwitchTimerLists+0xc4>)
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	68db      	ldr	r3, [r3, #12]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cace:	4b2c      	ldr	r3, [pc, #176]	@ (800cb80 <prvSwitchTimerLists+0xc4>)
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	68db      	ldr	r3, [r3, #12]
 800cad4:	68db      	ldr	r3, [r3, #12]
 800cad6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	3304      	adds	r3, #4
 800cadc:	4618      	mov	r0, r3
 800cade:	f7fe f821 	bl	800ab24 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	6a1b      	ldr	r3, [r3, #32]
 800cae6:	68f8      	ldr	r0, [r7, #12]
 800cae8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800caf0:	f003 0304 	and.w	r3, r3, #4
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d02f      	beq.n	800cb58 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	699b      	ldr	r3, [r3, #24]
 800cafc:	693a      	ldr	r2, [r7, #16]
 800cafe:	4413      	add	r3, r2
 800cb00:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800cb02:	68ba      	ldr	r2, [r7, #8]
 800cb04:	693b      	ldr	r3, [r7, #16]
 800cb06:	429a      	cmp	r2, r3
 800cb08:	d90e      	bls.n	800cb28 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	68ba      	ldr	r2, [r7, #8]
 800cb0e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	68fa      	ldr	r2, [r7, #12]
 800cb14:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cb16:	4b1a      	ldr	r3, [pc, #104]	@ (800cb80 <prvSwitchTimerLists+0xc4>)
 800cb18:	681a      	ldr	r2, [r3, #0]
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	3304      	adds	r3, #4
 800cb1e:	4619      	mov	r1, r3
 800cb20:	4610      	mov	r0, r2
 800cb22:	f7fd ffc6 	bl	800aab2 <vListInsert>
 800cb26:	e017      	b.n	800cb58 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cb28:	2300      	movs	r3, #0
 800cb2a:	9300      	str	r3, [sp, #0]
 800cb2c:	2300      	movs	r3, #0
 800cb2e:	693a      	ldr	r2, [r7, #16]
 800cb30:	2100      	movs	r1, #0
 800cb32:	68f8      	ldr	r0, [r7, #12]
 800cb34:	f7ff fd58 	bl	800c5e8 <xTimerGenericCommand>
 800cb38:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d10b      	bne.n	800cb58 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800cb40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb44:	f383 8811 	msr	BASEPRI, r3
 800cb48:	f3bf 8f6f 	isb	sy
 800cb4c:	f3bf 8f4f 	dsb	sy
 800cb50:	603b      	str	r3, [r7, #0]
}
 800cb52:	bf00      	nop
 800cb54:	bf00      	nop
 800cb56:	e7fd      	b.n	800cb54 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cb58:	4b09      	ldr	r3, [pc, #36]	@ (800cb80 <prvSwitchTimerLists+0xc4>)
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d1b0      	bne.n	800cac4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800cb62:	4b07      	ldr	r3, [pc, #28]	@ (800cb80 <prvSwitchTimerLists+0xc4>)
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800cb68:	4b06      	ldr	r3, [pc, #24]	@ (800cb84 <prvSwitchTimerLists+0xc8>)
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	4a04      	ldr	r2, [pc, #16]	@ (800cb80 <prvSwitchTimerLists+0xc4>)
 800cb6e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800cb70:	4a04      	ldr	r2, [pc, #16]	@ (800cb84 <prvSwitchTimerLists+0xc8>)
 800cb72:	697b      	ldr	r3, [r7, #20]
 800cb74:	6013      	str	r3, [r2, #0]
}
 800cb76:	bf00      	nop
 800cb78:	3718      	adds	r7, #24
 800cb7a:	46bd      	mov	sp, r7
 800cb7c:	bd80      	pop	{r7, pc}
 800cb7e:	bf00      	nop
 800cb80:	20000fa4 	.word	0x20000fa4
 800cb84:	20000fa8 	.word	0x20000fa8

0800cb88 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800cb88:	b580      	push	{r7, lr}
 800cb8a:	b082      	sub	sp, #8
 800cb8c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800cb8e:	f000 f96b 	bl	800ce68 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800cb92:	4b15      	ldr	r3, [pc, #84]	@ (800cbe8 <prvCheckForValidListAndQueue+0x60>)
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d120      	bne.n	800cbdc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800cb9a:	4814      	ldr	r0, [pc, #80]	@ (800cbec <prvCheckForValidListAndQueue+0x64>)
 800cb9c:	f7fd ff38 	bl	800aa10 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800cba0:	4813      	ldr	r0, [pc, #76]	@ (800cbf0 <prvCheckForValidListAndQueue+0x68>)
 800cba2:	f7fd ff35 	bl	800aa10 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800cba6:	4b13      	ldr	r3, [pc, #76]	@ (800cbf4 <prvCheckForValidListAndQueue+0x6c>)
 800cba8:	4a10      	ldr	r2, [pc, #64]	@ (800cbec <prvCheckForValidListAndQueue+0x64>)
 800cbaa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800cbac:	4b12      	ldr	r3, [pc, #72]	@ (800cbf8 <prvCheckForValidListAndQueue+0x70>)
 800cbae:	4a10      	ldr	r2, [pc, #64]	@ (800cbf0 <prvCheckForValidListAndQueue+0x68>)
 800cbb0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800cbb2:	2300      	movs	r3, #0
 800cbb4:	9300      	str	r3, [sp, #0]
 800cbb6:	4b11      	ldr	r3, [pc, #68]	@ (800cbfc <prvCheckForValidListAndQueue+0x74>)
 800cbb8:	4a11      	ldr	r2, [pc, #68]	@ (800cc00 <prvCheckForValidListAndQueue+0x78>)
 800cbba:	2110      	movs	r1, #16
 800cbbc:	200a      	movs	r0, #10
 800cbbe:	f7fe f845 	bl	800ac4c <xQueueGenericCreateStatic>
 800cbc2:	4603      	mov	r3, r0
 800cbc4:	4a08      	ldr	r2, [pc, #32]	@ (800cbe8 <prvCheckForValidListAndQueue+0x60>)
 800cbc6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800cbc8:	4b07      	ldr	r3, [pc, #28]	@ (800cbe8 <prvCheckForValidListAndQueue+0x60>)
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d005      	beq.n	800cbdc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800cbd0:	4b05      	ldr	r3, [pc, #20]	@ (800cbe8 <prvCheckForValidListAndQueue+0x60>)
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	490b      	ldr	r1, [pc, #44]	@ (800cc04 <prvCheckForValidListAndQueue+0x7c>)
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	f7fe fd28 	bl	800b62c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cbdc:	f000 f976 	bl	800cecc <vPortExitCritical>
}
 800cbe0:	bf00      	nop
 800cbe2:	46bd      	mov	sp, r7
 800cbe4:	bd80      	pop	{r7, pc}
 800cbe6:	bf00      	nop
 800cbe8:	20000fac 	.word	0x20000fac
 800cbec:	20000f7c 	.word	0x20000f7c
 800cbf0:	20000f90 	.word	0x20000f90
 800cbf4:	20000fa4 	.word	0x20000fa4
 800cbf8:	20000fa8 	.word	0x20000fa8
 800cbfc:	20001058 	.word	0x20001058
 800cc00:	20000fb8 	.word	0x20000fb8
 800cc04:	0800dda0 	.word	0x0800dda0

0800cc08 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800cc08:	b480      	push	{r7}
 800cc0a:	b085      	sub	sp, #20
 800cc0c:	af00      	add	r7, sp, #0
 800cc0e:	60f8      	str	r0, [r7, #12]
 800cc10:	60b9      	str	r1, [r7, #8]
 800cc12:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	3b04      	subs	r3, #4
 800cc18:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800cc20:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	3b04      	subs	r3, #4
 800cc26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800cc28:	68bb      	ldr	r3, [r7, #8]
 800cc2a:	f023 0201 	bic.w	r2, r3, #1
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	3b04      	subs	r3, #4
 800cc36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cc38:	4a0c      	ldr	r2, [pc, #48]	@ (800cc6c <pxPortInitialiseStack+0x64>)
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	3b14      	subs	r3, #20
 800cc42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800cc44:	687a      	ldr	r2, [r7, #4]
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	3b04      	subs	r3, #4
 800cc4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	f06f 0202 	mvn.w	r2, #2
 800cc56:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	3b20      	subs	r3, #32
 800cc5c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800cc5e:	68fb      	ldr	r3, [r7, #12]
}
 800cc60:	4618      	mov	r0, r3
 800cc62:	3714      	adds	r7, #20
 800cc64:	46bd      	mov	sp, r7
 800cc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc6a:	4770      	bx	lr
 800cc6c:	0800cc71 	.word	0x0800cc71

0800cc70 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800cc70:	b480      	push	{r7}
 800cc72:	b085      	sub	sp, #20
 800cc74:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800cc76:	2300      	movs	r3, #0
 800cc78:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800cc7a:	4b13      	ldr	r3, [pc, #76]	@ (800ccc8 <prvTaskExitError+0x58>)
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cc82:	d00b      	beq.n	800cc9c <prvTaskExitError+0x2c>
	__asm volatile
 800cc84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc88:	f383 8811 	msr	BASEPRI, r3
 800cc8c:	f3bf 8f6f 	isb	sy
 800cc90:	f3bf 8f4f 	dsb	sy
 800cc94:	60fb      	str	r3, [r7, #12]
}
 800cc96:	bf00      	nop
 800cc98:	bf00      	nop
 800cc9a:	e7fd      	b.n	800cc98 <prvTaskExitError+0x28>
	__asm volatile
 800cc9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cca0:	f383 8811 	msr	BASEPRI, r3
 800cca4:	f3bf 8f6f 	isb	sy
 800cca8:	f3bf 8f4f 	dsb	sy
 800ccac:	60bb      	str	r3, [r7, #8]
}
 800ccae:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ccb0:	bf00      	nop
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d0fc      	beq.n	800ccb2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ccb8:	bf00      	nop
 800ccba:	bf00      	nop
 800ccbc:	3714      	adds	r7, #20
 800ccbe:	46bd      	mov	sp, r7
 800ccc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc4:	4770      	bx	lr
 800ccc6:	bf00      	nop
 800ccc8:	2000002c 	.word	0x2000002c
 800cccc:	00000000 	.word	0x00000000

0800ccd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ccd0:	4b07      	ldr	r3, [pc, #28]	@ (800ccf0 <pxCurrentTCBConst2>)
 800ccd2:	6819      	ldr	r1, [r3, #0]
 800ccd4:	6808      	ldr	r0, [r1, #0]
 800ccd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccda:	f380 8809 	msr	PSP, r0
 800ccde:	f3bf 8f6f 	isb	sy
 800cce2:	f04f 0000 	mov.w	r0, #0
 800cce6:	f380 8811 	msr	BASEPRI, r0
 800ccea:	4770      	bx	lr
 800ccec:	f3af 8000 	nop.w

0800ccf0 <pxCurrentTCBConst2>:
 800ccf0:	20000a7c 	.word	0x20000a7c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ccf4:	bf00      	nop
 800ccf6:	bf00      	nop

0800ccf8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ccf8:	4808      	ldr	r0, [pc, #32]	@ (800cd1c <prvPortStartFirstTask+0x24>)
 800ccfa:	6800      	ldr	r0, [r0, #0]
 800ccfc:	6800      	ldr	r0, [r0, #0]
 800ccfe:	f380 8808 	msr	MSP, r0
 800cd02:	f04f 0000 	mov.w	r0, #0
 800cd06:	f380 8814 	msr	CONTROL, r0
 800cd0a:	b662      	cpsie	i
 800cd0c:	b661      	cpsie	f
 800cd0e:	f3bf 8f4f 	dsb	sy
 800cd12:	f3bf 8f6f 	isb	sy
 800cd16:	df00      	svc	0
 800cd18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cd1a:	bf00      	nop
 800cd1c:	e000ed08 	.word	0xe000ed08

0800cd20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cd20:	b580      	push	{r7, lr}
 800cd22:	b086      	sub	sp, #24
 800cd24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800cd26:	4b47      	ldr	r3, [pc, #284]	@ (800ce44 <xPortStartScheduler+0x124>)
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	4a47      	ldr	r2, [pc, #284]	@ (800ce48 <xPortStartScheduler+0x128>)
 800cd2c:	4293      	cmp	r3, r2
 800cd2e:	d10b      	bne.n	800cd48 <xPortStartScheduler+0x28>
	__asm volatile
 800cd30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd34:	f383 8811 	msr	BASEPRI, r3
 800cd38:	f3bf 8f6f 	isb	sy
 800cd3c:	f3bf 8f4f 	dsb	sy
 800cd40:	613b      	str	r3, [r7, #16]
}
 800cd42:	bf00      	nop
 800cd44:	bf00      	nop
 800cd46:	e7fd      	b.n	800cd44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800cd48:	4b3e      	ldr	r3, [pc, #248]	@ (800ce44 <xPortStartScheduler+0x124>)
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	4a3f      	ldr	r2, [pc, #252]	@ (800ce4c <xPortStartScheduler+0x12c>)
 800cd4e:	4293      	cmp	r3, r2
 800cd50:	d10b      	bne.n	800cd6a <xPortStartScheduler+0x4a>
	__asm volatile
 800cd52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd56:	f383 8811 	msr	BASEPRI, r3
 800cd5a:	f3bf 8f6f 	isb	sy
 800cd5e:	f3bf 8f4f 	dsb	sy
 800cd62:	60fb      	str	r3, [r7, #12]
}
 800cd64:	bf00      	nop
 800cd66:	bf00      	nop
 800cd68:	e7fd      	b.n	800cd66 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cd6a:	4b39      	ldr	r3, [pc, #228]	@ (800ce50 <xPortStartScheduler+0x130>)
 800cd6c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800cd6e:	697b      	ldr	r3, [r7, #20]
 800cd70:	781b      	ldrb	r3, [r3, #0]
 800cd72:	b2db      	uxtb	r3, r3
 800cd74:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cd76:	697b      	ldr	r3, [r7, #20]
 800cd78:	22ff      	movs	r2, #255	@ 0xff
 800cd7a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cd7c:	697b      	ldr	r3, [r7, #20]
 800cd7e:	781b      	ldrb	r3, [r3, #0]
 800cd80:	b2db      	uxtb	r3, r3
 800cd82:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cd84:	78fb      	ldrb	r3, [r7, #3]
 800cd86:	b2db      	uxtb	r3, r3
 800cd88:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800cd8c:	b2da      	uxtb	r2, r3
 800cd8e:	4b31      	ldr	r3, [pc, #196]	@ (800ce54 <xPortStartScheduler+0x134>)
 800cd90:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800cd92:	4b31      	ldr	r3, [pc, #196]	@ (800ce58 <xPortStartScheduler+0x138>)
 800cd94:	2207      	movs	r2, #7
 800cd96:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cd98:	e009      	b.n	800cdae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800cd9a:	4b2f      	ldr	r3, [pc, #188]	@ (800ce58 <xPortStartScheduler+0x138>)
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	3b01      	subs	r3, #1
 800cda0:	4a2d      	ldr	r2, [pc, #180]	@ (800ce58 <xPortStartScheduler+0x138>)
 800cda2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cda4:	78fb      	ldrb	r3, [r7, #3]
 800cda6:	b2db      	uxtb	r3, r3
 800cda8:	005b      	lsls	r3, r3, #1
 800cdaa:	b2db      	uxtb	r3, r3
 800cdac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cdae:	78fb      	ldrb	r3, [r7, #3]
 800cdb0:	b2db      	uxtb	r3, r3
 800cdb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cdb6:	2b80      	cmp	r3, #128	@ 0x80
 800cdb8:	d0ef      	beq.n	800cd9a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800cdba:	4b27      	ldr	r3, [pc, #156]	@ (800ce58 <xPortStartScheduler+0x138>)
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	f1c3 0307 	rsb	r3, r3, #7
 800cdc2:	2b04      	cmp	r3, #4
 800cdc4:	d00b      	beq.n	800cdde <xPortStartScheduler+0xbe>
	__asm volatile
 800cdc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdca:	f383 8811 	msr	BASEPRI, r3
 800cdce:	f3bf 8f6f 	isb	sy
 800cdd2:	f3bf 8f4f 	dsb	sy
 800cdd6:	60bb      	str	r3, [r7, #8]
}
 800cdd8:	bf00      	nop
 800cdda:	bf00      	nop
 800cddc:	e7fd      	b.n	800cdda <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800cdde:	4b1e      	ldr	r3, [pc, #120]	@ (800ce58 <xPortStartScheduler+0x138>)
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	021b      	lsls	r3, r3, #8
 800cde4:	4a1c      	ldr	r2, [pc, #112]	@ (800ce58 <xPortStartScheduler+0x138>)
 800cde6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800cde8:	4b1b      	ldr	r3, [pc, #108]	@ (800ce58 <xPortStartScheduler+0x138>)
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800cdf0:	4a19      	ldr	r2, [pc, #100]	@ (800ce58 <xPortStartScheduler+0x138>)
 800cdf2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	b2da      	uxtb	r2, r3
 800cdf8:	697b      	ldr	r3, [r7, #20]
 800cdfa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800cdfc:	4b17      	ldr	r3, [pc, #92]	@ (800ce5c <xPortStartScheduler+0x13c>)
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	4a16      	ldr	r2, [pc, #88]	@ (800ce5c <xPortStartScheduler+0x13c>)
 800ce02:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800ce06:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ce08:	4b14      	ldr	r3, [pc, #80]	@ (800ce5c <xPortStartScheduler+0x13c>)
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	4a13      	ldr	r2, [pc, #76]	@ (800ce5c <xPortStartScheduler+0x13c>)
 800ce0e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800ce12:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ce14:	f000 f8da 	bl	800cfcc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ce18:	4b11      	ldr	r3, [pc, #68]	@ (800ce60 <xPortStartScheduler+0x140>)
 800ce1a:	2200      	movs	r2, #0
 800ce1c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ce1e:	f000 f8f9 	bl	800d014 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ce22:	4b10      	ldr	r3, [pc, #64]	@ (800ce64 <xPortStartScheduler+0x144>)
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	4a0f      	ldr	r2, [pc, #60]	@ (800ce64 <xPortStartScheduler+0x144>)
 800ce28:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800ce2c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ce2e:	f7ff ff63 	bl	800ccf8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ce32:	f7ff f815 	bl	800be60 <vTaskSwitchContext>
	prvTaskExitError();
 800ce36:	f7ff ff1b 	bl	800cc70 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ce3a:	2300      	movs	r3, #0
}
 800ce3c:	4618      	mov	r0, r3
 800ce3e:	3718      	adds	r7, #24
 800ce40:	46bd      	mov	sp, r7
 800ce42:	bd80      	pop	{r7, pc}
 800ce44:	e000ed00 	.word	0xe000ed00
 800ce48:	410fc271 	.word	0x410fc271
 800ce4c:	410fc270 	.word	0x410fc270
 800ce50:	e000e400 	.word	0xe000e400
 800ce54:	200010a8 	.word	0x200010a8
 800ce58:	200010ac 	.word	0x200010ac
 800ce5c:	e000ed20 	.word	0xe000ed20
 800ce60:	2000002c 	.word	0x2000002c
 800ce64:	e000ef34 	.word	0xe000ef34

0800ce68 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ce68:	b480      	push	{r7}
 800ce6a:	b083      	sub	sp, #12
 800ce6c:	af00      	add	r7, sp, #0
	__asm volatile
 800ce6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce72:	f383 8811 	msr	BASEPRI, r3
 800ce76:	f3bf 8f6f 	isb	sy
 800ce7a:	f3bf 8f4f 	dsb	sy
 800ce7e:	607b      	str	r3, [r7, #4]
}
 800ce80:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ce82:	4b10      	ldr	r3, [pc, #64]	@ (800cec4 <vPortEnterCritical+0x5c>)
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	3301      	adds	r3, #1
 800ce88:	4a0e      	ldr	r2, [pc, #56]	@ (800cec4 <vPortEnterCritical+0x5c>)
 800ce8a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ce8c:	4b0d      	ldr	r3, [pc, #52]	@ (800cec4 <vPortEnterCritical+0x5c>)
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	2b01      	cmp	r3, #1
 800ce92:	d110      	bne.n	800ceb6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ce94:	4b0c      	ldr	r3, [pc, #48]	@ (800cec8 <vPortEnterCritical+0x60>)
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	b2db      	uxtb	r3, r3
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d00b      	beq.n	800ceb6 <vPortEnterCritical+0x4e>
	__asm volatile
 800ce9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cea2:	f383 8811 	msr	BASEPRI, r3
 800cea6:	f3bf 8f6f 	isb	sy
 800ceaa:	f3bf 8f4f 	dsb	sy
 800ceae:	603b      	str	r3, [r7, #0]
}
 800ceb0:	bf00      	nop
 800ceb2:	bf00      	nop
 800ceb4:	e7fd      	b.n	800ceb2 <vPortEnterCritical+0x4a>
	}
}
 800ceb6:	bf00      	nop
 800ceb8:	370c      	adds	r7, #12
 800ceba:	46bd      	mov	sp, r7
 800cebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec0:	4770      	bx	lr
 800cec2:	bf00      	nop
 800cec4:	2000002c 	.word	0x2000002c
 800cec8:	e000ed04 	.word	0xe000ed04

0800cecc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cecc:	b480      	push	{r7}
 800cece:	b083      	sub	sp, #12
 800ced0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ced2:	4b12      	ldr	r3, [pc, #72]	@ (800cf1c <vPortExitCritical+0x50>)
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d10b      	bne.n	800cef2 <vPortExitCritical+0x26>
	__asm volatile
 800ceda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cede:	f383 8811 	msr	BASEPRI, r3
 800cee2:	f3bf 8f6f 	isb	sy
 800cee6:	f3bf 8f4f 	dsb	sy
 800ceea:	607b      	str	r3, [r7, #4]
}
 800ceec:	bf00      	nop
 800ceee:	bf00      	nop
 800cef0:	e7fd      	b.n	800ceee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800cef2:	4b0a      	ldr	r3, [pc, #40]	@ (800cf1c <vPortExitCritical+0x50>)
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	3b01      	subs	r3, #1
 800cef8:	4a08      	ldr	r2, [pc, #32]	@ (800cf1c <vPortExitCritical+0x50>)
 800cefa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cefc:	4b07      	ldr	r3, [pc, #28]	@ (800cf1c <vPortExitCritical+0x50>)
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d105      	bne.n	800cf10 <vPortExitCritical+0x44>
 800cf04:	2300      	movs	r3, #0
 800cf06:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cf08:	683b      	ldr	r3, [r7, #0]
 800cf0a:	f383 8811 	msr	BASEPRI, r3
}
 800cf0e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cf10:	bf00      	nop
 800cf12:	370c      	adds	r7, #12
 800cf14:	46bd      	mov	sp, r7
 800cf16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf1a:	4770      	bx	lr
 800cf1c:	2000002c 	.word	0x2000002c

0800cf20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cf20:	f3ef 8009 	mrs	r0, PSP
 800cf24:	f3bf 8f6f 	isb	sy
 800cf28:	4b15      	ldr	r3, [pc, #84]	@ (800cf80 <pxCurrentTCBConst>)
 800cf2a:	681a      	ldr	r2, [r3, #0]
 800cf2c:	f01e 0f10 	tst.w	lr, #16
 800cf30:	bf08      	it	eq
 800cf32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cf36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf3a:	6010      	str	r0, [r2, #0]
 800cf3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cf40:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800cf44:	f380 8811 	msr	BASEPRI, r0
 800cf48:	f3bf 8f4f 	dsb	sy
 800cf4c:	f3bf 8f6f 	isb	sy
 800cf50:	f7fe ff86 	bl	800be60 <vTaskSwitchContext>
 800cf54:	f04f 0000 	mov.w	r0, #0
 800cf58:	f380 8811 	msr	BASEPRI, r0
 800cf5c:	bc09      	pop	{r0, r3}
 800cf5e:	6819      	ldr	r1, [r3, #0]
 800cf60:	6808      	ldr	r0, [r1, #0]
 800cf62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf66:	f01e 0f10 	tst.w	lr, #16
 800cf6a:	bf08      	it	eq
 800cf6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cf70:	f380 8809 	msr	PSP, r0
 800cf74:	f3bf 8f6f 	isb	sy
 800cf78:	4770      	bx	lr
 800cf7a:	bf00      	nop
 800cf7c:	f3af 8000 	nop.w

0800cf80 <pxCurrentTCBConst>:
 800cf80:	20000a7c 	.word	0x20000a7c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cf84:	bf00      	nop
 800cf86:	bf00      	nop

0800cf88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cf88:	b580      	push	{r7, lr}
 800cf8a:	b082      	sub	sp, #8
 800cf8c:	af00      	add	r7, sp, #0
	__asm volatile
 800cf8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf92:	f383 8811 	msr	BASEPRI, r3
 800cf96:	f3bf 8f6f 	isb	sy
 800cf9a:	f3bf 8f4f 	dsb	sy
 800cf9e:	607b      	str	r3, [r7, #4]
}
 800cfa0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cfa2:	f7fe fea3 	bl	800bcec <xTaskIncrementTick>
 800cfa6:	4603      	mov	r3, r0
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d003      	beq.n	800cfb4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cfac:	4b06      	ldr	r3, [pc, #24]	@ (800cfc8 <xPortSysTickHandler+0x40>)
 800cfae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cfb2:	601a      	str	r2, [r3, #0]
 800cfb4:	2300      	movs	r3, #0
 800cfb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cfb8:	683b      	ldr	r3, [r7, #0]
 800cfba:	f383 8811 	msr	BASEPRI, r3
}
 800cfbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cfc0:	bf00      	nop
 800cfc2:	3708      	adds	r7, #8
 800cfc4:	46bd      	mov	sp, r7
 800cfc6:	bd80      	pop	{r7, pc}
 800cfc8:	e000ed04 	.word	0xe000ed04

0800cfcc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cfcc:	b480      	push	{r7}
 800cfce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cfd0:	4b0b      	ldr	r3, [pc, #44]	@ (800d000 <vPortSetupTimerInterrupt+0x34>)
 800cfd2:	2200      	movs	r2, #0
 800cfd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cfd6:	4b0b      	ldr	r3, [pc, #44]	@ (800d004 <vPortSetupTimerInterrupt+0x38>)
 800cfd8:	2200      	movs	r2, #0
 800cfda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cfdc:	4b0a      	ldr	r3, [pc, #40]	@ (800d008 <vPortSetupTimerInterrupt+0x3c>)
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	4a0a      	ldr	r2, [pc, #40]	@ (800d00c <vPortSetupTimerInterrupt+0x40>)
 800cfe2:	fba2 2303 	umull	r2, r3, r2, r3
 800cfe6:	099b      	lsrs	r3, r3, #6
 800cfe8:	4a09      	ldr	r2, [pc, #36]	@ (800d010 <vPortSetupTimerInterrupt+0x44>)
 800cfea:	3b01      	subs	r3, #1
 800cfec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cfee:	4b04      	ldr	r3, [pc, #16]	@ (800d000 <vPortSetupTimerInterrupt+0x34>)
 800cff0:	2207      	movs	r2, #7
 800cff2:	601a      	str	r2, [r3, #0]
}
 800cff4:	bf00      	nop
 800cff6:	46bd      	mov	sp, r7
 800cff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cffc:	4770      	bx	lr
 800cffe:	bf00      	nop
 800d000:	e000e010 	.word	0xe000e010
 800d004:	e000e018 	.word	0xe000e018
 800d008:	20000000 	.word	0x20000000
 800d00c:	10624dd3 	.word	0x10624dd3
 800d010:	e000e014 	.word	0xe000e014

0800d014 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d014:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800d024 <vPortEnableVFP+0x10>
 800d018:	6801      	ldr	r1, [r0, #0]
 800d01a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800d01e:	6001      	str	r1, [r0, #0]
 800d020:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d022:	bf00      	nop
 800d024:	e000ed88 	.word	0xe000ed88

0800d028 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d028:	b480      	push	{r7}
 800d02a:	b085      	sub	sp, #20
 800d02c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d02e:	f3ef 8305 	mrs	r3, IPSR
 800d032:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	2b0f      	cmp	r3, #15
 800d038:	d915      	bls.n	800d066 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d03a:	4a18      	ldr	r2, [pc, #96]	@ (800d09c <vPortValidateInterruptPriority+0x74>)
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	4413      	add	r3, r2
 800d040:	781b      	ldrb	r3, [r3, #0]
 800d042:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d044:	4b16      	ldr	r3, [pc, #88]	@ (800d0a0 <vPortValidateInterruptPriority+0x78>)
 800d046:	781b      	ldrb	r3, [r3, #0]
 800d048:	7afa      	ldrb	r2, [r7, #11]
 800d04a:	429a      	cmp	r2, r3
 800d04c:	d20b      	bcs.n	800d066 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800d04e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d052:	f383 8811 	msr	BASEPRI, r3
 800d056:	f3bf 8f6f 	isb	sy
 800d05a:	f3bf 8f4f 	dsb	sy
 800d05e:	607b      	str	r3, [r7, #4]
}
 800d060:	bf00      	nop
 800d062:	bf00      	nop
 800d064:	e7fd      	b.n	800d062 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d066:	4b0f      	ldr	r3, [pc, #60]	@ (800d0a4 <vPortValidateInterruptPriority+0x7c>)
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800d06e:	4b0e      	ldr	r3, [pc, #56]	@ (800d0a8 <vPortValidateInterruptPriority+0x80>)
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	429a      	cmp	r2, r3
 800d074:	d90b      	bls.n	800d08e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800d076:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d07a:	f383 8811 	msr	BASEPRI, r3
 800d07e:	f3bf 8f6f 	isb	sy
 800d082:	f3bf 8f4f 	dsb	sy
 800d086:	603b      	str	r3, [r7, #0]
}
 800d088:	bf00      	nop
 800d08a:	bf00      	nop
 800d08c:	e7fd      	b.n	800d08a <vPortValidateInterruptPriority+0x62>
	}
 800d08e:	bf00      	nop
 800d090:	3714      	adds	r7, #20
 800d092:	46bd      	mov	sp, r7
 800d094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d098:	4770      	bx	lr
 800d09a:	bf00      	nop
 800d09c:	e000e3f0 	.word	0xe000e3f0
 800d0a0:	200010a8 	.word	0x200010a8
 800d0a4:	e000ed0c 	.word	0xe000ed0c
 800d0a8:	200010ac 	.word	0x200010ac

0800d0ac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d0ac:	b580      	push	{r7, lr}
 800d0ae:	b08a      	sub	sp, #40	@ 0x28
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d0b4:	2300      	movs	r3, #0
 800d0b6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d0b8:	f7fe fd5c 	bl	800bb74 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d0bc:	4b5f      	ldr	r3, [pc, #380]	@ (800d23c <pvPortMalloc+0x190>)
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d101      	bne.n	800d0c8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d0c4:	f000 f92a 	bl	800d31c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d0c8:	4b5d      	ldr	r3, [pc, #372]	@ (800d240 <pvPortMalloc+0x194>)
 800d0ca:	681a      	ldr	r2, [r3, #0]
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	4013      	ands	r3, r2
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	f040 8095 	bne.w	800d200 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d01e      	beq.n	800d11a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800d0dc:	2208      	movs	r2, #8
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	4413      	add	r3, r2
 800d0e2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	f003 0307 	and.w	r3, r3, #7
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d015      	beq.n	800d11a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	f023 0307 	bic.w	r3, r3, #7
 800d0f4:	3308      	adds	r3, #8
 800d0f6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	f003 0307 	and.w	r3, r3, #7
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d00b      	beq.n	800d11a <pvPortMalloc+0x6e>
	__asm volatile
 800d102:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d106:	f383 8811 	msr	BASEPRI, r3
 800d10a:	f3bf 8f6f 	isb	sy
 800d10e:	f3bf 8f4f 	dsb	sy
 800d112:	617b      	str	r3, [r7, #20]
}
 800d114:	bf00      	nop
 800d116:	bf00      	nop
 800d118:	e7fd      	b.n	800d116 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d06f      	beq.n	800d200 <pvPortMalloc+0x154>
 800d120:	4b48      	ldr	r3, [pc, #288]	@ (800d244 <pvPortMalloc+0x198>)
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	687a      	ldr	r2, [r7, #4]
 800d126:	429a      	cmp	r2, r3
 800d128:	d86a      	bhi.n	800d200 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d12a:	4b47      	ldr	r3, [pc, #284]	@ (800d248 <pvPortMalloc+0x19c>)
 800d12c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d12e:	4b46      	ldr	r3, [pc, #280]	@ (800d248 <pvPortMalloc+0x19c>)
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d134:	e004      	b.n	800d140 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800d136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d138:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d13a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d142:	685b      	ldr	r3, [r3, #4]
 800d144:	687a      	ldr	r2, [r7, #4]
 800d146:	429a      	cmp	r2, r3
 800d148:	d903      	bls.n	800d152 <pvPortMalloc+0xa6>
 800d14a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d1f1      	bne.n	800d136 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d152:	4b3a      	ldr	r3, [pc, #232]	@ (800d23c <pvPortMalloc+0x190>)
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d158:	429a      	cmp	r2, r3
 800d15a:	d051      	beq.n	800d200 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d15c:	6a3b      	ldr	r3, [r7, #32]
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	2208      	movs	r2, #8
 800d162:	4413      	add	r3, r2
 800d164:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d168:	681a      	ldr	r2, [r3, #0]
 800d16a:	6a3b      	ldr	r3, [r7, #32]
 800d16c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d16e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d170:	685a      	ldr	r2, [r3, #4]
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	1ad2      	subs	r2, r2, r3
 800d176:	2308      	movs	r3, #8
 800d178:	005b      	lsls	r3, r3, #1
 800d17a:	429a      	cmp	r2, r3
 800d17c:	d920      	bls.n	800d1c0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d17e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	4413      	add	r3, r2
 800d184:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d186:	69bb      	ldr	r3, [r7, #24]
 800d188:	f003 0307 	and.w	r3, r3, #7
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d00b      	beq.n	800d1a8 <pvPortMalloc+0xfc>
	__asm volatile
 800d190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d194:	f383 8811 	msr	BASEPRI, r3
 800d198:	f3bf 8f6f 	isb	sy
 800d19c:	f3bf 8f4f 	dsb	sy
 800d1a0:	613b      	str	r3, [r7, #16]
}
 800d1a2:	bf00      	nop
 800d1a4:	bf00      	nop
 800d1a6:	e7fd      	b.n	800d1a4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d1a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1aa:	685a      	ldr	r2, [r3, #4]
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	1ad2      	subs	r2, r2, r3
 800d1b0:	69bb      	ldr	r3, [r7, #24]
 800d1b2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d1b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1b6:	687a      	ldr	r2, [r7, #4]
 800d1b8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d1ba:	69b8      	ldr	r0, [r7, #24]
 800d1bc:	f000 f910 	bl	800d3e0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d1c0:	4b20      	ldr	r3, [pc, #128]	@ (800d244 <pvPortMalloc+0x198>)
 800d1c2:	681a      	ldr	r2, [r3, #0]
 800d1c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1c6:	685b      	ldr	r3, [r3, #4]
 800d1c8:	1ad3      	subs	r3, r2, r3
 800d1ca:	4a1e      	ldr	r2, [pc, #120]	@ (800d244 <pvPortMalloc+0x198>)
 800d1cc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d1ce:	4b1d      	ldr	r3, [pc, #116]	@ (800d244 <pvPortMalloc+0x198>)
 800d1d0:	681a      	ldr	r2, [r3, #0]
 800d1d2:	4b1e      	ldr	r3, [pc, #120]	@ (800d24c <pvPortMalloc+0x1a0>)
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	429a      	cmp	r2, r3
 800d1d8:	d203      	bcs.n	800d1e2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d1da:	4b1a      	ldr	r3, [pc, #104]	@ (800d244 <pvPortMalloc+0x198>)
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	4a1b      	ldr	r2, [pc, #108]	@ (800d24c <pvPortMalloc+0x1a0>)
 800d1e0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d1e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1e4:	685a      	ldr	r2, [r3, #4]
 800d1e6:	4b16      	ldr	r3, [pc, #88]	@ (800d240 <pvPortMalloc+0x194>)
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	431a      	orrs	r2, r3
 800d1ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1ee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d1f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1f2:	2200      	movs	r2, #0
 800d1f4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d1f6:	4b16      	ldr	r3, [pc, #88]	@ (800d250 <pvPortMalloc+0x1a4>)
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	3301      	adds	r3, #1
 800d1fc:	4a14      	ldr	r2, [pc, #80]	@ (800d250 <pvPortMalloc+0x1a4>)
 800d1fe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d200:	f7fe fcc6 	bl	800bb90 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800d204:	69fb      	ldr	r3, [r7, #28]
 800d206:	2b00      	cmp	r3, #0
 800d208:	d101      	bne.n	800d20e <pvPortMalloc+0x162>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800d20a:	f7f3 f97b 	bl	8000504 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d20e:	69fb      	ldr	r3, [r7, #28]
 800d210:	f003 0307 	and.w	r3, r3, #7
 800d214:	2b00      	cmp	r3, #0
 800d216:	d00b      	beq.n	800d230 <pvPortMalloc+0x184>
	__asm volatile
 800d218:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d21c:	f383 8811 	msr	BASEPRI, r3
 800d220:	f3bf 8f6f 	isb	sy
 800d224:	f3bf 8f4f 	dsb	sy
 800d228:	60fb      	str	r3, [r7, #12]
}
 800d22a:	bf00      	nop
 800d22c:	bf00      	nop
 800d22e:	e7fd      	b.n	800d22c <pvPortMalloc+0x180>
	return pvReturn;
 800d230:	69fb      	ldr	r3, [r7, #28]
}
 800d232:	4618      	mov	r0, r3
 800d234:	3728      	adds	r7, #40	@ 0x28
 800d236:	46bd      	mov	sp, r7
 800d238:	bd80      	pop	{r7, pc}
 800d23a:	bf00      	nop
 800d23c:	200090b8 	.word	0x200090b8
 800d240:	200090cc 	.word	0x200090cc
 800d244:	200090bc 	.word	0x200090bc
 800d248:	200090b0 	.word	0x200090b0
 800d24c:	200090c0 	.word	0x200090c0
 800d250:	200090c4 	.word	0x200090c4

0800d254 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d254:	b580      	push	{r7, lr}
 800d256:	b086      	sub	sp, #24
 800d258:	af00      	add	r7, sp, #0
 800d25a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	2b00      	cmp	r3, #0
 800d264:	d04f      	beq.n	800d306 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d266:	2308      	movs	r3, #8
 800d268:	425b      	negs	r3, r3
 800d26a:	697a      	ldr	r2, [r7, #20]
 800d26c:	4413      	add	r3, r2
 800d26e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d270:	697b      	ldr	r3, [r7, #20]
 800d272:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d274:	693b      	ldr	r3, [r7, #16]
 800d276:	685a      	ldr	r2, [r3, #4]
 800d278:	4b25      	ldr	r3, [pc, #148]	@ (800d310 <vPortFree+0xbc>)
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	4013      	ands	r3, r2
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d10b      	bne.n	800d29a <vPortFree+0x46>
	__asm volatile
 800d282:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d286:	f383 8811 	msr	BASEPRI, r3
 800d28a:	f3bf 8f6f 	isb	sy
 800d28e:	f3bf 8f4f 	dsb	sy
 800d292:	60fb      	str	r3, [r7, #12]
}
 800d294:	bf00      	nop
 800d296:	bf00      	nop
 800d298:	e7fd      	b.n	800d296 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d29a:	693b      	ldr	r3, [r7, #16]
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d00b      	beq.n	800d2ba <vPortFree+0x66>
	__asm volatile
 800d2a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2a6:	f383 8811 	msr	BASEPRI, r3
 800d2aa:	f3bf 8f6f 	isb	sy
 800d2ae:	f3bf 8f4f 	dsb	sy
 800d2b2:	60bb      	str	r3, [r7, #8]
}
 800d2b4:	bf00      	nop
 800d2b6:	bf00      	nop
 800d2b8:	e7fd      	b.n	800d2b6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d2ba:	693b      	ldr	r3, [r7, #16]
 800d2bc:	685a      	ldr	r2, [r3, #4]
 800d2be:	4b14      	ldr	r3, [pc, #80]	@ (800d310 <vPortFree+0xbc>)
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	4013      	ands	r3, r2
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d01e      	beq.n	800d306 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d2c8:	693b      	ldr	r3, [r7, #16]
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d11a      	bne.n	800d306 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d2d0:	693b      	ldr	r3, [r7, #16]
 800d2d2:	685a      	ldr	r2, [r3, #4]
 800d2d4:	4b0e      	ldr	r3, [pc, #56]	@ (800d310 <vPortFree+0xbc>)
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	43db      	mvns	r3, r3
 800d2da:	401a      	ands	r2, r3
 800d2dc:	693b      	ldr	r3, [r7, #16]
 800d2de:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d2e0:	f7fe fc48 	bl	800bb74 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d2e4:	693b      	ldr	r3, [r7, #16]
 800d2e6:	685a      	ldr	r2, [r3, #4]
 800d2e8:	4b0a      	ldr	r3, [pc, #40]	@ (800d314 <vPortFree+0xc0>)
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	4413      	add	r3, r2
 800d2ee:	4a09      	ldr	r2, [pc, #36]	@ (800d314 <vPortFree+0xc0>)
 800d2f0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d2f2:	6938      	ldr	r0, [r7, #16]
 800d2f4:	f000 f874 	bl	800d3e0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d2f8:	4b07      	ldr	r3, [pc, #28]	@ (800d318 <vPortFree+0xc4>)
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	3301      	adds	r3, #1
 800d2fe:	4a06      	ldr	r2, [pc, #24]	@ (800d318 <vPortFree+0xc4>)
 800d300:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d302:	f7fe fc45 	bl	800bb90 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d306:	bf00      	nop
 800d308:	3718      	adds	r7, #24
 800d30a:	46bd      	mov	sp, r7
 800d30c:	bd80      	pop	{r7, pc}
 800d30e:	bf00      	nop
 800d310:	200090cc 	.word	0x200090cc
 800d314:	200090bc 	.word	0x200090bc
 800d318:	200090c8 	.word	0x200090c8

0800d31c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d31c:	b480      	push	{r7}
 800d31e:	b085      	sub	sp, #20
 800d320:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d322:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d326:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d328:	4b27      	ldr	r3, [pc, #156]	@ (800d3c8 <prvHeapInit+0xac>)
 800d32a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	f003 0307 	and.w	r3, r3, #7
 800d332:	2b00      	cmp	r3, #0
 800d334:	d00c      	beq.n	800d350 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	3307      	adds	r3, #7
 800d33a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	f023 0307 	bic.w	r3, r3, #7
 800d342:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d344:	68ba      	ldr	r2, [r7, #8]
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	1ad3      	subs	r3, r2, r3
 800d34a:	4a1f      	ldr	r2, [pc, #124]	@ (800d3c8 <prvHeapInit+0xac>)
 800d34c:	4413      	add	r3, r2
 800d34e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d354:	4a1d      	ldr	r2, [pc, #116]	@ (800d3cc <prvHeapInit+0xb0>)
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d35a:	4b1c      	ldr	r3, [pc, #112]	@ (800d3cc <prvHeapInit+0xb0>)
 800d35c:	2200      	movs	r2, #0
 800d35e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	68ba      	ldr	r2, [r7, #8]
 800d364:	4413      	add	r3, r2
 800d366:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d368:	2208      	movs	r2, #8
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	1a9b      	subs	r3, r3, r2
 800d36e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	f023 0307 	bic.w	r3, r3, #7
 800d376:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	4a15      	ldr	r2, [pc, #84]	@ (800d3d0 <prvHeapInit+0xb4>)
 800d37c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d37e:	4b14      	ldr	r3, [pc, #80]	@ (800d3d0 <prvHeapInit+0xb4>)
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	2200      	movs	r2, #0
 800d384:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d386:	4b12      	ldr	r3, [pc, #72]	@ (800d3d0 <prvHeapInit+0xb4>)
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	2200      	movs	r2, #0
 800d38c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d392:	683b      	ldr	r3, [r7, #0]
 800d394:	68fa      	ldr	r2, [r7, #12]
 800d396:	1ad2      	subs	r2, r2, r3
 800d398:	683b      	ldr	r3, [r7, #0]
 800d39a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d39c:	4b0c      	ldr	r3, [pc, #48]	@ (800d3d0 <prvHeapInit+0xb4>)
 800d39e:	681a      	ldr	r2, [r3, #0]
 800d3a0:	683b      	ldr	r3, [r7, #0]
 800d3a2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d3a4:	683b      	ldr	r3, [r7, #0]
 800d3a6:	685b      	ldr	r3, [r3, #4]
 800d3a8:	4a0a      	ldr	r2, [pc, #40]	@ (800d3d4 <prvHeapInit+0xb8>)
 800d3aa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d3ac:	683b      	ldr	r3, [r7, #0]
 800d3ae:	685b      	ldr	r3, [r3, #4]
 800d3b0:	4a09      	ldr	r2, [pc, #36]	@ (800d3d8 <prvHeapInit+0xbc>)
 800d3b2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d3b4:	4b09      	ldr	r3, [pc, #36]	@ (800d3dc <prvHeapInit+0xc0>)
 800d3b6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800d3ba:	601a      	str	r2, [r3, #0]
}
 800d3bc:	bf00      	nop
 800d3be:	3714      	adds	r7, #20
 800d3c0:	46bd      	mov	sp, r7
 800d3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c6:	4770      	bx	lr
 800d3c8:	200010b0 	.word	0x200010b0
 800d3cc:	200090b0 	.word	0x200090b0
 800d3d0:	200090b8 	.word	0x200090b8
 800d3d4:	200090c0 	.word	0x200090c0
 800d3d8:	200090bc 	.word	0x200090bc
 800d3dc:	200090cc 	.word	0x200090cc

0800d3e0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d3e0:	b480      	push	{r7}
 800d3e2:	b085      	sub	sp, #20
 800d3e4:	af00      	add	r7, sp, #0
 800d3e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d3e8:	4b28      	ldr	r3, [pc, #160]	@ (800d48c <prvInsertBlockIntoFreeList+0xac>)
 800d3ea:	60fb      	str	r3, [r7, #12]
 800d3ec:	e002      	b.n	800d3f4 <prvInsertBlockIntoFreeList+0x14>
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	60fb      	str	r3, [r7, #12]
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	687a      	ldr	r2, [r7, #4]
 800d3fa:	429a      	cmp	r2, r3
 800d3fc:	d8f7      	bhi.n	800d3ee <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	685b      	ldr	r3, [r3, #4]
 800d406:	68ba      	ldr	r2, [r7, #8]
 800d408:	4413      	add	r3, r2
 800d40a:	687a      	ldr	r2, [r7, #4]
 800d40c:	429a      	cmp	r2, r3
 800d40e:	d108      	bne.n	800d422 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	685a      	ldr	r2, [r3, #4]
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	685b      	ldr	r3, [r3, #4]
 800d418:	441a      	add	r2, r3
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	685b      	ldr	r3, [r3, #4]
 800d42a:	68ba      	ldr	r2, [r7, #8]
 800d42c:	441a      	add	r2, r3
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	429a      	cmp	r2, r3
 800d434:	d118      	bne.n	800d468 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	681a      	ldr	r2, [r3, #0]
 800d43a:	4b15      	ldr	r3, [pc, #84]	@ (800d490 <prvInsertBlockIntoFreeList+0xb0>)
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	429a      	cmp	r2, r3
 800d440:	d00d      	beq.n	800d45e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	685a      	ldr	r2, [r3, #4]
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	685b      	ldr	r3, [r3, #4]
 800d44c:	441a      	add	r2, r3
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	681a      	ldr	r2, [r3, #0]
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	601a      	str	r2, [r3, #0]
 800d45c:	e008      	b.n	800d470 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d45e:	4b0c      	ldr	r3, [pc, #48]	@ (800d490 <prvInsertBlockIntoFreeList+0xb0>)
 800d460:	681a      	ldr	r2, [r3, #0]
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	601a      	str	r2, [r3, #0]
 800d466:	e003      	b.n	800d470 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	681a      	ldr	r2, [r3, #0]
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d470:	68fa      	ldr	r2, [r7, #12]
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	429a      	cmp	r2, r3
 800d476:	d002      	beq.n	800d47e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	687a      	ldr	r2, [r7, #4]
 800d47c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d47e:	bf00      	nop
 800d480:	3714      	adds	r7, #20
 800d482:	46bd      	mov	sp, r7
 800d484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d488:	4770      	bx	lr
 800d48a:	bf00      	nop
 800d48c:	200090b0 	.word	0x200090b0
 800d490:	200090b8 	.word	0x200090b8

0800d494 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800d494:	b580      	push	{r7, lr}
 800d496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 800d498:	2200      	movs	r2, #0
 800d49a:	490e      	ldr	r1, [pc, #56]	@ (800d4d4 <MX_USB_HOST_Init+0x40>)
 800d49c:	480e      	ldr	r0, [pc, #56]	@ (800d4d8 <MX_USB_HOST_Init+0x44>)
 800d49e:	f7fb f903 	bl	80086a8 <USBH_Init>
 800d4a2:	4603      	mov	r3, r0
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d001      	beq.n	800d4ac <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800d4a8:	f7f3 fc52 	bl	8000d50 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_CDC_CLASS) != USBH_OK)
 800d4ac:	490b      	ldr	r1, [pc, #44]	@ (800d4dc <MX_USB_HOST_Init+0x48>)
 800d4ae:	480a      	ldr	r0, [pc, #40]	@ (800d4d8 <MX_USB_HOST_Init+0x44>)
 800d4b0:	f7fb f9c9 	bl	8008846 <USBH_RegisterClass>
 800d4b4:	4603      	mov	r3, r0
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d001      	beq.n	800d4be <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800d4ba:	f7f3 fc49 	bl	8000d50 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 800d4be:	4806      	ldr	r0, [pc, #24]	@ (800d4d8 <MX_USB_HOST_Init+0x44>)
 800d4c0:	f7fb fa4d 	bl	800895e <USBH_Start>
 800d4c4:	4603      	mov	r3, r0
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d001      	beq.n	800d4ce <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800d4ca:	f7f3 fc41 	bl	8000d50 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800d4ce:	bf00      	nop
 800d4d0:	bd80      	pop	{r7, pc}
 800d4d2:	bf00      	nop
 800d4d4:	0800d4e1 	.word	0x0800d4e1
 800d4d8:	200090d0 	.word	0x200090d0
 800d4dc:	2000000c 	.word	0x2000000c

0800d4e0 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800d4e0:	b480      	push	{r7}
 800d4e2:	b083      	sub	sp, #12
 800d4e4:	af00      	add	r7, sp, #0
 800d4e6:	6078      	str	r0, [r7, #4]
 800d4e8:	460b      	mov	r3, r1
 800d4ea:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800d4ec:	78fb      	ldrb	r3, [r7, #3]
 800d4ee:	3b01      	subs	r3, #1
 800d4f0:	2b04      	cmp	r3, #4
 800d4f2:	d819      	bhi.n	800d528 <USBH_UserProcess+0x48>
 800d4f4:	a201      	add	r2, pc, #4	@ (adr r2, 800d4fc <USBH_UserProcess+0x1c>)
 800d4f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4fa:	bf00      	nop
 800d4fc:	0800d529 	.word	0x0800d529
 800d500:	0800d519 	.word	0x0800d519
 800d504:	0800d529 	.word	0x0800d529
 800d508:	0800d521 	.word	0x0800d521
 800d50c:	0800d511 	.word	0x0800d511
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800d510:	4b09      	ldr	r3, [pc, #36]	@ (800d538 <USBH_UserProcess+0x58>)
 800d512:	2203      	movs	r2, #3
 800d514:	701a      	strb	r2, [r3, #0]
  break;
 800d516:	e008      	b.n	800d52a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800d518:	4b07      	ldr	r3, [pc, #28]	@ (800d538 <USBH_UserProcess+0x58>)
 800d51a:	2202      	movs	r2, #2
 800d51c:	701a      	strb	r2, [r3, #0]
  break;
 800d51e:	e004      	b.n	800d52a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800d520:	4b05      	ldr	r3, [pc, #20]	@ (800d538 <USBH_UserProcess+0x58>)
 800d522:	2201      	movs	r2, #1
 800d524:	701a      	strb	r2, [r3, #0]
  break;
 800d526:	e000      	b.n	800d52a <USBH_UserProcess+0x4a>

  default:
  break;
 800d528:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800d52a:	bf00      	nop
 800d52c:	370c      	adds	r7, #12
 800d52e:	46bd      	mov	sp, r7
 800d530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d534:	4770      	bx	lr
 800d536:	bf00      	nop
 800d538:	200094b4 	.word	0x200094b4

0800d53c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800d53c:	b580      	push	{r7, lr}
 800d53e:	b08a      	sub	sp, #40	@ 0x28
 800d540:	af00      	add	r7, sp, #0
 800d542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d544:	f107 0314 	add.w	r3, r7, #20
 800d548:	2200      	movs	r2, #0
 800d54a:	601a      	str	r2, [r3, #0]
 800d54c:	605a      	str	r2, [r3, #4]
 800d54e:	609a      	str	r2, [r3, #8]
 800d550:	60da      	str	r2, [r3, #12]
 800d552:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	4a24      	ldr	r2, [pc, #144]	@ (800d5ec <HAL_HCD_MspInit+0xb0>)
 800d55a:	4293      	cmp	r3, r2
 800d55c:	d141      	bne.n	800d5e2 <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d55e:	2300      	movs	r3, #0
 800d560:	613b      	str	r3, [r7, #16]
 800d562:	4b23      	ldr	r3, [pc, #140]	@ (800d5f0 <HAL_HCD_MspInit+0xb4>)
 800d564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d566:	4a22      	ldr	r2, [pc, #136]	@ (800d5f0 <HAL_HCD_MspInit+0xb4>)
 800d568:	f043 0302 	orr.w	r3, r3, #2
 800d56c:	6313      	str	r3, [r2, #48]	@ 0x30
 800d56e:	4b20      	ldr	r3, [pc, #128]	@ (800d5f0 <HAL_HCD_MspInit+0xb4>)
 800d570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d572:	f003 0302 	and.w	r3, r3, #2
 800d576:	613b      	str	r3, [r7, #16]
 800d578:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 800d57a:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 800d57e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d580:	2302      	movs	r3, #2
 800d582:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d584:	2300      	movs	r3, #0
 800d586:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d588:	2300      	movs	r3, #0
 800d58a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800d58c:	230c      	movs	r3, #12
 800d58e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d590:	f107 0314 	add.w	r3, r7, #20
 800d594:	4619      	mov	r1, r3
 800d596:	4817      	ldr	r0, [pc, #92]	@ (800d5f4 <HAL_HCD_MspInit+0xb8>)
 800d598:	f7f4 fbc6 	bl	8001d28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800d59c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800d5a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d5a2:	2300      	movs	r3, #0
 800d5a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d5a6:	2300      	movs	r3, #0
 800d5a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800d5aa:	f107 0314 	add.w	r3, r7, #20
 800d5ae:	4619      	mov	r1, r3
 800d5b0:	4810      	ldr	r0, [pc, #64]	@ (800d5f4 <HAL_HCD_MspInit+0xb8>)
 800d5b2:	f7f4 fbb9 	bl	8001d28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800d5b6:	2300      	movs	r3, #0
 800d5b8:	60fb      	str	r3, [r7, #12]
 800d5ba:	4b0d      	ldr	r3, [pc, #52]	@ (800d5f0 <HAL_HCD_MspInit+0xb4>)
 800d5bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d5be:	4a0c      	ldr	r2, [pc, #48]	@ (800d5f0 <HAL_HCD_MspInit+0xb4>)
 800d5c0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800d5c4:	6313      	str	r3, [r2, #48]	@ 0x30
 800d5c6:	4b0a      	ldr	r3, [pc, #40]	@ (800d5f0 <HAL_HCD_MspInit+0xb4>)
 800d5c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d5ca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d5ce:	60fb      	str	r3, [r7, #12]
 800d5d0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 800d5d2:	2200      	movs	r2, #0
 800d5d4:	2105      	movs	r1, #5
 800d5d6:	204d      	movs	r0, #77	@ 0x4d
 800d5d8:	f7f4 f974 	bl	80018c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800d5dc:	204d      	movs	r0, #77	@ 0x4d
 800d5de:	f7f4 f98d 	bl	80018fc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800d5e2:	bf00      	nop
 800d5e4:	3728      	adds	r7, #40	@ 0x28
 800d5e6:	46bd      	mov	sp, r7
 800d5e8:	bd80      	pop	{r7, pc}
 800d5ea:	bf00      	nop
 800d5ec:	40040000 	.word	0x40040000
 800d5f0:	40023800 	.word	0x40023800
 800d5f4:	40020400 	.word	0x40020400

0800d5f8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800d5f8:	b580      	push	{r7, lr}
 800d5fa:	b082      	sub	sp, #8
 800d5fc:	af00      	add	r7, sp, #0
 800d5fe:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800d606:	4618      	mov	r0, r3
 800d608:	f7fb fe5b 	bl	80092c2 <USBH_LL_IncTimer>
}
 800d60c:	bf00      	nop
 800d60e:	3708      	adds	r7, #8
 800d610:	46bd      	mov	sp, r7
 800d612:	bd80      	pop	{r7, pc}

0800d614 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800d614:	b580      	push	{r7, lr}
 800d616:	b082      	sub	sp, #8
 800d618:	af00      	add	r7, sp, #0
 800d61a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800d622:	4618      	mov	r0, r3
 800d624:	f7fb fe9f 	bl	8009366 <USBH_LL_Connect>
}
 800d628:	bf00      	nop
 800d62a:	3708      	adds	r7, #8
 800d62c:	46bd      	mov	sp, r7
 800d62e:	bd80      	pop	{r7, pc}

0800d630 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800d630:	b580      	push	{r7, lr}
 800d632:	b082      	sub	sp, #8
 800d634:	af00      	add	r7, sp, #0
 800d636:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800d63e:	4618      	mov	r0, r3
 800d640:	f7fb feb4 	bl	80093ac <USBH_LL_Disconnect>
}
 800d644:	bf00      	nop
 800d646:	3708      	adds	r7, #8
 800d648:	46bd      	mov	sp, r7
 800d64a:	bd80      	pop	{r7, pc}

0800d64c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800d64c:	b580      	push	{r7, lr}
 800d64e:	b082      	sub	sp, #8
 800d650:	af00      	add	r7, sp, #0
 800d652:	6078      	str	r0, [r7, #4]
 800d654:	460b      	mov	r3, r1
 800d656:	70fb      	strb	r3, [r7, #3]
 800d658:	4613      	mov	r3, r2
 800d65a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800d662:	4618      	mov	r0, r3
 800d664:	f7fb feeb 	bl	800943e <USBH_LL_NotifyURBChange>
#endif
}
 800d668:	bf00      	nop
 800d66a:	3708      	adds	r7, #8
 800d66c:	46bd      	mov	sp, r7
 800d66e:	bd80      	pop	{r7, pc}

0800d670 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800d670:	b580      	push	{r7, lr}
 800d672:	b082      	sub	sp, #8
 800d674:	af00      	add	r7, sp, #0
 800d676:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800d67e:	4618      	mov	r0, r3
 800d680:	f7fb fe49 	bl	8009316 <USBH_LL_PortEnabled>
}
 800d684:	bf00      	nop
 800d686:	3708      	adds	r7, #8
 800d688:	46bd      	mov	sp, r7
 800d68a:	bd80      	pop	{r7, pc}

0800d68c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800d68c:	b580      	push	{r7, lr}
 800d68e:	b082      	sub	sp, #8
 800d690:	af00      	add	r7, sp, #0
 800d692:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800d69a:	4618      	mov	r0, r3
 800d69c:	f7fb fe55 	bl	800934a <USBH_LL_PortDisabled>
}
 800d6a0:	bf00      	nop
 800d6a2:	3708      	adds	r7, #8
 800d6a4:	46bd      	mov	sp, r7
 800d6a6:	bd80      	pop	{r7, pc}

0800d6a8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800d6a8:	b580      	push	{r7, lr}
 800d6aa:	b082      	sub	sp, #8
 800d6ac:	af00      	add	r7, sp, #0
 800d6ae:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d132      	bne.n	800d720 <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 800d6ba:	4a1c      	ldr	r2, [pc, #112]	@ (800d72c <USBH_LL_Init+0x84>)
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_HS;
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	4a19      	ldr	r2, [pc, #100]	@ (800d72c <USBH_LL_Init+0x84>)
 800d6c6:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800d6ca:	4b18      	ldr	r3, [pc, #96]	@ (800d72c <USBH_LL_Init+0x84>)
 800d6cc:	4a18      	ldr	r2, [pc, #96]	@ (800d730 <USBH_LL_Init+0x88>)
 800d6ce:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 800d6d0:	4b16      	ldr	r3, [pc, #88]	@ (800d72c <USBH_LL_Init+0x84>)
 800d6d2:	220c      	movs	r2, #12
 800d6d4:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 800d6d6:	4b15      	ldr	r3, [pc, #84]	@ (800d72c <USBH_LL_Init+0x84>)
 800d6d8:	2201      	movs	r2, #1
 800d6da:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800d6dc:	4b13      	ldr	r3, [pc, #76]	@ (800d72c <USBH_LL_Init+0x84>)
 800d6de:	2200      	movs	r2, #0
 800d6e0:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800d6e2:	4b12      	ldr	r3, [pc, #72]	@ (800d72c <USBH_LL_Init+0x84>)
 800d6e4:	2202      	movs	r2, #2
 800d6e6:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800d6e8:	4b10      	ldr	r3, [pc, #64]	@ (800d72c <USBH_LL_Init+0x84>)
 800d6ea:	2200      	movs	r2, #0
 800d6ec:	729a      	strb	r2, [r3, #10]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800d6ee:	4b0f      	ldr	r3, [pc, #60]	@ (800d72c <USBH_LL_Init+0x84>)
 800d6f0:	2200      	movs	r2, #0
 800d6f2:	72da      	strb	r2, [r3, #11]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800d6f4:	4b0d      	ldr	r3, [pc, #52]	@ (800d72c <USBH_LL_Init+0x84>)
 800d6f6:	2200      	movs	r2, #0
 800d6f8:	739a      	strb	r2, [r3, #14]
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800d6fa:	4b0c      	ldr	r3, [pc, #48]	@ (800d72c <USBH_LL_Init+0x84>)
 800d6fc:	2200      	movs	r2, #0
 800d6fe:	741a      	strb	r2, [r3, #16]
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 800d700:	480a      	ldr	r0, [pc, #40]	@ (800d72c <USBH_LL_Init+0x84>)
 800d702:	f7f4 fd14 	bl	800212e <HAL_HCD_Init>
 800d706:	4603      	mov	r3, r0
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d001      	beq.n	800d710 <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 800d70c:	f7f3 fb20 	bl	8000d50 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 800d710:	4806      	ldr	r0, [pc, #24]	@ (800d72c <USBH_LL_Init+0x84>)
 800d712:	f7f5 f975 	bl	8002a00 <HAL_HCD_GetCurrentFrame>
 800d716:	4603      	mov	r3, r0
 800d718:	4619      	mov	r1, r3
 800d71a:	6878      	ldr	r0, [r7, #4]
 800d71c:	f7fb fdc2 	bl	80092a4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800d720:	2300      	movs	r3, #0
}
 800d722:	4618      	mov	r0, r3
 800d724:	3708      	adds	r7, #8
 800d726:	46bd      	mov	sp, r7
 800d728:	bd80      	pop	{r7, pc}
 800d72a:	bf00      	nop
 800d72c:	200094b8 	.word	0x200094b8
 800d730:	40040000 	.word	0x40040000

0800d734 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800d734:	b580      	push	{r7, lr}
 800d736:	b084      	sub	sp, #16
 800d738:	af00      	add	r7, sp, #0
 800d73a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d73c:	2300      	movs	r3, #0
 800d73e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d740:	2300      	movs	r3, #0
 800d742:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800d74a:	4618      	mov	r0, r3
 800d74c:	f7f5 f8e0 	bl	8002910 <HAL_HCD_Start>
 800d750:	4603      	mov	r3, r0
 800d752:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d754:	7bfb      	ldrb	r3, [r7, #15]
 800d756:	4618      	mov	r0, r3
 800d758:	f000 f95e 	bl	800da18 <USBH_Get_USB_Status>
 800d75c:	4603      	mov	r3, r0
 800d75e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d760:	7bbb      	ldrb	r3, [r7, #14]
}
 800d762:	4618      	mov	r0, r3
 800d764:	3710      	adds	r7, #16
 800d766:	46bd      	mov	sp, r7
 800d768:	bd80      	pop	{r7, pc}

0800d76a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800d76a:	b580      	push	{r7, lr}
 800d76c:	b084      	sub	sp, #16
 800d76e:	af00      	add	r7, sp, #0
 800d770:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d772:	2300      	movs	r3, #0
 800d774:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d776:	2300      	movs	r3, #0
 800d778:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800d780:	4618      	mov	r0, r3
 800d782:	f7f5 f8e8 	bl	8002956 <HAL_HCD_Stop>
 800d786:	4603      	mov	r3, r0
 800d788:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d78a:	7bfb      	ldrb	r3, [r7, #15]
 800d78c:	4618      	mov	r0, r3
 800d78e:	f000 f943 	bl	800da18 <USBH_Get_USB_Status>
 800d792:	4603      	mov	r3, r0
 800d794:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d796:	7bbb      	ldrb	r3, [r7, #14]
}
 800d798:	4618      	mov	r0, r3
 800d79a:	3710      	adds	r7, #16
 800d79c:	46bd      	mov	sp, r7
 800d79e:	bd80      	pop	{r7, pc}

0800d7a0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800d7a0:	b580      	push	{r7, lr}
 800d7a2:	b084      	sub	sp, #16
 800d7a4:	af00      	add	r7, sp, #0
 800d7a6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800d7a8:	2301      	movs	r3, #1
 800d7aa:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	f7f5 f932 	bl	8002a1c <HAL_HCD_GetCurrentSpeed>
 800d7b8:	4603      	mov	r3, r0
 800d7ba:	2b02      	cmp	r3, #2
 800d7bc:	d00c      	beq.n	800d7d8 <USBH_LL_GetSpeed+0x38>
 800d7be:	2b02      	cmp	r3, #2
 800d7c0:	d80d      	bhi.n	800d7de <USBH_LL_GetSpeed+0x3e>
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d002      	beq.n	800d7cc <USBH_LL_GetSpeed+0x2c>
 800d7c6:	2b01      	cmp	r3, #1
 800d7c8:	d003      	beq.n	800d7d2 <USBH_LL_GetSpeed+0x32>
 800d7ca:	e008      	b.n	800d7de <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800d7cc:	2300      	movs	r3, #0
 800d7ce:	73fb      	strb	r3, [r7, #15]
    break;
 800d7d0:	e008      	b.n	800d7e4 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800d7d2:	2301      	movs	r3, #1
 800d7d4:	73fb      	strb	r3, [r7, #15]
    break;
 800d7d6:	e005      	b.n	800d7e4 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800d7d8:	2302      	movs	r3, #2
 800d7da:	73fb      	strb	r3, [r7, #15]
    break;
 800d7dc:	e002      	b.n	800d7e4 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800d7de:	2301      	movs	r3, #1
 800d7e0:	73fb      	strb	r3, [r7, #15]
    break;
 800d7e2:	bf00      	nop
  }
  return  speed;
 800d7e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7e6:	4618      	mov	r0, r3
 800d7e8:	3710      	adds	r7, #16
 800d7ea:	46bd      	mov	sp, r7
 800d7ec:	bd80      	pop	{r7, pc}

0800d7ee <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800d7ee:	b580      	push	{r7, lr}
 800d7f0:	b084      	sub	sp, #16
 800d7f2:	af00      	add	r7, sp, #0
 800d7f4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d7f6:	2300      	movs	r3, #0
 800d7f8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d7fa:	2300      	movs	r3, #0
 800d7fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800d804:	4618      	mov	r0, r3
 800d806:	f7f5 f8c3 	bl	8002990 <HAL_HCD_ResetPort>
 800d80a:	4603      	mov	r3, r0
 800d80c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d80e:	7bfb      	ldrb	r3, [r7, #15]
 800d810:	4618      	mov	r0, r3
 800d812:	f000 f901 	bl	800da18 <USBH_Get_USB_Status>
 800d816:	4603      	mov	r3, r0
 800d818:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d81a:	7bbb      	ldrb	r3, [r7, #14]
}
 800d81c:	4618      	mov	r0, r3
 800d81e:	3710      	adds	r7, #16
 800d820:	46bd      	mov	sp, r7
 800d822:	bd80      	pop	{r7, pc}

0800d824 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d824:	b580      	push	{r7, lr}
 800d826:	b082      	sub	sp, #8
 800d828:	af00      	add	r7, sp, #0
 800d82a:	6078      	str	r0, [r7, #4]
 800d82c:	460b      	mov	r3, r1
 800d82e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800d836:	78fa      	ldrb	r2, [r7, #3]
 800d838:	4611      	mov	r1, r2
 800d83a:	4618      	mov	r0, r3
 800d83c:	f7f5 f8cb 	bl	80029d6 <HAL_HCD_HC_GetXferCount>
 800d840:	4603      	mov	r3, r0
}
 800d842:	4618      	mov	r0, r3
 800d844:	3708      	adds	r7, #8
 800d846:	46bd      	mov	sp, r7
 800d848:	bd80      	pop	{r7, pc}

0800d84a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800d84a:	b590      	push	{r4, r7, lr}
 800d84c:	b089      	sub	sp, #36	@ 0x24
 800d84e:	af04      	add	r7, sp, #16
 800d850:	6078      	str	r0, [r7, #4]
 800d852:	4608      	mov	r0, r1
 800d854:	4611      	mov	r1, r2
 800d856:	461a      	mov	r2, r3
 800d858:	4603      	mov	r3, r0
 800d85a:	70fb      	strb	r3, [r7, #3]
 800d85c:	460b      	mov	r3, r1
 800d85e:	70bb      	strb	r3, [r7, #2]
 800d860:	4613      	mov	r3, r2
 800d862:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d864:	2300      	movs	r3, #0
 800d866:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d868:	2300      	movs	r3, #0
 800d86a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800d872:	787c      	ldrb	r4, [r7, #1]
 800d874:	78ba      	ldrb	r2, [r7, #2]
 800d876:	78f9      	ldrb	r1, [r7, #3]
 800d878:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800d87a:	9302      	str	r3, [sp, #8]
 800d87c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800d880:	9301      	str	r3, [sp, #4]
 800d882:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d886:	9300      	str	r3, [sp, #0]
 800d888:	4623      	mov	r3, r4
 800d88a:	f7f4 fcb7 	bl	80021fc <HAL_HCD_HC_Init>
 800d88e:	4603      	mov	r3, r0
 800d890:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800d892:	7bfb      	ldrb	r3, [r7, #15]
 800d894:	4618      	mov	r0, r3
 800d896:	f000 f8bf 	bl	800da18 <USBH_Get_USB_Status>
 800d89a:	4603      	mov	r3, r0
 800d89c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d89e:	7bbb      	ldrb	r3, [r7, #14]
}
 800d8a0:	4618      	mov	r0, r3
 800d8a2:	3714      	adds	r7, #20
 800d8a4:	46bd      	mov	sp, r7
 800d8a6:	bd90      	pop	{r4, r7, pc}

0800d8a8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d8a8:	b580      	push	{r7, lr}
 800d8aa:	b084      	sub	sp, #16
 800d8ac:	af00      	add	r7, sp, #0
 800d8ae:	6078      	str	r0, [r7, #4]
 800d8b0:	460b      	mov	r3, r1
 800d8b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d8b4:	2300      	movs	r3, #0
 800d8b6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d8b8:	2300      	movs	r3, #0
 800d8ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800d8c2:	78fa      	ldrb	r2, [r7, #3]
 800d8c4:	4611      	mov	r1, r2
 800d8c6:	4618      	mov	r0, r3
 800d8c8:	f7f4 fd50 	bl	800236c <HAL_HCD_HC_Halt>
 800d8cc:	4603      	mov	r3, r0
 800d8ce:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d8d0:	7bfb      	ldrb	r3, [r7, #15]
 800d8d2:	4618      	mov	r0, r3
 800d8d4:	f000 f8a0 	bl	800da18 <USBH_Get_USB_Status>
 800d8d8:	4603      	mov	r3, r0
 800d8da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d8dc:	7bbb      	ldrb	r3, [r7, #14]
}
 800d8de:	4618      	mov	r0, r3
 800d8e0:	3710      	adds	r7, #16
 800d8e2:	46bd      	mov	sp, r7
 800d8e4:	bd80      	pop	{r7, pc}

0800d8e6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800d8e6:	b590      	push	{r4, r7, lr}
 800d8e8:	b089      	sub	sp, #36	@ 0x24
 800d8ea:	af04      	add	r7, sp, #16
 800d8ec:	6078      	str	r0, [r7, #4]
 800d8ee:	4608      	mov	r0, r1
 800d8f0:	4611      	mov	r1, r2
 800d8f2:	461a      	mov	r2, r3
 800d8f4:	4603      	mov	r3, r0
 800d8f6:	70fb      	strb	r3, [r7, #3]
 800d8f8:	460b      	mov	r3, r1
 800d8fa:	70bb      	strb	r3, [r7, #2]
 800d8fc:	4613      	mov	r3, r2
 800d8fe:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d900:	2300      	movs	r3, #0
 800d902:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d904:	2300      	movs	r3, #0
 800d906:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800d90e:	787c      	ldrb	r4, [r7, #1]
 800d910:	78ba      	ldrb	r2, [r7, #2]
 800d912:	78f9      	ldrb	r1, [r7, #3]
 800d914:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800d918:	9303      	str	r3, [sp, #12]
 800d91a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800d91c:	9302      	str	r3, [sp, #8]
 800d91e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d920:	9301      	str	r3, [sp, #4]
 800d922:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d926:	9300      	str	r3, [sp, #0]
 800d928:	4623      	mov	r3, r4
 800d92a:	f7f4 fd43 	bl	80023b4 <HAL_HCD_HC_SubmitRequest>
 800d92e:	4603      	mov	r3, r0
 800d930:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800d932:	7bfb      	ldrb	r3, [r7, #15]
 800d934:	4618      	mov	r0, r3
 800d936:	f000 f86f 	bl	800da18 <USBH_Get_USB_Status>
 800d93a:	4603      	mov	r3, r0
 800d93c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d93e:	7bbb      	ldrb	r3, [r7, #14]
}
 800d940:	4618      	mov	r0, r3
 800d942:	3714      	adds	r7, #20
 800d944:	46bd      	mov	sp, r7
 800d946:	bd90      	pop	{r4, r7, pc}

0800d948 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d948:	b580      	push	{r7, lr}
 800d94a:	b082      	sub	sp, #8
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	6078      	str	r0, [r7, #4]
 800d950:	460b      	mov	r3, r1
 800d952:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800d95a:	78fa      	ldrb	r2, [r7, #3]
 800d95c:	4611      	mov	r1, r2
 800d95e:	4618      	mov	r0, r3
 800d960:	f7f5 f824 	bl	80029ac <HAL_HCD_HC_GetURBState>
 800d964:	4603      	mov	r3, r0
}
 800d966:	4618      	mov	r0, r3
 800d968:	3708      	adds	r7, #8
 800d96a:	46bd      	mov	sp, r7
 800d96c:	bd80      	pop	{r7, pc}

0800d96e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800d96e:	b580      	push	{r7, lr}
 800d970:	b082      	sub	sp, #8
 800d972:	af00      	add	r7, sp, #0
 800d974:	6078      	str	r0, [r7, #4]
 800d976:	460b      	mov	r3, r1
 800d978:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800d980:	2b00      	cmp	r3, #0
 800d982:	d103      	bne.n	800d98c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 800d984:	78fb      	ldrb	r3, [r7, #3]
 800d986:	4618      	mov	r0, r3
 800d988:	f000 f872 	bl	800da70 <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800d98c:	20c8      	movs	r0, #200	@ 0xc8
 800d98e:	f7f3 febd 	bl	800170c <HAL_Delay>
  return USBH_OK;
 800d992:	2300      	movs	r3, #0
}
 800d994:	4618      	mov	r0, r3
 800d996:	3708      	adds	r7, #8
 800d998:	46bd      	mov	sp, r7
 800d99a:	bd80      	pop	{r7, pc}

0800d99c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800d99c:	b480      	push	{r7}
 800d99e:	b085      	sub	sp, #20
 800d9a0:	af00      	add	r7, sp, #0
 800d9a2:	6078      	str	r0, [r7, #4]
 800d9a4:	460b      	mov	r3, r1
 800d9a6:	70fb      	strb	r3, [r7, #3]
 800d9a8:	4613      	mov	r3, r2
 800d9aa:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800d9b2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800d9b4:	78fa      	ldrb	r2, [r7, #3]
 800d9b6:	68f9      	ldr	r1, [r7, #12]
 800d9b8:	4613      	mov	r3, r2
 800d9ba:	011b      	lsls	r3, r3, #4
 800d9bc:	1a9b      	subs	r3, r3, r2
 800d9be:	009b      	lsls	r3, r3, #2
 800d9c0:	440b      	add	r3, r1
 800d9c2:	3317      	adds	r3, #23
 800d9c4:	781b      	ldrb	r3, [r3, #0]
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d00a      	beq.n	800d9e0 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800d9ca:	78fa      	ldrb	r2, [r7, #3]
 800d9cc:	68f9      	ldr	r1, [r7, #12]
 800d9ce:	4613      	mov	r3, r2
 800d9d0:	011b      	lsls	r3, r3, #4
 800d9d2:	1a9b      	subs	r3, r3, r2
 800d9d4:	009b      	lsls	r3, r3, #2
 800d9d6:	440b      	add	r3, r1
 800d9d8:	333c      	adds	r3, #60	@ 0x3c
 800d9da:	78ba      	ldrb	r2, [r7, #2]
 800d9dc:	701a      	strb	r2, [r3, #0]
 800d9de:	e009      	b.n	800d9f4 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800d9e0:	78fa      	ldrb	r2, [r7, #3]
 800d9e2:	68f9      	ldr	r1, [r7, #12]
 800d9e4:	4613      	mov	r3, r2
 800d9e6:	011b      	lsls	r3, r3, #4
 800d9e8:	1a9b      	subs	r3, r3, r2
 800d9ea:	009b      	lsls	r3, r3, #2
 800d9ec:	440b      	add	r3, r1
 800d9ee:	333d      	adds	r3, #61	@ 0x3d
 800d9f0:	78ba      	ldrb	r2, [r7, #2]
 800d9f2:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800d9f4:	2300      	movs	r3, #0
}
 800d9f6:	4618      	mov	r0, r3
 800d9f8:	3714      	adds	r7, #20
 800d9fa:	46bd      	mov	sp, r7
 800d9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da00:	4770      	bx	lr

0800da02 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800da02:	b580      	push	{r7, lr}
 800da04:	b082      	sub	sp, #8
 800da06:	af00      	add	r7, sp, #0
 800da08:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800da0a:	6878      	ldr	r0, [r7, #4]
 800da0c:	f7f3 fe7e 	bl	800170c <HAL_Delay>
}
 800da10:	bf00      	nop
 800da12:	3708      	adds	r7, #8
 800da14:	46bd      	mov	sp, r7
 800da16:	bd80      	pop	{r7, pc}

0800da18 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800da18:	b480      	push	{r7}
 800da1a:	b085      	sub	sp, #20
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	4603      	mov	r3, r0
 800da20:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800da22:	2300      	movs	r3, #0
 800da24:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800da26:	79fb      	ldrb	r3, [r7, #7]
 800da28:	2b03      	cmp	r3, #3
 800da2a:	d817      	bhi.n	800da5c <USBH_Get_USB_Status+0x44>
 800da2c:	a201      	add	r2, pc, #4	@ (adr r2, 800da34 <USBH_Get_USB_Status+0x1c>)
 800da2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da32:	bf00      	nop
 800da34:	0800da45 	.word	0x0800da45
 800da38:	0800da4b 	.word	0x0800da4b
 800da3c:	0800da51 	.word	0x0800da51
 800da40:	0800da57 	.word	0x0800da57
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800da44:	2300      	movs	r3, #0
 800da46:	73fb      	strb	r3, [r7, #15]
    break;
 800da48:	e00b      	b.n	800da62 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800da4a:	2302      	movs	r3, #2
 800da4c:	73fb      	strb	r3, [r7, #15]
    break;
 800da4e:	e008      	b.n	800da62 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800da50:	2301      	movs	r3, #1
 800da52:	73fb      	strb	r3, [r7, #15]
    break;
 800da54:	e005      	b.n	800da62 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800da56:	2302      	movs	r3, #2
 800da58:	73fb      	strb	r3, [r7, #15]
    break;
 800da5a:	e002      	b.n	800da62 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800da5c:	2302      	movs	r3, #2
 800da5e:	73fb      	strb	r3, [r7, #15]
    break;
 800da60:	bf00      	nop
  }
  return usb_status;
 800da62:	7bfb      	ldrb	r3, [r7, #15]
}
 800da64:	4618      	mov	r0, r3
 800da66:	3714      	adds	r7, #20
 800da68:	46bd      	mov	sp, r7
 800da6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da6e:	4770      	bx	lr

0800da70 <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 800da70:	b580      	push	{r7, lr}
 800da72:	b084      	sub	sp, #16
 800da74:	af00      	add	r7, sp, #0
 800da76:	4603      	mov	r3, r0
 800da78:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800da7a:	79fb      	ldrb	r3, [r7, #7]
 800da7c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 800da7e:	79fb      	ldrb	r3, [r7, #7]
 800da80:	2b00      	cmp	r3, #0
 800da82:	d102      	bne.n	800da8a <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800da84:	2301      	movs	r3, #1
 800da86:	73fb      	strb	r3, [r7, #15]
 800da88:	e001      	b.n	800da8e <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800da8a:	2300      	movs	r3, #0
 800da8c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 800da8e:	7bfb      	ldrb	r3, [r7, #15]
 800da90:	461a      	mov	r2, r3
 800da92:	2110      	movs	r1, #16
 800da94:	4803      	ldr	r0, [pc, #12]	@ (800daa4 <MX_DriverVbusHS+0x34>)
 800da96:	f7f4 faf3 	bl	8002080 <HAL_GPIO_WritePin>
}
 800da9a:	bf00      	nop
 800da9c:	3710      	adds	r7, #16
 800da9e:	46bd      	mov	sp, r7
 800daa0:	bd80      	pop	{r7, pc}
 800daa2:	bf00      	nop
 800daa4:	40020800 	.word	0x40020800

0800daa8 <malloc>:
 800daa8:	4b02      	ldr	r3, [pc, #8]	@ (800dab4 <malloc+0xc>)
 800daaa:	4601      	mov	r1, r0
 800daac:	6818      	ldr	r0, [r3, #0]
 800daae:	f000 b82d 	b.w	800db0c <_malloc_r>
 800dab2:	bf00      	nop
 800dab4:	20000030 	.word	0x20000030

0800dab8 <free>:
 800dab8:	4b02      	ldr	r3, [pc, #8]	@ (800dac4 <free+0xc>)
 800daba:	4601      	mov	r1, r0
 800dabc:	6818      	ldr	r0, [r3, #0]
 800dabe:	f000 b903 	b.w	800dcc8 <_free_r>
 800dac2:	bf00      	nop
 800dac4:	20000030 	.word	0x20000030

0800dac8 <sbrk_aligned>:
 800dac8:	b570      	push	{r4, r5, r6, lr}
 800daca:	4e0f      	ldr	r6, [pc, #60]	@ (800db08 <sbrk_aligned+0x40>)
 800dacc:	460c      	mov	r4, r1
 800dace:	6831      	ldr	r1, [r6, #0]
 800dad0:	4605      	mov	r5, r0
 800dad2:	b911      	cbnz	r1, 800dada <sbrk_aligned+0x12>
 800dad4:	f000 f8ae 	bl	800dc34 <_sbrk_r>
 800dad8:	6030      	str	r0, [r6, #0]
 800dada:	4621      	mov	r1, r4
 800dadc:	4628      	mov	r0, r5
 800dade:	f000 f8a9 	bl	800dc34 <_sbrk_r>
 800dae2:	1c43      	adds	r3, r0, #1
 800dae4:	d103      	bne.n	800daee <sbrk_aligned+0x26>
 800dae6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800daea:	4620      	mov	r0, r4
 800daec:	bd70      	pop	{r4, r5, r6, pc}
 800daee:	1cc4      	adds	r4, r0, #3
 800daf0:	f024 0403 	bic.w	r4, r4, #3
 800daf4:	42a0      	cmp	r0, r4
 800daf6:	d0f8      	beq.n	800daea <sbrk_aligned+0x22>
 800daf8:	1a21      	subs	r1, r4, r0
 800dafa:	4628      	mov	r0, r5
 800dafc:	f000 f89a 	bl	800dc34 <_sbrk_r>
 800db00:	3001      	adds	r0, #1
 800db02:	d1f2      	bne.n	800daea <sbrk_aligned+0x22>
 800db04:	e7ef      	b.n	800dae6 <sbrk_aligned+0x1e>
 800db06:	bf00      	nop
 800db08:	20009898 	.word	0x20009898

0800db0c <_malloc_r>:
 800db0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800db10:	1ccd      	adds	r5, r1, #3
 800db12:	f025 0503 	bic.w	r5, r5, #3
 800db16:	3508      	adds	r5, #8
 800db18:	2d0c      	cmp	r5, #12
 800db1a:	bf38      	it	cc
 800db1c:	250c      	movcc	r5, #12
 800db1e:	2d00      	cmp	r5, #0
 800db20:	4606      	mov	r6, r0
 800db22:	db01      	blt.n	800db28 <_malloc_r+0x1c>
 800db24:	42a9      	cmp	r1, r5
 800db26:	d904      	bls.n	800db32 <_malloc_r+0x26>
 800db28:	230c      	movs	r3, #12
 800db2a:	6033      	str	r3, [r6, #0]
 800db2c:	2000      	movs	r0, #0
 800db2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db32:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800dc08 <_malloc_r+0xfc>
 800db36:	f000 f869 	bl	800dc0c <__malloc_lock>
 800db3a:	f8d8 3000 	ldr.w	r3, [r8]
 800db3e:	461c      	mov	r4, r3
 800db40:	bb44      	cbnz	r4, 800db94 <_malloc_r+0x88>
 800db42:	4629      	mov	r1, r5
 800db44:	4630      	mov	r0, r6
 800db46:	f7ff ffbf 	bl	800dac8 <sbrk_aligned>
 800db4a:	1c43      	adds	r3, r0, #1
 800db4c:	4604      	mov	r4, r0
 800db4e:	d158      	bne.n	800dc02 <_malloc_r+0xf6>
 800db50:	f8d8 4000 	ldr.w	r4, [r8]
 800db54:	4627      	mov	r7, r4
 800db56:	2f00      	cmp	r7, #0
 800db58:	d143      	bne.n	800dbe2 <_malloc_r+0xd6>
 800db5a:	2c00      	cmp	r4, #0
 800db5c:	d04b      	beq.n	800dbf6 <_malloc_r+0xea>
 800db5e:	6823      	ldr	r3, [r4, #0]
 800db60:	4639      	mov	r1, r7
 800db62:	4630      	mov	r0, r6
 800db64:	eb04 0903 	add.w	r9, r4, r3
 800db68:	f000 f864 	bl	800dc34 <_sbrk_r>
 800db6c:	4581      	cmp	r9, r0
 800db6e:	d142      	bne.n	800dbf6 <_malloc_r+0xea>
 800db70:	6821      	ldr	r1, [r4, #0]
 800db72:	1a6d      	subs	r5, r5, r1
 800db74:	4629      	mov	r1, r5
 800db76:	4630      	mov	r0, r6
 800db78:	f7ff ffa6 	bl	800dac8 <sbrk_aligned>
 800db7c:	3001      	adds	r0, #1
 800db7e:	d03a      	beq.n	800dbf6 <_malloc_r+0xea>
 800db80:	6823      	ldr	r3, [r4, #0]
 800db82:	442b      	add	r3, r5
 800db84:	6023      	str	r3, [r4, #0]
 800db86:	f8d8 3000 	ldr.w	r3, [r8]
 800db8a:	685a      	ldr	r2, [r3, #4]
 800db8c:	bb62      	cbnz	r2, 800dbe8 <_malloc_r+0xdc>
 800db8e:	f8c8 7000 	str.w	r7, [r8]
 800db92:	e00f      	b.n	800dbb4 <_malloc_r+0xa8>
 800db94:	6822      	ldr	r2, [r4, #0]
 800db96:	1b52      	subs	r2, r2, r5
 800db98:	d420      	bmi.n	800dbdc <_malloc_r+0xd0>
 800db9a:	2a0b      	cmp	r2, #11
 800db9c:	d917      	bls.n	800dbce <_malloc_r+0xc2>
 800db9e:	1961      	adds	r1, r4, r5
 800dba0:	42a3      	cmp	r3, r4
 800dba2:	6025      	str	r5, [r4, #0]
 800dba4:	bf18      	it	ne
 800dba6:	6059      	strne	r1, [r3, #4]
 800dba8:	6863      	ldr	r3, [r4, #4]
 800dbaa:	bf08      	it	eq
 800dbac:	f8c8 1000 	streq.w	r1, [r8]
 800dbb0:	5162      	str	r2, [r4, r5]
 800dbb2:	604b      	str	r3, [r1, #4]
 800dbb4:	4630      	mov	r0, r6
 800dbb6:	f000 f82f 	bl	800dc18 <__malloc_unlock>
 800dbba:	f104 000b 	add.w	r0, r4, #11
 800dbbe:	1d23      	adds	r3, r4, #4
 800dbc0:	f020 0007 	bic.w	r0, r0, #7
 800dbc4:	1ac2      	subs	r2, r0, r3
 800dbc6:	bf1c      	itt	ne
 800dbc8:	1a1b      	subne	r3, r3, r0
 800dbca:	50a3      	strne	r3, [r4, r2]
 800dbcc:	e7af      	b.n	800db2e <_malloc_r+0x22>
 800dbce:	6862      	ldr	r2, [r4, #4]
 800dbd0:	42a3      	cmp	r3, r4
 800dbd2:	bf0c      	ite	eq
 800dbd4:	f8c8 2000 	streq.w	r2, [r8]
 800dbd8:	605a      	strne	r2, [r3, #4]
 800dbda:	e7eb      	b.n	800dbb4 <_malloc_r+0xa8>
 800dbdc:	4623      	mov	r3, r4
 800dbde:	6864      	ldr	r4, [r4, #4]
 800dbe0:	e7ae      	b.n	800db40 <_malloc_r+0x34>
 800dbe2:	463c      	mov	r4, r7
 800dbe4:	687f      	ldr	r7, [r7, #4]
 800dbe6:	e7b6      	b.n	800db56 <_malloc_r+0x4a>
 800dbe8:	461a      	mov	r2, r3
 800dbea:	685b      	ldr	r3, [r3, #4]
 800dbec:	42a3      	cmp	r3, r4
 800dbee:	d1fb      	bne.n	800dbe8 <_malloc_r+0xdc>
 800dbf0:	2300      	movs	r3, #0
 800dbf2:	6053      	str	r3, [r2, #4]
 800dbf4:	e7de      	b.n	800dbb4 <_malloc_r+0xa8>
 800dbf6:	230c      	movs	r3, #12
 800dbf8:	6033      	str	r3, [r6, #0]
 800dbfa:	4630      	mov	r0, r6
 800dbfc:	f000 f80c 	bl	800dc18 <__malloc_unlock>
 800dc00:	e794      	b.n	800db2c <_malloc_r+0x20>
 800dc02:	6005      	str	r5, [r0, #0]
 800dc04:	e7d6      	b.n	800dbb4 <_malloc_r+0xa8>
 800dc06:	bf00      	nop
 800dc08:	2000989c 	.word	0x2000989c

0800dc0c <__malloc_lock>:
 800dc0c:	4801      	ldr	r0, [pc, #4]	@ (800dc14 <__malloc_lock+0x8>)
 800dc0e:	f000 b84b 	b.w	800dca8 <__retarget_lock_acquire_recursive>
 800dc12:	bf00      	nop
 800dc14:	200099d8 	.word	0x200099d8

0800dc18 <__malloc_unlock>:
 800dc18:	4801      	ldr	r0, [pc, #4]	@ (800dc20 <__malloc_unlock+0x8>)
 800dc1a:	f000 b846 	b.w	800dcaa <__retarget_lock_release_recursive>
 800dc1e:	bf00      	nop
 800dc20:	200099d8 	.word	0x200099d8

0800dc24 <memset>:
 800dc24:	4402      	add	r2, r0
 800dc26:	4603      	mov	r3, r0
 800dc28:	4293      	cmp	r3, r2
 800dc2a:	d100      	bne.n	800dc2e <memset+0xa>
 800dc2c:	4770      	bx	lr
 800dc2e:	f803 1b01 	strb.w	r1, [r3], #1
 800dc32:	e7f9      	b.n	800dc28 <memset+0x4>

0800dc34 <_sbrk_r>:
 800dc34:	b538      	push	{r3, r4, r5, lr}
 800dc36:	4d06      	ldr	r5, [pc, #24]	@ (800dc50 <_sbrk_r+0x1c>)
 800dc38:	2300      	movs	r3, #0
 800dc3a:	4604      	mov	r4, r0
 800dc3c:	4608      	mov	r0, r1
 800dc3e:	602b      	str	r3, [r5, #0]
 800dc40:	f7f3 fcb0 	bl	80015a4 <_sbrk>
 800dc44:	1c43      	adds	r3, r0, #1
 800dc46:	d102      	bne.n	800dc4e <_sbrk_r+0x1a>
 800dc48:	682b      	ldr	r3, [r5, #0]
 800dc4a:	b103      	cbz	r3, 800dc4e <_sbrk_r+0x1a>
 800dc4c:	6023      	str	r3, [r4, #0]
 800dc4e:	bd38      	pop	{r3, r4, r5, pc}
 800dc50:	200099dc 	.word	0x200099dc

0800dc54 <__errno>:
 800dc54:	4b01      	ldr	r3, [pc, #4]	@ (800dc5c <__errno+0x8>)
 800dc56:	6818      	ldr	r0, [r3, #0]
 800dc58:	4770      	bx	lr
 800dc5a:	bf00      	nop
 800dc5c:	20000030 	.word	0x20000030

0800dc60 <__libc_init_array>:
 800dc60:	b570      	push	{r4, r5, r6, lr}
 800dc62:	4d0d      	ldr	r5, [pc, #52]	@ (800dc98 <__libc_init_array+0x38>)
 800dc64:	4c0d      	ldr	r4, [pc, #52]	@ (800dc9c <__libc_init_array+0x3c>)
 800dc66:	1b64      	subs	r4, r4, r5
 800dc68:	10a4      	asrs	r4, r4, #2
 800dc6a:	2600      	movs	r6, #0
 800dc6c:	42a6      	cmp	r6, r4
 800dc6e:	d109      	bne.n	800dc84 <__libc_init_array+0x24>
 800dc70:	4d0b      	ldr	r5, [pc, #44]	@ (800dca0 <__libc_init_array+0x40>)
 800dc72:	4c0c      	ldr	r4, [pc, #48]	@ (800dca4 <__libc_init_array+0x44>)
 800dc74:	f000 f872 	bl	800dd5c <_init>
 800dc78:	1b64      	subs	r4, r4, r5
 800dc7a:	10a4      	asrs	r4, r4, #2
 800dc7c:	2600      	movs	r6, #0
 800dc7e:	42a6      	cmp	r6, r4
 800dc80:	d105      	bne.n	800dc8e <__libc_init_array+0x2e>
 800dc82:	bd70      	pop	{r4, r5, r6, pc}
 800dc84:	f855 3b04 	ldr.w	r3, [r5], #4
 800dc88:	4798      	blx	r3
 800dc8a:	3601      	adds	r6, #1
 800dc8c:	e7ee      	b.n	800dc6c <__libc_init_array+0xc>
 800dc8e:	f855 3b04 	ldr.w	r3, [r5], #4
 800dc92:	4798      	blx	r3
 800dc94:	3601      	adds	r6, #1
 800dc96:	e7f2      	b.n	800dc7e <__libc_init_array+0x1e>
 800dc98:	0800ddec 	.word	0x0800ddec
 800dc9c:	0800ddec 	.word	0x0800ddec
 800dca0:	0800ddec 	.word	0x0800ddec
 800dca4:	0800ddf0 	.word	0x0800ddf0

0800dca8 <__retarget_lock_acquire_recursive>:
 800dca8:	4770      	bx	lr

0800dcaa <__retarget_lock_release_recursive>:
 800dcaa:	4770      	bx	lr

0800dcac <memcpy>:
 800dcac:	440a      	add	r2, r1
 800dcae:	4291      	cmp	r1, r2
 800dcb0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800dcb4:	d100      	bne.n	800dcb8 <memcpy+0xc>
 800dcb6:	4770      	bx	lr
 800dcb8:	b510      	push	{r4, lr}
 800dcba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dcbe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dcc2:	4291      	cmp	r1, r2
 800dcc4:	d1f9      	bne.n	800dcba <memcpy+0xe>
 800dcc6:	bd10      	pop	{r4, pc}

0800dcc8 <_free_r>:
 800dcc8:	b538      	push	{r3, r4, r5, lr}
 800dcca:	4605      	mov	r5, r0
 800dccc:	2900      	cmp	r1, #0
 800dcce:	d041      	beq.n	800dd54 <_free_r+0x8c>
 800dcd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dcd4:	1f0c      	subs	r4, r1, #4
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	bfb8      	it	lt
 800dcda:	18e4      	addlt	r4, r4, r3
 800dcdc:	f7ff ff96 	bl	800dc0c <__malloc_lock>
 800dce0:	4a1d      	ldr	r2, [pc, #116]	@ (800dd58 <_free_r+0x90>)
 800dce2:	6813      	ldr	r3, [r2, #0]
 800dce4:	b933      	cbnz	r3, 800dcf4 <_free_r+0x2c>
 800dce6:	6063      	str	r3, [r4, #4]
 800dce8:	6014      	str	r4, [r2, #0]
 800dcea:	4628      	mov	r0, r5
 800dcec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dcf0:	f7ff bf92 	b.w	800dc18 <__malloc_unlock>
 800dcf4:	42a3      	cmp	r3, r4
 800dcf6:	d908      	bls.n	800dd0a <_free_r+0x42>
 800dcf8:	6820      	ldr	r0, [r4, #0]
 800dcfa:	1821      	adds	r1, r4, r0
 800dcfc:	428b      	cmp	r3, r1
 800dcfe:	bf01      	itttt	eq
 800dd00:	6819      	ldreq	r1, [r3, #0]
 800dd02:	685b      	ldreq	r3, [r3, #4]
 800dd04:	1809      	addeq	r1, r1, r0
 800dd06:	6021      	streq	r1, [r4, #0]
 800dd08:	e7ed      	b.n	800dce6 <_free_r+0x1e>
 800dd0a:	461a      	mov	r2, r3
 800dd0c:	685b      	ldr	r3, [r3, #4]
 800dd0e:	b10b      	cbz	r3, 800dd14 <_free_r+0x4c>
 800dd10:	42a3      	cmp	r3, r4
 800dd12:	d9fa      	bls.n	800dd0a <_free_r+0x42>
 800dd14:	6811      	ldr	r1, [r2, #0]
 800dd16:	1850      	adds	r0, r2, r1
 800dd18:	42a0      	cmp	r0, r4
 800dd1a:	d10b      	bne.n	800dd34 <_free_r+0x6c>
 800dd1c:	6820      	ldr	r0, [r4, #0]
 800dd1e:	4401      	add	r1, r0
 800dd20:	1850      	adds	r0, r2, r1
 800dd22:	4283      	cmp	r3, r0
 800dd24:	6011      	str	r1, [r2, #0]
 800dd26:	d1e0      	bne.n	800dcea <_free_r+0x22>
 800dd28:	6818      	ldr	r0, [r3, #0]
 800dd2a:	685b      	ldr	r3, [r3, #4]
 800dd2c:	6053      	str	r3, [r2, #4]
 800dd2e:	4408      	add	r0, r1
 800dd30:	6010      	str	r0, [r2, #0]
 800dd32:	e7da      	b.n	800dcea <_free_r+0x22>
 800dd34:	d902      	bls.n	800dd3c <_free_r+0x74>
 800dd36:	230c      	movs	r3, #12
 800dd38:	602b      	str	r3, [r5, #0]
 800dd3a:	e7d6      	b.n	800dcea <_free_r+0x22>
 800dd3c:	6820      	ldr	r0, [r4, #0]
 800dd3e:	1821      	adds	r1, r4, r0
 800dd40:	428b      	cmp	r3, r1
 800dd42:	bf04      	itt	eq
 800dd44:	6819      	ldreq	r1, [r3, #0]
 800dd46:	685b      	ldreq	r3, [r3, #4]
 800dd48:	6063      	str	r3, [r4, #4]
 800dd4a:	bf04      	itt	eq
 800dd4c:	1809      	addeq	r1, r1, r0
 800dd4e:	6021      	streq	r1, [r4, #0]
 800dd50:	6054      	str	r4, [r2, #4]
 800dd52:	e7ca      	b.n	800dcea <_free_r+0x22>
 800dd54:	bd38      	pop	{r3, r4, r5, pc}
 800dd56:	bf00      	nop
 800dd58:	2000989c 	.word	0x2000989c

0800dd5c <_init>:
 800dd5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd5e:	bf00      	nop
 800dd60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd62:	bc08      	pop	{r3}
 800dd64:	469e      	mov	lr, r3
 800dd66:	4770      	bx	lr

0800dd68 <_fini>:
 800dd68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd6a:	bf00      	nop
 800dd6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd6e:	bc08      	pop	{r3}
 800dd70:	469e      	mov	lr, r3
 800dd72:	4770      	bx	lr
